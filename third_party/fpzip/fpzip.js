// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function() {
    return STACKTOP;
  },
  stackRestore: function(stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function(target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function(type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function(x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function(x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function(x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function(type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function(type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function(type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function(struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function(sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function(func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function(index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function(code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function(text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function(func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function() {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function(size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function(low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 2200;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a18() } });

var _fpzip_errstr;
var _fpzip_errno;
























































var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,16,6,0,0,4,0,0,0,68,0,0,0,40,0,0,0,54,0,0,0,30,0,0,0,8,0,0,0,22,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv119__pointer_type_infoE;
__ZTVN10__cxxabiv119__pointer_type_infoE=allocate([0,0,0,0,32,6,0,0,60,0,0,0,44,0,0,0,40,0,0,0,54,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,64,6,0,0,10,0,0,0,16,0,0,0,40,0,0,0,54,0,0,0,30,0,0,0,32,0,0,0,72,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;














































































var __ZTIt;
__ZTIt=allocate([192,1,0,0,96,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIs;
__ZTIs=allocate([192,1,0,0,104,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIm;
__ZTIm=allocate([192,1,0,0,112,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIl;
__ZTIl=allocate([192,1,0,0,120,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIj;
__ZTIj=allocate([192,1,0,0,128,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIi;
__ZTIi=allocate([192,1,0,0,136,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIh;
__ZTIh=allocate([192,1,0,0,144,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIf;
__ZTIf=allocate([192,1,0,0,152,2,0,0], "i8", ALLOC_STATIC);;
var __ZTId;
__ZTId=allocate([192,1,0,0,160,2,0,0], "i8", ALLOC_STATIC);;
var __ZTIc;
__ZTIc=allocate([192,1,0,0,168,2,0,0], "i8", ALLOC_STATIC);;


var __ZTIa;
__ZTIa=allocate([192,1,0,0,184,2,0,0], "i8", ALLOC_STATIC);;


var __ZTISt9exception;
















































/* memory initializer */ allocate([108,111,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,105,110,116,0,0,0,0,0,98,105,116,115,32,60,61,32,49,54,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,116,97,114,103,101,116,114,101,115,99,97,108,101,32,60,32,40,49,117,32,60,60,32,40,98,105,116,115,32,43,32,49,41,41,0,0,0,0,0,0,99,104,97,114,0,0,0,0,100,101,99,111,109,112,114,101,115,115,0,0,0,0,0,0,115,114,99,47,114,99,113,115,109,111,100,101,108,46,99,112,112,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,100,111,117,98,108,101,0,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,102,108,111,97,116,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,100,101,99,111,109,112,114,101,115,115,105,111,110,32,102,97,105,108,101,100,58,32,37,115,10,0,0,0,0,0,0,0,99,97,110,110,111,116,32,114,101,97,100,32,104,101,97,100,101,114,58,32,37,115,10,0,82,67,113,115,109,111,100,101,108,0,0,0,0,0,0,0,0,0,0,0,104,5,0,0,58,0,0,0,14,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,5,0,0,46,0,0,0,74,0,0,0,40,0,0,0,54,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,42,0,0,0,56,0,0,0,40,0,0,0,54,0,0,0,30,0,0,0,28,0,0,0,38,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,6,0,0,64,0,0,0,66,0,0,0,52,0,0,0,50,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,6,0,0,26,0,0,0,2,0,0,0,70,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,80,118,0,0,0,0,0,0,80,99,0,0,0,0,0,0,80,49,50,68,101,99,111,100,101,100,73,109,97,103,101,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,68,110,0,0,0,0,0,0,57,82,67,113,115,109,111,100,101,108,0,0,0,0,0,0,57,82,67,100,101,99,111,100,101,114,0,0,0,0,0,0,55,82,67,109,111,100,101,108,0,0,0,0,0,0,0,0,49,50,82,67,109,101,109,100,101,99,111,100,101,114,0,0,49,50,68,101,99,111,100,101,100,73,109,97,103,101,0,0,192,1,0,0,88,2,0,0,192,1,0,0,176,2,0,0,0,0,0,0,192,2,0,0,0,0,0,0,208,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,2,0,0,0,0,0,0,80,5,0,0,0,0,0,0,232,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,2,0,0,0,0,0,0,152,6,0,0,0,0,0,0,0,3,0,0,232,1,0,0,40,3,0,0,0,0,0,0,1,0,0,0,168,5,0,0,0,0,0,0,232,1,0,0,104,3,0,0,0,0,0,0,1,0,0,0,168,5,0,0,0,0,0,0,0,0,0,0,168,3,0,0,0,0,0,0,192,3,0,0,0,0,0,0,224,3,0,0,80,6,0,0,0,0,0,0,0,0,0,0,8,4,0,0,64,6,0,0,0,0,0,0,0,0,0,0,48,4,0,0,64,6,0,0,0,0,0,0,0,0,0,0,88,4,0,0,48,6,0,0,0,0,0,0,0,0,0,0,128,4,0,0,80,6,0,0,0,0,0,0,0,0,0,0,168,4,0,0,80,6,0,0,0,0,0,0,0,0,0,0,208,4,0,0,96,5,0,0,0,0,0,0,192,1,0,0,248,4,0,0,0,0,0,0,0,5,0,0,128,6,0,0,0,0,0,0,0,0,0,0,16,5,0,0,0,0,0,0,32,5,0,0,0,0,0,0,48,5,0,0,120,6,0,0,0,0,0,0,0,0,0,0,64,5,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
function runPostSets() {

HEAP32[((1376 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((1384 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1392 )>>2)]=__ZTISt9exception;
HEAP32[((1400 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((1416 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((1428 )>>2)]=__ZTIc;
HEAP32[((1432 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((1448 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((1504 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((1512 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((1520 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1536 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1552 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1568 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1584 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1600 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1616 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1640 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1656 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((1664 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((1672 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((1688 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _llvm_dbg_declare=undefined;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_last_thrown_exception=0;
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }

  
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision === -1) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;
;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
;
;
;
;
;
;
;
;

  function __ZNSt9exceptionD2Ev() {}

  var _llvm_memset_p0i8_i64=_memset;

  function _abort() {
      Module['abort']();
    }

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function ___errno_location() {
      return ___errno_state;
    }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  var _llvm_dbg_value=true;






  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function(node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function(mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function(src, dst, callback) {
        var total = 0;
  
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
  
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
  
        if (!total) {
          // early out
          return callback(null);
        }
  
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
  
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
  
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
  
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function(mount, callback) {
        var files = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat, node;
  
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
  
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
  
        return callback(null, { type: 'local', files: files });
      },getDB:function(name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function(mount, callback) {
        var files = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
  
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function(flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
  
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          FS.FSNode.prototype = {};
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function(dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
  
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function(type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function(path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function(stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function(stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function() {
          Browser.mainLoop.shouldPause = true;
        },resume:function() {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function(func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function() {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,__ZN12RCmemdecoderD0Ev,0,__ZN10__cxxabiv120__si_class_type_infoD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZN10__cxxabiv117__class_type_infoD2Ev,0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt9bad_allocD0Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZN10emscripten8internal7InvokerIP12DecodedImageJPvEE6invokeEPFS3_S4_ES4_,0,__ZNKSt9bad_alloc4whatEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN12RCmemdecoderD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZN9RCqsmodel9normalizeERj,0,__ZNK12RCmemdecoder5bytesEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD2Ev,0,__ZN10__cxxabiv119__pointer_type_infoD0Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD2Ev,0,__Z10decompressPv,0,__ZN9RCqsmodel6decodeERjS0_,0,__ZN9RCqsmodel6encodeEjRjS0_,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNSt9bad_allocD2Ev,0,__ZN10__cxxabiv119__pointer_type_infoD2Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZN9RCqsmodelD2Ev,0,__ZN9RCqsmodelD0Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZN12RCmemdecoder7getbyteEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0];

// EMSCRIPTEN_START_FUNCS

function __ZN9RCdecoder6decodeIjEET_j($this,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0); //@line 37 "src/rcdecoder.cpp"
 var $2=(($this+16)|0); //@line 38 "src/rcdecoder.cpp"
 var $3=(($this+8)|0); //@line 38 "src/rcdecoder.cpp"
 var $storemerge=1;var $_0=$n;var $m_0=0;var $s_0=0;label=2;break; //@line 6 "inc/rcdecoder.inl"
 case 2: 
 var $s_0;
 var $m_0;
 var $_0;
 var $storemerge;
 var $5=($storemerge|0)<2; //@line 6 "inc/rcdecoder.inl"
 if($5){label=3;break;}else{label=6;break;} //@line 6 "inc/rcdecoder.inl"
 case 3: 
 var $7=($_0>>>0)>16; //@line 7 "inc/rcdecoder.inl"
 if($7){label=4;break;}else{var $_1=$_0;var $m_1=$m_0;var $s_1=$s_0;label=5;break;} //@line 7 "inc/rcdecoder.inl"
 case 4: 
 var $9=HEAP32[(($1)>>2)]; //@line 37 "src/rcdecoder.cpp"
 var $10=$9>>>16; //@line 37 "src/rcdecoder.cpp"
 HEAP32[(($1)>>2)]=$10; //@line 37 "src/rcdecoder.cpp"
 var $11=HEAP32[(($2)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $12=HEAP32[(($3)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $13=((($11)-($12))|0); //@line 38 "src/rcdecoder.cpp"
 var $14=(((($13>>>0))/(($10>>>0)))&-1); //@line 38 "src/rcdecoder.cpp"
 var $15=(Math_imul($10,$14)|0); //@line 39 "src/rcdecoder.cpp"
 var $16=((($12)+($15))|0); //@line 39 "src/rcdecoder.cpp"
 HEAP32[(($3)>>2)]=$16; //@line 39 "src/rcdecoder.cpp"
 __ZN9RCdecoder9normalizeEv($this); //@line 40 "src/rcdecoder.cpp"
 var $17=$14<<$m_0; //@line undefined "inc/rcdecoder.inl"
 var $18=((($s_0)+($17))|0); //@line undefined "inc/rcdecoder.inl"
 var $19=((($m_0)+(16))|0); //@line 9 "inc/rcdecoder.inl"
 var $20=((($_0)-(16))|0); //@line 10 "inc/rcdecoder.inl"
 var $_1=$20;var $m_1=$19;var $s_1=$18;label=5;break; //@line 11 "inc/rcdecoder.inl"
 case 5: 
 var $s_1;
 var $m_1;
 var $_1;
 var $22=((($storemerge)+(1))|0); //@line 6 "inc/rcdecoder.inl"
 var $storemerge=$22;var $_0=$_1;var $m_0=$m_1;var $s_0=$s_1;label=2;break; //@line 6 "inc/rcdecoder.inl"
 case 6: 
 var $24=HEAP32[(($1)>>2)]; //@line 37 "src/rcdecoder.cpp"
 var $25=$24>>>($_0>>>0); //@line 37 "src/rcdecoder.cpp"
 HEAP32[(($1)>>2)]=$25; //@line 37 "src/rcdecoder.cpp"
 var $26=HEAP32[(($2)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $27=HEAP32[(($3)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $28=((($26)-($27))|0); //@line 38 "src/rcdecoder.cpp"
 var $29=(((($28>>>0))/(($25>>>0)))&-1); //@line 38 "src/rcdecoder.cpp"
 var $30=(Math_imul($25,$29)|0); //@line 39 "src/rcdecoder.cpp"
 var $31=((($27)+($30))|0); //@line 39 "src/rcdecoder.cpp"
 HEAP32[(($3)>>2)]=$31; //@line 39 "src/rcdecoder.cpp"
 __ZN9RCdecoder9normalizeEv($this); //@line 40 "src/rcdecoder.cpp"
 var $32=$29<<$m_0; //@line 12 "inc/rcdecoder.inl"
 var $33=((($32)+($s_0))|0); //@line 12 "inc/rcdecoder.inl"
 return $33; //@line 12 "inc/rcdecoder.inl"
  default: assert(0, "bad label: " + label);
 }

}


function __ZL12decompress4dIfEbP8FPZinputPT_($stream,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+744)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $l_i_i_i982=sp;
 var $r_i_i_i983=(sp)+(8);
 var $rm_i988=(sp)+(16);
 var $l_i_i_i946=(sp)+(24);
 var $r_i_i_i947=(sp)+(32);
 var $rm_i952=(sp)+(40);
 var $l_i_i_i910=(sp)+(48);
 var $r_i_i_i911=(sp)+(56);
 var $rm_i916=(sp)+(64);
 var $l_i_i_i874=(sp)+(72);
 var $r_i_i_i875=(sp)+(80);
 var $rm_i880=(sp)+(88);
 var $l_i_i_i838=(sp)+(96);
 var $r_i_i_i839=(sp)+(104);
 var $rm_i844=(sp)+(112);
 var $l_i_i_i802=(sp)+(120);
 var $r_i_i_i803=(sp)+(128);
 var $rm_i808=(sp)+(136);
 var $l_i_i_i766=(sp)+(144);
 var $r_i_i_i767=(sp)+(152);
 var $rm_i772=(sp)+(160);
 var $l_i_i_i730=(sp)+(168);
 var $r_i_i_i731=(sp)+(176);
 var $rm_i736=(sp)+(184);
 var $l_i_i_i694=(sp)+(192);
 var $r_i_i_i695=(sp)+(200);
 var $rm_i700=(sp)+(208);
 var $l_i_i_i658=(sp)+(216);
 var $r_i_i_i659=(sp)+(224);
 var $rm_i664=(sp)+(232);
 var $l_i_i_i622=(sp)+(240);
 var $r_i_i_i623=(sp)+(248);
 var $rm_i628=(sp)+(256);
 var $l_i_i_i586=(sp)+(264);
 var $r_i_i_i587=(sp)+(272);
 var $rm_i592=(sp)+(280);
 var $l_i_i_i550=(sp)+(288);
 var $r_i_i_i551=(sp)+(296);
 var $rm_i556=(sp)+(304);
 var $l_i_i_i514=(sp)+(312);
 var $r_i_i_i515=(sp)+(320);
 var $rm_i520=(sp)+(328);
 var $l_i_i_i478=(sp)+(336);
 var $r_i_i_i479=(sp)+(344);
 var $rm_i484=(sp)+(352);
 var $l_i_i_i442=(sp)+(360);
 var $r_i_i_i443=(sp)+(368);
 var $rm_i448=(sp)+(376);
 var $l_i_i_i406=(sp)+(384);
 var $r_i_i_i407=(sp)+(392);
 var $rm_i412=(sp)+(400);
 var $l_i_i_i370=(sp)+(408);
 var $r_i_i_i371=(sp)+(416);
 var $rm_i376=(sp)+(424);
 var $l_i_i_i334=(sp)+(432);
 var $r_i_i_i335=(sp)+(440);
 var $rm_i340=(sp)+(448);
 var $l_i_i_i298=(sp)+(456);
 var $r_i_i_i299=(sp)+(464);
 var $rm_i304=(sp)+(472);
 var $l_i_i_i262=(sp)+(480);
 var $r_i_i_i263=(sp)+(488);
 var $rm_i268=(sp)+(496);
 var $l_i_i_i226=(sp)+(504);
 var $r_i_i_i227=(sp)+(512);
 var $rm_i232=(sp)+(520);
 var $l_i_i_i190=(sp)+(528);
 var $r_i_i_i191=(sp)+(536);
 var $rm_i196=(sp)+(544);
 var $l_i_i_i160=(sp)+(552);
 var $r_i_i_i161=(sp)+(560);
 var $rm_i163=(sp)+(568);
 var $l_i_i_i132=(sp)+(576);
 var $r_i_i_i133=(sp)+(584);
 var $rm_i137=(sp)+(592);
 var $l_i_i_i106=(sp)+(600);
 var $r_i_i_i107=(sp)+(608);
 var $rm_i111=(sp)+(616);
 var $l_i_i_i80=(sp)+(624);
 var $r_i_i_i81=(sp)+(632);
 var $rm_i85=(sp)+(640);
 var $l_i_i_i54=(sp)+(648);
 var $r_i_i_i55=(sp)+(656);
 var $rm_i59=(sp)+(664);
 var $l_i_i_i28=(sp)+(672);
 var $r_i_i_i29=(sp)+(680);
 var $rm_i33=(sp)+(688);
 var $l_i_i_i2=(sp)+(696);
 var $r_i_i_i3=(sp)+(704);
 var $rm_i7=(sp)+(712);
 var $l_i_i_i=(sp)+(720);
 var $r_i_i_i=(sp)+(728);
 var $rm_i=(sp)+(736);
 var $1=(($stream+20)|0); //@line 164 "src/read.cpp"
 var $2=(($stream+4)|0); //@line 165 "src/read.cpp"
 var $3=(($stream+24)|0); //@line 197 "src/read.cpp"
 var $4=(($stream+8)|0); //@line 197 "src/read.cpp"
 var $5=(($stream+12)|0); //@line 197 "src/read.cpp"
 var $6=(($stream+16)|0); //@line 197 "src/read.cpp"
 var $7=$rm_i988; //@line 32 "src/read.cpp"
 var $8=$l_i_i_i982; //@line 0 "src/rcdecoder.cpp"
 var $9=$r_i_i_i983; //@line 0 "src/rcdecoder.cpp"
 var $10=$rm_i; //@line 32 "src/read.cpp"
 var $11=$l_i_i_i; //@line 0 "src/rcdecoder.cpp"
 var $12=$r_i_i_i; //@line 0 "src/rcdecoder.cpp"
 var $13=$rm_i7; //@line 32 "src/read.cpp"
 var $14=$l_i_i_i2; //@line 0 "src/rcdecoder.cpp"
 var $15=$r_i_i_i3; //@line 0 "src/rcdecoder.cpp"
 var $16=$rm_i33; //@line 32 "src/read.cpp"
 var $17=$l_i_i_i28; //@line 0 "src/rcdecoder.cpp"
 var $18=$r_i_i_i29; //@line 0 "src/rcdecoder.cpp"
 var $19=$rm_i59; //@line 32 "src/read.cpp"
 var $20=$l_i_i_i54; //@line 0 "src/rcdecoder.cpp"
 var $21=$r_i_i_i55; //@line 0 "src/rcdecoder.cpp"
 var $22=$rm_i85; //@line 32 "src/read.cpp"
 var $23=$l_i_i_i80; //@line 0 "src/rcdecoder.cpp"
 var $24=$r_i_i_i81; //@line 0 "src/rcdecoder.cpp"
 var $25=$rm_i111; //@line 32 "src/read.cpp"
 var $26=$l_i_i_i106; //@line 0 "src/rcdecoder.cpp"
 var $27=$r_i_i_i107; //@line 0 "src/rcdecoder.cpp"
 var $28=$rm_i137; //@line 32 "src/read.cpp"
 var $29=$l_i_i_i132; //@line 0 "src/rcdecoder.cpp"
 var $30=$r_i_i_i133; //@line 0 "src/rcdecoder.cpp"
 var $31=$rm_i163; //@line 32 "src/read.cpp"
 var $32=$l_i_i_i160; //@line 0 "src/rcdecoder.cpp"
 var $33=$r_i_i_i161; //@line 0 "src/rcdecoder.cpp"
 var $34=$rm_i196; //@line 32 "src/read.cpp"
 var $35=$l_i_i_i190; //@line 0 "src/rcdecoder.cpp"
 var $36=$r_i_i_i191; //@line 0 "src/rcdecoder.cpp"
 var $37=$rm_i232; //@line 32 "src/read.cpp"
 var $38=$l_i_i_i226; //@line 0 "src/rcdecoder.cpp"
 var $39=$r_i_i_i227; //@line 0 "src/rcdecoder.cpp"
 var $40=$rm_i268; //@line 32 "src/read.cpp"
 var $41=$l_i_i_i262; //@line 0 "src/rcdecoder.cpp"
 var $42=$r_i_i_i263; //@line 0 "src/rcdecoder.cpp"
 var $43=$rm_i304; //@line 32 "src/read.cpp"
 var $44=$l_i_i_i298; //@line 0 "src/rcdecoder.cpp"
 var $45=$r_i_i_i299; //@line 0 "src/rcdecoder.cpp"
 var $46=$rm_i340; //@line 32 "src/read.cpp"
 var $47=$l_i_i_i334; //@line 0 "src/rcdecoder.cpp"
 var $48=$r_i_i_i335; //@line 0 "src/rcdecoder.cpp"
 var $49=$rm_i376; //@line 32 "src/read.cpp"
 var $50=$l_i_i_i370; //@line 0 "src/rcdecoder.cpp"
 var $51=$r_i_i_i371; //@line 0 "src/rcdecoder.cpp"
 var $52=$rm_i412; //@line 32 "src/read.cpp"
 var $53=$l_i_i_i406; //@line 0 "src/rcdecoder.cpp"
 var $54=$r_i_i_i407; //@line 0 "src/rcdecoder.cpp"
 var $55=$rm_i448; //@line 32 "src/read.cpp"
 var $56=$l_i_i_i442; //@line 0 "src/rcdecoder.cpp"
 var $57=$r_i_i_i443; //@line 0 "src/rcdecoder.cpp"
 var $58=$rm_i484; //@line 32 "src/read.cpp"
 var $59=$l_i_i_i478; //@line 0 "src/rcdecoder.cpp"
 var $60=$r_i_i_i479; //@line 0 "src/rcdecoder.cpp"
 var $61=$rm_i520; //@line 32 "src/read.cpp"
 var $62=$l_i_i_i514; //@line 0 "src/rcdecoder.cpp"
 var $63=$r_i_i_i515; //@line 0 "src/rcdecoder.cpp"
 var $64=$rm_i556; //@line 32 "src/read.cpp"
 var $65=$l_i_i_i550; //@line 0 "src/rcdecoder.cpp"
 var $66=$r_i_i_i551; //@line 0 "src/rcdecoder.cpp"
 var $67=$rm_i592; //@line 32 "src/read.cpp"
 var $68=$l_i_i_i586; //@line 0 "src/rcdecoder.cpp"
 var $69=$r_i_i_i587; //@line 0 "src/rcdecoder.cpp"
 var $70=$rm_i628; //@line 32 "src/read.cpp"
 var $71=$l_i_i_i622; //@line 0 "src/rcdecoder.cpp"
 var $72=$r_i_i_i623; //@line 0 "src/rcdecoder.cpp"
 var $73=$rm_i664; //@line 32 "src/read.cpp"
 var $74=$l_i_i_i658; //@line 0 "src/rcdecoder.cpp"
 var $75=$r_i_i_i659; //@line 0 "src/rcdecoder.cpp"
 var $76=$rm_i700; //@line 32 "src/read.cpp"
 var $77=$l_i_i_i694; //@line 0 "src/rcdecoder.cpp"
 var $78=$r_i_i_i695; //@line 0 "src/rcdecoder.cpp"
 var $79=$rm_i736; //@line 32 "src/read.cpp"
 var $80=$l_i_i_i730; //@line 0 "src/rcdecoder.cpp"
 var $81=$r_i_i_i731; //@line 0 "src/rcdecoder.cpp"
 var $82=$rm_i772; //@line 32 "src/read.cpp"
 var $83=$l_i_i_i766; //@line 0 "src/rcdecoder.cpp"
 var $84=$r_i_i_i767; //@line 0 "src/rcdecoder.cpp"
 var $85=$rm_i808; //@line 32 "src/read.cpp"
 var $86=$l_i_i_i802; //@line 0 "src/rcdecoder.cpp"
 var $87=$r_i_i_i803; //@line 0 "src/rcdecoder.cpp"
 var $88=$rm_i844; //@line 32 "src/read.cpp"
 var $89=$l_i_i_i838; //@line 0 "src/rcdecoder.cpp"
 var $90=$r_i_i_i839; //@line 0 "src/rcdecoder.cpp"
 var $91=$rm_i880; //@line 32 "src/read.cpp"
 var $92=$l_i_i_i874; //@line 0 "src/rcdecoder.cpp"
 var $93=$r_i_i_i875; //@line 0 "src/rcdecoder.cpp"
 var $94=$rm_i916; //@line 32 "src/read.cpp"
 var $95=$l_i_i_i910; //@line 0 "src/rcdecoder.cpp"
 var $96=$r_i_i_i911; //@line 0 "src/rcdecoder.cpp"
 var $97=$rm_i952; //@line 32 "src/read.cpp"
 var $98=$l_i_i_i946; //@line 0 "src/rcdecoder.cpp"
 var $99=$r_i_i_i947; //@line 0 "src/rcdecoder.cpp"
 var $storemerge=0;var $_01012=$data;label=2;break; //@line 164 "src/read.cpp"
 case 2: 
 var $_01012;
 var $storemerge;
 var $101=HEAP32[(($1)>>2)]; //@line 164 "src/read.cpp"
 var $102=($storemerge|0)<($101|0); //@line 164 "src/read.cpp"
 if($102){label=3;break;}else{var $storemerge1=1;label=1258;break;} //@line 164 "src/read.cpp"
 case 3: 
 var $104=HEAP32[(($2)>>2)]; //@line 165 "src/read.cpp"
 switch(($104|0)){case 27:{ label=1005;break;}case 28:{ label=1047;break;}case 29:{ label=1089;break;}case 5:{ label=109;break;}case 30:{ label=1131;break;}case 31:{ label=1173;break;}case 0:case 32:{ label=1215;break;}case 6:{ label=144;break;}case 7:{ label=179;break;}case 8:{ label=214;break;}case 9:{ label=249;break;}case 10:{ label=291;break;}case 11:{ label=333;break;}case 12:{ label=375;break;}case 3:{ label=39;break;}case 2:{ label=4;break;}case 13:{ label=417;break;}case 14:{ label=459;break;}case 15:{ label=501;break;}case 16:{ label=543;break;}case 17:{ label=585;break;}case 18:{ label=627;break;}case 19:{ label=669;break;}case 20:{ label=711;break;}case 4:{ label=74;break;}case 21:{ label=753;break;}case 22:{ label=795;break;}case 23:{ label=837;break;}case 24:{ label=879;break;}case 25:{ label=921;break;}case 26:{ label=963;break;}default:{label=1256;break;}}break;
 case 4: 
 var $106=HEAP32[(($3)>>2)]; //@line 167 "src/read.cpp"
 var $107=HEAP32[(($4)>>2)]; //@line 167 "src/read.cpp"
 var $108=HEAP32[(($5)>>2)]; //@line 167 "src/read.cpp"
 var $109=HEAP32[(($6)>>2)]; //@line 167 "src/read.cpp"
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $110=__Znwj(48); //@line 41 "src/read.cpp"
 var $111=$110; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($111,0,7,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; } //@line 41 "src/read.cpp"
 case 5: 
 var $113=$110; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i)>>2)]=$113; //@line 71 "src/read.cpp"
 var $114=__Znwj(12); //@line 42 "src/read.cpp"
 var $115=(($114+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $116=$115; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($116)>>2)]=$106; //@line 6 "inc/pcdecoder.inl"
 var $117=(($114+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $118=$117; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($118)>>2)]=$rm_i; //@line 6 "inc/pcdecoder.inl"
 var $119=((($107)+(1))|0); //@line 10 "inc/front.h"
 var $120=((($108)+(1))|0); //@line 10 "inc/front.h"
 var $121=(Math_imul($119,$120)|0); //@line 10 "inc/front.h"
 var $122=((($107)+(2))|0); //@line 9 "inc/front.h"
 var $123=((($122)+($121))|0); //@line 9 "inc/front.h"
 var $124=((($123)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i=$124;label=6;break; //@line 45 "inc/front.h"
 case 6: 
 var $storemerge_i_i_i;
 var $126=((($storemerge_i_i_i)+(1))|0); //@line 45 "inc/front.h"
 var $127=$storemerge_i_i_i&$126; //@line 45 "inc/front.h"
 var $128=($127|0)==0; //@line 45 "inc/front.h"
 if($128){label=8;break;}else{label=7;break;} //@line 45 "inc/front.h"
 case 7: 
 var $130=$storemerge_i_i_i|$126; //@line 45 "inc/front.h"
 var $storemerge_i_i_i=$130;label=6;break; //@line 45 "inc/front.h"
 case 8: 
 var $131$0=_llvm_umul_with_overflow_i32($126,4);
 var $131$1=tempRet0;
 var $132=$131$1;
 var $133=$131$0;
 var $134=($132?-1:$133); //@line 9 "inc/front.h"
 var $135=(function() { try { __THREW__ = 0; return __Znwj($134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=9;break; }
 case 9: 
 var $137$0 = ___cxa_find_matching_catch(-1, -1); var $137$1 = tempRet0;
 var $138=$137$1;
 var $139=($138|0)<0;
 if($139){label=10;break;}else{label=11;break;}
 case 10: 
 var $141=$137$0;
 ___cxa_call_unexpected($141);
 throw "Reached an unreachable!";
 case 11: 
 ___resumeException($137$0)
 case 12: 
 var $143=$135; //@line 9 "inc/front.h"
 var $f_i_sroa_55_0=0;var $_01035=$121;label=13;break; //@line 22 "inc/front.h"
 case 13: 
 var $_01035;
 var $f_i_sroa_55_0;
 var $145=((($f_i_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $146=$f_i_sroa_55_0&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $147=(($143+($146<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($147)>>2)]=0; //@line 23 "inc/front.h"
 var $148=((($_01035)-(1))|0); //@line 23 "inc/front.h"
 var $149=($148|0)==0; //@line 23 "inc/front.h"
 if($149){label=14;break;}else{var $f_i_sroa_55_0=$145;var $_01035=$148;label=13;break;} //@line 23 "inc/front.h"
 case 14: 
 var $150=(($114+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $151=$150; //@line 25 "inc/pcdecoder.inl"
 var $152=(($114+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $153=$152; //@line 25 "inc/pcdecoder.inl"
 var $z_i_0=0;var $f_i_sroa_55_1=$145;var $_01023=$_01012;label=15;break; //@line 47 "src/read.cpp"
 case 15: 
 var $_01023;
 var $f_i_sroa_55_1;
 var $z_i_0;
 var $155=($z_i_0>>>0)<($109>>>0); //@line 47 "src/read.cpp"
 if($155){var $f_i_sroa_55_2=$f_i_sroa_55_1;var $_01037=$119;label=16;break;}else{label=32;break;} //@line 47 "src/read.cpp"
 case 16: 
 var $_01037;
 var $f_i_sroa_55_2;
 var $157=((($f_i_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $158=$f_i_sroa_55_2&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $159=(($143+($158<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($159)>>2)]=0; //@line 23 "inc/front.h"
 var $160=((($_01037)-(1))|0); //@line 23 "inc/front.h"
 var $161=($160|0)==0; //@line 23 "inc/front.h"
 if($161){var $y_i_0=0;var $f_i_sroa_55_3=$157;var $_11024=$_01023;label=17;break;}else{var $f_i_sroa_55_2=$157;var $_01037=$160;label=16;break;} //@line 23 "inc/front.h"
 case 17: 
 var $_11024;
 var $f_i_sroa_55_3;
 var $y_i_0;
 var $162=($y_i_0>>>0)<($108>>>0); //@line 48 "src/read.cpp"
 if($162){var $f_i_sroa_55_4=$f_i_sroa_55_3;var $_01042=1;label=18;break;}else{label=31;break;} //@line 48 "src/read.cpp"
 case 18: 
 var $_01042;
 var $f_i_sroa_55_4;
 var $164=((($f_i_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $165=$f_i_sroa_55_4&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $166=(($143+($165<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($166)>>2)]=0; //@line 23 "inc/front.h"
 var $167=((($_01042)-(1))|0); //@line 23 "inc/front.h"
 var $168=($167|0)==0; //@line 23 "inc/front.h"
 if($168){var $x_i_0=0;var $f_i_sroa_55_5=$164;var $_21025=$_11024;label=19;break;}else{var $f_i_sroa_55_4=$164;var $_01042=$167;label=18;break;} //@line 23 "inc/front.h"
 case 19: 
 var $_21025;
 var $f_i_sroa_55_5;
 var $x_i_0;
 var $169=($x_i_0>>>0)<($107>>>0); //@line 49 "src/read.cpp"
 if($169){label=20;break;}else{label=30;break;} //@line 49 "src/read.cpp"
 case 20: 
 var $171=((($f_i_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $172=$171&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $173=(($143+($172<<2))|0); //@line 16 "inc/front.h"
 var $174=HEAPF32[(($173)>>2)]; //@line 59 "src/read.cpp"
 var $175=((($f_i_sroa_55_5)-($119))|0); //@line 16 "inc/front.h"
 var $176=((($175)-($121))|0); //@line 16 "inc/front.h"
 var $177=$176&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $178=(($143+($177<<2))|0); //@line 16 "inc/front.h"
 var $179=HEAPF32[(($178)>>2)]; //@line 59 "src/read.cpp"
 var $180=$175&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $181=(($143+($180<<2))|0); //@line 16 "inc/front.h"
 var $182=HEAPF32[(($181)>>2)]; //@line 60 "src/read.cpp"
 var $183=((($171)-($121))|0); //@line 16 "inc/front.h"
 var $184=$183&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $185=(($143+($184<<2))|0); //@line 16 "inc/front.h"
 var $186=HEAPF32[(($185)>>2)]; //@line 60 "src/read.cpp"
 var $187=((($f_i_sroa_55_5)-($121))|0); //@line 16 "inc/front.h"
 var $188=$187&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $189=(($143+($188<<2))|0); //@line 16 "inc/front.h"
 var $190=HEAPF32[(($189)>>2)]; //@line 61 "src/read.cpp"
 var $191=((($171)-($119))|0); //@line 16 "inc/front.h"
 var $192=$191&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $193=(($143+($192<<2))|0); //@line 16 "inc/front.h"
 var $194=HEAPF32[(($193)>>2)]; //@line 61 "src/read.cpp"
 var $195=((($191)-($121))|0); //@line 16 "inc/front.h"
 var $196=$195&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $197=(($143+($196<<2))|0); //@line 16 "inc/front.h"
 var $198=($174)-($179); //@line 59 "src/read.cpp"
 var $199=($198)+($182); //@line 60 "src/read.cpp"
 var $200=($199)-($186); //@line 60 "src/read.cpp"
 var $201=($200)+($190); //@line 61 "src/read.cpp"
 var $202=($201)-($194); //@line 61 "src/read.cpp"
 var $203=HEAPF32[(($197)>>2)]; //@line 62 "src/read.cpp"
 var $204=($202)+($203); //@line 62 "src/read.cpp"
 var $205=(HEAPF32[((tempDoublePtr)>>2)]=$204,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $206=$205^-1; //@line 38 "inc/pcmap.h"
 var $207=$206>>>30; //@line 39 "inc/pcmap.h"
 var $208=$206>>>31; //@line 40 "inc/pcmap.h"
 var $209=$207^$208; //@line 40 "inc/pcmap.h"
 var $210=HEAP32[(($151)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $211=HEAP32[(($153)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $212=HEAP32[(($211)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $213=$212; //@line 25 "src/rcdecoder.cpp"
 var $214=HEAP32[(($213)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $215=(($214+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $216=HEAP32[(($215)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $217=(($210+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$216]($212,$217) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=28;break; }
 case 21: 
 var $218=(($210+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $219=HEAP32[(($218)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $220=(($210+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $221=HEAP32[(($220)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $222=((($219)-($221))|0); //@line 26 "src/rcdecoder.cpp"
 var $223=HEAP32[(($217)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $224=(((($222>>>0))/(($223>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i)>>2)]=$224; //@line 26 "src/rcdecoder.cpp"
 var $225=$212; //@line 27 "src/rcdecoder.cpp"
 var $226=HEAP32[(($225)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $227=(($226+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $228=HEAP32[(($227)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $229=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$228]($212,$l_i_i_i,$r_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=28;break; }
 case 22: 
 var $230=HEAP32[(($217)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $231=HEAP32[(($l_i_i_i)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $232=(Math_imul($230,$231)|0); //@line 28 "src/rcdecoder.cpp"
 var $233=HEAP32[(($220)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $234=((($233)+($232))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($220)>>2)]=$234; //@line 28 "src/rcdecoder.cpp"
 var $235=HEAP32[(($r_i_i_i)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $236=(Math_imul($230,$235)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($217)>>2)]=$236; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($210) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=28;break; }
 case 23: 
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $237=((($209)+($229))|0); //@line 25 "inc/pcdecoder.inl"
 var $238=((($237)-(3))|0); //@line 25 "inc/pcdecoder.inl"
 var $239=$238>>>1; //@line 48 "inc/pcmap.h"
 var $240=(((-$239))|0); //@line 48 "inc/pcmap.h"
 var $241=$240>>>31; //@line 48 "inc/pcmap.h"
 var $242=$241^$238; //@line 48 "inc/pcmap.h"
 var $243=$242<<30; //@line 50 "inc/pcmap.h"
 var $244=$243^-1073741824; //@line 50 "inc/pcmap.h"
 var $245=(HEAP32[((tempDoublePtr)>>2)]=$244,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $246=(($_21025+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21025)>>2)]=$245; //@line 65 "src/read.cpp"
 var $f_i_sroa_55_6=$f_i_sroa_55_5;var $_01056=1;label=24;break; //@line 22 "inc/front.h"
 case 24: 
 var $_01056;
 var $f_i_sroa_55_6;
 var $248=((($f_i_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $249=$f_i_sroa_55_6&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $250=(($143+($249<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($250)>>2)]=$245; //@line 23 "inc/front.h"
 var $251=((($_01056)-(1))|0); //@line 23 "inc/front.h"
 var $252=($251|0)==0; //@line 23 "inc/front.h"
 if($252){label=25;break;}else{var $f_i_sroa_55_6=$248;var $_01056=$251;label=24;break;} //@line 23 "inc/front.h"
 case 25: 
 var $253=((($x_i_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i_0=$253;var $f_i_sroa_55_5=$248;var $_21025=$246;label=19;break; //@line 49 "src/read.cpp"
 case 26: 
 var $255$0 = ___cxa_find_matching_catch(-1, -1); var $255$1 = tempRet0;
 var $256=$255$0;
 var $257=$255$1;
 var $258=($110|0)==0;
 if($258){var $_01020=$257;var $_01021=$256;label=38;break;}else{label=27;break;}
 case 27: 
 _free($110);
 var $_01020=$257;var $_01021=$256;label=38;break;
 case 28: 
 var $261$0 = ___cxa_find_matching_catch(-1, -1); var $261$1 = tempRet0;
 var $262=$261$0;
 var $263=$261$1;
 var $264=($135|0)==0; //@line 11 "inc/front.h"
 if($264){var $_01020=$263;var $_01021=$262;label=38;break;}else{label=29;break;} //@line 11 "inc/front.h"
 case 29: 
 _free($135);
 var $_01020=$263;var $_01021=$262;label=38;break; //@line 11 "inc/front.h"
 case 30: 
 var $266=((($y_i_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i_0=$266;var $f_i_sroa_55_3=$f_i_sroa_55_5;var $_11024=$_21025;label=17;break; //@line 48 "src/read.cpp"
 case 31: 
 var $268=((($z_i_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i_0=$268;var $f_i_sroa_55_1=$f_i_sroa_55_3;var $_01023=$_11024;label=15;break; //@line 47 "src/read.cpp"
 case 32: 
 var $270=($114|0)==0; //@line 69 "src/read.cpp"
 if($270){label=34;break;}else{label=33;break;} //@line 69 "src/read.cpp"
 case 33: 
 _free($114);
 label=34;break; //@line 69 "src/read.cpp"
 case 34: 
 var $272=HEAP32[(($rm_i)>>2)]; //@line 70 "src/read.cpp"
 var $273=($272|0)==0; //@line 70 "src/read.cpp"
 if($273){label=36;break;}else{label=35;break;} //@line 70 "src/read.cpp"
 case 35: 
 var $275=$272; //@line 70 "src/read.cpp"
 var $276=HEAP32[(($275)>>2)]; //@line 70 "src/read.cpp"
 var $277=(($276+4)|0); //@line 70 "src/read.cpp"
 var $278=HEAP32[(($277)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$278]($272); //@line 70 "src/read.cpp"
 label=36;break; //@line 70 "src/read.cpp"
 case 36: 
 var $280=($135|0)==0; //@line 11 "inc/front.h"
 if($280){label=1257;break;}else{label=37;break;} //@line 11 "inc/front.h"
 case 37: 
 _free($135);
 label=1257;break; //@line 11 "inc/front.h"
 case 38: 
 var $_01021;
 var $_01020;
 var $281$0=$_01021;
 var $281$1=0;
 var $282$0=$281$0;
 var $282$1=$_01020;
 ___resumeException($282$0) //@line 71 "src/read.cpp"
 case 39: 
 var $284=HEAP32[(($3)>>2)]; //@line 168 "src/read.cpp"
 var $285=HEAP32[(($4)>>2)]; //@line 168 "src/read.cpp"
 var $286=HEAP32[(($5)>>2)]; //@line 168 "src/read.cpp"
 var $287=HEAP32[(($6)>>2)]; //@line 168 "src/read.cpp"
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $288=__Znwj(48); //@line 41 "src/read.cpp"
 var $289=$288; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($289,0,15,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=61;break; } //@line 41 "src/read.cpp"
 case 40: 
 var $291=$288; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i7)>>2)]=$291; //@line 71 "src/read.cpp"
 var $292=__Znwj(12); //@line 42 "src/read.cpp"
 var $293=(($292+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $294=$293; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($294)>>2)]=$284; //@line 6 "inc/pcdecoder.inl"
 var $295=(($292+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $296=$295; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($296)>>2)]=$rm_i7; //@line 6 "inc/pcdecoder.inl"
 var $297=((($285)+(1))|0); //@line 10 "inc/front.h"
 var $298=((($286)+(1))|0); //@line 10 "inc/front.h"
 var $299=(Math_imul($297,$298)|0); //@line 10 "inc/front.h"
 var $300=((($285)+(2))|0); //@line 9 "inc/front.h"
 var $301=((($300)+($299))|0); //@line 9 "inc/front.h"
 var $302=((($301)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i14=$302;label=41;break; //@line 45 "inc/front.h"
 case 41: 
 var $storemerge_i_i_i14;
 var $304=((($storemerge_i_i_i14)+(1))|0); //@line 45 "inc/front.h"
 var $305=$storemerge_i_i_i14&$304; //@line 45 "inc/front.h"
 var $306=($305|0)==0; //@line 45 "inc/front.h"
 if($306){label=43;break;}else{label=42;break;} //@line 45 "inc/front.h"
 case 42: 
 var $308=$storemerge_i_i_i14|$304; //@line 45 "inc/front.h"
 var $storemerge_i_i_i14=$308;label=41;break; //@line 45 "inc/front.h"
 case 43: 
 var $309$0=_llvm_umul_with_overflow_i32($304,4);
 var $309$1=tempRet0;
 var $310=$309$1;
 var $311=$309$0;
 var $312=($310?-1:$311); //@line 9 "inc/front.h"
 var $313=(function() { try { __THREW__ = 0; return __Znwj($312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=44;break; }
 case 44: 
 var $315$0 = ___cxa_find_matching_catch(-1, -1); var $315$1 = tempRet0;
 var $316=$315$1;
 var $317=($316|0)<0;
 if($317){label=45;break;}else{label=46;break;}
 case 45: 
 var $319=$315$0;
 ___cxa_call_unexpected($319);
 throw "Reached an unreachable!";
 case 46: 
 ___resumeException($315$0)
 case 47: 
 var $321=$313; //@line 9 "inc/front.h"
 var $f_i9_sroa_55_0=0;var $_01088=$299;label=48;break; //@line 22 "inc/front.h"
 case 48: 
 var $_01088;
 var $f_i9_sroa_55_0;
 var $323=((($f_i9_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $324=$f_i9_sroa_55_0&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $325=(($321+($324<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($325)>>2)]=0; //@line 23 "inc/front.h"
 var $326=((($_01088)-(1))|0); //@line 23 "inc/front.h"
 var $327=($326|0)==0; //@line 23 "inc/front.h"
 if($327){label=49;break;}else{var $f_i9_sroa_55_0=$323;var $_01088=$326;label=48;break;} //@line 23 "inc/front.h"
 case 49: 
 var $328=(($292+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $329=$328; //@line 25 "inc/pcdecoder.inl"
 var $330=(($292+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $331=$330; //@line 25 "inc/pcdecoder.inl"
 var $z_i12_0=0;var $f_i9_sroa_55_1=$323;var $_01081=$_01012;label=50;break; //@line 47 "src/read.cpp"
 case 50: 
 var $_01081;
 var $f_i9_sroa_55_1;
 var $z_i12_0;
 var $333=($z_i12_0>>>0)<($287>>>0); //@line 47 "src/read.cpp"
 if($333){var $f_i9_sroa_55_2=$f_i9_sroa_55_1;var $_01095=$297;label=51;break;}else{label=67;break;} //@line 47 "src/read.cpp"
 case 51: 
 var $_01095;
 var $f_i9_sroa_55_2;
 var $335=((($f_i9_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $336=$f_i9_sroa_55_2&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $337=(($321+($336<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($337)>>2)]=0; //@line 23 "inc/front.h"
 var $338=((($_01095)-(1))|0); //@line 23 "inc/front.h"
 var $339=($338|0)==0; //@line 23 "inc/front.h"
 if($339){var $y_i11_0=0;var $f_i9_sroa_55_3=$335;var $_11082=$_01081;label=52;break;}else{var $f_i9_sroa_55_2=$335;var $_01095=$338;label=51;break;} //@line 23 "inc/front.h"
 case 52: 
 var $_11082;
 var $f_i9_sroa_55_3;
 var $y_i11_0;
 var $340=($y_i11_0>>>0)<($286>>>0); //@line 48 "src/read.cpp"
 if($340){var $f_i9_sroa_55_4=$f_i9_sroa_55_3;var $_01096=1;label=53;break;}else{label=66;break;} //@line 48 "src/read.cpp"
 case 53: 
 var $_01096;
 var $f_i9_sroa_55_4;
 var $342=((($f_i9_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $343=$f_i9_sroa_55_4&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $344=(($321+($343<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($344)>>2)]=0; //@line 23 "inc/front.h"
 var $345=((($_01096)-(1))|0); //@line 23 "inc/front.h"
 var $346=($345|0)==0; //@line 23 "inc/front.h"
 if($346){var $x_i10_0=0;var $f_i9_sroa_55_5=$342;var $_21083=$_11082;label=54;break;}else{var $f_i9_sroa_55_4=$342;var $_01096=$345;label=53;break;} //@line 23 "inc/front.h"
 case 54: 
 var $_21083;
 var $f_i9_sroa_55_5;
 var $x_i10_0;
 var $347=($x_i10_0>>>0)<($285>>>0); //@line 49 "src/read.cpp"
 if($347){label=55;break;}else{label=65;break;} //@line 49 "src/read.cpp"
 case 55: 
 var $349=((($f_i9_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $350=$349&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $351=(($321+($350<<2))|0); //@line 16 "inc/front.h"
 var $352=HEAPF32[(($351)>>2)]; //@line 59 "src/read.cpp"
 var $353=((($f_i9_sroa_55_5)-($297))|0); //@line 16 "inc/front.h"
 var $354=((($353)-($299))|0); //@line 16 "inc/front.h"
 var $355=$354&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $356=(($321+($355<<2))|0); //@line 16 "inc/front.h"
 var $357=HEAPF32[(($356)>>2)]; //@line 59 "src/read.cpp"
 var $358=$353&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $359=(($321+($358<<2))|0); //@line 16 "inc/front.h"
 var $360=HEAPF32[(($359)>>2)]; //@line 60 "src/read.cpp"
 var $361=((($349)-($299))|0); //@line 16 "inc/front.h"
 var $362=$361&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $363=(($321+($362<<2))|0); //@line 16 "inc/front.h"
 var $364=HEAPF32[(($363)>>2)]; //@line 60 "src/read.cpp"
 var $365=((($f_i9_sroa_55_5)-($299))|0); //@line 16 "inc/front.h"
 var $366=$365&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $367=(($321+($366<<2))|0); //@line 16 "inc/front.h"
 var $368=HEAPF32[(($367)>>2)]; //@line 61 "src/read.cpp"
 var $369=((($349)-($297))|0); //@line 16 "inc/front.h"
 var $370=$369&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $371=(($321+($370<<2))|0); //@line 16 "inc/front.h"
 var $372=HEAPF32[(($371)>>2)]; //@line 61 "src/read.cpp"
 var $373=((($369)-($299))|0); //@line 16 "inc/front.h"
 var $374=$373&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $375=(($321+($374<<2))|0); //@line 16 "inc/front.h"
 var $376=($352)-($357); //@line 59 "src/read.cpp"
 var $377=($376)+($360); //@line 60 "src/read.cpp"
 var $378=($377)-($364); //@line 60 "src/read.cpp"
 var $379=($378)+($368); //@line 61 "src/read.cpp"
 var $380=($379)-($372); //@line 61 "src/read.cpp"
 var $381=HEAPF32[(($375)>>2)]; //@line 62 "src/read.cpp"
 var $382=($380)+($381); //@line 62 "src/read.cpp"
 var $383=(HEAPF32[((tempDoublePtr)>>2)]=$382,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $384=$383^-1; //@line 38 "inc/pcmap.h"
 var $385=$384>>>29; //@line 39 "inc/pcmap.h"
 var $386=$384>>31; //@line 40 "inc/pcmap.h"
 var $387=$386>>>30; //@line 40 "inc/pcmap.h"
 var $388=$385^$387; //@line 40 "inc/pcmap.h"
 var $389=HEAP32[(($329)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $390=HEAP32[(($331)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $391=HEAP32[(($390)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $392=$391; //@line 25 "src/rcdecoder.cpp"
 var $393=HEAP32[(($392)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $394=(($393+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $395=HEAP32[(($394)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $396=(($389+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$395]($391,$396) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=63;break; }
 case 56: 
 var $397=(($389+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $398=HEAP32[(($397)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $399=(($389+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $400=HEAP32[(($399)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $401=((($398)-($400))|0); //@line 26 "src/rcdecoder.cpp"
 var $402=HEAP32[(($396)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $403=(((($401>>>0))/(($402>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i2)>>2)]=$403; //@line 26 "src/rcdecoder.cpp"
 var $404=$391; //@line 27 "src/rcdecoder.cpp"
 var $405=HEAP32[(($404)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $406=(($405+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $407=HEAP32[(($406)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $408=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$407]($391,$l_i_i_i2,$r_i_i_i3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=63;break; }
 case 57: 
 var $409=HEAP32[(($396)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $410=HEAP32[(($l_i_i_i2)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $411=(Math_imul($409,$410)|0); //@line 28 "src/rcdecoder.cpp"
 var $412=HEAP32[(($399)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $413=((($412)+($411))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($399)>>2)]=$413; //@line 28 "src/rcdecoder.cpp"
 var $414=HEAP32[(($r_i_i_i3)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $415=(Math_imul($409,$414)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($396)>>2)]=$415; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($389) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=63;break; }
 case 58: 
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $416=((($388)+($408))|0); //@line 25 "inc/pcdecoder.inl"
 var $417=((($416)-(7))|0); //@line 25 "inc/pcdecoder.inl"
 var $418=$417>>>2; //@line 48 "inc/pcmap.h"
 var $419=(((-$418))|0); //@line 48 "inc/pcmap.h"
 var $420=$419>>>30; //@line 48 "inc/pcmap.h"
 var $421=$420^$417; //@line 48 "inc/pcmap.h"
 var $422=$421<<29; //@line 50 "inc/pcmap.h"
 var $423=$422^-536870912; //@line 50 "inc/pcmap.h"
 var $424=(HEAP32[((tempDoublePtr)>>2)]=$423,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $425=(($_21083+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21083)>>2)]=$424; //@line 65 "src/read.cpp"
 var $f_i9_sroa_55_6=$f_i9_sroa_55_5;var $_01108=1;label=59;break; //@line 22 "inc/front.h"
 case 59: 
 var $_01108;
 var $f_i9_sroa_55_6;
 var $427=((($f_i9_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $428=$f_i9_sroa_55_6&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $429=(($321+($428<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($429)>>2)]=$424; //@line 23 "inc/front.h"
 var $430=((($_01108)-(1))|0); //@line 23 "inc/front.h"
 var $431=($430|0)==0; //@line 23 "inc/front.h"
 if($431){label=60;break;}else{var $f_i9_sroa_55_6=$427;var $_01108=$430;label=59;break;} //@line 23 "inc/front.h"
 case 60: 
 var $432=((($x_i10_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i10_0=$432;var $f_i9_sroa_55_5=$427;var $_21083=$425;label=54;break; //@line 49 "src/read.cpp"
 case 61: 
 var $434$0 = ___cxa_find_matching_catch(-1, -1); var $434$1 = tempRet0;
 var $435=$434$0;
 var $436=$434$1;
 var $437=($288|0)==0;
 if($437){var $_01074=$436;var $_01075=$435;label=73;break;}else{label=62;break;}
 case 62: 
 _free($288);
 var $_01074=$436;var $_01075=$435;label=73;break;
 case 63: 
 var $440$0 = ___cxa_find_matching_catch(-1, -1); var $440$1 = tempRet0;
 var $441=$440$0;
 var $442=$440$1;
 var $443=($313|0)==0; //@line 11 "inc/front.h"
 if($443){var $_01074=$442;var $_01075=$441;label=73;break;}else{label=64;break;} //@line 11 "inc/front.h"
 case 64: 
 _free($313);
 var $_01074=$442;var $_01075=$441;label=73;break; //@line 11 "inc/front.h"
 case 65: 
 var $445=((($y_i11_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i11_0=$445;var $f_i9_sroa_55_3=$f_i9_sroa_55_5;var $_11082=$_21083;label=52;break; //@line 48 "src/read.cpp"
 case 66: 
 var $447=((($z_i12_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i12_0=$447;var $f_i9_sroa_55_1=$f_i9_sroa_55_3;var $_01081=$_11082;label=50;break; //@line 47 "src/read.cpp"
 case 67: 
 var $449=($292|0)==0; //@line 69 "src/read.cpp"
 if($449){label=69;break;}else{label=68;break;} //@line 69 "src/read.cpp"
 case 68: 
 _free($292);
 label=69;break; //@line 69 "src/read.cpp"
 case 69: 
 var $451=HEAP32[(($rm_i7)>>2)]; //@line 70 "src/read.cpp"
 var $452=($451|0)==0; //@line 70 "src/read.cpp"
 if($452){label=71;break;}else{label=70;break;} //@line 70 "src/read.cpp"
 case 70: 
 var $454=$451; //@line 70 "src/read.cpp"
 var $455=HEAP32[(($454)>>2)]; //@line 70 "src/read.cpp"
 var $456=(($455+4)|0); //@line 70 "src/read.cpp"
 var $457=HEAP32[(($456)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$457]($451); //@line 70 "src/read.cpp"
 label=71;break; //@line 70 "src/read.cpp"
 case 71: 
 var $459=($313|0)==0; //@line 11 "inc/front.h"
 if($459){label=1257;break;}else{label=72;break;} //@line 11 "inc/front.h"
 case 72: 
 _free($313);
 label=1257;break; //@line 11 "inc/front.h"
 case 73: 
 var $_01075;
 var $_01074;
 var $460$0=$_01075;
 var $460$1=0;
 var $461$0=$460$0;
 var $461$1=$_01074;
 ___resumeException($461$0) //@line 71 "src/read.cpp"
 case 74: 
 var $463=HEAP32[(($3)>>2)]; //@line 169 "src/read.cpp"
 var $464=HEAP32[(($4)>>2)]; //@line 169 "src/read.cpp"
 var $465=HEAP32[(($5)>>2)]; //@line 169 "src/read.cpp"
 var $466=HEAP32[(($6)>>2)]; //@line 169 "src/read.cpp"
 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $467=__Znwj(48); //@line 41 "src/read.cpp"
 var $468=$467; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($468,0,31,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=96;break; } //@line 41 "src/read.cpp"
 case 75: 
 var $470=$467; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i33)>>2)]=$470; //@line 71 "src/read.cpp"
 var $471=__Znwj(12); //@line 42 "src/read.cpp"
 var $472=(($471+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $473=$472; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($473)>>2)]=$463; //@line 6 "inc/pcdecoder.inl"
 var $474=(($471+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $475=$474; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($475)>>2)]=$rm_i33; //@line 6 "inc/pcdecoder.inl"
 var $476=((($464)+(1))|0); //@line 10 "inc/front.h"
 var $477=((($465)+(1))|0); //@line 10 "inc/front.h"
 var $478=(Math_imul($476,$477)|0); //@line 10 "inc/front.h"
 var $479=((($464)+(2))|0); //@line 9 "inc/front.h"
 var $480=((($479)+($478))|0); //@line 9 "inc/front.h"
 var $481=((($480)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i40=$481;label=76;break; //@line 45 "inc/front.h"
 case 76: 
 var $storemerge_i_i_i40;
 var $483=((($storemerge_i_i_i40)+(1))|0); //@line 45 "inc/front.h"
 var $484=$storemerge_i_i_i40&$483; //@line 45 "inc/front.h"
 var $485=($484|0)==0; //@line 45 "inc/front.h"
 if($485){label=78;break;}else{label=77;break;} //@line 45 "inc/front.h"
 case 77: 
 var $487=$storemerge_i_i_i40|$483; //@line 45 "inc/front.h"
 var $storemerge_i_i_i40=$487;label=76;break; //@line 45 "inc/front.h"
 case 78: 
 var $488$0=_llvm_umul_with_overflow_i32($483,4);
 var $488$1=tempRet0;
 var $489=$488$1;
 var $490=$488$0;
 var $491=($489?-1:$490); //@line 9 "inc/front.h"
 var $492=(function() { try { __THREW__ = 0; return __Znwj($491) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=79;break; }
 case 79: 
 var $494$0 = ___cxa_find_matching_catch(-1, -1); var $494$1 = tempRet0;
 var $495=$494$1;
 var $496=($495|0)<0;
 if($496){label=80;break;}else{label=81;break;}
 case 80: 
 var $498=$494$0;
 ___cxa_call_unexpected($498);
 throw "Reached an unreachable!";
 case 81: 
 ___resumeException($494$0)
 case 82: 
 var $500=$492; //@line 9 "inc/front.h"
 var $f_i35_sroa_55_0=0;var $_01143=$478;label=83;break; //@line 22 "inc/front.h"
 case 83: 
 var $_01143;
 var $f_i35_sroa_55_0;
 var $502=((($f_i35_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $503=$f_i35_sroa_55_0&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $504=(($500+($503<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($504)>>2)]=0; //@line 23 "inc/front.h"
 var $505=((($_01143)-(1))|0); //@line 23 "inc/front.h"
 var $506=($505|0)==0; //@line 23 "inc/front.h"
 if($506){label=84;break;}else{var $f_i35_sroa_55_0=$502;var $_01143=$505;label=83;break;} //@line 23 "inc/front.h"
 case 84: 
 var $507=(($471+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $508=$507; //@line 25 "inc/pcdecoder.inl"
 var $509=(($471+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $510=$509; //@line 25 "inc/pcdecoder.inl"
 var $z_i38_0=0;var $f_i35_sroa_55_1=$502;var $_01133=$_01012;label=85;break; //@line 47 "src/read.cpp"
 case 85: 
 var $_01133;
 var $f_i35_sroa_55_1;
 var $z_i38_0;
 var $512=($z_i38_0>>>0)<($466>>>0); //@line 47 "src/read.cpp"
 if($512){var $f_i35_sroa_55_2=$f_i35_sroa_55_1;var $_01147=$476;label=86;break;}else{label=102;break;} //@line 47 "src/read.cpp"
 case 86: 
 var $_01147;
 var $f_i35_sroa_55_2;
 var $514=((($f_i35_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $515=$f_i35_sroa_55_2&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $516=(($500+($515<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($516)>>2)]=0; //@line 23 "inc/front.h"
 var $517=((($_01147)-(1))|0); //@line 23 "inc/front.h"
 var $518=($517|0)==0; //@line 23 "inc/front.h"
 if($518){var $y_i37_0=0;var $f_i35_sroa_55_3=$514;var $_11134=$_01133;label=87;break;}else{var $f_i35_sroa_55_2=$514;var $_01147=$517;label=86;break;} //@line 23 "inc/front.h"
 case 87: 
 var $_11134;
 var $f_i35_sroa_55_3;
 var $y_i37_0;
 var $519=($y_i37_0>>>0)<($465>>>0); //@line 48 "src/read.cpp"
 if($519){var $f_i35_sroa_55_4=$f_i35_sroa_55_3;var $_01154=1;label=88;break;}else{label=101;break;} //@line 48 "src/read.cpp"
 case 88: 
 var $_01154;
 var $f_i35_sroa_55_4;
 var $521=((($f_i35_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $522=$f_i35_sroa_55_4&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $523=(($500+($522<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($523)>>2)]=0; //@line 23 "inc/front.h"
 var $524=((($_01154)-(1))|0); //@line 23 "inc/front.h"
 var $525=($524|0)==0; //@line 23 "inc/front.h"
 if($525){var $x_i36_0=0;var $f_i35_sroa_55_5=$521;var $_21135=$_11134;label=89;break;}else{var $f_i35_sroa_55_4=$521;var $_01154=$524;label=88;break;} //@line 23 "inc/front.h"
 case 89: 
 var $_21135;
 var $f_i35_sroa_55_5;
 var $x_i36_0;
 var $526=($x_i36_0>>>0)<($464>>>0); //@line 49 "src/read.cpp"
 if($526){label=90;break;}else{label=100;break;} //@line 49 "src/read.cpp"
 case 90: 
 var $528=((($f_i35_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $529=$528&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $530=(($500+($529<<2))|0); //@line 16 "inc/front.h"
 var $531=HEAPF32[(($530)>>2)]; //@line 59 "src/read.cpp"
 var $532=((($f_i35_sroa_55_5)-($476))|0); //@line 16 "inc/front.h"
 var $533=((($532)-($478))|0); //@line 16 "inc/front.h"
 var $534=$533&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $535=(($500+($534<<2))|0); //@line 16 "inc/front.h"
 var $536=HEAPF32[(($535)>>2)]; //@line 59 "src/read.cpp"
 var $537=$532&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $538=(($500+($537<<2))|0); //@line 16 "inc/front.h"
 var $539=HEAPF32[(($538)>>2)]; //@line 60 "src/read.cpp"
 var $540=((($528)-($478))|0); //@line 16 "inc/front.h"
 var $541=$540&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $542=(($500+($541<<2))|0); //@line 16 "inc/front.h"
 var $543=HEAPF32[(($542)>>2)]; //@line 60 "src/read.cpp"
 var $544=((($f_i35_sroa_55_5)-($478))|0); //@line 16 "inc/front.h"
 var $545=$544&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $546=(($500+($545<<2))|0); //@line 16 "inc/front.h"
 var $547=HEAPF32[(($546)>>2)]; //@line 61 "src/read.cpp"
 var $548=((($528)-($476))|0); //@line 16 "inc/front.h"
 var $549=$548&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $550=(($500+($549<<2))|0); //@line 16 "inc/front.h"
 var $551=HEAPF32[(($550)>>2)]; //@line 61 "src/read.cpp"
 var $552=((($548)-($478))|0); //@line 16 "inc/front.h"
 var $553=$552&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $554=(($500+($553<<2))|0); //@line 16 "inc/front.h"
 var $555=($531)-($536); //@line 59 "src/read.cpp"
 var $556=($555)+($539); //@line 60 "src/read.cpp"
 var $557=($556)-($543); //@line 60 "src/read.cpp"
 var $558=($557)+($547); //@line 61 "src/read.cpp"
 var $559=($558)-($551); //@line 61 "src/read.cpp"
 var $560=HEAPF32[(($554)>>2)]; //@line 62 "src/read.cpp"
 var $561=($559)+($560); //@line 62 "src/read.cpp"
 var $562=(HEAPF32[((tempDoublePtr)>>2)]=$561,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $563=$562^-1; //@line 38 "inc/pcmap.h"
 var $564=$563>>>28; //@line 39 "inc/pcmap.h"
 var $565=$563>>31; //@line 40 "inc/pcmap.h"
 var $566=$565>>>29; //@line 40 "inc/pcmap.h"
 var $567=$564^$566; //@line 40 "inc/pcmap.h"
 var $568=HEAP32[(($508)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $569=HEAP32[(($510)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $570=HEAP32[(($569)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $571=$570; //@line 25 "src/rcdecoder.cpp"
 var $572=HEAP32[(($571)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $573=(($572+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $574=HEAP32[(($573)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $575=(($568+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$574]($570,$575) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=98;break; }
 case 91: 
 var $576=(($568+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $577=HEAP32[(($576)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $578=(($568+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $579=HEAP32[(($578)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $580=((($577)-($579))|0); //@line 26 "src/rcdecoder.cpp"
 var $581=HEAP32[(($575)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $582=(((($580>>>0))/(($581>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i28)>>2)]=$582; //@line 26 "src/rcdecoder.cpp"
 var $583=$570; //@line 27 "src/rcdecoder.cpp"
 var $584=HEAP32[(($583)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $585=(($584+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $586=HEAP32[(($585)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $587=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$586]($570,$l_i_i_i28,$r_i_i_i29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=98;break; }
 case 92: 
 var $588=HEAP32[(($575)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $589=HEAP32[(($l_i_i_i28)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $590=(Math_imul($588,$589)|0); //@line 28 "src/rcdecoder.cpp"
 var $591=HEAP32[(($578)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $592=((($591)+($590))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($578)>>2)]=$592; //@line 28 "src/rcdecoder.cpp"
 var $593=HEAP32[(($r_i_i_i29)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $594=(Math_imul($588,$593)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($575)>>2)]=$594; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=98;break; }
 case 93: 
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $595=((($567)+($587))|0); //@line 25 "inc/pcdecoder.inl"
 var $596=((($595)-(15))|0); //@line 25 "inc/pcdecoder.inl"
 var $597=$596>>>3; //@line 48 "inc/pcmap.h"
 var $598=(((-$597))|0); //@line 48 "inc/pcmap.h"
 var $599=$598>>>29; //@line 48 "inc/pcmap.h"
 var $600=$599^$596; //@line 48 "inc/pcmap.h"
 var $601=$600<<28; //@line 50 "inc/pcmap.h"
 var $602=$601^-268435456; //@line 50 "inc/pcmap.h"
 var $603=(HEAP32[((tempDoublePtr)>>2)]=$602,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $604=(($_21135+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21135)>>2)]=$603; //@line 65 "src/read.cpp"
 var $f_i35_sroa_55_6=$f_i35_sroa_55_5;var $_01166=1;label=94;break; //@line 22 "inc/front.h"
 case 94: 
 var $_01166;
 var $f_i35_sroa_55_6;
 var $606=((($f_i35_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $607=$f_i35_sroa_55_6&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $608=(($500+($607<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($608)>>2)]=$603; //@line 23 "inc/front.h"
 var $609=((($_01166)-(1))|0); //@line 23 "inc/front.h"
 var $610=($609|0)==0; //@line 23 "inc/front.h"
 if($610){label=95;break;}else{var $f_i35_sroa_55_6=$606;var $_01166=$609;label=94;break;} //@line 23 "inc/front.h"
 case 95: 
 var $611=((($x_i36_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i36_0=$611;var $f_i35_sroa_55_5=$606;var $_21135=$604;label=89;break; //@line 49 "src/read.cpp"
 case 96: 
 var $613$0 = ___cxa_find_matching_catch(-1, -1); var $613$1 = tempRet0;
 var $614=$613$0;
 var $615=$613$1;
 var $616=($467|0)==0;
 if($616){var $_01128=$615;var $_01129=$614;label=108;break;}else{label=97;break;}
 case 97: 
 _free($467);
 var $_01128=$615;var $_01129=$614;label=108;break;
 case 98: 
 var $619$0 = ___cxa_find_matching_catch(-1, -1); var $619$1 = tempRet0;
 var $620=$619$0;
 var $621=$619$1;
 var $622=($492|0)==0; //@line 11 "inc/front.h"
 if($622){var $_01128=$621;var $_01129=$620;label=108;break;}else{label=99;break;} //@line 11 "inc/front.h"
 case 99: 
 _free($492);
 var $_01128=$621;var $_01129=$620;label=108;break; //@line 11 "inc/front.h"
 case 100: 
 var $624=((($y_i37_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i37_0=$624;var $f_i35_sroa_55_3=$f_i35_sroa_55_5;var $_11134=$_21135;label=87;break; //@line 48 "src/read.cpp"
 case 101: 
 var $626=((($z_i38_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i38_0=$626;var $f_i35_sroa_55_1=$f_i35_sroa_55_3;var $_01133=$_11134;label=85;break; //@line 47 "src/read.cpp"
 case 102: 
 var $628=($471|0)==0; //@line 69 "src/read.cpp"
 if($628){label=104;break;}else{label=103;break;} //@line 69 "src/read.cpp"
 case 103: 
 _free($471);
 label=104;break; //@line 69 "src/read.cpp"
 case 104: 
 var $630=HEAP32[(($rm_i33)>>2)]; //@line 70 "src/read.cpp"
 var $631=($630|0)==0; //@line 70 "src/read.cpp"
 if($631){label=106;break;}else{label=105;break;} //@line 70 "src/read.cpp"
 case 105: 
 var $633=$630; //@line 70 "src/read.cpp"
 var $634=HEAP32[(($633)>>2)]; //@line 70 "src/read.cpp"
 var $635=(($634+4)|0); //@line 70 "src/read.cpp"
 var $636=HEAP32[(($635)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$636]($630); //@line 70 "src/read.cpp"
 label=106;break; //@line 70 "src/read.cpp"
 case 106: 
 var $638=($492|0)==0; //@line 11 "inc/front.h"
 if($638){label=1257;break;}else{label=107;break;} //@line 11 "inc/front.h"
 case 107: 
 _free($492);
 label=1257;break; //@line 11 "inc/front.h"
 case 108: 
 var $_01129;
 var $_01128;
 var $639$0=$_01129;
 var $639$1=0;
 var $640$0=$639$0;
 var $640$1=$_01128;
 ___resumeException($640$0) //@line 71 "src/read.cpp"
 case 109: 
 var $642=HEAP32[(($3)>>2)]; //@line 170 "src/read.cpp"
 var $643=HEAP32[(($4)>>2)]; //@line 170 "src/read.cpp"
 var $644=HEAP32[(($5)>>2)]; //@line 170 "src/read.cpp"
 var $645=HEAP32[(($6)>>2)]; //@line 170 "src/read.cpp"
 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $646=__Znwj(48); //@line 41 "src/read.cpp"
 var $647=$646; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($647,0,63,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=131;break; } //@line 41 "src/read.cpp"
 case 110: 
 var $649=$646; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i59)>>2)]=$649; //@line 71 "src/read.cpp"
 var $650=__Znwj(12); //@line 42 "src/read.cpp"
 var $651=(($650+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $652=$651; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($652)>>2)]=$642; //@line 6 "inc/pcdecoder.inl"
 var $653=(($650+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $654=$653; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($654)>>2)]=$rm_i59; //@line 6 "inc/pcdecoder.inl"
 var $655=((($643)+(1))|0); //@line 10 "inc/front.h"
 var $656=((($644)+(1))|0); //@line 10 "inc/front.h"
 var $657=(Math_imul($655,$656)|0); //@line 10 "inc/front.h"
 var $658=((($643)+(2))|0); //@line 9 "inc/front.h"
 var $659=((($658)+($657))|0); //@line 9 "inc/front.h"
 var $660=((($659)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i66=$660;label=111;break; //@line 45 "inc/front.h"
 case 111: 
 var $storemerge_i_i_i66;
 var $662=((($storemerge_i_i_i66)+(1))|0); //@line 45 "inc/front.h"
 var $663=$storemerge_i_i_i66&$662; //@line 45 "inc/front.h"
 var $664=($663|0)==0; //@line 45 "inc/front.h"
 if($664){label=113;break;}else{label=112;break;} //@line 45 "inc/front.h"
 case 112: 
 var $666=$storemerge_i_i_i66|$662; //@line 45 "inc/front.h"
 var $storemerge_i_i_i66=$666;label=111;break; //@line 45 "inc/front.h"
 case 113: 
 var $667$0=_llvm_umul_with_overflow_i32($662,4);
 var $667$1=tempRet0;
 var $668=$667$1;
 var $669=$667$0;
 var $670=($668?-1:$669); //@line 9 "inc/front.h"
 var $671=(function() { try { __THREW__ = 0; return __Znwj($670) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=114;break; }
 case 114: 
 var $673$0 = ___cxa_find_matching_catch(-1, -1); var $673$1 = tempRet0;
 var $674=$673$1;
 var $675=($674|0)<0;
 if($675){label=115;break;}else{label=116;break;}
 case 115: 
 var $677=$673$0;
 ___cxa_call_unexpected($677);
 throw "Reached an unreachable!";
 case 116: 
 ___resumeException($673$0)
 case 117: 
 var $679=$671; //@line 9 "inc/front.h"
 var $f_i61_sroa_55_0=0;var $_01200=$657;label=118;break; //@line 22 "inc/front.h"
 case 118: 
 var $_01200;
 var $f_i61_sroa_55_0;
 var $681=((($f_i61_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $682=$f_i61_sroa_55_0&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $683=(($679+($682<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($683)>>2)]=0; //@line 23 "inc/front.h"
 var $684=((($_01200)-(1))|0); //@line 23 "inc/front.h"
 var $685=($684|0)==0; //@line 23 "inc/front.h"
 if($685){label=119;break;}else{var $f_i61_sroa_55_0=$681;var $_01200=$684;label=118;break;} //@line 23 "inc/front.h"
 case 119: 
 var $686=(($650+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $687=$686; //@line 25 "inc/pcdecoder.inl"
 var $688=(($650+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $689=$688; //@line 25 "inc/pcdecoder.inl"
 var $z_i64_0=0;var $f_i61_sroa_55_1=$681;var $_01189=$_01012;label=120;break; //@line 47 "src/read.cpp"
 case 120: 
 var $_01189;
 var $f_i61_sroa_55_1;
 var $z_i64_0;
 var $691=($z_i64_0>>>0)<($645>>>0); //@line 47 "src/read.cpp"
 if($691){var $f_i61_sroa_55_2=$f_i61_sroa_55_1;var $_01203=$655;label=121;break;}else{label=137;break;} //@line 47 "src/read.cpp"
 case 121: 
 var $_01203;
 var $f_i61_sroa_55_2;
 var $693=((($f_i61_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $694=$f_i61_sroa_55_2&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $695=(($679+($694<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($695)>>2)]=0; //@line 23 "inc/front.h"
 var $696=((($_01203)-(1))|0); //@line 23 "inc/front.h"
 var $697=($696|0)==0; //@line 23 "inc/front.h"
 if($697){var $y_i63_0=0;var $f_i61_sroa_55_3=$693;var $_11190=$_01189;label=122;break;}else{var $f_i61_sroa_55_2=$693;var $_01203=$696;label=121;break;} //@line 23 "inc/front.h"
 case 122: 
 var $_11190;
 var $f_i61_sroa_55_3;
 var $y_i63_0;
 var $698=($y_i63_0>>>0)<($644>>>0); //@line 48 "src/read.cpp"
 if($698){var $f_i61_sroa_55_4=$f_i61_sroa_55_3;var $_01206=1;label=123;break;}else{label=136;break;} //@line 48 "src/read.cpp"
 case 123: 
 var $_01206;
 var $f_i61_sroa_55_4;
 var $700=((($f_i61_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $701=$f_i61_sroa_55_4&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $702=(($679+($701<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($702)>>2)]=0; //@line 23 "inc/front.h"
 var $703=((($_01206)-(1))|0); //@line 23 "inc/front.h"
 var $704=($703|0)==0; //@line 23 "inc/front.h"
 if($704){var $x_i62_0=0;var $f_i61_sroa_55_5=$700;var $_21191=$_11190;label=124;break;}else{var $f_i61_sroa_55_4=$700;var $_01206=$703;label=123;break;} //@line 23 "inc/front.h"
 case 124: 
 var $_21191;
 var $f_i61_sroa_55_5;
 var $x_i62_0;
 var $705=($x_i62_0>>>0)<($643>>>0); //@line 49 "src/read.cpp"
 if($705){label=125;break;}else{label=135;break;} //@line 49 "src/read.cpp"
 case 125: 
 var $707=((($f_i61_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $708=$707&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $709=(($679+($708<<2))|0); //@line 16 "inc/front.h"
 var $710=HEAPF32[(($709)>>2)]; //@line 59 "src/read.cpp"
 var $711=((($f_i61_sroa_55_5)-($655))|0); //@line 16 "inc/front.h"
 var $712=((($711)-($657))|0); //@line 16 "inc/front.h"
 var $713=$712&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $714=(($679+($713<<2))|0); //@line 16 "inc/front.h"
 var $715=HEAPF32[(($714)>>2)]; //@line 59 "src/read.cpp"
 var $716=$711&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $717=(($679+($716<<2))|0); //@line 16 "inc/front.h"
 var $718=HEAPF32[(($717)>>2)]; //@line 60 "src/read.cpp"
 var $719=((($707)-($657))|0); //@line 16 "inc/front.h"
 var $720=$719&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $721=(($679+($720<<2))|0); //@line 16 "inc/front.h"
 var $722=HEAPF32[(($721)>>2)]; //@line 60 "src/read.cpp"
 var $723=((($f_i61_sroa_55_5)-($657))|0); //@line 16 "inc/front.h"
 var $724=$723&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $725=(($679+($724<<2))|0); //@line 16 "inc/front.h"
 var $726=HEAPF32[(($725)>>2)]; //@line 61 "src/read.cpp"
 var $727=((($707)-($655))|0); //@line 16 "inc/front.h"
 var $728=$727&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $729=(($679+($728<<2))|0); //@line 16 "inc/front.h"
 var $730=HEAPF32[(($729)>>2)]; //@line 61 "src/read.cpp"
 var $731=((($727)-($657))|0); //@line 16 "inc/front.h"
 var $732=$731&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $733=(($679+($732<<2))|0); //@line 16 "inc/front.h"
 var $734=($710)-($715); //@line 59 "src/read.cpp"
 var $735=($734)+($718); //@line 60 "src/read.cpp"
 var $736=($735)-($722); //@line 60 "src/read.cpp"
 var $737=($736)+($726); //@line 61 "src/read.cpp"
 var $738=($737)-($730); //@line 61 "src/read.cpp"
 var $739=HEAPF32[(($733)>>2)]; //@line 62 "src/read.cpp"
 var $740=($738)+($739); //@line 62 "src/read.cpp"
 var $741=(HEAPF32[((tempDoublePtr)>>2)]=$740,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $742=$741^-1; //@line 38 "inc/pcmap.h"
 var $743=$742>>>27; //@line 39 "inc/pcmap.h"
 var $744=$742>>31; //@line 40 "inc/pcmap.h"
 var $745=$744>>>28; //@line 40 "inc/pcmap.h"
 var $746=$743^$745; //@line 40 "inc/pcmap.h"
 var $747=HEAP32[(($687)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $748=HEAP32[(($689)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $749=HEAP32[(($748)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $750=$749; //@line 25 "src/rcdecoder.cpp"
 var $751=HEAP32[(($750)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $752=(($751+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $753=HEAP32[(($752)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $754=(($747+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$753]($749,$754) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { label=133;break; }
 case 126: 
 var $755=(($747+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $756=HEAP32[(($755)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $757=(($747+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $758=HEAP32[(($757)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $759=((($756)-($758))|0); //@line 26 "src/rcdecoder.cpp"
 var $760=HEAP32[(($754)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $761=(((($759>>>0))/(($760>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i54)>>2)]=$761; //@line 26 "src/rcdecoder.cpp"
 var $762=$749; //@line 27 "src/rcdecoder.cpp"
 var $763=HEAP32[(($762)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $764=(($763+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $765=HEAP32[(($764)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $766=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$765]($749,$l_i_i_i54,$r_i_i_i55) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=133;break; }
 case 127: 
 var $767=HEAP32[(($754)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $768=HEAP32[(($l_i_i_i54)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $769=(Math_imul($767,$768)|0); //@line 28 "src/rcdecoder.cpp"
 var $770=HEAP32[(($757)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $771=((($770)+($769))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($757)>>2)]=$771; //@line 28 "src/rcdecoder.cpp"
 var $772=HEAP32[(($r_i_i_i55)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $773=(Math_imul($767,$772)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($754)>>2)]=$773; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($747) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { label=133;break; }
 case 128: 
 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $774=((($746)+($766))|0); //@line 25 "inc/pcdecoder.inl"
 var $775=((($774)-(31))|0); //@line 25 "inc/pcdecoder.inl"
 var $776=$775>>>4; //@line 48 "inc/pcmap.h"
 var $777=(((-$776))|0); //@line 48 "inc/pcmap.h"
 var $778=$777>>>28; //@line 48 "inc/pcmap.h"
 var $779=$778^$775; //@line 48 "inc/pcmap.h"
 var $780=$779<<27; //@line 50 "inc/pcmap.h"
 var $781=$780^-134217728; //@line 50 "inc/pcmap.h"
 var $782=(HEAP32[((tempDoublePtr)>>2)]=$781,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $783=(($_21191+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21191)>>2)]=$782; //@line 65 "src/read.cpp"
 var $f_i61_sroa_55_6=$f_i61_sroa_55_5;var $_01218=1;label=129;break; //@line 22 "inc/front.h"
 case 129: 
 var $_01218;
 var $f_i61_sroa_55_6;
 var $785=((($f_i61_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $786=$f_i61_sroa_55_6&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $787=(($679+($786<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($787)>>2)]=$782; //@line 23 "inc/front.h"
 var $788=((($_01218)-(1))|0); //@line 23 "inc/front.h"
 var $789=($788|0)==0; //@line 23 "inc/front.h"
 if($789){label=130;break;}else{var $f_i61_sroa_55_6=$785;var $_01218=$788;label=129;break;} //@line 23 "inc/front.h"
 case 130: 
 var $790=((($x_i62_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i62_0=$790;var $f_i61_sroa_55_5=$785;var $_21191=$783;label=124;break; //@line 49 "src/read.cpp"
 case 131: 
 var $792$0 = ___cxa_find_matching_catch(-1, -1); var $792$1 = tempRet0;
 var $793=$792$0;
 var $794=$792$1;
 var $795=($646|0)==0;
 if($795){var $_01186=$794;var $_01187=$793;label=143;break;}else{label=132;break;}
 case 132: 
 _free($646);
 var $_01186=$794;var $_01187=$793;label=143;break;
 case 133: 
 var $798$0 = ___cxa_find_matching_catch(-1, -1); var $798$1 = tempRet0;
 var $799=$798$0;
 var $800=$798$1;
 var $801=($671|0)==0; //@line 11 "inc/front.h"
 if($801){var $_01186=$800;var $_01187=$799;label=143;break;}else{label=134;break;} //@line 11 "inc/front.h"
 case 134: 
 _free($671);
 var $_01186=$800;var $_01187=$799;label=143;break; //@line 11 "inc/front.h"
 case 135: 
 var $803=((($y_i63_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i63_0=$803;var $f_i61_sroa_55_3=$f_i61_sroa_55_5;var $_11190=$_21191;label=122;break; //@line 48 "src/read.cpp"
 case 136: 
 var $805=((($z_i64_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i64_0=$805;var $f_i61_sroa_55_1=$f_i61_sroa_55_3;var $_01189=$_11190;label=120;break; //@line 47 "src/read.cpp"
 case 137: 
 var $807=($650|0)==0; //@line 69 "src/read.cpp"
 if($807){label=139;break;}else{label=138;break;} //@line 69 "src/read.cpp"
 case 138: 
 _free($650);
 label=139;break; //@line 69 "src/read.cpp"
 case 139: 
 var $809=HEAP32[(($rm_i59)>>2)]; //@line 70 "src/read.cpp"
 var $810=($809|0)==0; //@line 70 "src/read.cpp"
 if($810){label=141;break;}else{label=140;break;} //@line 70 "src/read.cpp"
 case 140: 
 var $812=$809; //@line 70 "src/read.cpp"
 var $813=HEAP32[(($812)>>2)]; //@line 70 "src/read.cpp"
 var $814=(($813+4)|0); //@line 70 "src/read.cpp"
 var $815=HEAP32[(($814)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$815]($809); //@line 70 "src/read.cpp"
 label=141;break; //@line 70 "src/read.cpp"
 case 141: 
 var $817=($671|0)==0; //@line 11 "inc/front.h"
 if($817){label=1257;break;}else{label=142;break;} //@line 11 "inc/front.h"
 case 142: 
 _free($671);
 label=1257;break; //@line 11 "inc/front.h"
 case 143: 
 var $_01187;
 var $_01186;
 var $818$0=$_01187;
 var $818$1=0;
 var $819$0=$818$0;
 var $819$1=$_01186;
 ___resumeException($819$0) //@line 71 "src/read.cpp"
 case 144: 
 var $821=HEAP32[(($3)>>2)]; //@line 171 "src/read.cpp"
 var $822=HEAP32[(($4)>>2)]; //@line 171 "src/read.cpp"
 var $823=HEAP32[(($5)>>2)]; //@line 171 "src/read.cpp"
 var $824=HEAP32[(($6)>>2)]; //@line 171 "src/read.cpp"
 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $825=__Znwj(48); //@line 41 "src/read.cpp"
 var $826=$825; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($826,0,127,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=145;break; } else { label=166;break; } //@line 41 "src/read.cpp"
 case 145: 
 var $828=$825; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i85)>>2)]=$828; //@line 71 "src/read.cpp"
 var $829=__Znwj(12); //@line 42 "src/read.cpp"
 var $830=(($829+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $831=$830; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($831)>>2)]=$821; //@line 6 "inc/pcdecoder.inl"
 var $832=(($829+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $833=$832; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($833)>>2)]=$rm_i85; //@line 6 "inc/pcdecoder.inl"
 var $834=((($822)+(1))|0); //@line 10 "inc/front.h"
 var $835=((($823)+(1))|0); //@line 10 "inc/front.h"
 var $836=(Math_imul($834,$835)|0); //@line 10 "inc/front.h"
 var $837=((($822)+(2))|0); //@line 9 "inc/front.h"
 var $838=((($837)+($836))|0); //@line 9 "inc/front.h"
 var $839=((($838)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i92=$839;label=146;break; //@line 45 "inc/front.h"
 case 146: 
 var $storemerge_i_i_i92;
 var $841=((($storemerge_i_i_i92)+(1))|0); //@line 45 "inc/front.h"
 var $842=$storemerge_i_i_i92&$841; //@line 45 "inc/front.h"
 var $843=($842|0)==0; //@line 45 "inc/front.h"
 if($843){label=148;break;}else{label=147;break;} //@line 45 "inc/front.h"
 case 147: 
 var $845=$storemerge_i_i_i92|$841; //@line 45 "inc/front.h"
 var $storemerge_i_i_i92=$845;label=146;break; //@line 45 "inc/front.h"
 case 148: 
 var $846$0=_llvm_umul_with_overflow_i32($841,4);
 var $846$1=tempRet0;
 var $847=$846$1;
 var $848=$846$0;
 var $849=($847?-1:$848); //@line 9 "inc/front.h"
 var $850=(function() { try { __THREW__ = 0; return __Znwj($849) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=152;break; } else { label=149;break; }
 case 149: 
 var $852$0 = ___cxa_find_matching_catch(-1, -1); var $852$1 = tempRet0;
 var $853=$852$1;
 var $854=($853|0)<0;
 if($854){label=150;break;}else{label=151;break;}
 case 150: 
 var $856=$852$0;
 ___cxa_call_unexpected($856);
 throw "Reached an unreachable!";
 case 151: 
 ___resumeException($852$0)
 case 152: 
 var $858=$850; //@line 9 "inc/front.h"
 var $f_i87_sroa_55_0=0;var $_01252=$836;label=153;break; //@line 22 "inc/front.h"
 case 153: 
 var $_01252;
 var $f_i87_sroa_55_0;
 var $860=((($f_i87_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $861=$f_i87_sroa_55_0&$storemerge_i_i_i92; //@line 23 "inc/front.h"
 var $862=(($858+($861<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($862)>>2)]=0; //@line 23 "inc/front.h"
 var $863=((($_01252)-(1))|0); //@line 23 "inc/front.h"
 var $864=($863|0)==0; //@line 23 "inc/front.h"
 if($864){label=154;break;}else{var $f_i87_sroa_55_0=$860;var $_01252=$863;label=153;break;} //@line 23 "inc/front.h"
 case 154: 
 var $865=(($829+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $866=$865; //@line 25 "inc/pcdecoder.inl"
 var $867=(($829+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $868=$867; //@line 25 "inc/pcdecoder.inl"
 var $z_i90_0=0;var $f_i87_sroa_55_1=$860;var $_01243=$_01012;label=155;break; //@line 47 "src/read.cpp"
 case 155: 
 var $_01243;
 var $f_i87_sroa_55_1;
 var $z_i90_0;
 var $870=($z_i90_0>>>0)<($824>>>0); //@line 47 "src/read.cpp"
 if($870){var $f_i87_sroa_55_2=$f_i87_sroa_55_1;var $_01257=$834;label=156;break;}else{label=172;break;} //@line 47 "src/read.cpp"
 case 156: 
 var $_01257;
 var $f_i87_sroa_55_2;
 var $872=((($f_i87_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $873=$f_i87_sroa_55_2&$storemerge_i_i_i92; //@line 23 "inc/front.h"
 var $874=(($858+($873<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($874)>>2)]=0; //@line 23 "inc/front.h"
 var $875=((($_01257)-(1))|0); //@line 23 "inc/front.h"
 var $876=($875|0)==0; //@line 23 "inc/front.h"
 if($876){var $y_i89_0=0;var $f_i87_sroa_55_3=$872;var $_11244=$_01243;label=157;break;}else{var $f_i87_sroa_55_2=$872;var $_01257=$875;label=156;break;} //@line 23 "inc/front.h"
 case 157: 
 var $_11244;
 var $f_i87_sroa_55_3;
 var $y_i89_0;
 var $877=($y_i89_0>>>0)<($823>>>0); //@line 48 "src/read.cpp"
 if($877){var $f_i87_sroa_55_4=$f_i87_sroa_55_3;var $_01263=1;label=158;break;}else{label=171;break;} //@line 48 "src/read.cpp"
 case 158: 
 var $_01263;
 var $f_i87_sroa_55_4;
 var $879=((($f_i87_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $880=$f_i87_sroa_55_4&$storemerge_i_i_i92; //@line 23 "inc/front.h"
 var $881=(($858+($880<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($881)>>2)]=0; //@line 23 "inc/front.h"
 var $882=((($_01263)-(1))|0); //@line 23 "inc/front.h"
 var $883=($882|0)==0; //@line 23 "inc/front.h"
 if($883){var $x_i88_0=0;var $f_i87_sroa_55_5=$879;var $_21245=$_11244;label=159;break;}else{var $f_i87_sroa_55_4=$879;var $_01263=$882;label=158;break;} //@line 23 "inc/front.h"
 case 159: 
 var $_21245;
 var $f_i87_sroa_55_5;
 var $x_i88_0;
 var $884=($x_i88_0>>>0)<($822>>>0); //@line 49 "src/read.cpp"
 if($884){label=160;break;}else{label=170;break;} //@line 49 "src/read.cpp"
 case 160: 
 var $886=((($f_i87_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $887=$886&$storemerge_i_i_i92; //@line 16 "inc/front.h"
 var $888=(($858+($887<<2))|0); //@line 16 "inc/front.h"
 var $889=HEAPF32[(($888)>>2)]; //@line 59 "src/read.cpp"
 var $890=((($f_i87_sroa_55_5)-($834))|0); //@line 16 "inc/front.h"
 var $891=((($890)-($836))|0); //@line 16 "inc/front.h"
 var $892=$891&$storemerge_i_i_i92; //@line 16 "inc/front.h"
 var $893=(($858+($892<<2))|0); //@line 16 "inc/front.h"
 var $894=HEAPF32[(($893)>>2)]; //@line 59 "src/read.cpp"
 var $895=$890&$storemerge_i_i_i92; //@line 16 "inc/front.h"
 var $896=(($858+($895<<2))|0); //@line 16 "inc/front.h"
 var $897=HEAPF32[(($896)>>2)]; //@line 60 "src/read.cpp"
 var $898=((($886)-($836))|0); //@line 16 "inc/front.h"
 var $899=$898&$storemerge_i_i_i92; //@line 16 "inc/front.h"
 var $900=(($858+($899<<2))|0); //@line 16 "inc/front.h"
 var $901=HEAPF32[(($900)>>2)]; //@line 60 "src/read.cpp"
 var $902=((($f_i87_sroa_55_5)-($836))|0); //@line 16 "inc/front.h"
 var $903=$902&$storemerge_i_i_i92; //@line 16 "inc/front.h"
 var $904=(($858+($903<<2))|0); //@line 16 "inc/front.h"
 var $905=HEAPF32[(($904)>>2)]; //@line 61 "src/read.cpp"
 var $906=((($886)-($834))|0); //@line 16 "inc/front.h"
 var $907=$906&$storemerge_i_i_i92; //@line 16 "inc/front.h"
 var $908=(($858+($907<<2))|0); //@line 16 "inc/front.h"
 var $909=HEAPF32[(($908)>>2)]; //@line 61 "src/read.cpp"
 var $910=((($906)-($836))|0); //@line 16 "inc/front.h"
 var $911=$910&$storemerge_i_i_i92; //@line 16 "inc/front.h"
 var $912=(($858+($911<<2))|0); //@line 16 "inc/front.h"
 var $913=($889)-($894); //@line 59 "src/read.cpp"
 var $914=($913)+($897); //@line 60 "src/read.cpp"
 var $915=($914)-($901); //@line 60 "src/read.cpp"
 var $916=($915)+($905); //@line 61 "src/read.cpp"
 var $917=($916)-($909); //@line 61 "src/read.cpp"
 var $918=HEAPF32[(($912)>>2)]; //@line 62 "src/read.cpp"
 var $919=($917)+($918); //@line 62 "src/read.cpp"
 var $920=(HEAPF32[((tempDoublePtr)>>2)]=$919,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $921=$920^-1; //@line 38 "inc/pcmap.h"
 var $922=$921>>>26; //@line 39 "inc/pcmap.h"
 var $923=$921>>31; //@line 40 "inc/pcmap.h"
 var $924=$923>>>27; //@line 40 "inc/pcmap.h"
 var $925=$922^$924; //@line 40 "inc/pcmap.h"
 var $926=HEAP32[(($866)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $927=HEAP32[(($868)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $928=HEAP32[(($927)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$21$0=4;
 var $$etemp$21$1=0;

 var $$etemp$22$0=4;
 var $$etemp$22$1=0;

 var $929=$928; //@line 25 "src/rcdecoder.cpp"
 var $930=HEAP32[(($929)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $931=(($930+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $932=HEAP32[(($931)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $933=(($926+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$932]($928,$933) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=161;break; } else { label=168;break; }
 case 161: 
 var $934=(($926+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $935=HEAP32[(($934)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $936=(($926+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $937=HEAP32[(($936)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $938=((($935)-($937))|0); //@line 26 "src/rcdecoder.cpp"
 var $939=HEAP32[(($933)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $940=(((($938>>>0))/(($939>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i80)>>2)]=$940; //@line 26 "src/rcdecoder.cpp"
 var $941=$928; //@line 27 "src/rcdecoder.cpp"
 var $942=HEAP32[(($941)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $943=(($942+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $944=HEAP32[(($943)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $945=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$944]($928,$l_i_i_i80,$r_i_i_i81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=162;break; } else { label=168;break; }
 case 162: 
 var $946=HEAP32[(($933)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $947=HEAP32[(($l_i_i_i80)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $948=(Math_imul($946,$947)|0); //@line 28 "src/rcdecoder.cpp"
 var $949=HEAP32[(($936)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $950=((($949)+($948))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($936)>>2)]=$950; //@line 28 "src/rcdecoder.cpp"
 var $951=HEAP32[(($r_i_i_i81)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $952=(Math_imul($946,$951)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($933)>>2)]=$952; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($926) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=163;break; } else { label=168;break; }
 case 163: 
 var $$etemp$23$0=4;
 var $$etemp$23$1=0;

 var $$etemp$24$0=4;
 var $$etemp$24$1=0;

 var $953=((($925)+($945))|0); //@line 25 "inc/pcdecoder.inl"
 var $954=((($953)-(63))|0); //@line 25 "inc/pcdecoder.inl"
 var $955=$954>>>5; //@line 48 "inc/pcmap.h"
 var $956=(((-$955))|0); //@line 48 "inc/pcmap.h"
 var $957=$956>>>27; //@line 48 "inc/pcmap.h"
 var $958=$957^$954; //@line 48 "inc/pcmap.h"
 var $959=$958<<26; //@line 50 "inc/pcmap.h"
 var $960=$959^-67108864; //@line 50 "inc/pcmap.h"
 var $961=(HEAP32[((tempDoublePtr)>>2)]=$960,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $962=(($_21245+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21245)>>2)]=$961; //@line 65 "src/read.cpp"
 var $f_i87_sroa_55_6=$f_i87_sroa_55_5;var $_01274=1;label=164;break; //@line 22 "inc/front.h"
 case 164: 
 var $_01274;
 var $f_i87_sroa_55_6;
 var $964=((($f_i87_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $965=$f_i87_sroa_55_6&$storemerge_i_i_i92; //@line 23 "inc/front.h"
 var $966=(($858+($965<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($966)>>2)]=$961; //@line 23 "inc/front.h"
 var $967=((($_01274)-(1))|0); //@line 23 "inc/front.h"
 var $968=($967|0)==0; //@line 23 "inc/front.h"
 if($968){label=165;break;}else{var $f_i87_sroa_55_6=$964;var $_01274=$967;label=164;break;} //@line 23 "inc/front.h"
 case 165: 
 var $969=((($x_i88_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i88_0=$969;var $f_i87_sroa_55_5=$964;var $_21245=$962;label=159;break; //@line 49 "src/read.cpp"
 case 166: 
 var $971$0 = ___cxa_find_matching_catch(-1, -1); var $971$1 = tempRet0;
 var $972=$971$0;
 var $973=$971$1;
 var $974=($825|0)==0;
 if($974){var $_01238=$973;var $_01239=$972;label=178;break;}else{label=167;break;}
 case 167: 
 _free($825);
 var $_01238=$973;var $_01239=$972;label=178;break;
 case 168: 
 var $977$0 = ___cxa_find_matching_catch(-1, -1); var $977$1 = tempRet0;
 var $978=$977$0;
 var $979=$977$1;
 var $980=($850|0)==0; //@line 11 "inc/front.h"
 if($980){var $_01238=$979;var $_01239=$978;label=178;break;}else{label=169;break;} //@line 11 "inc/front.h"
 case 169: 
 _free($850);
 var $_01238=$979;var $_01239=$978;label=178;break; //@line 11 "inc/front.h"
 case 170: 
 var $982=((($y_i89_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i89_0=$982;var $f_i87_sroa_55_3=$f_i87_sroa_55_5;var $_11244=$_21245;label=157;break; //@line 48 "src/read.cpp"
 case 171: 
 var $984=((($z_i90_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i90_0=$984;var $f_i87_sroa_55_1=$f_i87_sroa_55_3;var $_01243=$_11244;label=155;break; //@line 47 "src/read.cpp"
 case 172: 
 var $986=($829|0)==0; //@line 69 "src/read.cpp"
 if($986){label=174;break;}else{label=173;break;} //@line 69 "src/read.cpp"
 case 173: 
 _free($829);
 label=174;break; //@line 69 "src/read.cpp"
 case 174: 
 var $988=HEAP32[(($rm_i85)>>2)]; //@line 70 "src/read.cpp"
 var $989=($988|0)==0; //@line 70 "src/read.cpp"
 if($989){label=176;break;}else{label=175;break;} //@line 70 "src/read.cpp"
 case 175: 
 var $991=$988; //@line 70 "src/read.cpp"
 var $992=HEAP32[(($991)>>2)]; //@line 70 "src/read.cpp"
 var $993=(($992+4)|0); //@line 70 "src/read.cpp"
 var $994=HEAP32[(($993)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$994]($988); //@line 70 "src/read.cpp"
 label=176;break; //@line 70 "src/read.cpp"
 case 176: 
 var $996=($850|0)==0; //@line 11 "inc/front.h"
 if($996){label=1257;break;}else{label=177;break;} //@line 11 "inc/front.h"
 case 177: 
 _free($850);
 label=1257;break; //@line 11 "inc/front.h"
 case 178: 
 var $_01239;
 var $_01238;
 var $997$0=$_01239;
 var $997$1=0;
 var $998$0=$997$0;
 var $998$1=$_01238;
 ___resumeException($998$0) //@line 71 "src/read.cpp"
 case 179: 
 var $1000=HEAP32[(($3)>>2)]; //@line 172 "src/read.cpp"
 var $1001=HEAP32[(($4)>>2)]; //@line 172 "src/read.cpp"
 var $1002=HEAP32[(($5)>>2)]; //@line 172 "src/read.cpp"
 var $1003=HEAP32[(($6)>>2)]; //@line 172 "src/read.cpp"
 var $$etemp$25$0=4;
 var $$etemp$25$1=0;

 var $1004=__Znwj(48); //@line 41 "src/read.cpp"
 var $1005=$1004; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1005,0,255,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=180;break; } else { label=201;break; } //@line 41 "src/read.cpp"
 case 180: 
 var $1007=$1004; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i111)>>2)]=$1007; //@line 71 "src/read.cpp"
 var $1008=__Znwj(12); //@line 42 "src/read.cpp"
 var $1009=(($1008+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $1010=$1009; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($1010)>>2)]=$1000; //@line 6 "inc/pcdecoder.inl"
 var $1011=(($1008+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $1012=$1011; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($1012)>>2)]=$rm_i111; //@line 6 "inc/pcdecoder.inl"
 var $1013=((($1001)+(1))|0); //@line 10 "inc/front.h"
 var $1014=((($1002)+(1))|0); //@line 10 "inc/front.h"
 var $1015=(Math_imul($1013,$1014)|0); //@line 10 "inc/front.h"
 var $1016=((($1001)+(2))|0); //@line 9 "inc/front.h"
 var $1017=((($1016)+($1015))|0); //@line 9 "inc/front.h"
 var $1018=((($1017)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i118=$1018;label=181;break; //@line 45 "inc/front.h"
 case 181: 
 var $storemerge_i_i_i118;
 var $1020=((($storemerge_i_i_i118)+(1))|0); //@line 45 "inc/front.h"
 var $1021=$storemerge_i_i_i118&$1020; //@line 45 "inc/front.h"
 var $1022=($1021|0)==0; //@line 45 "inc/front.h"
 if($1022){label=183;break;}else{label=182;break;} //@line 45 "inc/front.h"
 case 182: 
 var $1024=$storemerge_i_i_i118|$1020; //@line 45 "inc/front.h"
 var $storemerge_i_i_i118=$1024;label=181;break; //@line 45 "inc/front.h"
 case 183: 
 var $1025$0=_llvm_umul_with_overflow_i32($1020,4);
 var $1025$1=tempRet0;
 var $1026=$1025$1;
 var $1027=$1025$0;
 var $1028=($1026?-1:$1027); //@line 9 "inc/front.h"
 var $1029=(function() { try { __THREW__ = 0; return __Znwj($1028) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { label=184;break; }
 case 184: 
 var $1031$0 = ___cxa_find_matching_catch(-1, -1); var $1031$1 = tempRet0;
 var $1032=$1031$1;
 var $1033=($1032|0)<0;
 if($1033){label=185;break;}else{label=186;break;}
 case 185: 
 var $1035=$1031$0;
 ___cxa_call_unexpected($1035);
 throw "Reached an unreachable!";
 case 186: 
 ___resumeException($1031$0)
 case 187: 
 var $1037=$1029; //@line 9 "inc/front.h"
 var $f_i113_sroa_55_0=0;var $_01309=$1015;label=188;break; //@line 22 "inc/front.h"
 case 188: 
 var $_01309;
 var $f_i113_sroa_55_0;
 var $1039=((($f_i113_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1040=$f_i113_sroa_55_0&$storemerge_i_i_i118; //@line 23 "inc/front.h"
 var $1041=(($1037+($1040<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1041)>>2)]=0; //@line 23 "inc/front.h"
 var $1042=((($_01309)-(1))|0); //@line 23 "inc/front.h"
 var $1043=($1042|0)==0; //@line 23 "inc/front.h"
 if($1043){label=189;break;}else{var $f_i113_sroa_55_0=$1039;var $_01309=$1042;label=188;break;} //@line 23 "inc/front.h"
 case 189: 
 var $1044=(($1008+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $1045=$1044; //@line 25 "inc/pcdecoder.inl"
 var $1046=(($1008+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $1047=$1046; //@line 25 "inc/pcdecoder.inl"
 var $z_i116_0=0;var $f_i113_sroa_55_1=$1039;var $_01297=$_01012;label=190;break; //@line 47 "src/read.cpp"
 case 190: 
 var $_01297;
 var $f_i113_sroa_55_1;
 var $z_i116_0;
 var $1049=($z_i116_0>>>0)<($1003>>>0); //@line 47 "src/read.cpp"
 if($1049){var $f_i113_sroa_55_2=$f_i113_sroa_55_1;var $_01311=$1013;label=191;break;}else{label=207;break;} //@line 47 "src/read.cpp"
 case 191: 
 var $_01311;
 var $f_i113_sroa_55_2;
 var $1051=((($f_i113_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1052=$f_i113_sroa_55_2&$storemerge_i_i_i118; //@line 23 "inc/front.h"
 var $1053=(($1037+($1052<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1053)>>2)]=0; //@line 23 "inc/front.h"
 var $1054=((($_01311)-(1))|0); //@line 23 "inc/front.h"
 var $1055=($1054|0)==0; //@line 23 "inc/front.h"
 if($1055){var $y_i115_0=0;var $f_i113_sroa_55_3=$1051;var $_11298=$_01297;label=192;break;}else{var $f_i113_sroa_55_2=$1051;var $_01311=$1054;label=191;break;} //@line 23 "inc/front.h"
 case 192: 
 var $_11298;
 var $f_i113_sroa_55_3;
 var $y_i115_0;
 var $1056=($y_i115_0>>>0)<($1002>>>0); //@line 48 "src/read.cpp"
 if($1056){var $f_i113_sroa_55_4=$f_i113_sroa_55_3;var $_01312=1;label=193;break;}else{label=206;break;} //@line 48 "src/read.cpp"
 case 193: 
 var $_01312;
 var $f_i113_sroa_55_4;
 var $1058=((($f_i113_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1059=$f_i113_sroa_55_4&$storemerge_i_i_i118; //@line 23 "inc/front.h"
 var $1060=(($1037+($1059<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1060)>>2)]=0; //@line 23 "inc/front.h"
 var $1061=((($_01312)-(1))|0); //@line 23 "inc/front.h"
 var $1062=($1061|0)==0; //@line 23 "inc/front.h"
 if($1062){var $x_i114_0=0;var $f_i113_sroa_55_5=$1058;var $_21299=$_11298;label=194;break;}else{var $f_i113_sroa_55_4=$1058;var $_01312=$1061;label=193;break;} //@line 23 "inc/front.h"
 case 194: 
 var $_21299;
 var $f_i113_sroa_55_5;
 var $x_i114_0;
 var $1063=($x_i114_0>>>0)<($1001>>>0); //@line 49 "src/read.cpp"
 if($1063){label=195;break;}else{label=205;break;} //@line 49 "src/read.cpp"
 case 195: 
 var $1065=((($f_i113_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1066=$1065&$storemerge_i_i_i118; //@line 16 "inc/front.h"
 var $1067=(($1037+($1066<<2))|0); //@line 16 "inc/front.h"
 var $1068=HEAPF32[(($1067)>>2)]; //@line 59 "src/read.cpp"
 var $1069=((($f_i113_sroa_55_5)-($1013))|0); //@line 16 "inc/front.h"
 var $1070=((($1069)-($1015))|0); //@line 16 "inc/front.h"
 var $1071=$1070&$storemerge_i_i_i118; //@line 16 "inc/front.h"
 var $1072=(($1037+($1071<<2))|0); //@line 16 "inc/front.h"
 var $1073=HEAPF32[(($1072)>>2)]; //@line 59 "src/read.cpp"
 var $1074=$1069&$storemerge_i_i_i118; //@line 16 "inc/front.h"
 var $1075=(($1037+($1074<<2))|0); //@line 16 "inc/front.h"
 var $1076=HEAPF32[(($1075)>>2)]; //@line 60 "src/read.cpp"
 var $1077=((($1065)-($1015))|0); //@line 16 "inc/front.h"
 var $1078=$1077&$storemerge_i_i_i118; //@line 16 "inc/front.h"
 var $1079=(($1037+($1078<<2))|0); //@line 16 "inc/front.h"
 var $1080=HEAPF32[(($1079)>>2)]; //@line 60 "src/read.cpp"
 var $1081=((($f_i113_sroa_55_5)-($1015))|0); //@line 16 "inc/front.h"
 var $1082=$1081&$storemerge_i_i_i118; //@line 16 "inc/front.h"
 var $1083=(($1037+($1082<<2))|0); //@line 16 "inc/front.h"
 var $1084=HEAPF32[(($1083)>>2)]; //@line 61 "src/read.cpp"
 var $1085=((($1065)-($1013))|0); //@line 16 "inc/front.h"
 var $1086=$1085&$storemerge_i_i_i118; //@line 16 "inc/front.h"
 var $1087=(($1037+($1086<<2))|0); //@line 16 "inc/front.h"
 var $1088=HEAPF32[(($1087)>>2)]; //@line 61 "src/read.cpp"
 var $1089=((($1085)-($1015))|0); //@line 16 "inc/front.h"
 var $1090=$1089&$storemerge_i_i_i118; //@line 16 "inc/front.h"
 var $1091=(($1037+($1090<<2))|0); //@line 16 "inc/front.h"
 var $1092=($1068)-($1073); //@line 59 "src/read.cpp"
 var $1093=($1092)+($1076); //@line 60 "src/read.cpp"
 var $1094=($1093)-($1080); //@line 60 "src/read.cpp"
 var $1095=($1094)+($1084); //@line 61 "src/read.cpp"
 var $1096=($1095)-($1088); //@line 61 "src/read.cpp"
 var $1097=HEAPF32[(($1091)>>2)]; //@line 62 "src/read.cpp"
 var $1098=($1096)+($1097); //@line 62 "src/read.cpp"
 var $1099=(HEAPF32[((tempDoublePtr)>>2)]=$1098,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1100=$1099^-1; //@line 38 "inc/pcmap.h"
 var $1101=$1100>>>25; //@line 39 "inc/pcmap.h"
 var $1102=$1100>>31; //@line 40 "inc/pcmap.h"
 var $1103=$1102>>>26; //@line 40 "inc/pcmap.h"
 var $1104=$1101^$1103; //@line 40 "inc/pcmap.h"
 var $1105=HEAP32[(($1045)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $1106=HEAP32[(($1047)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $1107=HEAP32[(($1106)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$26$0=4;
 var $$etemp$26$1=0;

 var $$etemp$27$0=4;
 var $$etemp$27$1=0;

 var $1108=$1107; //@line 25 "src/rcdecoder.cpp"
 var $1109=HEAP32[(($1108)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1110=(($1109+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1111=HEAP32[(($1110)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1112=(($1105+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1111]($1107,$1112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { label=203;break; }
 case 196: 
 var $1113=(($1105+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1114=HEAP32[(($1113)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1115=(($1105+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1116=HEAP32[(($1115)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1117=((($1114)-($1116))|0); //@line 26 "src/rcdecoder.cpp"
 var $1118=HEAP32[(($1112)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1119=(((($1117>>>0))/(($1118>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i106)>>2)]=$1119; //@line 26 "src/rcdecoder.cpp"
 var $1120=$1107; //@line 27 "src/rcdecoder.cpp"
 var $1121=HEAP32[(($1120)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1122=(($1121+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1123=HEAP32[(($1122)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1123]($1107,$l_i_i_i106,$r_i_i_i107) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=197;break; } else { label=203;break; }
 case 197: 
 var $1125=HEAP32[(($1112)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1126=HEAP32[(($l_i_i_i106)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1127=(Math_imul($1125,$1126)|0); //@line 28 "src/rcdecoder.cpp"
 var $1128=HEAP32[(($1115)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1129=((($1128)+($1127))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1115)>>2)]=$1129; //@line 28 "src/rcdecoder.cpp"
 var $1130=HEAP32[(($r_i_i_i107)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1131=(Math_imul($1125,$1130)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1112)>>2)]=$1131; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=198;break; } else { label=203;break; }
 case 198: 
 var $$etemp$28$0=4;
 var $$etemp$28$1=0;

 var $$etemp$29$0=4;
 var $$etemp$29$1=0;

 var $1132=((($1104)+($1124))|0); //@line 25 "inc/pcdecoder.inl"
 var $1133=((($1132)-(127))|0); //@line 25 "inc/pcdecoder.inl"
 var $1134=$1133>>>6; //@line 48 "inc/pcmap.h"
 var $1135=(((-$1134))|0); //@line 48 "inc/pcmap.h"
 var $1136=$1135>>>26; //@line 48 "inc/pcmap.h"
 var $1137=$1136^$1133; //@line 48 "inc/pcmap.h"
 var $1138=$1137<<25; //@line 50 "inc/pcmap.h"
 var $1139=$1138^-33554432; //@line 50 "inc/pcmap.h"
 var $1140=(HEAP32[((tempDoublePtr)>>2)]=$1139,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $1141=(($_21299+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21299)>>2)]=$1140; //@line 65 "src/read.cpp"
 var $f_i113_sroa_55_6=$f_i113_sroa_55_5;var $_01310=1;label=199;break; //@line 22 "inc/front.h"
 case 199: 
 var $_01310;
 var $f_i113_sroa_55_6;
 var $1143=((($f_i113_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1144=$f_i113_sroa_55_6&$storemerge_i_i_i118; //@line 23 "inc/front.h"
 var $1145=(($1037+($1144<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1145)>>2)]=$1140; //@line 23 "inc/front.h"
 var $1146=((($_01310)-(1))|0); //@line 23 "inc/front.h"
 var $1147=($1146|0)==0; //@line 23 "inc/front.h"
 if($1147){label=200;break;}else{var $f_i113_sroa_55_6=$1143;var $_01310=$1146;label=199;break;} //@line 23 "inc/front.h"
 case 200: 
 var $1148=((($x_i114_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i114_0=$1148;var $f_i113_sroa_55_5=$1143;var $_21299=$1141;label=194;break; //@line 49 "src/read.cpp"
 case 201: 
 var $1150$0 = ___cxa_find_matching_catch(-1, -1); var $1150$1 = tempRet0;
 var $1151=$1150$0;
 var $1152=$1150$1;
 var $1153=($1004|0)==0;
 if($1153){var $_01295=$1152;var $_01296=$1151;label=213;break;}else{label=202;break;}
 case 202: 
 _free($1004);
 var $_01295=$1152;var $_01296=$1151;label=213;break;
 case 203: 
 var $1156$0 = ___cxa_find_matching_catch(-1, -1); var $1156$1 = tempRet0;
 var $1157=$1156$0;
 var $1158=$1156$1;
 var $1159=($1029|0)==0; //@line 11 "inc/front.h"
 if($1159){var $_01295=$1158;var $_01296=$1157;label=213;break;}else{label=204;break;} //@line 11 "inc/front.h"
 case 204: 
 _free($1029);
 var $_01295=$1158;var $_01296=$1157;label=213;break; //@line 11 "inc/front.h"
 case 205: 
 var $1161=((($y_i115_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i115_0=$1161;var $f_i113_sroa_55_3=$f_i113_sroa_55_5;var $_11298=$_21299;label=192;break; //@line 48 "src/read.cpp"
 case 206: 
 var $1163=((($z_i116_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i116_0=$1163;var $f_i113_sroa_55_1=$f_i113_sroa_55_3;var $_01297=$_11298;label=190;break; //@line 47 "src/read.cpp"
 case 207: 
 var $1165=($1008|0)==0; //@line 69 "src/read.cpp"
 if($1165){label=209;break;}else{label=208;break;} //@line 69 "src/read.cpp"
 case 208: 
 _free($1008);
 label=209;break; //@line 69 "src/read.cpp"
 case 209: 
 var $1167=HEAP32[(($rm_i111)>>2)]; //@line 70 "src/read.cpp"
 var $1168=($1167|0)==0; //@line 70 "src/read.cpp"
 if($1168){label=211;break;}else{label=210;break;} //@line 70 "src/read.cpp"
 case 210: 
 var $1170=$1167; //@line 70 "src/read.cpp"
 var $1171=HEAP32[(($1170)>>2)]; //@line 70 "src/read.cpp"
 var $1172=(($1171+4)|0); //@line 70 "src/read.cpp"
 var $1173=HEAP32[(($1172)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1173]($1167); //@line 70 "src/read.cpp"
 label=211;break; //@line 70 "src/read.cpp"
 case 211: 
 var $1175=($1029|0)==0; //@line 11 "inc/front.h"
 if($1175){label=1257;break;}else{label=212;break;} //@line 11 "inc/front.h"
 case 212: 
 _free($1029);
 label=1257;break; //@line 11 "inc/front.h"
 case 213: 
 var $_01296;
 var $_01295;
 var $1176$0=$_01296;
 var $1176$1=0;
 var $1177$0=$1176$0;
 var $1177$1=$_01295;
 ___resumeException($1177$0) //@line 71 "src/read.cpp"
 case 214: 
 var $1179=HEAP32[(($3)>>2)]; //@line 173 "src/read.cpp"
 var $1180=HEAP32[(($4)>>2)]; //@line 173 "src/read.cpp"
 var $1181=HEAP32[(($5)>>2)]; //@line 173 "src/read.cpp"
 var $1182=HEAP32[(($6)>>2)]; //@line 173 "src/read.cpp"
 var $$etemp$30$0=4;
 var $$etemp$30$1=0;

 var $1183=__Znwj(48); //@line 41 "src/read.cpp"
 var $1184=$1183; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1184,0,511,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=215;break; } else { label=236;break; } //@line 41 "src/read.cpp"
 case 215: 
 var $1186=$1183; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i137)>>2)]=$1186; //@line 71 "src/read.cpp"
 var $1187=__Znwj(12); //@line 42 "src/read.cpp"
 var $1188=(($1187+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $1189=$1188; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($1189)>>2)]=$1179; //@line 6 "inc/pcdecoder.inl"
 var $1190=(($1187+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $1191=$1190; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($1191)>>2)]=$rm_i137; //@line 6 "inc/pcdecoder.inl"
 var $1192=((($1180)+(1))|0); //@line 10 "inc/front.h"
 var $1193=((($1181)+(1))|0); //@line 10 "inc/front.h"
 var $1194=(Math_imul($1192,$1193)|0); //@line 10 "inc/front.h"
 var $1195=((($1180)+(2))|0); //@line 9 "inc/front.h"
 var $1196=((($1195)+($1194))|0); //@line 9 "inc/front.h"
 var $1197=((($1196)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i144=$1197;label=216;break; //@line 45 "inc/front.h"
 case 216: 
 var $storemerge_i_i_i144;
 var $1199=((($storemerge_i_i_i144)+(1))|0); //@line 45 "inc/front.h"
 var $1200=$storemerge_i_i_i144&$1199; //@line 45 "inc/front.h"
 var $1201=($1200|0)==0; //@line 45 "inc/front.h"
 if($1201){label=218;break;}else{label=217;break;} //@line 45 "inc/front.h"
 case 217: 
 var $1203=$storemerge_i_i_i144|$1199; //@line 45 "inc/front.h"
 var $storemerge_i_i_i144=$1203;label=216;break; //@line 45 "inc/front.h"
 case 218: 
 var $1204$0=_llvm_umul_with_overflow_i32($1199,4);
 var $1204$1=tempRet0;
 var $1205=$1204$1;
 var $1206=$1204$0;
 var $1207=($1205?-1:$1206); //@line 9 "inc/front.h"
 var $1208=(function() { try { __THREW__ = 0; return __Znwj($1207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=222;break; } else { label=219;break; }
 case 219: 
 var $1210$0 = ___cxa_find_matching_catch(-1, -1); var $1210$1 = tempRet0;
 var $1211=$1210$1;
 var $1212=($1211|0)<0;
 if($1212){label=220;break;}else{label=221;break;}
 case 220: 
 var $1214=$1210$0;
 ___cxa_call_unexpected($1214);
 throw "Reached an unreachable!";
 case 221: 
 ___resumeException($1210$0)
 case 222: 
 var $1216=$1208; //@line 9 "inc/front.h"
 var $_01303=$1194;var $f_i139_sroa_55_0=0;label=223;break; //@line 22 "inc/front.h"
 case 223: 
 var $f_i139_sroa_55_0;
 var $_01303;
 var $1218=((($f_i139_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1219=$f_i139_sroa_55_0&$storemerge_i_i_i144; //@line 23 "inc/front.h"
 var $1220=(($1216+($1219<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1220)>>2)]=0; //@line 23 "inc/front.h"
 var $1221=((($_01303)-(1))|0); //@line 23 "inc/front.h"
 var $1222=($1221|0)==0; //@line 23 "inc/front.h"
 if($1222){label=224;break;}else{var $_01303=$1221;var $f_i139_sroa_55_0=$1218;label=223;break;} //@line 23 "inc/front.h"
 case 224: 
 var $1223=(($1187+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $1224=$1223; //@line 25 "inc/pcdecoder.inl"
 var $1225=(($1187+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $1226=$1225; //@line 25 "inc/pcdecoder.inl"
 var $_01304=$_01012;var $f_i139_sroa_55_1=$1218;var $z_i142_0=0;label=225;break; //@line 47 "src/read.cpp"
 case 225: 
 var $z_i142_0;
 var $f_i139_sroa_55_1;
 var $_01304;
 var $1228=($z_i142_0>>>0)<($1182>>>0); //@line 47 "src/read.cpp"
 if($1228){var $_01302=$1192;var $f_i139_sroa_55_2=$f_i139_sroa_55_1;label=226;break;}else{label=242;break;} //@line 47 "src/read.cpp"
 case 226: 
 var $f_i139_sroa_55_2;
 var $_01302;
 var $1230=((($f_i139_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1231=$f_i139_sroa_55_2&$storemerge_i_i_i144; //@line 23 "inc/front.h"
 var $1232=(($1216+($1231<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1232)>>2)]=0; //@line 23 "inc/front.h"
 var $1233=((($_01302)-(1))|0); //@line 23 "inc/front.h"
 var $1234=($1233|0)==0; //@line 23 "inc/front.h"
 if($1234){var $_11305=$_01304;var $f_i139_sroa_55_3=$1230;var $y_i141_0=0;label=227;break;}else{var $_01302=$1233;var $f_i139_sroa_55_2=$1230;label=226;break;} //@line 23 "inc/front.h"
 case 227: 
 var $y_i141_0;
 var $f_i139_sroa_55_3;
 var $_11305;
 var $1235=($y_i141_0>>>0)<($1181>>>0); //@line 48 "src/read.cpp"
 if($1235){var $_01301=1;var $f_i139_sroa_55_4=$f_i139_sroa_55_3;label=228;break;}else{label=241;break;} //@line 48 "src/read.cpp"
 case 228: 
 var $f_i139_sroa_55_4;
 var $_01301;
 var $1237=((($f_i139_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1238=$f_i139_sroa_55_4&$storemerge_i_i_i144; //@line 23 "inc/front.h"
 var $1239=(($1216+($1238<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1239)>>2)]=0; //@line 23 "inc/front.h"
 var $1240=((($_01301)-(1))|0); //@line 23 "inc/front.h"
 var $1241=($1240|0)==0; //@line 23 "inc/front.h"
 if($1241){var $_21306=$_11305;var $f_i139_sroa_55_5=$1237;var $x_i140_0=0;label=229;break;}else{var $_01301=$1240;var $f_i139_sroa_55_4=$1237;label=228;break;} //@line 23 "inc/front.h"
 case 229: 
 var $x_i140_0;
 var $f_i139_sroa_55_5;
 var $_21306;
 var $1242=($x_i140_0>>>0)<($1180>>>0); //@line 49 "src/read.cpp"
 if($1242){label=230;break;}else{label=240;break;} //@line 49 "src/read.cpp"
 case 230: 
 var $1244=((($f_i139_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1245=$1244&$storemerge_i_i_i144; //@line 16 "inc/front.h"
 var $1246=(($1216+($1245<<2))|0); //@line 16 "inc/front.h"
 var $1247=HEAPF32[(($1246)>>2)]; //@line 59 "src/read.cpp"
 var $1248=((($f_i139_sroa_55_5)-($1192))|0); //@line 16 "inc/front.h"
 var $1249=((($1248)-($1194))|0); //@line 16 "inc/front.h"
 var $1250=$1249&$storemerge_i_i_i144; //@line 16 "inc/front.h"
 var $1251=(($1216+($1250<<2))|0); //@line 16 "inc/front.h"
 var $1252=HEAPF32[(($1251)>>2)]; //@line 59 "src/read.cpp"
 var $1253=$1248&$storemerge_i_i_i144; //@line 16 "inc/front.h"
 var $1254=(($1216+($1253<<2))|0); //@line 16 "inc/front.h"
 var $1255=HEAPF32[(($1254)>>2)]; //@line 60 "src/read.cpp"
 var $1256=((($1244)-($1194))|0); //@line 16 "inc/front.h"
 var $1257=$1256&$storemerge_i_i_i144; //@line 16 "inc/front.h"
 var $1258=(($1216+($1257<<2))|0); //@line 16 "inc/front.h"
 var $1259=HEAPF32[(($1258)>>2)]; //@line 60 "src/read.cpp"
 var $1260=((($f_i139_sroa_55_5)-($1194))|0); //@line 16 "inc/front.h"
 var $1261=$1260&$storemerge_i_i_i144; //@line 16 "inc/front.h"
 var $1262=(($1216+($1261<<2))|0); //@line 16 "inc/front.h"
 var $1263=HEAPF32[(($1262)>>2)]; //@line 61 "src/read.cpp"
 var $1264=((($1244)-($1192))|0); //@line 16 "inc/front.h"
 var $1265=$1264&$storemerge_i_i_i144; //@line 16 "inc/front.h"
 var $1266=(($1216+($1265<<2))|0); //@line 16 "inc/front.h"
 var $1267=HEAPF32[(($1266)>>2)]; //@line 61 "src/read.cpp"
 var $1268=((($1264)-($1194))|0); //@line 16 "inc/front.h"
 var $1269=$1268&$storemerge_i_i_i144; //@line 16 "inc/front.h"
 var $1270=(($1216+($1269<<2))|0); //@line 16 "inc/front.h"
 var $1271=($1247)-($1252); //@line 59 "src/read.cpp"
 var $1272=($1271)+($1255); //@line 60 "src/read.cpp"
 var $1273=($1272)-($1259); //@line 60 "src/read.cpp"
 var $1274=($1273)+($1263); //@line 61 "src/read.cpp"
 var $1275=($1274)-($1267); //@line 61 "src/read.cpp"
 var $1276=HEAPF32[(($1270)>>2)]; //@line 62 "src/read.cpp"
 var $1277=($1275)+($1276); //@line 62 "src/read.cpp"
 var $1278=(HEAPF32[((tempDoublePtr)>>2)]=$1277,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1279=$1278^-1; //@line 38 "inc/pcmap.h"
 var $1280=$1279>>>24; //@line 39 "inc/pcmap.h"
 var $1281=$1279>>31; //@line 40 "inc/pcmap.h"
 var $1282=$1281>>>25; //@line 40 "inc/pcmap.h"
 var $1283=$1280^$1282; //@line 40 "inc/pcmap.h"
 var $1284=HEAP32[(($1224)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $1285=HEAP32[(($1226)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $1286=HEAP32[(($1285)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$31$0=4;
 var $$etemp$31$1=0;

 var $$etemp$32$0=4;
 var $$etemp$32$1=0;

 var $1287=$1286; //@line 25 "src/rcdecoder.cpp"
 var $1288=HEAP32[(($1287)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1289=(($1288+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1290=HEAP32[(($1289)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1291=(($1284+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1290]($1286,$1291) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=231;break; } else { label=238;break; }
 case 231: 
 var $1292=(($1284+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1293=HEAP32[(($1292)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1294=(($1284+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1295=HEAP32[(($1294)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1296=((($1293)-($1295))|0); //@line 26 "src/rcdecoder.cpp"
 var $1297=HEAP32[(($1291)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1298=(((($1296>>>0))/(($1297>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i132)>>2)]=$1298; //@line 26 "src/rcdecoder.cpp"
 var $1299=$1286; //@line 27 "src/rcdecoder.cpp"
 var $1300=HEAP32[(($1299)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1301=(($1300+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1302=HEAP32[(($1301)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1303=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1302]($1286,$l_i_i_i132,$r_i_i_i133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=232;break; } else { label=238;break; }
 case 232: 
 var $1304=HEAP32[(($1291)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1305=HEAP32[(($l_i_i_i132)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1306=(Math_imul($1304,$1305)|0); //@line 28 "src/rcdecoder.cpp"
 var $1307=HEAP32[(($1294)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1308=((($1307)+($1306))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1294)>>2)]=$1308; //@line 28 "src/rcdecoder.cpp"
 var $1309=HEAP32[(($r_i_i_i133)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1310=(Math_imul($1304,$1309)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1291)>>2)]=$1310; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1284) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=233;break; } else { label=238;break; }
 case 233: 
 var $$etemp$33$0=4;
 var $$etemp$33$1=0;

 var $$etemp$34$0=4;
 var $$etemp$34$1=0;

 var $1311=((($1283)+($1303))|0); //@line 25 "inc/pcdecoder.inl"
 var $1312=((($1311)-(255))|0); //@line 25 "inc/pcdecoder.inl"
 var $1313=$1312>>>7; //@line 48 "inc/pcmap.h"
 var $1314=(((-$1313))|0); //@line 48 "inc/pcmap.h"
 var $1315=$1314>>>25; //@line 48 "inc/pcmap.h"
 var $1316=$1315^$1312; //@line 48 "inc/pcmap.h"
 var $1317=$1316<<24; //@line 50 "inc/pcmap.h"
 var $1318=$1317^-16777216; //@line 50 "inc/pcmap.h"
 var $1319=(HEAP32[((tempDoublePtr)>>2)]=$1318,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $1320=(($_21306+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21306)>>2)]=$1319; //@line 65 "src/read.cpp"
 var $_01300=1;var $f_i139_sroa_55_6=$f_i139_sroa_55_5;label=234;break; //@line 22 "inc/front.h"
 case 234: 
 var $f_i139_sroa_55_6;
 var $_01300;
 var $1322=((($f_i139_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1323=$f_i139_sroa_55_6&$storemerge_i_i_i144; //@line 23 "inc/front.h"
 var $1324=(($1216+($1323<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1324)>>2)]=$1319; //@line 23 "inc/front.h"
 var $1325=((($_01300)-(1))|0); //@line 23 "inc/front.h"
 var $1326=($1325|0)==0; //@line 23 "inc/front.h"
 if($1326){label=235;break;}else{var $_01300=$1325;var $f_i139_sroa_55_6=$1322;label=234;break;} //@line 23 "inc/front.h"
 case 235: 
 var $1327=((($x_i140_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21306=$1320;var $f_i139_sroa_55_5=$1322;var $x_i140_0=$1327;label=229;break; //@line 49 "src/read.cpp"
 case 236: 
 var $1329$0 = ___cxa_find_matching_catch(-1, -1); var $1329$1 = tempRet0;
 var $1330=$1329$0;
 var $1331=$1329$1;
 var $1332=($1183|0)==0;
 if($1332){var $_01307=$1330;var $_01308=$1331;label=248;break;}else{label=237;break;}
 case 237: 
 _free($1183);
 var $_01307=$1330;var $_01308=$1331;label=248;break;
 case 238: 
 var $1335$0 = ___cxa_find_matching_catch(-1, -1); var $1335$1 = tempRet0;
 var $1336=$1335$0;
 var $1337=$1335$1;
 var $1338=($1208|0)==0; //@line 11 "inc/front.h"
 if($1338){var $_01307=$1336;var $_01308=$1337;label=248;break;}else{label=239;break;} //@line 11 "inc/front.h"
 case 239: 
 _free($1208);
 var $_01307=$1336;var $_01308=$1337;label=248;break; //@line 11 "inc/front.h"
 case 240: 
 var $1340=((($y_i141_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11305=$_21306;var $f_i139_sroa_55_3=$f_i139_sroa_55_5;var $y_i141_0=$1340;label=227;break; //@line 48 "src/read.cpp"
 case 241: 
 var $1342=((($z_i142_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01304=$_11305;var $f_i139_sroa_55_1=$f_i139_sroa_55_3;var $z_i142_0=$1342;label=225;break; //@line 47 "src/read.cpp"
 case 242: 
 var $1344=($1187|0)==0; //@line 69 "src/read.cpp"
 if($1344){label=244;break;}else{label=243;break;} //@line 69 "src/read.cpp"
 case 243: 
 _free($1187);
 label=244;break; //@line 69 "src/read.cpp"
 case 244: 
 var $1346=HEAP32[(($rm_i137)>>2)]; //@line 70 "src/read.cpp"
 var $1347=($1346|0)==0; //@line 70 "src/read.cpp"
 if($1347){label=246;break;}else{label=245;break;} //@line 70 "src/read.cpp"
 case 245: 
 var $1349=$1346; //@line 70 "src/read.cpp"
 var $1350=HEAP32[(($1349)>>2)]; //@line 70 "src/read.cpp"
 var $1351=(($1350+4)|0); //@line 70 "src/read.cpp"
 var $1352=HEAP32[(($1351)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1352]($1346); //@line 70 "src/read.cpp"
 label=246;break; //@line 70 "src/read.cpp"
 case 246: 
 var $1354=($1208|0)==0; //@line 11 "inc/front.h"
 if($1354){label=1257;break;}else{label=247;break;} //@line 11 "inc/front.h"
 case 247: 
 _free($1208);
 label=1257;break; //@line 11 "inc/front.h"
 case 248: 
 var $_01308;
 var $_01307;
 var $1355$0=$_01307;
 var $1355$1=0;
 var $1356$0=$1355$0;
 var $1356$1=$_01308;
 ___resumeException($1356$0) //@line 71 "src/read.cpp"
 case 249: 
 var $1358=HEAP32[(($3)>>2)]; //@line 174 "src/read.cpp"
 var $1359=HEAP32[(($4)>>2)]; //@line 174 "src/read.cpp"
 var $1360=HEAP32[(($5)>>2)]; //@line 174 "src/read.cpp"
 var $1361=HEAP32[(($6)>>2)]; //@line 174 "src/read.cpp"
 var $$etemp$35$0=4;
 var $$etemp$35$1=0;

 var $1362=__Znwj(48); //@line 41 "src/read.cpp"
 var $1363=$1362; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1363,0,19,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=278;break; } //@line 41 "src/read.cpp"
 case 250: 
 var $1365=$1362; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i163)>>2)]=$1365; //@line 71 "src/read.cpp"
 var $1366=__Znwj(12); //@line 42 "src/read.cpp"
 var $1367=(($1366+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1368=$1367; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1368)>>2)]=$1358; //@line 34 "inc/pcdecoder.inl"
 var $1369=(($1366+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1370=$1369; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1370)>>2)]=$rm_i163; //@line 34 "inc/pcdecoder.inl"
 var $1371=((($1359)+(1))|0); //@line 10 "inc/front.h"
 var $1372=((($1360)+(1))|0); //@line 10 "inc/front.h"
 var $1373=(Math_imul($1371,$1372)|0); //@line 10 "inc/front.h"
 var $1374=((($1359)+(2))|0); //@line 9 "inc/front.h"
 var $1375=((($1374)+($1373))|0); //@line 9 "inc/front.h"
 var $1376=((($1375)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i170=$1376;label=251;break; //@line 45 "inc/front.h"
 case 251: 
 var $storemerge_i_i_i170;
 var $1378=((($storemerge_i_i_i170)+(1))|0); //@line 45 "inc/front.h"
 var $1379=$storemerge_i_i_i170&$1378; //@line 45 "inc/front.h"
 var $1380=($1379|0)==0; //@line 45 "inc/front.h"
 if($1380){label=253;break;}else{label=252;break;} //@line 45 "inc/front.h"
 case 252: 
 var $1382=$storemerge_i_i_i170|$1378; //@line 45 "inc/front.h"
 var $storemerge_i_i_i170=$1382;label=251;break; //@line 45 "inc/front.h"
 case 253: 
 var $1383$0=_llvm_umul_with_overflow_i32($1378,4);
 var $1383$1=tempRet0;
 var $1384=$1383$1;
 var $1385=$1383$0;
 var $1386=($1384?-1:$1385); //@line 9 "inc/front.h"
 var $1387=(function() { try { __THREW__ = 0; return __Znwj($1386) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=257;break; } else { label=254;break; }
 case 254: 
 var $1389$0 = ___cxa_find_matching_catch(-1, -1); var $1389$1 = tempRet0;
 var $1390=$1389$1;
 var $1391=($1390|0)<0;
 if($1391){label=255;break;}else{label=256;break;}
 case 255: 
 var $1393=$1389$0;
 ___cxa_call_unexpected($1393);
 throw "Reached an unreachable!";
 case 256: 
 ___resumeException($1389$0)
 case 257: 
 var $1395=$1387; //@line 9 "inc/front.h"
 var $_01289=$1373;var $f_i165_sroa_55_0=0;label=258;break; //@line 22 "inc/front.h"
 case 258: 
 var $f_i165_sroa_55_0;
 var $_01289;
 var $1397=((($f_i165_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1398=$f_i165_sroa_55_0&$storemerge_i_i_i170; //@line 23 "inc/front.h"
 var $1399=(($1395+($1398<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1399)>>2)]=0; //@line 23 "inc/front.h"
 var $1400=((($_01289)-(1))|0); //@line 23 "inc/front.h"
 var $1401=($1400|0)==0; //@line 23 "inc/front.h"
 if($1401){label=259;break;}else{var $_01289=$1400;var $f_i165_sroa_55_0=$1397;label=258;break;} //@line 23 "inc/front.h"
 case 259: 
 var $1402=(($1366+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1403=$1402; //@line 50 "inc/pcdecoder.inl"
 var $1404=(($1366+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1405=$1404; //@line 50 "inc/pcdecoder.inl"
 var $_01290=$_01012;var $f_i165_sroa_55_1=$1397;var $z_i168_0=0;label=260;break; //@line 47 "src/read.cpp"
 case 260: 
 var $z_i168_0;
 var $f_i165_sroa_55_1;
 var $_01290;
 var $1407=($z_i168_0>>>0)<($1361>>>0); //@line 47 "src/read.cpp"
 if($1407){var $_01288=$1371;var $f_i165_sroa_55_2=$f_i165_sroa_55_1;label=261;break;}else{label=284;break;} //@line 47 "src/read.cpp"
 case 261: 
 var $f_i165_sroa_55_2;
 var $_01288;
 var $1409=((($f_i165_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1410=$f_i165_sroa_55_2&$storemerge_i_i_i170; //@line 23 "inc/front.h"
 var $1411=(($1395+($1410<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1411)>>2)]=0; //@line 23 "inc/front.h"
 var $1412=((($_01288)-(1))|0); //@line 23 "inc/front.h"
 var $1413=($1412|0)==0; //@line 23 "inc/front.h"
 if($1413){var $_11291=$_01290;var $f_i165_sroa_55_3=$1409;var $y_i167_0=0;label=262;break;}else{var $_01288=$1412;var $f_i165_sroa_55_2=$1409;label=261;break;} //@line 23 "inc/front.h"
 case 262: 
 var $y_i167_0;
 var $f_i165_sroa_55_3;
 var $_11291;
 var $1414=($y_i167_0>>>0)<($1360>>>0); //@line 48 "src/read.cpp"
 if($1414){var $_01287=1;var $f_i165_sroa_55_4=$f_i165_sroa_55_3;label=263;break;}else{label=283;break;} //@line 48 "src/read.cpp"
 case 263: 
 var $f_i165_sroa_55_4;
 var $_01287;
 var $1416=((($f_i165_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1417=$f_i165_sroa_55_4&$storemerge_i_i_i170; //@line 23 "inc/front.h"
 var $1418=(($1395+($1417<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1418)>>2)]=0; //@line 23 "inc/front.h"
 var $1419=((($_01287)-(1))|0); //@line 23 "inc/front.h"
 var $1420=($1419|0)==0; //@line 23 "inc/front.h"
 if($1420){var $_21292=$_11291;var $f_i165_sroa_55_5=$1416;var $x_i166_0=0;label=264;break;}else{var $_01287=$1419;var $f_i165_sroa_55_4=$1416;label=263;break;} //@line 23 "inc/front.h"
 case 264: 
 var $x_i166_0;
 var $f_i165_sroa_55_5;
 var $_21292;
 var $1421=($x_i166_0>>>0)<($1359>>>0); //@line 49 "src/read.cpp"
 if($1421){label=265;break;}else{label=282;break;} //@line 49 "src/read.cpp"
 case 265: 
 var $1423=((($f_i165_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1424=$1423&$storemerge_i_i_i170; //@line 16 "inc/front.h"
 var $1425=(($1395+($1424<<2))|0); //@line 16 "inc/front.h"
 var $1426=HEAPF32[(($1425)>>2)]; //@line 59 "src/read.cpp"
 var $1427=((($f_i165_sroa_55_5)-($1371))|0); //@line 16 "inc/front.h"
 var $1428=((($1427)-($1373))|0); //@line 16 "inc/front.h"
 var $1429=$1428&$storemerge_i_i_i170; //@line 16 "inc/front.h"
 var $1430=(($1395+($1429<<2))|0); //@line 16 "inc/front.h"
 var $1431=HEAPF32[(($1430)>>2)]; //@line 59 "src/read.cpp"
 var $1432=$1427&$storemerge_i_i_i170; //@line 16 "inc/front.h"
 var $1433=(($1395+($1432<<2))|0); //@line 16 "inc/front.h"
 var $1434=HEAPF32[(($1433)>>2)]; //@line 60 "src/read.cpp"
 var $1435=((($1423)-($1373))|0); //@line 16 "inc/front.h"
 var $1436=$1435&$storemerge_i_i_i170; //@line 16 "inc/front.h"
 var $1437=(($1395+($1436<<2))|0); //@line 16 "inc/front.h"
 var $1438=HEAPF32[(($1437)>>2)]; //@line 60 "src/read.cpp"
 var $1439=((($f_i165_sroa_55_5)-($1373))|0); //@line 16 "inc/front.h"
 var $1440=$1439&$storemerge_i_i_i170; //@line 16 "inc/front.h"
 var $1441=(($1395+($1440<<2))|0); //@line 16 "inc/front.h"
 var $1442=HEAPF32[(($1441)>>2)]; //@line 61 "src/read.cpp"
 var $1443=((($1423)-($1371))|0); //@line 16 "inc/front.h"
 var $1444=$1443&$storemerge_i_i_i170; //@line 16 "inc/front.h"
 var $1445=(($1395+($1444<<2))|0); //@line 16 "inc/front.h"
 var $1446=HEAPF32[(($1445)>>2)]; //@line 61 "src/read.cpp"
 var $1447=((($1443)-($1373))|0); //@line 16 "inc/front.h"
 var $1448=$1447&$storemerge_i_i_i170; //@line 16 "inc/front.h"
 var $1449=(($1395+($1448<<2))|0); //@line 16 "inc/front.h"
 var $1450=($1426)-($1431); //@line 59 "src/read.cpp"
 var $1451=($1450)+($1434); //@line 60 "src/read.cpp"
 var $1452=($1451)-($1438); //@line 60 "src/read.cpp"
 var $1453=($1452)+($1442); //@line 61 "src/read.cpp"
 var $1454=($1453)-($1446); //@line 61 "src/read.cpp"
 var $1455=HEAPF32[(($1449)>>2)]; //@line 62 "src/read.cpp"
 var $1456=($1454)+($1455); //@line 62 "src/read.cpp"
 var $1457=HEAP32[(($1403)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1458=HEAP32[(($1405)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1459=HEAP32[(($1458)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$36$0=4;
 var $$etemp$36$1=0;

 var $$etemp$37$0=4;
 var $$etemp$37$1=0;

 var $1460=$1459; //@line 25 "src/rcdecoder.cpp"
 var $1461=HEAP32[(($1460)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1462=(($1461+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1463=HEAP32[(($1462)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1464=(($1457+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1463]($1459,$1464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=266;break; } else { label=280;break; }
 case 266: 
 var $1465=(($1457+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1466=HEAP32[(($1465)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1467=(($1457+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1468=HEAP32[(($1467)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1469=((($1466)-($1468))|0); //@line 26 "src/rcdecoder.cpp"
 var $1470=HEAP32[(($1464)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1471=(((($1469>>>0))/(($1470>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i160)>>2)]=$1471; //@line 26 "src/rcdecoder.cpp"
 var $1472=$1459; //@line 27 "src/rcdecoder.cpp"
 var $1473=HEAP32[(($1472)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1474=(($1473+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1475=HEAP32[(($1474)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1476=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1475]($1459,$l_i_i_i160,$r_i_i_i161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=267;break; } else { label=280;break; }
 case 267: 
 var $1477=HEAP32[(($1464)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1478=HEAP32[(($l_i_i_i160)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1479=(Math_imul($1477,$1478)|0); //@line 28 "src/rcdecoder.cpp"
 var $1480=HEAP32[(($1467)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1481=((($1480)+($1479))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1467)>>2)]=$1481; //@line 28 "src/rcdecoder.cpp"
 var $1482=HEAP32[(($r_i_i_i161)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1483=(Math_imul($1477,$1482)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1464)>>2)]=$1483; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1457) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=268;break; } else { label=280;break; }
 case 268: 
 var $$etemp$38$0=4;
 var $$etemp$38$1=0;

 var $$etemp$39$0=4;
 var $$etemp$39$1=0;

 var $1484=($1476>>>0)>9; //@line 51 "inc/pcdecoder.inl"
 if($1484){label=269;break;}else{label=271;break;} //@line 51 "inc/pcdecoder.inl"
 case 269: 
 var $1486=((($1476)-(10))|0); //@line 52 "inc/pcdecoder.inl"
 var $1487=HEAP32[(($1403)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $1488=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($1487,$1486) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=270;break; } else { label=280;break; }
 case 270: 
 var $1489=1<<$1486; //@line 53 "inc/pcdecoder.inl"
 var $1490=((($1489)+($1488))|0); //@line 53 "inc/pcdecoder.inl"
 var $1491=(HEAPF32[((tempDoublePtr)>>2)]=$1456,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1492=$1491^-1; //@line 38 "inc/pcmap.h"
 var $1493=$1492>>>23; //@line 39 "inc/pcmap.h"
 var $1494=$1492>>31; //@line 40 "inc/pcmap.h"
 var $1495=$1494>>>24; //@line 40 "inc/pcmap.h"
 var $1496=$1493^$1495; //@line 40 "inc/pcmap.h"
 var $1497=((($1496)+($1490))|0); //@line 55 "inc/pcdecoder.inl"
 var $1498=$1497>>>8; //@line 48 "inc/pcmap.h"
 var $1499=(((-$1498))|0); //@line 48 "inc/pcmap.h"
 var $1500=$1499>>>24; //@line 48 "inc/pcmap.h"
 var $1501=$1500^$1497; //@line 48 "inc/pcmap.h"
 var $1502=$1501<<23; //@line 50 "inc/pcmap.h"
 var $1503=$1502^-8388608; //@line 50 "inc/pcmap.h"
 var $_01285_in=$1503;label=275;break; //@line 56 "inc/pcdecoder.inl"
 case 271: 
 var $1505=($1476>>>0)<9; //@line undefined "inc/pcdecoder.inl"
 if($1505){label=272;break;}else{label=274;break;} //@line undefined "inc/pcdecoder.inl"
 case 272: 
 var $1507=(((8)-($1476))|0); //@line 59 "inc/pcdecoder.inl"
 var $1508=HEAP32[(($1403)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1509=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($1508,$1507) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=273;break; } else { label=280;break; }
 case 273: 
 var $1510=1<<$1507; //@line 60 "inc/pcdecoder.inl"
 var $1511=((($1510)+($1509))|0); //@line 60 "inc/pcdecoder.inl"
 var $1512=(HEAPF32[((tempDoublePtr)>>2)]=$1456,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1513=$1512^-1; //@line 38 "inc/pcmap.h"
 var $1514=$1513>>>23; //@line 39 "inc/pcmap.h"
 var $1515=$1513>>31; //@line 40 "inc/pcmap.h"
 var $1516=$1515>>>24; //@line 40 "inc/pcmap.h"
 var $1517=$1514^$1516; //@line 40 "inc/pcmap.h"
 var $1518=((($1517)-($1511))|0); //@line 62 "inc/pcdecoder.inl"
 var $1519=$1518>>>8; //@line 48 "inc/pcmap.h"
 var $1520=(((-$1519))|0); //@line 48 "inc/pcmap.h"
 var $1521=$1520>>>24; //@line 48 "inc/pcmap.h"
 var $1522=$1521^$1518; //@line 48 "inc/pcmap.h"
 var $1523=$1522<<23; //@line 50 "inc/pcmap.h"
 var $1524=$1523^-8388608; //@line 50 "inc/pcmap.h"
 var $_01285_in=$1524;label=275;break; //@line 63 "inc/pcdecoder.inl"
 case 274: 
 var $1526=(HEAPF32[((tempDoublePtr)>>2)]=$1456,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1527=$1526&-8388608; //@line 60 "inc/pcmap.h"
 var $_01285_in=$1527;label=275;break; //@line 66 "inc/pcdecoder.inl"
 case 275: 
 var $_01285_in;
 var $_01285=(HEAP32[((tempDoublePtr)>>2)]=$_01285_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $1528=(($_21292+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21292)>>2)]=$_01285; //@line 65 "src/read.cpp"
 var $_01286=1;var $f_i165_sroa_55_6=$f_i165_sroa_55_5;label=276;break; //@line 22 "inc/front.h"
 case 276: 
 var $f_i165_sroa_55_6;
 var $_01286;
 var $1530=((($f_i165_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1531=$f_i165_sroa_55_6&$storemerge_i_i_i170; //@line 23 "inc/front.h"
 var $1532=(($1395+($1531<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1532)>>2)]=$_01285; //@line 23 "inc/front.h"
 var $1533=((($_01286)-(1))|0); //@line 23 "inc/front.h"
 var $1534=($1533|0)==0; //@line 23 "inc/front.h"
 if($1534){label=277;break;}else{var $_01286=$1533;var $f_i165_sroa_55_6=$1530;label=276;break;} //@line 23 "inc/front.h"
 case 277: 
 var $1535=((($x_i166_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21292=$1528;var $f_i165_sroa_55_5=$1530;var $x_i166_0=$1535;label=264;break; //@line 49 "src/read.cpp"
 case 278: 
 var $1537$0 = ___cxa_find_matching_catch(-1, -1); var $1537$1 = tempRet0;
 var $1538=$1537$0;
 var $1539=$1537$1;
 var $1540=($1362|0)==0;
 if($1540){var $_01293=$1538;var $_01294=$1539;label=290;break;}else{label=279;break;}
 case 279: 
 _free($1362);
 var $_01293=$1538;var $_01294=$1539;label=290;break;
 case 280: 
 var $1543$0 = ___cxa_find_matching_catch(-1, -1); var $1543$1 = tempRet0;
 var $1544=$1543$0;
 var $1545=$1543$1;
 var $1546=($1387|0)==0; //@line 11 "inc/front.h"
 if($1546){var $_01293=$1544;var $_01294=$1545;label=290;break;}else{label=281;break;} //@line 11 "inc/front.h"
 case 281: 
 _free($1387);
 var $_01293=$1544;var $_01294=$1545;label=290;break; //@line 11 "inc/front.h"
 case 282: 
 var $1548=((($y_i167_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11291=$_21292;var $f_i165_sroa_55_3=$f_i165_sroa_55_5;var $y_i167_0=$1548;label=262;break; //@line 48 "src/read.cpp"
 case 283: 
 var $1550=((($z_i168_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01290=$_11291;var $f_i165_sroa_55_1=$f_i165_sroa_55_3;var $z_i168_0=$1550;label=260;break; //@line 47 "src/read.cpp"
 case 284: 
 var $1552=($1366|0)==0; //@line 69 "src/read.cpp"
 if($1552){label=286;break;}else{label=285;break;} //@line 69 "src/read.cpp"
 case 285: 
 _free($1366);
 label=286;break; //@line 69 "src/read.cpp"
 case 286: 
 var $1554=HEAP32[(($rm_i163)>>2)]; //@line 70 "src/read.cpp"
 var $1555=($1554|0)==0; //@line 70 "src/read.cpp"
 if($1555){label=288;break;}else{label=287;break;} //@line 70 "src/read.cpp"
 case 287: 
 var $1557=$1554; //@line 70 "src/read.cpp"
 var $1558=HEAP32[(($1557)>>2)]; //@line 70 "src/read.cpp"
 var $1559=(($1558+4)|0); //@line 70 "src/read.cpp"
 var $1560=HEAP32[(($1559)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1560]($1554); //@line 70 "src/read.cpp"
 label=288;break; //@line 70 "src/read.cpp"
 case 288: 
 var $1562=($1387|0)==0; //@line 11 "inc/front.h"
 if($1562){label=1257;break;}else{label=289;break;} //@line 11 "inc/front.h"
 case 289: 
 _free($1387);
 label=1257;break; //@line 11 "inc/front.h"
 case 290: 
 var $_01294;
 var $_01293;
 var $1563$0=$_01293;
 var $1563$1=0;
 var $1564$0=$1563$0;
 var $1564$1=$_01294;
 ___resumeException($1564$0) //@line 71 "src/read.cpp"
 case 291: 
 var $1566=HEAP32[(($3)>>2)]; //@line 175 "src/read.cpp"
 var $1567=HEAP32[(($4)>>2)]; //@line 175 "src/read.cpp"
 var $1568=HEAP32[(($5)>>2)]; //@line 175 "src/read.cpp"
 var $1569=HEAP32[(($6)>>2)]; //@line 175 "src/read.cpp"
 var $$etemp$40$0=4;
 var $$etemp$40$1=0;

 var $1570=__Znwj(48); //@line 41 "src/read.cpp"
 var $1571=$1570; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1571,0,21,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=292;break; } else { label=320;break; } //@line 41 "src/read.cpp"
 case 292: 
 var $1573=$1570; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i196)>>2)]=$1573; //@line 71 "src/read.cpp"
 var $1574=__Znwj(12); //@line 42 "src/read.cpp"
 var $1575=(($1574+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1576=$1575; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1576)>>2)]=$1566; //@line 34 "inc/pcdecoder.inl"
 var $1577=(($1574+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1578=$1577; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1578)>>2)]=$rm_i196; //@line 34 "inc/pcdecoder.inl"
 var $1579=((($1567)+(1))|0); //@line 10 "inc/front.h"
 var $1580=((($1568)+(1))|0); //@line 10 "inc/front.h"
 var $1581=(Math_imul($1579,$1580)|0); //@line 10 "inc/front.h"
 var $1582=((($1567)+(2))|0); //@line 9 "inc/front.h"
 var $1583=((($1582)+($1581))|0); //@line 9 "inc/front.h"
 var $1584=((($1583)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i203=$1584;label=293;break; //@line 45 "inc/front.h"
 case 293: 
 var $storemerge_i_i_i203;
 var $1586=((($storemerge_i_i_i203)+(1))|0); //@line 45 "inc/front.h"
 var $1587=$storemerge_i_i_i203&$1586; //@line 45 "inc/front.h"
 var $1588=($1587|0)==0; //@line 45 "inc/front.h"
 if($1588){label=295;break;}else{label=294;break;} //@line 45 "inc/front.h"
 case 294: 
 var $1590=$storemerge_i_i_i203|$1586; //@line 45 "inc/front.h"
 var $storemerge_i_i_i203=$1590;label=293;break; //@line 45 "inc/front.h"
 case 295: 
 var $1591$0=_llvm_umul_with_overflow_i32($1586,4);
 var $1591$1=tempRet0;
 var $1592=$1591$1;
 var $1593=$1591$0;
 var $1594=($1592?-1:$1593); //@line 9 "inc/front.h"
 var $1595=(function() { try { __THREW__ = 0; return __Znwj($1594) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=299;break; } else { label=296;break; }
 case 296: 
 var $1597$0 = ___cxa_find_matching_catch(-1, -1); var $1597$1 = tempRet0;
 var $1598=$1597$1;
 var $1599=($1598|0)<0;
 if($1599){label=297;break;}else{label=298;break;}
 case 297: 
 var $1601=$1597$0;
 ___cxa_call_unexpected($1601);
 throw "Reached an unreachable!";
 case 298: 
 ___resumeException($1597$0)
 case 299: 
 var $1603=$1595; //@line 9 "inc/front.h"
 var $_01279=$1581;var $f_i198_sroa_55_0=0;label=300;break; //@line 22 "inc/front.h"
 case 300: 
 var $f_i198_sroa_55_0;
 var $_01279;
 var $1605=((($f_i198_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1606=$f_i198_sroa_55_0&$storemerge_i_i_i203; //@line 23 "inc/front.h"
 var $1607=(($1603+($1606<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1607)>>2)]=0; //@line 23 "inc/front.h"
 var $1608=((($_01279)-(1))|0); //@line 23 "inc/front.h"
 var $1609=($1608|0)==0; //@line 23 "inc/front.h"
 if($1609){label=301;break;}else{var $_01279=$1608;var $f_i198_sroa_55_0=$1605;label=300;break;} //@line 23 "inc/front.h"
 case 301: 
 var $1610=(($1574+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1611=$1610; //@line 50 "inc/pcdecoder.inl"
 var $1612=(($1574+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1613=$1612; //@line 50 "inc/pcdecoder.inl"
 var $_01280=$_01012;var $f_i198_sroa_55_1=$1605;var $z_i201_0=0;label=302;break; //@line 47 "src/read.cpp"
 case 302: 
 var $z_i201_0;
 var $f_i198_sroa_55_1;
 var $_01280;
 var $1615=($z_i201_0>>>0)<($1569>>>0); //@line 47 "src/read.cpp"
 if($1615){var $_01278=$1579;var $f_i198_sroa_55_2=$f_i198_sroa_55_1;label=303;break;}else{label=326;break;} //@line 47 "src/read.cpp"
 case 303: 
 var $f_i198_sroa_55_2;
 var $_01278;
 var $1617=((($f_i198_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1618=$f_i198_sroa_55_2&$storemerge_i_i_i203; //@line 23 "inc/front.h"
 var $1619=(($1603+($1618<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1619)>>2)]=0; //@line 23 "inc/front.h"
 var $1620=((($_01278)-(1))|0); //@line 23 "inc/front.h"
 var $1621=($1620|0)==0; //@line 23 "inc/front.h"
 if($1621){var $_11281=$_01280;var $f_i198_sroa_55_3=$1617;var $y_i200_0=0;label=304;break;}else{var $_01278=$1620;var $f_i198_sroa_55_2=$1617;label=303;break;} //@line 23 "inc/front.h"
 case 304: 
 var $y_i200_0;
 var $f_i198_sroa_55_3;
 var $_11281;
 var $1622=($y_i200_0>>>0)<($1568>>>0); //@line 48 "src/read.cpp"
 if($1622){var $_01277=1;var $f_i198_sroa_55_4=$f_i198_sroa_55_3;label=305;break;}else{label=325;break;} //@line 48 "src/read.cpp"
 case 305: 
 var $f_i198_sroa_55_4;
 var $_01277;
 var $1624=((($f_i198_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1625=$f_i198_sroa_55_4&$storemerge_i_i_i203; //@line 23 "inc/front.h"
 var $1626=(($1603+($1625<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1626)>>2)]=0; //@line 23 "inc/front.h"
 var $1627=((($_01277)-(1))|0); //@line 23 "inc/front.h"
 var $1628=($1627|0)==0; //@line 23 "inc/front.h"
 if($1628){var $_21282=$_11281;var $f_i198_sroa_55_5=$1624;var $x_i199_0=0;label=306;break;}else{var $_01277=$1627;var $f_i198_sroa_55_4=$1624;label=305;break;} //@line 23 "inc/front.h"
 case 306: 
 var $x_i199_0;
 var $f_i198_sroa_55_5;
 var $_21282;
 var $1629=($x_i199_0>>>0)<($1567>>>0); //@line 49 "src/read.cpp"
 if($1629){label=307;break;}else{label=324;break;} //@line 49 "src/read.cpp"
 case 307: 
 var $1631=((($f_i198_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1632=$1631&$storemerge_i_i_i203; //@line 16 "inc/front.h"
 var $1633=(($1603+($1632<<2))|0); //@line 16 "inc/front.h"
 var $1634=HEAPF32[(($1633)>>2)]; //@line 59 "src/read.cpp"
 var $1635=((($f_i198_sroa_55_5)-($1579))|0); //@line 16 "inc/front.h"
 var $1636=((($1635)-($1581))|0); //@line 16 "inc/front.h"
 var $1637=$1636&$storemerge_i_i_i203; //@line 16 "inc/front.h"
 var $1638=(($1603+($1637<<2))|0); //@line 16 "inc/front.h"
 var $1639=HEAPF32[(($1638)>>2)]; //@line 59 "src/read.cpp"
 var $1640=$1635&$storemerge_i_i_i203; //@line 16 "inc/front.h"
 var $1641=(($1603+($1640<<2))|0); //@line 16 "inc/front.h"
 var $1642=HEAPF32[(($1641)>>2)]; //@line 60 "src/read.cpp"
 var $1643=((($1631)-($1581))|0); //@line 16 "inc/front.h"
 var $1644=$1643&$storemerge_i_i_i203; //@line 16 "inc/front.h"
 var $1645=(($1603+($1644<<2))|0); //@line 16 "inc/front.h"
 var $1646=HEAPF32[(($1645)>>2)]; //@line 60 "src/read.cpp"
 var $1647=((($f_i198_sroa_55_5)-($1581))|0); //@line 16 "inc/front.h"
 var $1648=$1647&$storemerge_i_i_i203; //@line 16 "inc/front.h"
 var $1649=(($1603+($1648<<2))|0); //@line 16 "inc/front.h"
 var $1650=HEAPF32[(($1649)>>2)]; //@line 61 "src/read.cpp"
 var $1651=((($1631)-($1579))|0); //@line 16 "inc/front.h"
 var $1652=$1651&$storemerge_i_i_i203; //@line 16 "inc/front.h"
 var $1653=(($1603+($1652<<2))|0); //@line 16 "inc/front.h"
 var $1654=HEAPF32[(($1653)>>2)]; //@line 61 "src/read.cpp"
 var $1655=((($1651)-($1581))|0); //@line 16 "inc/front.h"
 var $1656=$1655&$storemerge_i_i_i203; //@line 16 "inc/front.h"
 var $1657=(($1603+($1656<<2))|0); //@line 16 "inc/front.h"
 var $1658=($1634)-($1639); //@line 59 "src/read.cpp"
 var $1659=($1658)+($1642); //@line 60 "src/read.cpp"
 var $1660=($1659)-($1646); //@line 60 "src/read.cpp"
 var $1661=($1660)+($1650); //@line 61 "src/read.cpp"
 var $1662=($1661)-($1654); //@line 61 "src/read.cpp"
 var $1663=HEAPF32[(($1657)>>2)]; //@line 62 "src/read.cpp"
 var $1664=($1662)+($1663); //@line 62 "src/read.cpp"
 var $1665=HEAP32[(($1611)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1666=HEAP32[(($1613)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1667=HEAP32[(($1666)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$41$0=4;
 var $$etemp$41$1=0;

 var $$etemp$42$0=4;
 var $$etemp$42$1=0;

 var $1668=$1667; //@line 25 "src/rcdecoder.cpp"
 var $1669=HEAP32[(($1668)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1670=(($1669+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1671=HEAP32[(($1670)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1672=(($1665+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1671]($1667,$1672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=308;break; } else { label=322;break; }
 case 308: 
 var $1673=(($1665+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1674=HEAP32[(($1673)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1675=(($1665+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1676=HEAP32[(($1675)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1677=((($1674)-($1676))|0); //@line 26 "src/rcdecoder.cpp"
 var $1678=HEAP32[(($1672)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1679=(((($1677>>>0))/(($1678>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i190)>>2)]=$1679; //@line 26 "src/rcdecoder.cpp"
 var $1680=$1667; //@line 27 "src/rcdecoder.cpp"
 var $1681=HEAP32[(($1680)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1682=(($1681+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1683=HEAP32[(($1682)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1684=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1683]($1667,$l_i_i_i190,$r_i_i_i191) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=309;break; } else { label=322;break; }
 case 309: 
 var $1685=HEAP32[(($1672)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1686=HEAP32[(($l_i_i_i190)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1687=(Math_imul($1685,$1686)|0); //@line 28 "src/rcdecoder.cpp"
 var $1688=HEAP32[(($1675)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1689=((($1688)+($1687))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1675)>>2)]=$1689; //@line 28 "src/rcdecoder.cpp"
 var $1690=HEAP32[(($r_i_i_i191)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1691=(Math_imul($1685,$1690)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1672)>>2)]=$1691; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1665) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=310;break; } else { label=322;break; }
 case 310: 
 var $$etemp$43$0=4;
 var $$etemp$43$1=0;

 var $$etemp$44$0=4;
 var $$etemp$44$1=0;

 var $1692=($1684>>>0)>10; //@line 51 "inc/pcdecoder.inl"
 if($1692){label=311;break;}else{label=313;break;} //@line 51 "inc/pcdecoder.inl"
 case 311: 
 var $1694=((($1684)-(11))|0); //@line 52 "inc/pcdecoder.inl"
 var $1695=HEAP32[(($1611)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $1696=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($1695,$1694) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=312;break; } else { label=322;break; }
 case 312: 
 var $1697=1<<$1694; //@line 53 "inc/pcdecoder.inl"
 var $1698=((($1697)+($1696))|0); //@line 53 "inc/pcdecoder.inl"
 var $1699=(HEAPF32[((tempDoublePtr)>>2)]=$1664,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1700=$1699^-1; //@line 38 "inc/pcmap.h"
 var $1701=$1700>>>22; //@line 39 "inc/pcmap.h"
 var $1702=$1700>>31; //@line 40 "inc/pcmap.h"
 var $1703=$1702>>>23; //@line 40 "inc/pcmap.h"
 var $1704=$1701^$1703; //@line 40 "inc/pcmap.h"
 var $1705=((($1704)+($1698))|0); //@line 55 "inc/pcdecoder.inl"
 var $1706=$1705>>>9; //@line 48 "inc/pcmap.h"
 var $1707=(((-$1706))|0); //@line 48 "inc/pcmap.h"
 var $1708=$1707>>>23; //@line 48 "inc/pcmap.h"
 var $1709=$1708^$1705; //@line 48 "inc/pcmap.h"
 var $1710=$1709<<22; //@line 50 "inc/pcmap.h"
 var $1711=$1710^-4194304; //@line 50 "inc/pcmap.h"
 var $_01275_in=$1711;label=317;break; //@line 56 "inc/pcdecoder.inl"
 case 313: 
 var $1713=($1684>>>0)<10; //@line undefined "inc/pcdecoder.inl"
 if($1713){label=314;break;}else{label=316;break;} //@line undefined "inc/pcdecoder.inl"
 case 314: 
 var $1715=(((9)-($1684))|0); //@line 59 "inc/pcdecoder.inl"
 var $1716=HEAP32[(($1611)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1717=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($1716,$1715) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=315;break; } else { label=322;break; }
 case 315: 
 var $1718=1<<$1715; //@line 60 "inc/pcdecoder.inl"
 var $1719=((($1718)+($1717))|0); //@line 60 "inc/pcdecoder.inl"
 var $1720=(HEAPF32[((tempDoublePtr)>>2)]=$1664,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1721=$1720^-1; //@line 38 "inc/pcmap.h"
 var $1722=$1721>>>22; //@line 39 "inc/pcmap.h"
 var $1723=$1721>>31; //@line 40 "inc/pcmap.h"
 var $1724=$1723>>>23; //@line 40 "inc/pcmap.h"
 var $1725=$1722^$1724; //@line 40 "inc/pcmap.h"
 var $1726=((($1725)-($1719))|0); //@line 62 "inc/pcdecoder.inl"
 var $1727=$1726>>>9; //@line 48 "inc/pcmap.h"
 var $1728=(((-$1727))|0); //@line 48 "inc/pcmap.h"
 var $1729=$1728>>>23; //@line 48 "inc/pcmap.h"
 var $1730=$1729^$1726; //@line 48 "inc/pcmap.h"
 var $1731=$1730<<22; //@line 50 "inc/pcmap.h"
 var $1732=$1731^-4194304; //@line 50 "inc/pcmap.h"
 var $_01275_in=$1732;label=317;break; //@line 63 "inc/pcdecoder.inl"
 case 316: 
 var $1734=(HEAPF32[((tempDoublePtr)>>2)]=$1664,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1735=$1734&-4194304; //@line 60 "inc/pcmap.h"
 var $_01275_in=$1735;label=317;break; //@line 66 "inc/pcdecoder.inl"
 case 317: 
 var $_01275_in;
 var $_01275=(HEAP32[((tempDoublePtr)>>2)]=$_01275_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $1736=(($_21282+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21282)>>2)]=$_01275; //@line 65 "src/read.cpp"
 var $_01276=1;var $f_i198_sroa_55_6=$f_i198_sroa_55_5;label=318;break; //@line 22 "inc/front.h"
 case 318: 
 var $f_i198_sroa_55_6;
 var $_01276;
 var $1738=((($f_i198_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1739=$f_i198_sroa_55_6&$storemerge_i_i_i203; //@line 23 "inc/front.h"
 var $1740=(($1603+($1739<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1740)>>2)]=$_01275; //@line 23 "inc/front.h"
 var $1741=((($_01276)-(1))|0); //@line 23 "inc/front.h"
 var $1742=($1741|0)==0; //@line 23 "inc/front.h"
 if($1742){label=319;break;}else{var $_01276=$1741;var $f_i198_sroa_55_6=$1738;label=318;break;} //@line 23 "inc/front.h"
 case 319: 
 var $1743=((($x_i199_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21282=$1736;var $f_i198_sroa_55_5=$1738;var $x_i199_0=$1743;label=306;break; //@line 49 "src/read.cpp"
 case 320: 
 var $1745$0 = ___cxa_find_matching_catch(-1, -1); var $1745$1 = tempRet0;
 var $1746=$1745$0;
 var $1747=$1745$1;
 var $1748=($1570|0)==0;
 if($1748){var $_01283=$1746;var $_01284=$1747;label=332;break;}else{label=321;break;}
 case 321: 
 _free($1570);
 var $_01283=$1746;var $_01284=$1747;label=332;break;
 case 322: 
 var $1751$0 = ___cxa_find_matching_catch(-1, -1); var $1751$1 = tempRet0;
 var $1752=$1751$0;
 var $1753=$1751$1;
 var $1754=($1595|0)==0; //@line 11 "inc/front.h"
 if($1754){var $_01283=$1752;var $_01284=$1753;label=332;break;}else{label=323;break;} //@line 11 "inc/front.h"
 case 323: 
 _free($1595);
 var $_01283=$1752;var $_01284=$1753;label=332;break; //@line 11 "inc/front.h"
 case 324: 
 var $1756=((($y_i200_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11281=$_21282;var $f_i198_sroa_55_3=$f_i198_sroa_55_5;var $y_i200_0=$1756;label=304;break; //@line 48 "src/read.cpp"
 case 325: 
 var $1758=((($z_i201_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01280=$_11281;var $f_i198_sroa_55_1=$f_i198_sroa_55_3;var $z_i201_0=$1758;label=302;break; //@line 47 "src/read.cpp"
 case 326: 
 var $1760=($1574|0)==0; //@line 69 "src/read.cpp"
 if($1760){label=328;break;}else{label=327;break;} //@line 69 "src/read.cpp"
 case 327: 
 _free($1574);
 label=328;break; //@line 69 "src/read.cpp"
 case 328: 
 var $1762=HEAP32[(($rm_i196)>>2)]; //@line 70 "src/read.cpp"
 var $1763=($1762|0)==0; //@line 70 "src/read.cpp"
 if($1763){label=330;break;}else{label=329;break;} //@line 70 "src/read.cpp"
 case 329: 
 var $1765=$1762; //@line 70 "src/read.cpp"
 var $1766=HEAP32[(($1765)>>2)]; //@line 70 "src/read.cpp"
 var $1767=(($1766+4)|0); //@line 70 "src/read.cpp"
 var $1768=HEAP32[(($1767)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1768]($1762); //@line 70 "src/read.cpp"
 label=330;break; //@line 70 "src/read.cpp"
 case 330: 
 var $1770=($1595|0)==0; //@line 11 "inc/front.h"
 if($1770){label=1257;break;}else{label=331;break;} //@line 11 "inc/front.h"
 case 331: 
 _free($1595);
 label=1257;break; //@line 11 "inc/front.h"
 case 332: 
 var $_01284;
 var $_01283;
 var $1771$0=$_01283;
 var $1771$1=0;
 var $1772$0=$1771$0;
 var $1772$1=$_01284;
 ___resumeException($1772$0) //@line 71 "src/read.cpp"
 case 333: 
 var $1774=HEAP32[(($3)>>2)]; //@line 176 "src/read.cpp"
 var $1775=HEAP32[(($4)>>2)]; //@line 176 "src/read.cpp"
 var $1776=HEAP32[(($5)>>2)]; //@line 176 "src/read.cpp"
 var $1777=HEAP32[(($6)>>2)]; //@line 176 "src/read.cpp"
 var $$etemp$45$0=4;
 var $$etemp$45$1=0;

 var $1778=__Znwj(48); //@line 41 "src/read.cpp"
 var $1779=$1778; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1779,0,23,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=334;break; } else { label=362;break; } //@line 41 "src/read.cpp"
 case 334: 
 var $1781=$1778; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i232)>>2)]=$1781; //@line 71 "src/read.cpp"
 var $1782=__Znwj(12); //@line 42 "src/read.cpp"
 var $1783=(($1782+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1784=$1783; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1784)>>2)]=$1774; //@line 34 "inc/pcdecoder.inl"
 var $1785=(($1782+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1786=$1785; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1786)>>2)]=$rm_i232; //@line 34 "inc/pcdecoder.inl"
 var $1787=((($1775)+(1))|0); //@line 10 "inc/front.h"
 var $1788=((($1776)+(1))|0); //@line 10 "inc/front.h"
 var $1789=(Math_imul($1787,$1788)|0); //@line 10 "inc/front.h"
 var $1790=((($1775)+(2))|0); //@line 9 "inc/front.h"
 var $1791=((($1790)+($1789))|0); //@line 9 "inc/front.h"
 var $1792=((($1791)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i239=$1792;label=335;break; //@line 45 "inc/front.h"
 case 335: 
 var $storemerge_i_i_i239;
 var $1794=((($storemerge_i_i_i239)+(1))|0); //@line 45 "inc/front.h"
 var $1795=$storemerge_i_i_i239&$1794; //@line 45 "inc/front.h"
 var $1796=($1795|0)==0; //@line 45 "inc/front.h"
 if($1796){label=337;break;}else{label=336;break;} //@line 45 "inc/front.h"
 case 336: 
 var $1798=$storemerge_i_i_i239|$1794; //@line 45 "inc/front.h"
 var $storemerge_i_i_i239=$1798;label=335;break; //@line 45 "inc/front.h"
 case 337: 
 var $1799$0=_llvm_umul_with_overflow_i32($1794,4);
 var $1799$1=tempRet0;
 var $1800=$1799$1;
 var $1801=$1799$0;
 var $1802=($1800?-1:$1801); //@line 9 "inc/front.h"
 var $1803=(function() { try { __THREW__ = 0; return __Znwj($1802) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=341;break; } else { label=338;break; }
 case 338: 
 var $1805$0 = ___cxa_find_matching_catch(-1, -1); var $1805$1 = tempRet0;
 var $1806=$1805$1;
 var $1807=($1806|0)<0;
 if($1807){label=339;break;}else{label=340;break;}
 case 339: 
 var $1809=$1805$0;
 ___cxa_call_unexpected($1809);
 throw "Reached an unreachable!";
 case 340: 
 ___resumeException($1805$0)
 case 341: 
 var $1811=$1803; //@line 9 "inc/front.h"
 var $_01268=$1789;var $f_i234_sroa_55_0=0;label=342;break; //@line 22 "inc/front.h"
 case 342: 
 var $f_i234_sroa_55_0;
 var $_01268;
 var $1813=((($f_i234_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1814=$f_i234_sroa_55_0&$storemerge_i_i_i239; //@line 23 "inc/front.h"
 var $1815=(($1811+($1814<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1815)>>2)]=0; //@line 23 "inc/front.h"
 var $1816=((($_01268)-(1))|0); //@line 23 "inc/front.h"
 var $1817=($1816|0)==0; //@line 23 "inc/front.h"
 if($1817){label=343;break;}else{var $_01268=$1816;var $f_i234_sroa_55_0=$1813;label=342;break;} //@line 23 "inc/front.h"
 case 343: 
 var $1818=(($1782+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1819=$1818; //@line 50 "inc/pcdecoder.inl"
 var $1820=(($1782+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1821=$1820; //@line 50 "inc/pcdecoder.inl"
 var $_01269=$_01012;var $f_i234_sroa_55_1=$1813;var $z_i237_0=0;label=344;break; //@line 47 "src/read.cpp"
 case 344: 
 var $z_i237_0;
 var $f_i234_sroa_55_1;
 var $_01269;
 var $1823=($z_i237_0>>>0)<($1777>>>0); //@line 47 "src/read.cpp"
 if($1823){var $_01267=$1787;var $f_i234_sroa_55_2=$f_i234_sroa_55_1;label=345;break;}else{label=368;break;} //@line 47 "src/read.cpp"
 case 345: 
 var $f_i234_sroa_55_2;
 var $_01267;
 var $1825=((($f_i234_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1826=$f_i234_sroa_55_2&$storemerge_i_i_i239; //@line 23 "inc/front.h"
 var $1827=(($1811+($1826<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1827)>>2)]=0; //@line 23 "inc/front.h"
 var $1828=((($_01267)-(1))|0); //@line 23 "inc/front.h"
 var $1829=($1828|0)==0; //@line 23 "inc/front.h"
 if($1829){var $_11270=$_01269;var $f_i234_sroa_55_3=$1825;var $y_i236_0=0;label=346;break;}else{var $_01267=$1828;var $f_i234_sroa_55_2=$1825;label=345;break;} //@line 23 "inc/front.h"
 case 346: 
 var $y_i236_0;
 var $f_i234_sroa_55_3;
 var $_11270;
 var $1830=($y_i236_0>>>0)<($1776>>>0); //@line 48 "src/read.cpp"
 if($1830){var $_01266=1;var $f_i234_sroa_55_4=$f_i234_sroa_55_3;label=347;break;}else{label=367;break;} //@line 48 "src/read.cpp"
 case 347: 
 var $f_i234_sroa_55_4;
 var $_01266;
 var $1832=((($f_i234_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1833=$f_i234_sroa_55_4&$storemerge_i_i_i239; //@line 23 "inc/front.h"
 var $1834=(($1811+($1833<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1834)>>2)]=0; //@line 23 "inc/front.h"
 var $1835=((($_01266)-(1))|0); //@line 23 "inc/front.h"
 var $1836=($1835|0)==0; //@line 23 "inc/front.h"
 if($1836){var $_21271=$_11270;var $f_i234_sroa_55_5=$1832;var $x_i235_0=0;label=348;break;}else{var $_01266=$1835;var $f_i234_sroa_55_4=$1832;label=347;break;} //@line 23 "inc/front.h"
 case 348: 
 var $x_i235_0;
 var $f_i234_sroa_55_5;
 var $_21271;
 var $1837=($x_i235_0>>>0)<($1775>>>0); //@line 49 "src/read.cpp"
 if($1837){label=349;break;}else{label=366;break;} //@line 49 "src/read.cpp"
 case 349: 
 var $1839=((($f_i234_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1840=$1839&$storemerge_i_i_i239; //@line 16 "inc/front.h"
 var $1841=(($1811+($1840<<2))|0); //@line 16 "inc/front.h"
 var $1842=HEAPF32[(($1841)>>2)]; //@line 59 "src/read.cpp"
 var $1843=((($f_i234_sroa_55_5)-($1787))|0); //@line 16 "inc/front.h"
 var $1844=((($1843)-($1789))|0); //@line 16 "inc/front.h"
 var $1845=$1844&$storemerge_i_i_i239; //@line 16 "inc/front.h"
 var $1846=(($1811+($1845<<2))|0); //@line 16 "inc/front.h"
 var $1847=HEAPF32[(($1846)>>2)]; //@line 59 "src/read.cpp"
 var $1848=$1843&$storemerge_i_i_i239; //@line 16 "inc/front.h"
 var $1849=(($1811+($1848<<2))|0); //@line 16 "inc/front.h"
 var $1850=HEAPF32[(($1849)>>2)]; //@line 60 "src/read.cpp"
 var $1851=((($1839)-($1789))|0); //@line 16 "inc/front.h"
 var $1852=$1851&$storemerge_i_i_i239; //@line 16 "inc/front.h"
 var $1853=(($1811+($1852<<2))|0); //@line 16 "inc/front.h"
 var $1854=HEAPF32[(($1853)>>2)]; //@line 60 "src/read.cpp"
 var $1855=((($f_i234_sroa_55_5)-($1789))|0); //@line 16 "inc/front.h"
 var $1856=$1855&$storemerge_i_i_i239; //@line 16 "inc/front.h"
 var $1857=(($1811+($1856<<2))|0); //@line 16 "inc/front.h"
 var $1858=HEAPF32[(($1857)>>2)]; //@line 61 "src/read.cpp"
 var $1859=((($1839)-($1787))|0); //@line 16 "inc/front.h"
 var $1860=$1859&$storemerge_i_i_i239; //@line 16 "inc/front.h"
 var $1861=(($1811+($1860<<2))|0); //@line 16 "inc/front.h"
 var $1862=HEAPF32[(($1861)>>2)]; //@line 61 "src/read.cpp"
 var $1863=((($1859)-($1789))|0); //@line 16 "inc/front.h"
 var $1864=$1863&$storemerge_i_i_i239; //@line 16 "inc/front.h"
 var $1865=(($1811+($1864<<2))|0); //@line 16 "inc/front.h"
 var $1866=($1842)-($1847); //@line 59 "src/read.cpp"
 var $1867=($1866)+($1850); //@line 60 "src/read.cpp"
 var $1868=($1867)-($1854); //@line 60 "src/read.cpp"
 var $1869=($1868)+($1858); //@line 61 "src/read.cpp"
 var $1870=($1869)-($1862); //@line 61 "src/read.cpp"
 var $1871=HEAPF32[(($1865)>>2)]; //@line 62 "src/read.cpp"
 var $1872=($1870)+($1871); //@line 62 "src/read.cpp"
 var $1873=HEAP32[(($1819)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1874=HEAP32[(($1821)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1875=HEAP32[(($1874)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$46$0=4;
 var $$etemp$46$1=0;

 var $$etemp$47$0=4;
 var $$etemp$47$1=0;

 var $1876=$1875; //@line 25 "src/rcdecoder.cpp"
 var $1877=HEAP32[(($1876)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1878=(($1877+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1879=HEAP32[(($1878)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1880=(($1873+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1879]($1875,$1880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { label=364;break; }
 case 350: 
 var $1881=(($1873+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1882=HEAP32[(($1881)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1883=(($1873+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1884=HEAP32[(($1883)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1885=((($1882)-($1884))|0); //@line 26 "src/rcdecoder.cpp"
 var $1886=HEAP32[(($1880)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1887=(((($1885>>>0))/(($1886>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i226)>>2)]=$1887; //@line 26 "src/rcdecoder.cpp"
 var $1888=$1875; //@line 27 "src/rcdecoder.cpp"
 var $1889=HEAP32[(($1888)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1890=(($1889+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1891=HEAP32[(($1890)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1892=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1891]($1875,$l_i_i_i226,$r_i_i_i227) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=351;break; } else { label=364;break; }
 case 351: 
 var $1893=HEAP32[(($1880)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1894=HEAP32[(($l_i_i_i226)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1895=(Math_imul($1893,$1894)|0); //@line 28 "src/rcdecoder.cpp"
 var $1896=HEAP32[(($1883)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1897=((($1896)+($1895))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1883)>>2)]=$1897; //@line 28 "src/rcdecoder.cpp"
 var $1898=HEAP32[(($r_i_i_i227)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1899=(Math_imul($1893,$1898)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1880)>>2)]=$1899; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1873) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=352;break; } else { label=364;break; }
 case 352: 
 var $$etemp$48$0=4;
 var $$etemp$48$1=0;

 var $$etemp$49$0=4;
 var $$etemp$49$1=0;

 var $1900=($1892>>>0)>11; //@line 51 "inc/pcdecoder.inl"
 if($1900){label=353;break;}else{label=355;break;} //@line 51 "inc/pcdecoder.inl"
 case 353: 
 var $1902=((($1892)-(12))|0); //@line 52 "inc/pcdecoder.inl"
 var $1903=HEAP32[(($1819)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $1904=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($1903,$1902) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=354;break; } else { label=364;break; }
 case 354: 
 var $1905=1<<$1902; //@line 53 "inc/pcdecoder.inl"
 var $1906=((($1905)+($1904))|0); //@line 53 "inc/pcdecoder.inl"
 var $1907=(HEAPF32[((tempDoublePtr)>>2)]=$1872,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1908=$1907^-1; //@line 38 "inc/pcmap.h"
 var $1909=$1908>>>21; //@line 39 "inc/pcmap.h"
 var $1910=$1908>>31; //@line 40 "inc/pcmap.h"
 var $1911=$1910>>>22; //@line 40 "inc/pcmap.h"
 var $1912=$1909^$1911; //@line 40 "inc/pcmap.h"
 var $1913=((($1912)+($1906))|0); //@line 55 "inc/pcdecoder.inl"
 var $1914=$1913>>>10; //@line 48 "inc/pcmap.h"
 var $1915=(((-$1914))|0); //@line 48 "inc/pcmap.h"
 var $1916=$1915>>>22; //@line 48 "inc/pcmap.h"
 var $1917=$1916^$1913; //@line 48 "inc/pcmap.h"
 var $1918=$1917<<21; //@line 50 "inc/pcmap.h"
 var $1919=$1918^-2097152; //@line 50 "inc/pcmap.h"
 var $_01264_in=$1919;label=359;break; //@line 56 "inc/pcdecoder.inl"
 case 355: 
 var $1921=($1892>>>0)<11; //@line undefined "inc/pcdecoder.inl"
 if($1921){label=356;break;}else{label=358;break;} //@line undefined "inc/pcdecoder.inl"
 case 356: 
 var $1923=(((10)-($1892))|0); //@line 59 "inc/pcdecoder.inl"
 var $1924=HEAP32[(($1819)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1925=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($1924,$1923) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=357;break; } else { label=364;break; }
 case 357: 
 var $1926=1<<$1923; //@line 60 "inc/pcdecoder.inl"
 var $1927=((($1926)+($1925))|0); //@line 60 "inc/pcdecoder.inl"
 var $1928=(HEAPF32[((tempDoublePtr)>>2)]=$1872,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1929=$1928^-1; //@line 38 "inc/pcmap.h"
 var $1930=$1929>>>21; //@line 39 "inc/pcmap.h"
 var $1931=$1929>>31; //@line 40 "inc/pcmap.h"
 var $1932=$1931>>>22; //@line 40 "inc/pcmap.h"
 var $1933=$1930^$1932; //@line 40 "inc/pcmap.h"
 var $1934=((($1933)-($1927))|0); //@line 62 "inc/pcdecoder.inl"
 var $1935=$1934>>>10; //@line 48 "inc/pcmap.h"
 var $1936=(((-$1935))|0); //@line 48 "inc/pcmap.h"
 var $1937=$1936>>>22; //@line 48 "inc/pcmap.h"
 var $1938=$1937^$1934; //@line 48 "inc/pcmap.h"
 var $1939=$1938<<21; //@line 50 "inc/pcmap.h"
 var $1940=$1939^-2097152; //@line 50 "inc/pcmap.h"
 var $_01264_in=$1940;label=359;break; //@line 63 "inc/pcdecoder.inl"
 case 358: 
 var $1942=(HEAPF32[((tempDoublePtr)>>2)]=$1872,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $1943=$1942&-2097152; //@line 60 "inc/pcmap.h"
 var $_01264_in=$1943;label=359;break; //@line 66 "inc/pcdecoder.inl"
 case 359: 
 var $_01264_in;
 var $_01264=(HEAP32[((tempDoublePtr)>>2)]=$_01264_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $1944=(($_21271+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21271)>>2)]=$_01264; //@line 65 "src/read.cpp"
 var $_01265=1;var $f_i234_sroa_55_6=$f_i234_sroa_55_5;label=360;break; //@line 22 "inc/front.h"
 case 360: 
 var $f_i234_sroa_55_6;
 var $_01265;
 var $1946=((($f_i234_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1947=$f_i234_sroa_55_6&$storemerge_i_i_i239; //@line 23 "inc/front.h"
 var $1948=(($1811+($1947<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($1948)>>2)]=$_01264; //@line 23 "inc/front.h"
 var $1949=((($_01265)-(1))|0); //@line 23 "inc/front.h"
 var $1950=($1949|0)==0; //@line 23 "inc/front.h"
 if($1950){label=361;break;}else{var $_01265=$1949;var $f_i234_sroa_55_6=$1946;label=360;break;} //@line 23 "inc/front.h"
 case 361: 
 var $1951=((($x_i235_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21271=$1944;var $f_i234_sroa_55_5=$1946;var $x_i235_0=$1951;label=348;break; //@line 49 "src/read.cpp"
 case 362: 
 var $1953$0 = ___cxa_find_matching_catch(-1, -1); var $1953$1 = tempRet0;
 var $1954=$1953$0;
 var $1955=$1953$1;
 var $1956=($1778|0)==0;
 if($1956){var $_01272=$1954;var $_01273=$1955;label=374;break;}else{label=363;break;}
 case 363: 
 _free($1778);
 var $_01272=$1954;var $_01273=$1955;label=374;break;
 case 364: 
 var $1959$0 = ___cxa_find_matching_catch(-1, -1); var $1959$1 = tempRet0;
 var $1960=$1959$0;
 var $1961=$1959$1;
 var $1962=($1803|0)==0; //@line 11 "inc/front.h"
 if($1962){var $_01272=$1960;var $_01273=$1961;label=374;break;}else{label=365;break;} //@line 11 "inc/front.h"
 case 365: 
 _free($1803);
 var $_01272=$1960;var $_01273=$1961;label=374;break; //@line 11 "inc/front.h"
 case 366: 
 var $1964=((($y_i236_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11270=$_21271;var $f_i234_sroa_55_3=$f_i234_sroa_55_5;var $y_i236_0=$1964;label=346;break; //@line 48 "src/read.cpp"
 case 367: 
 var $1966=((($z_i237_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01269=$_11270;var $f_i234_sroa_55_1=$f_i234_sroa_55_3;var $z_i237_0=$1966;label=344;break; //@line 47 "src/read.cpp"
 case 368: 
 var $1968=($1782|0)==0; //@line 69 "src/read.cpp"
 if($1968){label=370;break;}else{label=369;break;} //@line 69 "src/read.cpp"
 case 369: 
 _free($1782);
 label=370;break; //@line 69 "src/read.cpp"
 case 370: 
 var $1970=HEAP32[(($rm_i232)>>2)]; //@line 70 "src/read.cpp"
 var $1971=($1970|0)==0; //@line 70 "src/read.cpp"
 if($1971){label=372;break;}else{label=371;break;} //@line 70 "src/read.cpp"
 case 371: 
 var $1973=$1970; //@line 70 "src/read.cpp"
 var $1974=HEAP32[(($1973)>>2)]; //@line 70 "src/read.cpp"
 var $1975=(($1974+4)|0); //@line 70 "src/read.cpp"
 var $1976=HEAP32[(($1975)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1976]($1970); //@line 70 "src/read.cpp"
 label=372;break; //@line 70 "src/read.cpp"
 case 372: 
 var $1978=($1803|0)==0; //@line 11 "inc/front.h"
 if($1978){label=1257;break;}else{label=373;break;} //@line 11 "inc/front.h"
 case 373: 
 _free($1803);
 label=1257;break; //@line 11 "inc/front.h"
 case 374: 
 var $_01273;
 var $_01272;
 var $1979$0=$_01272;
 var $1979$1=0;
 var $1980$0=$1979$0;
 var $1980$1=$_01273;
 ___resumeException($1980$0) //@line 71 "src/read.cpp"
 case 375: 
 var $1982=HEAP32[(($3)>>2)]; //@line 177 "src/read.cpp"
 var $1983=HEAP32[(($4)>>2)]; //@line 177 "src/read.cpp"
 var $1984=HEAP32[(($5)>>2)]; //@line 177 "src/read.cpp"
 var $1985=HEAP32[(($6)>>2)]; //@line 177 "src/read.cpp"
 var $$etemp$50$0=4;
 var $$etemp$50$1=0;

 var $1986=__Znwj(48); //@line 41 "src/read.cpp"
 var $1987=$1986; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1987,0,25,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=376;break; } else { label=404;break; } //@line 41 "src/read.cpp"
 case 376: 
 var $1989=$1986; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i268)>>2)]=$1989; //@line 71 "src/read.cpp"
 var $1990=__Znwj(12); //@line 42 "src/read.cpp"
 var $1991=(($1990+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1992=$1991; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1992)>>2)]=$1982; //@line 34 "inc/pcdecoder.inl"
 var $1993=(($1990+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1994=$1993; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1994)>>2)]=$rm_i268; //@line 34 "inc/pcdecoder.inl"
 var $1995=((($1983)+(1))|0); //@line 10 "inc/front.h"
 var $1996=((($1984)+(1))|0); //@line 10 "inc/front.h"
 var $1997=(Math_imul($1995,$1996)|0); //@line 10 "inc/front.h"
 var $1998=((($1983)+(2))|0); //@line 9 "inc/front.h"
 var $1999=((($1998)+($1997))|0); //@line 9 "inc/front.h"
 var $2000=((($1999)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i275=$2000;label=377;break; //@line 45 "inc/front.h"
 case 377: 
 var $storemerge_i_i_i275;
 var $2002=((($storemerge_i_i_i275)+(1))|0); //@line 45 "inc/front.h"
 var $2003=$storemerge_i_i_i275&$2002; //@line 45 "inc/front.h"
 var $2004=($2003|0)==0; //@line 45 "inc/front.h"
 if($2004){label=379;break;}else{label=378;break;} //@line 45 "inc/front.h"
 case 378: 
 var $2006=$storemerge_i_i_i275|$2002; //@line 45 "inc/front.h"
 var $storemerge_i_i_i275=$2006;label=377;break; //@line 45 "inc/front.h"
 case 379: 
 var $2007$0=_llvm_umul_with_overflow_i32($2002,4);
 var $2007$1=tempRet0;
 var $2008=$2007$1;
 var $2009=$2007$0;
 var $2010=($2008?-1:$2009); //@line 9 "inc/front.h"
 var $2011=(function() { try { __THREW__ = 0; return __Znwj($2010) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=383;break; } else { label=380;break; }
 case 380: 
 var $2013$0 = ___cxa_find_matching_catch(-1, -1); var $2013$1 = tempRet0;
 var $2014=$2013$1;
 var $2015=($2014|0)<0;
 if($2015){label=381;break;}else{label=382;break;}
 case 381: 
 var $2017=$2013$0;
 ___cxa_call_unexpected($2017);
 throw "Reached an unreachable!";
 case 382: 
 ___resumeException($2013$0)
 case 383: 
 var $2019=$2011; //@line 9 "inc/front.h"
 var $_01256=$1997;var $f_i270_sroa_55_0=0;label=384;break; //@line 22 "inc/front.h"
 case 384: 
 var $f_i270_sroa_55_0;
 var $_01256;
 var $2021=((($f_i270_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2022=$f_i270_sroa_55_0&$storemerge_i_i_i275; //@line 23 "inc/front.h"
 var $2023=(($2019+($2022<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2023)>>2)]=0; //@line 23 "inc/front.h"
 var $2024=((($_01256)-(1))|0); //@line 23 "inc/front.h"
 var $2025=($2024|0)==0; //@line 23 "inc/front.h"
 if($2025){label=385;break;}else{var $_01256=$2024;var $f_i270_sroa_55_0=$2021;label=384;break;} //@line 23 "inc/front.h"
 case 385: 
 var $2026=(($1990+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2027=$2026; //@line 50 "inc/pcdecoder.inl"
 var $2028=(($1990+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2029=$2028; //@line 50 "inc/pcdecoder.inl"
 var $_01258=$_01012;var $f_i270_sroa_55_1=$2021;var $z_i273_0=0;label=386;break; //@line 47 "src/read.cpp"
 case 386: 
 var $z_i273_0;
 var $f_i270_sroa_55_1;
 var $_01258;
 var $2031=($z_i273_0>>>0)<($1985>>>0); //@line 47 "src/read.cpp"
 if($2031){var $_01255=$1995;var $f_i270_sroa_55_2=$f_i270_sroa_55_1;label=387;break;}else{label=410;break;} //@line 47 "src/read.cpp"
 case 387: 
 var $f_i270_sroa_55_2;
 var $_01255;
 var $2033=((($f_i270_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2034=$f_i270_sroa_55_2&$storemerge_i_i_i275; //@line 23 "inc/front.h"
 var $2035=(($2019+($2034<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2035)>>2)]=0; //@line 23 "inc/front.h"
 var $2036=((($_01255)-(1))|0); //@line 23 "inc/front.h"
 var $2037=($2036|0)==0; //@line 23 "inc/front.h"
 if($2037){var $_11259=$_01258;var $f_i270_sroa_55_3=$2033;var $y_i272_0=0;label=388;break;}else{var $_01255=$2036;var $f_i270_sroa_55_2=$2033;label=387;break;} //@line 23 "inc/front.h"
 case 388: 
 var $y_i272_0;
 var $f_i270_sroa_55_3;
 var $_11259;
 var $2038=($y_i272_0>>>0)<($1984>>>0); //@line 48 "src/read.cpp"
 if($2038){var $_01254=1;var $f_i270_sroa_55_4=$f_i270_sroa_55_3;label=389;break;}else{label=409;break;} //@line 48 "src/read.cpp"
 case 389: 
 var $f_i270_sroa_55_4;
 var $_01254;
 var $2040=((($f_i270_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2041=$f_i270_sroa_55_4&$storemerge_i_i_i275; //@line 23 "inc/front.h"
 var $2042=(($2019+($2041<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2042)>>2)]=0; //@line 23 "inc/front.h"
 var $2043=((($_01254)-(1))|0); //@line 23 "inc/front.h"
 var $2044=($2043|0)==0; //@line 23 "inc/front.h"
 if($2044){var $_21260=$_11259;var $f_i270_sroa_55_5=$2040;var $x_i271_0=0;label=390;break;}else{var $_01254=$2043;var $f_i270_sroa_55_4=$2040;label=389;break;} //@line 23 "inc/front.h"
 case 390: 
 var $x_i271_0;
 var $f_i270_sroa_55_5;
 var $_21260;
 var $2045=($x_i271_0>>>0)<($1983>>>0); //@line 49 "src/read.cpp"
 if($2045){label=391;break;}else{label=408;break;} //@line 49 "src/read.cpp"
 case 391: 
 var $2047=((($f_i270_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2048=$2047&$storemerge_i_i_i275; //@line 16 "inc/front.h"
 var $2049=(($2019+($2048<<2))|0); //@line 16 "inc/front.h"
 var $2050=HEAPF32[(($2049)>>2)]; //@line 59 "src/read.cpp"
 var $2051=((($f_i270_sroa_55_5)-($1995))|0); //@line 16 "inc/front.h"
 var $2052=((($2051)-($1997))|0); //@line 16 "inc/front.h"
 var $2053=$2052&$storemerge_i_i_i275; //@line 16 "inc/front.h"
 var $2054=(($2019+($2053<<2))|0); //@line 16 "inc/front.h"
 var $2055=HEAPF32[(($2054)>>2)]; //@line 59 "src/read.cpp"
 var $2056=$2051&$storemerge_i_i_i275; //@line 16 "inc/front.h"
 var $2057=(($2019+($2056<<2))|0); //@line 16 "inc/front.h"
 var $2058=HEAPF32[(($2057)>>2)]; //@line 60 "src/read.cpp"
 var $2059=((($2047)-($1997))|0); //@line 16 "inc/front.h"
 var $2060=$2059&$storemerge_i_i_i275; //@line 16 "inc/front.h"
 var $2061=(($2019+($2060<<2))|0); //@line 16 "inc/front.h"
 var $2062=HEAPF32[(($2061)>>2)]; //@line 60 "src/read.cpp"
 var $2063=((($f_i270_sroa_55_5)-($1997))|0); //@line 16 "inc/front.h"
 var $2064=$2063&$storemerge_i_i_i275; //@line 16 "inc/front.h"
 var $2065=(($2019+($2064<<2))|0); //@line 16 "inc/front.h"
 var $2066=HEAPF32[(($2065)>>2)]; //@line 61 "src/read.cpp"
 var $2067=((($2047)-($1995))|0); //@line 16 "inc/front.h"
 var $2068=$2067&$storemerge_i_i_i275; //@line 16 "inc/front.h"
 var $2069=(($2019+($2068<<2))|0); //@line 16 "inc/front.h"
 var $2070=HEAPF32[(($2069)>>2)]; //@line 61 "src/read.cpp"
 var $2071=((($2067)-($1997))|0); //@line 16 "inc/front.h"
 var $2072=$2071&$storemerge_i_i_i275; //@line 16 "inc/front.h"
 var $2073=(($2019+($2072<<2))|0); //@line 16 "inc/front.h"
 var $2074=($2050)-($2055); //@line 59 "src/read.cpp"
 var $2075=($2074)+($2058); //@line 60 "src/read.cpp"
 var $2076=($2075)-($2062); //@line 60 "src/read.cpp"
 var $2077=($2076)+($2066); //@line 61 "src/read.cpp"
 var $2078=($2077)-($2070); //@line 61 "src/read.cpp"
 var $2079=HEAPF32[(($2073)>>2)]; //@line 62 "src/read.cpp"
 var $2080=($2078)+($2079); //@line 62 "src/read.cpp"
 var $2081=HEAP32[(($2027)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2082=HEAP32[(($2029)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2083=HEAP32[(($2082)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$51$0=4;
 var $$etemp$51$1=0;

 var $$etemp$52$0=4;
 var $$etemp$52$1=0;

 var $2084=$2083; //@line 25 "src/rcdecoder.cpp"
 var $2085=HEAP32[(($2084)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2086=(($2085+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2087=HEAP32[(($2086)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2088=(($2081+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2087]($2083,$2088) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=392;break; } else { label=406;break; }
 case 392: 
 var $2089=(($2081+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2090=HEAP32[(($2089)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2091=(($2081+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2092=HEAP32[(($2091)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2093=((($2090)-($2092))|0); //@line 26 "src/rcdecoder.cpp"
 var $2094=HEAP32[(($2088)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2095=(((($2093>>>0))/(($2094>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i262)>>2)]=$2095; //@line 26 "src/rcdecoder.cpp"
 var $2096=$2083; //@line 27 "src/rcdecoder.cpp"
 var $2097=HEAP32[(($2096)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2098=(($2097+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2099=HEAP32[(($2098)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2100=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2099]($2083,$l_i_i_i262,$r_i_i_i263) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=393;break; } else { label=406;break; }
 case 393: 
 var $2101=HEAP32[(($2088)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2102=HEAP32[(($l_i_i_i262)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2103=(Math_imul($2101,$2102)|0); //@line 28 "src/rcdecoder.cpp"
 var $2104=HEAP32[(($2091)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2105=((($2104)+($2103))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2091)>>2)]=$2105; //@line 28 "src/rcdecoder.cpp"
 var $2106=HEAP32[(($r_i_i_i263)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2107=(Math_imul($2101,$2106)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2088)>>2)]=$2107; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2081) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=394;break; } else { label=406;break; }
 case 394: 
 var $$etemp$53$0=4;
 var $$etemp$53$1=0;

 var $$etemp$54$0=4;
 var $$etemp$54$1=0;

 var $2108=($2100>>>0)>12; //@line 51 "inc/pcdecoder.inl"
 if($2108){label=395;break;}else{label=397;break;} //@line 51 "inc/pcdecoder.inl"
 case 395: 
 var $2110=((($2100)-(13))|0); //@line 52 "inc/pcdecoder.inl"
 var $2111=HEAP32[(($2027)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2112=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2111,$2110) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=396;break; } else { label=406;break; }
 case 396: 
 var $2113=1<<$2110; //@line 53 "inc/pcdecoder.inl"
 var $2114=((($2113)+($2112))|0); //@line 53 "inc/pcdecoder.inl"
 var $2115=(HEAPF32[((tempDoublePtr)>>2)]=$2080,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2116=$2115^-1; //@line 38 "inc/pcmap.h"
 var $2117=$2116>>>20; //@line 39 "inc/pcmap.h"
 var $2118=$2116>>31; //@line 40 "inc/pcmap.h"
 var $2119=$2118>>>21; //@line 40 "inc/pcmap.h"
 var $2120=$2117^$2119; //@line 40 "inc/pcmap.h"
 var $2121=((($2120)+($2114))|0); //@line 55 "inc/pcdecoder.inl"
 var $2122=$2121>>>11; //@line 48 "inc/pcmap.h"
 var $2123=(((-$2122))|0); //@line 48 "inc/pcmap.h"
 var $2124=$2123>>>21; //@line 48 "inc/pcmap.h"
 var $2125=$2124^$2121; //@line 48 "inc/pcmap.h"
 var $2126=$2125<<20; //@line 50 "inc/pcmap.h"
 var $2127=$2126^-1048576; //@line 50 "inc/pcmap.h"
 var $_01251_in=$2127;label=401;break; //@line 56 "inc/pcdecoder.inl"
 case 397: 
 var $2129=($2100>>>0)<12; //@line undefined "inc/pcdecoder.inl"
 if($2129){label=398;break;}else{label=400;break;} //@line undefined "inc/pcdecoder.inl"
 case 398: 
 var $2131=(((11)-($2100))|0); //@line 59 "inc/pcdecoder.inl"
 var $2132=HEAP32[(($2027)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2133=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2132,$2131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=399;break; } else { label=406;break; }
 case 399: 
 var $2134=1<<$2131; //@line 60 "inc/pcdecoder.inl"
 var $2135=((($2134)+($2133))|0); //@line 60 "inc/pcdecoder.inl"
 var $2136=(HEAPF32[((tempDoublePtr)>>2)]=$2080,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2137=$2136^-1; //@line 38 "inc/pcmap.h"
 var $2138=$2137>>>20; //@line 39 "inc/pcmap.h"
 var $2139=$2137>>31; //@line 40 "inc/pcmap.h"
 var $2140=$2139>>>21; //@line 40 "inc/pcmap.h"
 var $2141=$2138^$2140; //@line 40 "inc/pcmap.h"
 var $2142=((($2141)-($2135))|0); //@line 62 "inc/pcdecoder.inl"
 var $2143=$2142>>>11; //@line 48 "inc/pcmap.h"
 var $2144=(((-$2143))|0); //@line 48 "inc/pcmap.h"
 var $2145=$2144>>>21; //@line 48 "inc/pcmap.h"
 var $2146=$2145^$2142; //@line 48 "inc/pcmap.h"
 var $2147=$2146<<20; //@line 50 "inc/pcmap.h"
 var $2148=$2147^-1048576; //@line 50 "inc/pcmap.h"
 var $_01251_in=$2148;label=401;break; //@line 63 "inc/pcdecoder.inl"
 case 400: 
 var $2150=(HEAPF32[((tempDoublePtr)>>2)]=$2080,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2151=$2150&-1048576; //@line 60 "inc/pcmap.h"
 var $_01251_in=$2151;label=401;break; //@line 66 "inc/pcdecoder.inl"
 case 401: 
 var $_01251_in;
 var $_01251=(HEAP32[((tempDoublePtr)>>2)]=$_01251_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $2152=(($_21260+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21260)>>2)]=$_01251; //@line 65 "src/read.cpp"
 var $_01253=1;var $f_i270_sroa_55_6=$f_i270_sroa_55_5;label=402;break; //@line 22 "inc/front.h"
 case 402: 
 var $f_i270_sroa_55_6;
 var $_01253;
 var $2154=((($f_i270_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2155=$f_i270_sroa_55_6&$storemerge_i_i_i275; //@line 23 "inc/front.h"
 var $2156=(($2019+($2155<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2156)>>2)]=$_01251; //@line 23 "inc/front.h"
 var $2157=((($_01253)-(1))|0); //@line 23 "inc/front.h"
 var $2158=($2157|0)==0; //@line 23 "inc/front.h"
 if($2158){label=403;break;}else{var $_01253=$2157;var $f_i270_sroa_55_6=$2154;label=402;break;} //@line 23 "inc/front.h"
 case 403: 
 var $2159=((($x_i271_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21260=$2152;var $f_i270_sroa_55_5=$2154;var $x_i271_0=$2159;label=390;break; //@line 49 "src/read.cpp"
 case 404: 
 var $2161$0 = ___cxa_find_matching_catch(-1, -1); var $2161$1 = tempRet0;
 var $2162=$2161$0;
 var $2163=$2161$1;
 var $2164=($1986|0)==0;
 if($2164){var $_01261=$2162;var $_01262=$2163;label=416;break;}else{label=405;break;}
 case 405: 
 _free($1986);
 var $_01261=$2162;var $_01262=$2163;label=416;break;
 case 406: 
 var $2167$0 = ___cxa_find_matching_catch(-1, -1); var $2167$1 = tempRet0;
 var $2168=$2167$0;
 var $2169=$2167$1;
 var $2170=($2011|0)==0; //@line 11 "inc/front.h"
 if($2170){var $_01261=$2168;var $_01262=$2169;label=416;break;}else{label=407;break;} //@line 11 "inc/front.h"
 case 407: 
 _free($2011);
 var $_01261=$2168;var $_01262=$2169;label=416;break; //@line 11 "inc/front.h"
 case 408: 
 var $2172=((($y_i272_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11259=$_21260;var $f_i270_sroa_55_3=$f_i270_sroa_55_5;var $y_i272_0=$2172;label=388;break; //@line 48 "src/read.cpp"
 case 409: 
 var $2174=((($z_i273_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01258=$_11259;var $f_i270_sroa_55_1=$f_i270_sroa_55_3;var $z_i273_0=$2174;label=386;break; //@line 47 "src/read.cpp"
 case 410: 
 var $2176=($1990|0)==0; //@line 69 "src/read.cpp"
 if($2176){label=412;break;}else{label=411;break;} //@line 69 "src/read.cpp"
 case 411: 
 _free($1990);
 label=412;break; //@line 69 "src/read.cpp"
 case 412: 
 var $2178=HEAP32[(($rm_i268)>>2)]; //@line 70 "src/read.cpp"
 var $2179=($2178|0)==0; //@line 70 "src/read.cpp"
 if($2179){label=414;break;}else{label=413;break;} //@line 70 "src/read.cpp"
 case 413: 
 var $2181=$2178; //@line 70 "src/read.cpp"
 var $2182=HEAP32[(($2181)>>2)]; //@line 70 "src/read.cpp"
 var $2183=(($2182+4)|0); //@line 70 "src/read.cpp"
 var $2184=HEAP32[(($2183)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2184]($2178); //@line 70 "src/read.cpp"
 label=414;break; //@line 70 "src/read.cpp"
 case 414: 
 var $2186=($2011|0)==0; //@line 11 "inc/front.h"
 if($2186){label=1257;break;}else{label=415;break;} //@line 11 "inc/front.h"
 case 415: 
 _free($2011);
 label=1257;break; //@line 11 "inc/front.h"
 case 416: 
 var $_01262;
 var $_01261;
 var $2187$0=$_01261;
 var $2187$1=0;
 var $2188$0=$2187$0;
 var $2188$1=$_01262;
 ___resumeException($2188$0) //@line 71 "src/read.cpp"
 case 417: 
 var $2190=HEAP32[(($3)>>2)]; //@line 178 "src/read.cpp"
 var $2191=HEAP32[(($4)>>2)]; //@line 178 "src/read.cpp"
 var $2192=HEAP32[(($5)>>2)]; //@line 178 "src/read.cpp"
 var $2193=HEAP32[(($6)>>2)]; //@line 178 "src/read.cpp"
 var $$etemp$55$0=4;
 var $$etemp$55$1=0;

 var $2194=__Znwj(48); //@line 41 "src/read.cpp"
 var $2195=$2194; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2195,0,27,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=418;break; } else { label=446;break; } //@line 41 "src/read.cpp"
 case 418: 
 var $2197=$2194; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i304)>>2)]=$2197; //@line 71 "src/read.cpp"
 var $2198=__Znwj(12); //@line 42 "src/read.cpp"
 var $2199=(($2198+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2200=$2199; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2200)>>2)]=$2190; //@line 34 "inc/pcdecoder.inl"
 var $2201=(($2198+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2202=$2201; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2202)>>2)]=$rm_i304; //@line 34 "inc/pcdecoder.inl"
 var $2203=((($2191)+(1))|0); //@line 10 "inc/front.h"
 var $2204=((($2192)+(1))|0); //@line 10 "inc/front.h"
 var $2205=(Math_imul($2203,$2204)|0); //@line 10 "inc/front.h"
 var $2206=((($2191)+(2))|0); //@line 9 "inc/front.h"
 var $2207=((($2206)+($2205))|0); //@line 9 "inc/front.h"
 var $2208=((($2207)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i311=$2208;label=419;break; //@line 45 "inc/front.h"
 case 419: 
 var $storemerge_i_i_i311;
 var $2210=((($storemerge_i_i_i311)+(1))|0); //@line 45 "inc/front.h"
 var $2211=$storemerge_i_i_i311&$2210; //@line 45 "inc/front.h"
 var $2212=($2211|0)==0; //@line 45 "inc/front.h"
 if($2212){label=421;break;}else{label=420;break;} //@line 45 "inc/front.h"
 case 420: 
 var $2214=$storemerge_i_i_i311|$2210; //@line 45 "inc/front.h"
 var $storemerge_i_i_i311=$2214;label=419;break; //@line 45 "inc/front.h"
 case 421: 
 var $2215$0=_llvm_umul_with_overflow_i32($2210,4);
 var $2215$1=tempRet0;
 var $2216=$2215$1;
 var $2217=$2215$0;
 var $2218=($2216?-1:$2217); //@line 9 "inc/front.h"
 var $2219=(function() { try { __THREW__ = 0; return __Znwj($2218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=425;break; } else { label=422;break; }
 case 422: 
 var $2221$0 = ___cxa_find_matching_catch(-1, -1); var $2221$1 = tempRet0;
 var $2222=$2221$1;
 var $2223=($2222|0)<0;
 if($2223){label=423;break;}else{label=424;break;}
 case 423: 
 var $2225=$2221$0;
 ___cxa_call_unexpected($2225);
 throw "Reached an unreachable!";
 case 424: 
 ___resumeException($2221$0)
 case 425: 
 var $2227=$2219; //@line 9 "inc/front.h"
 var $_01242=$2205;var $f_i306_sroa_55_0=0;label=426;break; //@line 22 "inc/front.h"
 case 426: 
 var $f_i306_sroa_55_0;
 var $_01242;
 var $2229=((($f_i306_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2230=$f_i306_sroa_55_0&$storemerge_i_i_i311; //@line 23 "inc/front.h"
 var $2231=(($2227+($2230<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2231)>>2)]=0; //@line 23 "inc/front.h"
 var $2232=((($_01242)-(1))|0); //@line 23 "inc/front.h"
 var $2233=($2232|0)==0; //@line 23 "inc/front.h"
 if($2233){label=427;break;}else{var $_01242=$2232;var $f_i306_sroa_55_0=$2229;label=426;break;} //@line 23 "inc/front.h"
 case 427: 
 var $2234=(($2198+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2235=$2234; //@line 50 "inc/pcdecoder.inl"
 var $2236=(($2198+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2237=$2236; //@line 50 "inc/pcdecoder.inl"
 var $_01246=$_01012;var $f_i306_sroa_55_1=$2229;var $z_i309_0=0;label=428;break; //@line 47 "src/read.cpp"
 case 428: 
 var $z_i309_0;
 var $f_i306_sroa_55_1;
 var $_01246;
 var $2239=($z_i309_0>>>0)<($2193>>>0); //@line 47 "src/read.cpp"
 if($2239){var $_01241=$2203;var $f_i306_sroa_55_2=$f_i306_sroa_55_1;label=429;break;}else{label=452;break;} //@line 47 "src/read.cpp"
 case 429: 
 var $f_i306_sroa_55_2;
 var $_01241;
 var $2241=((($f_i306_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2242=$f_i306_sroa_55_2&$storemerge_i_i_i311; //@line 23 "inc/front.h"
 var $2243=(($2227+($2242<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2243)>>2)]=0; //@line 23 "inc/front.h"
 var $2244=((($_01241)-(1))|0); //@line 23 "inc/front.h"
 var $2245=($2244|0)==0; //@line 23 "inc/front.h"
 if($2245){var $_11247=$_01246;var $f_i306_sroa_55_3=$2241;var $y_i308_0=0;label=430;break;}else{var $_01241=$2244;var $f_i306_sroa_55_2=$2241;label=429;break;} //@line 23 "inc/front.h"
 case 430: 
 var $y_i308_0;
 var $f_i306_sroa_55_3;
 var $_11247;
 var $2246=($y_i308_0>>>0)<($2192>>>0); //@line 48 "src/read.cpp"
 if($2246){var $_01240=1;var $f_i306_sroa_55_4=$f_i306_sroa_55_3;label=431;break;}else{label=451;break;} //@line 48 "src/read.cpp"
 case 431: 
 var $f_i306_sroa_55_4;
 var $_01240;
 var $2248=((($f_i306_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2249=$f_i306_sroa_55_4&$storemerge_i_i_i311; //@line 23 "inc/front.h"
 var $2250=(($2227+($2249<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2250)>>2)]=0; //@line 23 "inc/front.h"
 var $2251=((($_01240)-(1))|0); //@line 23 "inc/front.h"
 var $2252=($2251|0)==0; //@line 23 "inc/front.h"
 if($2252){var $_21248=$_11247;var $f_i306_sroa_55_5=$2248;var $x_i307_0=0;label=432;break;}else{var $_01240=$2251;var $f_i306_sroa_55_4=$2248;label=431;break;} //@line 23 "inc/front.h"
 case 432: 
 var $x_i307_0;
 var $f_i306_sroa_55_5;
 var $_21248;
 var $2253=($x_i307_0>>>0)<($2191>>>0); //@line 49 "src/read.cpp"
 if($2253){label=433;break;}else{label=450;break;} //@line 49 "src/read.cpp"
 case 433: 
 var $2255=((($f_i306_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2256=$2255&$storemerge_i_i_i311; //@line 16 "inc/front.h"
 var $2257=(($2227+($2256<<2))|0); //@line 16 "inc/front.h"
 var $2258=HEAPF32[(($2257)>>2)]; //@line 59 "src/read.cpp"
 var $2259=((($f_i306_sroa_55_5)-($2203))|0); //@line 16 "inc/front.h"
 var $2260=((($2259)-($2205))|0); //@line 16 "inc/front.h"
 var $2261=$2260&$storemerge_i_i_i311; //@line 16 "inc/front.h"
 var $2262=(($2227+($2261<<2))|0); //@line 16 "inc/front.h"
 var $2263=HEAPF32[(($2262)>>2)]; //@line 59 "src/read.cpp"
 var $2264=$2259&$storemerge_i_i_i311; //@line 16 "inc/front.h"
 var $2265=(($2227+($2264<<2))|0); //@line 16 "inc/front.h"
 var $2266=HEAPF32[(($2265)>>2)]; //@line 60 "src/read.cpp"
 var $2267=((($2255)-($2205))|0); //@line 16 "inc/front.h"
 var $2268=$2267&$storemerge_i_i_i311; //@line 16 "inc/front.h"
 var $2269=(($2227+($2268<<2))|0); //@line 16 "inc/front.h"
 var $2270=HEAPF32[(($2269)>>2)]; //@line 60 "src/read.cpp"
 var $2271=((($f_i306_sroa_55_5)-($2205))|0); //@line 16 "inc/front.h"
 var $2272=$2271&$storemerge_i_i_i311; //@line 16 "inc/front.h"
 var $2273=(($2227+($2272<<2))|0); //@line 16 "inc/front.h"
 var $2274=HEAPF32[(($2273)>>2)]; //@line 61 "src/read.cpp"
 var $2275=((($2255)-($2203))|0); //@line 16 "inc/front.h"
 var $2276=$2275&$storemerge_i_i_i311; //@line 16 "inc/front.h"
 var $2277=(($2227+($2276<<2))|0); //@line 16 "inc/front.h"
 var $2278=HEAPF32[(($2277)>>2)]; //@line 61 "src/read.cpp"
 var $2279=((($2275)-($2205))|0); //@line 16 "inc/front.h"
 var $2280=$2279&$storemerge_i_i_i311; //@line 16 "inc/front.h"
 var $2281=(($2227+($2280<<2))|0); //@line 16 "inc/front.h"
 var $2282=($2258)-($2263); //@line 59 "src/read.cpp"
 var $2283=($2282)+($2266); //@line 60 "src/read.cpp"
 var $2284=($2283)-($2270); //@line 60 "src/read.cpp"
 var $2285=($2284)+($2274); //@line 61 "src/read.cpp"
 var $2286=($2285)-($2278); //@line 61 "src/read.cpp"
 var $2287=HEAPF32[(($2281)>>2)]; //@line 62 "src/read.cpp"
 var $2288=($2286)+($2287); //@line 62 "src/read.cpp"
 var $2289=HEAP32[(($2235)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2290=HEAP32[(($2237)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2291=HEAP32[(($2290)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$56$0=4;
 var $$etemp$56$1=0;

 var $$etemp$57$0=4;
 var $$etemp$57$1=0;

 var $2292=$2291; //@line 25 "src/rcdecoder.cpp"
 var $2293=HEAP32[(($2292)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2294=(($2293+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2295=HEAP32[(($2294)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2296=(($2289+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2295]($2291,$2296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=434;break; } else { label=448;break; }
 case 434: 
 var $2297=(($2289+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2298=HEAP32[(($2297)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2299=(($2289+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2300=HEAP32[(($2299)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2301=((($2298)-($2300))|0); //@line 26 "src/rcdecoder.cpp"
 var $2302=HEAP32[(($2296)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2303=(((($2301>>>0))/(($2302>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i298)>>2)]=$2303; //@line 26 "src/rcdecoder.cpp"
 var $2304=$2291; //@line 27 "src/rcdecoder.cpp"
 var $2305=HEAP32[(($2304)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2306=(($2305+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2307=HEAP32[(($2306)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2308=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2307]($2291,$l_i_i_i298,$r_i_i_i299) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=435;break; } else { label=448;break; }
 case 435: 
 var $2309=HEAP32[(($2296)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2310=HEAP32[(($l_i_i_i298)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2311=(Math_imul($2309,$2310)|0); //@line 28 "src/rcdecoder.cpp"
 var $2312=HEAP32[(($2299)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2313=((($2312)+($2311))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2299)>>2)]=$2313; //@line 28 "src/rcdecoder.cpp"
 var $2314=HEAP32[(($r_i_i_i299)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2315=(Math_imul($2309,$2314)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2296)>>2)]=$2315; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2289) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=436;break; } else { label=448;break; }
 case 436: 
 var $$etemp$58$0=4;
 var $$etemp$58$1=0;

 var $$etemp$59$0=4;
 var $$etemp$59$1=0;

 var $2316=($2308>>>0)>13; //@line 51 "inc/pcdecoder.inl"
 if($2316){label=437;break;}else{label=439;break;} //@line 51 "inc/pcdecoder.inl"
 case 437: 
 var $2318=((($2308)-(14))|0); //@line 52 "inc/pcdecoder.inl"
 var $2319=HEAP32[(($2235)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2320=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2319,$2318) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=438;break; } else { label=448;break; }
 case 438: 
 var $2321=1<<$2318; //@line 53 "inc/pcdecoder.inl"
 var $2322=((($2321)+($2320))|0); //@line 53 "inc/pcdecoder.inl"
 var $2323=(HEAPF32[((tempDoublePtr)>>2)]=$2288,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2324=$2323^-1; //@line 38 "inc/pcmap.h"
 var $2325=$2324>>>19; //@line 39 "inc/pcmap.h"
 var $2326=$2324>>31; //@line 40 "inc/pcmap.h"
 var $2327=$2326>>>20; //@line 40 "inc/pcmap.h"
 var $2328=$2325^$2327; //@line 40 "inc/pcmap.h"
 var $2329=((($2328)+($2322))|0); //@line 55 "inc/pcdecoder.inl"
 var $2330=$2329>>>12; //@line 48 "inc/pcmap.h"
 var $2331=(((-$2330))|0); //@line 48 "inc/pcmap.h"
 var $2332=$2331>>>20; //@line 48 "inc/pcmap.h"
 var $2333=$2332^$2329; //@line 48 "inc/pcmap.h"
 var $2334=$2333<<19; //@line 50 "inc/pcmap.h"
 var $2335=$2334^-524288; //@line 50 "inc/pcmap.h"
 var $_01236_in=$2335;label=443;break; //@line 56 "inc/pcdecoder.inl"
 case 439: 
 var $2337=($2308>>>0)<13; //@line undefined "inc/pcdecoder.inl"
 if($2337){label=440;break;}else{label=442;break;} //@line undefined "inc/pcdecoder.inl"
 case 440: 
 var $2339=(((12)-($2308))|0); //@line 59 "inc/pcdecoder.inl"
 var $2340=HEAP32[(($2235)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2341=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2340,$2339) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=441;break; } else { label=448;break; }
 case 441: 
 var $2342=1<<$2339; //@line 60 "inc/pcdecoder.inl"
 var $2343=((($2342)+($2341))|0); //@line 60 "inc/pcdecoder.inl"
 var $2344=(HEAPF32[((tempDoublePtr)>>2)]=$2288,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2345=$2344^-1; //@line 38 "inc/pcmap.h"
 var $2346=$2345>>>19; //@line 39 "inc/pcmap.h"
 var $2347=$2345>>31; //@line 40 "inc/pcmap.h"
 var $2348=$2347>>>20; //@line 40 "inc/pcmap.h"
 var $2349=$2346^$2348; //@line 40 "inc/pcmap.h"
 var $2350=((($2349)-($2343))|0); //@line 62 "inc/pcdecoder.inl"
 var $2351=$2350>>>12; //@line 48 "inc/pcmap.h"
 var $2352=(((-$2351))|0); //@line 48 "inc/pcmap.h"
 var $2353=$2352>>>20; //@line 48 "inc/pcmap.h"
 var $2354=$2353^$2350; //@line 48 "inc/pcmap.h"
 var $2355=$2354<<19; //@line 50 "inc/pcmap.h"
 var $2356=$2355^-524288; //@line 50 "inc/pcmap.h"
 var $_01236_in=$2356;label=443;break; //@line 63 "inc/pcdecoder.inl"
 case 442: 
 var $2358=(HEAPF32[((tempDoublePtr)>>2)]=$2288,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2359=$2358&-524288; //@line 60 "inc/pcmap.h"
 var $_01236_in=$2359;label=443;break; //@line 66 "inc/pcdecoder.inl"
 case 443: 
 var $_01236_in;
 var $_01236=(HEAP32[((tempDoublePtr)>>2)]=$_01236_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $2360=(($_21248+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21248)>>2)]=$_01236; //@line 65 "src/read.cpp"
 var $_01237=1;var $f_i306_sroa_55_6=$f_i306_sroa_55_5;label=444;break; //@line 22 "inc/front.h"
 case 444: 
 var $f_i306_sroa_55_6;
 var $_01237;
 var $2362=((($f_i306_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2363=$f_i306_sroa_55_6&$storemerge_i_i_i311; //@line 23 "inc/front.h"
 var $2364=(($2227+($2363<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2364)>>2)]=$_01236; //@line 23 "inc/front.h"
 var $2365=((($_01237)-(1))|0); //@line 23 "inc/front.h"
 var $2366=($2365|0)==0; //@line 23 "inc/front.h"
 if($2366){label=445;break;}else{var $_01237=$2365;var $f_i306_sroa_55_6=$2362;label=444;break;} //@line 23 "inc/front.h"
 case 445: 
 var $2367=((($x_i307_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21248=$2360;var $f_i306_sroa_55_5=$2362;var $x_i307_0=$2367;label=432;break; //@line 49 "src/read.cpp"
 case 446: 
 var $2369$0 = ___cxa_find_matching_catch(-1, -1); var $2369$1 = tempRet0;
 var $2370=$2369$0;
 var $2371=$2369$1;
 var $2372=($2194|0)==0;
 if($2372){var $_01249=$2370;var $_01250=$2371;label=458;break;}else{label=447;break;}
 case 447: 
 _free($2194);
 var $_01249=$2370;var $_01250=$2371;label=458;break;
 case 448: 
 var $2375$0 = ___cxa_find_matching_catch(-1, -1); var $2375$1 = tempRet0;
 var $2376=$2375$0;
 var $2377=$2375$1;
 var $2378=($2219|0)==0; //@line 11 "inc/front.h"
 if($2378){var $_01249=$2376;var $_01250=$2377;label=458;break;}else{label=449;break;} //@line 11 "inc/front.h"
 case 449: 
 _free($2219);
 var $_01249=$2376;var $_01250=$2377;label=458;break; //@line 11 "inc/front.h"
 case 450: 
 var $2380=((($y_i308_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11247=$_21248;var $f_i306_sroa_55_3=$f_i306_sroa_55_5;var $y_i308_0=$2380;label=430;break; //@line 48 "src/read.cpp"
 case 451: 
 var $2382=((($z_i309_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01246=$_11247;var $f_i306_sroa_55_1=$f_i306_sroa_55_3;var $z_i309_0=$2382;label=428;break; //@line 47 "src/read.cpp"
 case 452: 
 var $2384=($2198|0)==0; //@line 69 "src/read.cpp"
 if($2384){label=454;break;}else{label=453;break;} //@line 69 "src/read.cpp"
 case 453: 
 _free($2198);
 label=454;break; //@line 69 "src/read.cpp"
 case 454: 
 var $2386=HEAP32[(($rm_i304)>>2)]; //@line 70 "src/read.cpp"
 var $2387=($2386|0)==0; //@line 70 "src/read.cpp"
 if($2387){label=456;break;}else{label=455;break;} //@line 70 "src/read.cpp"
 case 455: 
 var $2389=$2386; //@line 70 "src/read.cpp"
 var $2390=HEAP32[(($2389)>>2)]; //@line 70 "src/read.cpp"
 var $2391=(($2390+4)|0); //@line 70 "src/read.cpp"
 var $2392=HEAP32[(($2391)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2392]($2386); //@line 70 "src/read.cpp"
 label=456;break; //@line 70 "src/read.cpp"
 case 456: 
 var $2394=($2219|0)==0; //@line 11 "inc/front.h"
 if($2394){label=1257;break;}else{label=457;break;} //@line 11 "inc/front.h"
 case 457: 
 _free($2219);
 label=1257;break; //@line 11 "inc/front.h"
 case 458: 
 var $_01250;
 var $_01249;
 var $2395$0=$_01249;
 var $2395$1=0;
 var $2396$0=$2395$0;
 var $2396$1=$_01250;
 ___resumeException($2396$0) //@line 71 "src/read.cpp"
 case 459: 
 var $2398=HEAP32[(($3)>>2)]; //@line 179 "src/read.cpp"
 var $2399=HEAP32[(($4)>>2)]; //@line 179 "src/read.cpp"
 var $2400=HEAP32[(($5)>>2)]; //@line 179 "src/read.cpp"
 var $2401=HEAP32[(($6)>>2)]; //@line 179 "src/read.cpp"
 var $$etemp$60$0=4;
 var $$etemp$60$1=0;

 var $2402=__Znwj(48); //@line 41 "src/read.cpp"
 var $2403=$2402; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2403,0,29,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=460;break; } else { label=488;break; } //@line 41 "src/read.cpp"
 case 460: 
 var $2405=$2402; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i340)>>2)]=$2405; //@line 71 "src/read.cpp"
 var $2406=__Znwj(12); //@line 42 "src/read.cpp"
 var $2407=(($2406+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2408=$2407; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2408)>>2)]=$2398; //@line 34 "inc/pcdecoder.inl"
 var $2409=(($2406+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2410=$2409; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2410)>>2)]=$rm_i340; //@line 34 "inc/pcdecoder.inl"
 var $2411=((($2399)+(1))|0); //@line 10 "inc/front.h"
 var $2412=((($2400)+(1))|0); //@line 10 "inc/front.h"
 var $2413=(Math_imul($2411,$2412)|0); //@line 10 "inc/front.h"
 var $2414=((($2399)+(2))|0); //@line 9 "inc/front.h"
 var $2415=((($2414)+($2413))|0); //@line 9 "inc/front.h"
 var $2416=((($2415)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i347=$2416;label=461;break; //@line 45 "inc/front.h"
 case 461: 
 var $storemerge_i_i_i347;
 var $2418=((($storemerge_i_i_i347)+(1))|0); //@line 45 "inc/front.h"
 var $2419=$storemerge_i_i_i347&$2418; //@line 45 "inc/front.h"
 var $2420=($2419|0)==0; //@line 45 "inc/front.h"
 if($2420){label=463;break;}else{label=462;break;} //@line 45 "inc/front.h"
 case 462: 
 var $2422=$storemerge_i_i_i347|$2418; //@line 45 "inc/front.h"
 var $storemerge_i_i_i347=$2422;label=461;break; //@line 45 "inc/front.h"
 case 463: 
 var $2423$0=_llvm_umul_with_overflow_i32($2418,4);
 var $2423$1=tempRet0;
 var $2424=$2423$1;
 var $2425=$2423$0;
 var $2426=($2424?-1:$2425); //@line 9 "inc/front.h"
 var $2427=(function() { try { __THREW__ = 0; return __Znwj($2426) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=467;break; } else { label=464;break; }
 case 464: 
 var $2429$0 = ___cxa_find_matching_catch(-1, -1); var $2429$1 = tempRet0;
 var $2430=$2429$1;
 var $2431=($2430|0)<0;
 if($2431){label=465;break;}else{label=466;break;}
 case 465: 
 var $2433=$2429$0;
 ___cxa_call_unexpected($2433);
 throw "Reached an unreachable!";
 case 466: 
 ___resumeException($2429$0)
 case 467: 
 var $2435=$2427; //@line 9 "inc/front.h"
 var $_01230=$2413;var $f_i342_sroa_55_0=0;label=468;break; //@line 22 "inc/front.h"
 case 468: 
 var $f_i342_sroa_55_0;
 var $_01230;
 var $2437=((($f_i342_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2438=$f_i342_sroa_55_0&$storemerge_i_i_i347; //@line 23 "inc/front.h"
 var $2439=(($2435+($2438<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2439)>>2)]=0; //@line 23 "inc/front.h"
 var $2440=((($_01230)-(1))|0); //@line 23 "inc/front.h"
 var $2441=($2440|0)==0; //@line 23 "inc/front.h"
 if($2441){label=469;break;}else{var $_01230=$2440;var $f_i342_sroa_55_0=$2437;label=468;break;} //@line 23 "inc/front.h"
 case 469: 
 var $2442=(($2406+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2443=$2442; //@line 50 "inc/pcdecoder.inl"
 var $2444=(($2406+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2445=$2444; //@line 50 "inc/pcdecoder.inl"
 var $_01231=$_01012;var $f_i342_sroa_55_1=$2437;var $z_i345_0=0;label=470;break; //@line 47 "src/read.cpp"
 case 470: 
 var $z_i345_0;
 var $f_i342_sroa_55_1;
 var $_01231;
 var $2447=($z_i345_0>>>0)<($2401>>>0); //@line 47 "src/read.cpp"
 if($2447){var $_01229=$2411;var $f_i342_sroa_55_2=$f_i342_sroa_55_1;label=471;break;}else{label=494;break;} //@line 47 "src/read.cpp"
 case 471: 
 var $f_i342_sroa_55_2;
 var $_01229;
 var $2449=((($f_i342_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2450=$f_i342_sroa_55_2&$storemerge_i_i_i347; //@line 23 "inc/front.h"
 var $2451=(($2435+($2450<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2451)>>2)]=0; //@line 23 "inc/front.h"
 var $2452=((($_01229)-(1))|0); //@line 23 "inc/front.h"
 var $2453=($2452|0)==0; //@line 23 "inc/front.h"
 if($2453){var $_11232=$_01231;var $f_i342_sroa_55_3=$2449;var $y_i344_0=0;label=472;break;}else{var $_01229=$2452;var $f_i342_sroa_55_2=$2449;label=471;break;} //@line 23 "inc/front.h"
 case 472: 
 var $y_i344_0;
 var $f_i342_sroa_55_3;
 var $_11232;
 var $2454=($y_i344_0>>>0)<($2400>>>0); //@line 48 "src/read.cpp"
 if($2454){var $_01228=1;var $f_i342_sroa_55_4=$f_i342_sroa_55_3;label=473;break;}else{label=493;break;} //@line 48 "src/read.cpp"
 case 473: 
 var $f_i342_sroa_55_4;
 var $_01228;
 var $2456=((($f_i342_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2457=$f_i342_sroa_55_4&$storemerge_i_i_i347; //@line 23 "inc/front.h"
 var $2458=(($2435+($2457<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2458)>>2)]=0; //@line 23 "inc/front.h"
 var $2459=((($_01228)-(1))|0); //@line 23 "inc/front.h"
 var $2460=($2459|0)==0; //@line 23 "inc/front.h"
 if($2460){var $_21233=$_11232;var $f_i342_sroa_55_5=$2456;var $x_i343_0=0;label=474;break;}else{var $_01228=$2459;var $f_i342_sroa_55_4=$2456;label=473;break;} //@line 23 "inc/front.h"
 case 474: 
 var $x_i343_0;
 var $f_i342_sroa_55_5;
 var $_21233;
 var $2461=($x_i343_0>>>0)<($2399>>>0); //@line 49 "src/read.cpp"
 if($2461){label=475;break;}else{label=492;break;} //@line 49 "src/read.cpp"
 case 475: 
 var $2463=((($f_i342_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2464=$2463&$storemerge_i_i_i347; //@line 16 "inc/front.h"
 var $2465=(($2435+($2464<<2))|0); //@line 16 "inc/front.h"
 var $2466=HEAPF32[(($2465)>>2)]; //@line 59 "src/read.cpp"
 var $2467=((($f_i342_sroa_55_5)-($2411))|0); //@line 16 "inc/front.h"
 var $2468=((($2467)-($2413))|0); //@line 16 "inc/front.h"
 var $2469=$2468&$storemerge_i_i_i347; //@line 16 "inc/front.h"
 var $2470=(($2435+($2469<<2))|0); //@line 16 "inc/front.h"
 var $2471=HEAPF32[(($2470)>>2)]; //@line 59 "src/read.cpp"
 var $2472=$2467&$storemerge_i_i_i347; //@line 16 "inc/front.h"
 var $2473=(($2435+($2472<<2))|0); //@line 16 "inc/front.h"
 var $2474=HEAPF32[(($2473)>>2)]; //@line 60 "src/read.cpp"
 var $2475=((($2463)-($2413))|0); //@line 16 "inc/front.h"
 var $2476=$2475&$storemerge_i_i_i347; //@line 16 "inc/front.h"
 var $2477=(($2435+($2476<<2))|0); //@line 16 "inc/front.h"
 var $2478=HEAPF32[(($2477)>>2)]; //@line 60 "src/read.cpp"
 var $2479=((($f_i342_sroa_55_5)-($2413))|0); //@line 16 "inc/front.h"
 var $2480=$2479&$storemerge_i_i_i347; //@line 16 "inc/front.h"
 var $2481=(($2435+($2480<<2))|0); //@line 16 "inc/front.h"
 var $2482=HEAPF32[(($2481)>>2)]; //@line 61 "src/read.cpp"
 var $2483=((($2463)-($2411))|0); //@line 16 "inc/front.h"
 var $2484=$2483&$storemerge_i_i_i347; //@line 16 "inc/front.h"
 var $2485=(($2435+($2484<<2))|0); //@line 16 "inc/front.h"
 var $2486=HEAPF32[(($2485)>>2)]; //@line 61 "src/read.cpp"
 var $2487=((($2483)-($2413))|0); //@line 16 "inc/front.h"
 var $2488=$2487&$storemerge_i_i_i347; //@line 16 "inc/front.h"
 var $2489=(($2435+($2488<<2))|0); //@line 16 "inc/front.h"
 var $2490=($2466)-($2471); //@line 59 "src/read.cpp"
 var $2491=($2490)+($2474); //@line 60 "src/read.cpp"
 var $2492=($2491)-($2478); //@line 60 "src/read.cpp"
 var $2493=($2492)+($2482); //@line 61 "src/read.cpp"
 var $2494=($2493)-($2486); //@line 61 "src/read.cpp"
 var $2495=HEAPF32[(($2489)>>2)]; //@line 62 "src/read.cpp"
 var $2496=($2494)+($2495); //@line 62 "src/read.cpp"
 var $2497=HEAP32[(($2443)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2498=HEAP32[(($2445)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2499=HEAP32[(($2498)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$61$0=4;
 var $$etemp$61$1=0;

 var $$etemp$62$0=4;
 var $$etemp$62$1=0;

 var $2500=$2499; //@line 25 "src/rcdecoder.cpp"
 var $2501=HEAP32[(($2500)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2502=(($2501+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2503=HEAP32[(($2502)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2504=(($2497+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2503]($2499,$2504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=476;break; } else { label=490;break; }
 case 476: 
 var $2505=(($2497+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2506=HEAP32[(($2505)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2507=(($2497+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2508=HEAP32[(($2507)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2509=((($2506)-($2508))|0); //@line 26 "src/rcdecoder.cpp"
 var $2510=HEAP32[(($2504)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2511=(((($2509>>>0))/(($2510>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i334)>>2)]=$2511; //@line 26 "src/rcdecoder.cpp"
 var $2512=$2499; //@line 27 "src/rcdecoder.cpp"
 var $2513=HEAP32[(($2512)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2514=(($2513+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2515=HEAP32[(($2514)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2516=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2515]($2499,$l_i_i_i334,$r_i_i_i335) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=477;break; } else { label=490;break; }
 case 477: 
 var $2517=HEAP32[(($2504)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2518=HEAP32[(($l_i_i_i334)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2519=(Math_imul($2517,$2518)|0); //@line 28 "src/rcdecoder.cpp"
 var $2520=HEAP32[(($2507)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2521=((($2520)+($2519))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2507)>>2)]=$2521; //@line 28 "src/rcdecoder.cpp"
 var $2522=HEAP32[(($r_i_i_i335)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2523=(Math_imul($2517,$2522)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2504)>>2)]=$2523; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2497) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=478;break; } else { label=490;break; }
 case 478: 
 var $$etemp$63$0=4;
 var $$etemp$63$1=0;

 var $$etemp$64$0=4;
 var $$etemp$64$1=0;

 var $2524=($2516>>>0)>14; //@line 51 "inc/pcdecoder.inl"
 if($2524){label=479;break;}else{label=481;break;} //@line 51 "inc/pcdecoder.inl"
 case 479: 
 var $2526=((($2516)-(15))|0); //@line 52 "inc/pcdecoder.inl"
 var $2527=HEAP32[(($2443)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2528=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2527,$2526) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=480;break; } else { label=490;break; }
 case 480: 
 var $2529=1<<$2526; //@line 53 "inc/pcdecoder.inl"
 var $2530=((($2529)+($2528))|0); //@line 53 "inc/pcdecoder.inl"
 var $2531=(HEAPF32[((tempDoublePtr)>>2)]=$2496,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2532=$2531^-1; //@line 38 "inc/pcmap.h"
 var $2533=$2532>>>18; //@line 39 "inc/pcmap.h"
 var $2534=$2532>>31; //@line 40 "inc/pcmap.h"
 var $2535=$2534>>>19; //@line 40 "inc/pcmap.h"
 var $2536=$2533^$2535; //@line 40 "inc/pcmap.h"
 var $2537=((($2536)+($2530))|0); //@line 55 "inc/pcdecoder.inl"
 var $2538=$2537>>>13; //@line 48 "inc/pcmap.h"
 var $2539=(((-$2538))|0); //@line 48 "inc/pcmap.h"
 var $2540=$2539>>>19; //@line 48 "inc/pcmap.h"
 var $2541=$2540^$2537; //@line 48 "inc/pcmap.h"
 var $2542=$2541<<18; //@line 50 "inc/pcmap.h"
 var $2543=$2542^-262144; //@line 50 "inc/pcmap.h"
 var $_01226_in=$2543;label=485;break; //@line 56 "inc/pcdecoder.inl"
 case 481: 
 var $2545=($2516>>>0)<14; //@line undefined "inc/pcdecoder.inl"
 if($2545){label=482;break;}else{label=484;break;} //@line undefined "inc/pcdecoder.inl"
 case 482: 
 var $2547=(((13)-($2516))|0); //@line 59 "inc/pcdecoder.inl"
 var $2548=HEAP32[(($2443)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2549=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2548,$2547) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=483;break; } else { label=490;break; }
 case 483: 
 var $2550=1<<$2547; //@line 60 "inc/pcdecoder.inl"
 var $2551=((($2550)+($2549))|0); //@line 60 "inc/pcdecoder.inl"
 var $2552=(HEAPF32[((tempDoublePtr)>>2)]=$2496,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2553=$2552^-1; //@line 38 "inc/pcmap.h"
 var $2554=$2553>>>18; //@line 39 "inc/pcmap.h"
 var $2555=$2553>>31; //@line 40 "inc/pcmap.h"
 var $2556=$2555>>>19; //@line 40 "inc/pcmap.h"
 var $2557=$2554^$2556; //@line 40 "inc/pcmap.h"
 var $2558=((($2557)-($2551))|0); //@line 62 "inc/pcdecoder.inl"
 var $2559=$2558>>>13; //@line 48 "inc/pcmap.h"
 var $2560=(((-$2559))|0); //@line 48 "inc/pcmap.h"
 var $2561=$2560>>>19; //@line 48 "inc/pcmap.h"
 var $2562=$2561^$2558; //@line 48 "inc/pcmap.h"
 var $2563=$2562<<18; //@line 50 "inc/pcmap.h"
 var $2564=$2563^-262144; //@line 50 "inc/pcmap.h"
 var $_01226_in=$2564;label=485;break; //@line 63 "inc/pcdecoder.inl"
 case 484: 
 var $2566=(HEAPF32[((tempDoublePtr)>>2)]=$2496,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2567=$2566&-262144; //@line 60 "inc/pcmap.h"
 var $_01226_in=$2567;label=485;break; //@line 66 "inc/pcdecoder.inl"
 case 485: 
 var $_01226_in;
 var $_01226=(HEAP32[((tempDoublePtr)>>2)]=$_01226_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $2568=(($_21233+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21233)>>2)]=$_01226; //@line 65 "src/read.cpp"
 var $_01227=1;var $f_i342_sroa_55_6=$f_i342_sroa_55_5;label=486;break; //@line 22 "inc/front.h"
 case 486: 
 var $f_i342_sroa_55_6;
 var $_01227;
 var $2570=((($f_i342_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2571=$f_i342_sroa_55_6&$storemerge_i_i_i347; //@line 23 "inc/front.h"
 var $2572=(($2435+($2571<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2572)>>2)]=$_01226; //@line 23 "inc/front.h"
 var $2573=((($_01227)-(1))|0); //@line 23 "inc/front.h"
 var $2574=($2573|0)==0; //@line 23 "inc/front.h"
 if($2574){label=487;break;}else{var $_01227=$2573;var $f_i342_sroa_55_6=$2570;label=486;break;} //@line 23 "inc/front.h"
 case 487: 
 var $2575=((($x_i343_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21233=$2568;var $f_i342_sroa_55_5=$2570;var $x_i343_0=$2575;label=474;break; //@line 49 "src/read.cpp"
 case 488: 
 var $2577$0 = ___cxa_find_matching_catch(-1, -1); var $2577$1 = tempRet0;
 var $2578=$2577$0;
 var $2579=$2577$1;
 var $2580=($2402|0)==0;
 if($2580){var $_01234=$2578;var $_01235=$2579;label=500;break;}else{label=489;break;}
 case 489: 
 _free($2402);
 var $_01234=$2578;var $_01235=$2579;label=500;break;
 case 490: 
 var $2583$0 = ___cxa_find_matching_catch(-1, -1); var $2583$1 = tempRet0;
 var $2584=$2583$0;
 var $2585=$2583$1;
 var $2586=($2427|0)==0; //@line 11 "inc/front.h"
 if($2586){var $_01234=$2584;var $_01235=$2585;label=500;break;}else{label=491;break;} //@line 11 "inc/front.h"
 case 491: 
 _free($2427);
 var $_01234=$2584;var $_01235=$2585;label=500;break; //@line 11 "inc/front.h"
 case 492: 
 var $2588=((($y_i344_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11232=$_21233;var $f_i342_sroa_55_3=$f_i342_sroa_55_5;var $y_i344_0=$2588;label=472;break; //@line 48 "src/read.cpp"
 case 493: 
 var $2590=((($z_i345_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01231=$_11232;var $f_i342_sroa_55_1=$f_i342_sroa_55_3;var $z_i345_0=$2590;label=470;break; //@line 47 "src/read.cpp"
 case 494: 
 var $2592=($2406|0)==0; //@line 69 "src/read.cpp"
 if($2592){label=496;break;}else{label=495;break;} //@line 69 "src/read.cpp"
 case 495: 
 _free($2406);
 label=496;break; //@line 69 "src/read.cpp"
 case 496: 
 var $2594=HEAP32[(($rm_i340)>>2)]; //@line 70 "src/read.cpp"
 var $2595=($2594|0)==0; //@line 70 "src/read.cpp"
 if($2595){label=498;break;}else{label=497;break;} //@line 70 "src/read.cpp"
 case 497: 
 var $2597=$2594; //@line 70 "src/read.cpp"
 var $2598=HEAP32[(($2597)>>2)]; //@line 70 "src/read.cpp"
 var $2599=(($2598+4)|0); //@line 70 "src/read.cpp"
 var $2600=HEAP32[(($2599)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2600]($2594); //@line 70 "src/read.cpp"
 label=498;break; //@line 70 "src/read.cpp"
 case 498: 
 var $2602=($2427|0)==0; //@line 11 "inc/front.h"
 if($2602){label=1257;break;}else{label=499;break;} //@line 11 "inc/front.h"
 case 499: 
 _free($2427);
 label=1257;break; //@line 11 "inc/front.h"
 case 500: 
 var $_01235;
 var $_01234;
 var $2603$0=$_01234;
 var $2603$1=0;
 var $2604$0=$2603$0;
 var $2604$1=$_01235;
 ___resumeException($2604$0) //@line 71 "src/read.cpp"
 case 501: 
 var $2606=HEAP32[(($3)>>2)]; //@line 180 "src/read.cpp"
 var $2607=HEAP32[(($4)>>2)]; //@line 180 "src/read.cpp"
 var $2608=HEAP32[(($5)>>2)]; //@line 180 "src/read.cpp"
 var $2609=HEAP32[(($6)>>2)]; //@line 180 "src/read.cpp"
 var $$etemp$65$0=4;
 var $$etemp$65$1=0;

 var $2610=__Znwj(48); //@line 41 "src/read.cpp"
 var $2611=$2610; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2611,0,31,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=502;break; } else { label=530;break; } //@line 41 "src/read.cpp"
 case 502: 
 var $2613=$2610; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i376)>>2)]=$2613; //@line 71 "src/read.cpp"
 var $2614=__Znwj(12); //@line 42 "src/read.cpp"
 var $2615=(($2614+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2616=$2615; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2616)>>2)]=$2606; //@line 34 "inc/pcdecoder.inl"
 var $2617=(($2614+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2618=$2617; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2618)>>2)]=$rm_i376; //@line 34 "inc/pcdecoder.inl"
 var $2619=((($2607)+(1))|0); //@line 10 "inc/front.h"
 var $2620=((($2608)+(1))|0); //@line 10 "inc/front.h"
 var $2621=(Math_imul($2619,$2620)|0); //@line 10 "inc/front.h"
 var $2622=((($2607)+(2))|0); //@line 9 "inc/front.h"
 var $2623=((($2622)+($2621))|0); //@line 9 "inc/front.h"
 var $2624=((($2623)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i383=$2624;label=503;break; //@line 45 "inc/front.h"
 case 503: 
 var $storemerge_i_i_i383;
 var $2626=((($storemerge_i_i_i383)+(1))|0); //@line 45 "inc/front.h"
 var $2627=$storemerge_i_i_i383&$2626; //@line 45 "inc/front.h"
 var $2628=($2627|0)==0; //@line 45 "inc/front.h"
 if($2628){label=505;break;}else{label=504;break;} //@line 45 "inc/front.h"
 case 504: 
 var $2630=$storemerge_i_i_i383|$2626; //@line 45 "inc/front.h"
 var $storemerge_i_i_i383=$2630;label=503;break; //@line 45 "inc/front.h"
 case 505: 
 var $2631$0=_llvm_umul_with_overflow_i32($2626,4);
 var $2631$1=tempRet0;
 var $2632=$2631$1;
 var $2633=$2631$0;
 var $2634=($2632?-1:$2633); //@line 9 "inc/front.h"
 var $2635=(function() { try { __THREW__ = 0; return __Znwj($2634) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=509;break; } else { label=506;break; }
 case 506: 
 var $2637$0 = ___cxa_find_matching_catch(-1, -1); var $2637$1 = tempRet0;
 var $2638=$2637$1;
 var $2639=($2638|0)<0;
 if($2639){label=507;break;}else{label=508;break;}
 case 507: 
 var $2641=$2637$0;
 ___cxa_call_unexpected($2641);
 throw "Reached an unreachable!";
 case 508: 
 ___resumeException($2637$0)
 case 509: 
 var $2643=$2635; //@line 9 "inc/front.h"
 var $_01220=$2621;var $f_i378_sroa_55_0=0;label=510;break; //@line 22 "inc/front.h"
 case 510: 
 var $f_i378_sroa_55_0;
 var $_01220;
 var $2645=((($f_i378_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2646=$f_i378_sroa_55_0&$storemerge_i_i_i383; //@line 23 "inc/front.h"
 var $2647=(($2643+($2646<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2647)>>2)]=0; //@line 23 "inc/front.h"
 var $2648=((($_01220)-(1))|0); //@line 23 "inc/front.h"
 var $2649=($2648|0)==0; //@line 23 "inc/front.h"
 if($2649){label=511;break;}else{var $_01220=$2648;var $f_i378_sroa_55_0=$2645;label=510;break;} //@line 23 "inc/front.h"
 case 511: 
 var $2650=(($2614+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2651=$2650; //@line 50 "inc/pcdecoder.inl"
 var $2652=(($2614+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2653=$2652; //@line 50 "inc/pcdecoder.inl"
 var $_01221=$_01012;var $f_i378_sroa_55_1=$2645;var $z_i381_0=0;label=512;break; //@line 47 "src/read.cpp"
 case 512: 
 var $z_i381_0;
 var $f_i378_sroa_55_1;
 var $_01221;
 var $2655=($z_i381_0>>>0)<($2609>>>0); //@line 47 "src/read.cpp"
 if($2655){var $_01219=$2619;var $f_i378_sroa_55_2=$f_i378_sroa_55_1;label=513;break;}else{label=536;break;} //@line 47 "src/read.cpp"
 case 513: 
 var $f_i378_sroa_55_2;
 var $_01219;
 var $2657=((($f_i378_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2658=$f_i378_sroa_55_2&$storemerge_i_i_i383; //@line 23 "inc/front.h"
 var $2659=(($2643+($2658<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2659)>>2)]=0; //@line 23 "inc/front.h"
 var $2660=((($_01219)-(1))|0); //@line 23 "inc/front.h"
 var $2661=($2660|0)==0; //@line 23 "inc/front.h"
 if($2661){var $_11222=$_01221;var $f_i378_sroa_55_3=$2657;var $y_i380_0=0;label=514;break;}else{var $_01219=$2660;var $f_i378_sroa_55_2=$2657;label=513;break;} //@line 23 "inc/front.h"
 case 514: 
 var $y_i380_0;
 var $f_i378_sroa_55_3;
 var $_11222;
 var $2662=($y_i380_0>>>0)<($2608>>>0); //@line 48 "src/read.cpp"
 if($2662){var $_01217=1;var $f_i378_sroa_55_4=$f_i378_sroa_55_3;label=515;break;}else{label=535;break;} //@line 48 "src/read.cpp"
 case 515: 
 var $f_i378_sroa_55_4;
 var $_01217;
 var $2664=((($f_i378_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2665=$f_i378_sroa_55_4&$storemerge_i_i_i383; //@line 23 "inc/front.h"
 var $2666=(($2643+($2665<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2666)>>2)]=0; //@line 23 "inc/front.h"
 var $2667=((($_01217)-(1))|0); //@line 23 "inc/front.h"
 var $2668=($2667|0)==0; //@line 23 "inc/front.h"
 if($2668){var $_21223=$_11222;var $f_i378_sroa_55_5=$2664;var $x_i379_0=0;label=516;break;}else{var $_01217=$2667;var $f_i378_sroa_55_4=$2664;label=515;break;} //@line 23 "inc/front.h"
 case 516: 
 var $x_i379_0;
 var $f_i378_sroa_55_5;
 var $_21223;
 var $2669=($x_i379_0>>>0)<($2607>>>0); //@line 49 "src/read.cpp"
 if($2669){label=517;break;}else{label=534;break;} //@line 49 "src/read.cpp"
 case 517: 
 var $2671=((($f_i378_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2672=$2671&$storemerge_i_i_i383; //@line 16 "inc/front.h"
 var $2673=(($2643+($2672<<2))|0); //@line 16 "inc/front.h"
 var $2674=HEAPF32[(($2673)>>2)]; //@line 59 "src/read.cpp"
 var $2675=((($f_i378_sroa_55_5)-($2619))|0); //@line 16 "inc/front.h"
 var $2676=((($2675)-($2621))|0); //@line 16 "inc/front.h"
 var $2677=$2676&$storemerge_i_i_i383; //@line 16 "inc/front.h"
 var $2678=(($2643+($2677<<2))|0); //@line 16 "inc/front.h"
 var $2679=HEAPF32[(($2678)>>2)]; //@line 59 "src/read.cpp"
 var $2680=$2675&$storemerge_i_i_i383; //@line 16 "inc/front.h"
 var $2681=(($2643+($2680<<2))|0); //@line 16 "inc/front.h"
 var $2682=HEAPF32[(($2681)>>2)]; //@line 60 "src/read.cpp"
 var $2683=((($2671)-($2621))|0); //@line 16 "inc/front.h"
 var $2684=$2683&$storemerge_i_i_i383; //@line 16 "inc/front.h"
 var $2685=(($2643+($2684<<2))|0); //@line 16 "inc/front.h"
 var $2686=HEAPF32[(($2685)>>2)]; //@line 60 "src/read.cpp"
 var $2687=((($f_i378_sroa_55_5)-($2621))|0); //@line 16 "inc/front.h"
 var $2688=$2687&$storemerge_i_i_i383; //@line 16 "inc/front.h"
 var $2689=(($2643+($2688<<2))|0); //@line 16 "inc/front.h"
 var $2690=HEAPF32[(($2689)>>2)]; //@line 61 "src/read.cpp"
 var $2691=((($2671)-($2619))|0); //@line 16 "inc/front.h"
 var $2692=$2691&$storemerge_i_i_i383; //@line 16 "inc/front.h"
 var $2693=(($2643+($2692<<2))|0); //@line 16 "inc/front.h"
 var $2694=HEAPF32[(($2693)>>2)]; //@line 61 "src/read.cpp"
 var $2695=((($2691)-($2621))|0); //@line 16 "inc/front.h"
 var $2696=$2695&$storemerge_i_i_i383; //@line 16 "inc/front.h"
 var $2697=(($2643+($2696<<2))|0); //@line 16 "inc/front.h"
 var $2698=($2674)-($2679); //@line 59 "src/read.cpp"
 var $2699=($2698)+($2682); //@line 60 "src/read.cpp"
 var $2700=($2699)-($2686); //@line 60 "src/read.cpp"
 var $2701=($2700)+($2690); //@line 61 "src/read.cpp"
 var $2702=($2701)-($2694); //@line 61 "src/read.cpp"
 var $2703=HEAPF32[(($2697)>>2)]; //@line 62 "src/read.cpp"
 var $2704=($2702)+($2703); //@line 62 "src/read.cpp"
 var $2705=HEAP32[(($2651)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2706=HEAP32[(($2653)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2707=HEAP32[(($2706)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$66$0=4;
 var $$etemp$66$1=0;

 var $$etemp$67$0=4;
 var $$etemp$67$1=0;

 var $2708=$2707; //@line 25 "src/rcdecoder.cpp"
 var $2709=HEAP32[(($2708)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2710=(($2709+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2711=HEAP32[(($2710)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2712=(($2705+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2711]($2707,$2712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=518;break; } else { label=532;break; }
 case 518: 
 var $2713=(($2705+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2714=HEAP32[(($2713)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2715=(($2705+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2716=HEAP32[(($2715)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2717=((($2714)-($2716))|0); //@line 26 "src/rcdecoder.cpp"
 var $2718=HEAP32[(($2712)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2719=(((($2717>>>0))/(($2718>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i370)>>2)]=$2719; //@line 26 "src/rcdecoder.cpp"
 var $2720=$2707; //@line 27 "src/rcdecoder.cpp"
 var $2721=HEAP32[(($2720)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2722=(($2721+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2723=HEAP32[(($2722)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2724=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2723]($2707,$l_i_i_i370,$r_i_i_i371) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=519;break; } else { label=532;break; }
 case 519: 
 var $2725=HEAP32[(($2712)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2726=HEAP32[(($l_i_i_i370)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2727=(Math_imul($2725,$2726)|0); //@line 28 "src/rcdecoder.cpp"
 var $2728=HEAP32[(($2715)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2729=((($2728)+($2727))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2715)>>2)]=$2729; //@line 28 "src/rcdecoder.cpp"
 var $2730=HEAP32[(($r_i_i_i371)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2731=(Math_imul($2725,$2730)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2712)>>2)]=$2731; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2705) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=520;break; } else { label=532;break; }
 case 520: 
 var $$etemp$68$0=4;
 var $$etemp$68$1=0;

 var $$etemp$69$0=4;
 var $$etemp$69$1=0;

 var $2732=($2724>>>0)>15; //@line 51 "inc/pcdecoder.inl"
 if($2732){label=521;break;}else{label=523;break;} //@line 51 "inc/pcdecoder.inl"
 case 521: 
 var $2734=((($2724)-(16))|0); //@line 52 "inc/pcdecoder.inl"
 var $2735=HEAP32[(($2651)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2736=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2735,$2734) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=522;break; } else { label=532;break; }
 case 522: 
 var $2737=1<<$2734; //@line 53 "inc/pcdecoder.inl"
 var $2738=((($2737)+($2736))|0); //@line 53 "inc/pcdecoder.inl"
 var $2739=(HEAPF32[((tempDoublePtr)>>2)]=$2704,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2740=$2739^-1; //@line 38 "inc/pcmap.h"
 var $2741=$2740>>>17; //@line 39 "inc/pcmap.h"
 var $2742=$2740>>31; //@line 40 "inc/pcmap.h"
 var $2743=$2742>>>18; //@line 40 "inc/pcmap.h"
 var $2744=$2741^$2743; //@line 40 "inc/pcmap.h"
 var $2745=((($2744)+($2738))|0); //@line 55 "inc/pcdecoder.inl"
 var $2746=$2745>>>14; //@line 48 "inc/pcmap.h"
 var $2747=(((-$2746))|0); //@line 48 "inc/pcmap.h"
 var $2748=$2747>>>18; //@line 48 "inc/pcmap.h"
 var $2749=$2748^$2745; //@line 48 "inc/pcmap.h"
 var $2750=$2749<<17; //@line 50 "inc/pcmap.h"
 var $2751=$2750^-131072; //@line 50 "inc/pcmap.h"
 var $_01215_in=$2751;label=527;break; //@line 56 "inc/pcdecoder.inl"
 case 523: 
 var $2753=($2724>>>0)<15; //@line undefined "inc/pcdecoder.inl"
 if($2753){label=524;break;}else{label=526;break;} //@line undefined "inc/pcdecoder.inl"
 case 524: 
 var $2755=(((14)-($2724))|0); //@line 59 "inc/pcdecoder.inl"
 var $2756=HEAP32[(($2651)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2757=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2756,$2755) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=525;break; } else { label=532;break; }
 case 525: 
 var $2758=1<<$2755; //@line 60 "inc/pcdecoder.inl"
 var $2759=((($2758)+($2757))|0); //@line 60 "inc/pcdecoder.inl"
 var $2760=(HEAPF32[((tempDoublePtr)>>2)]=$2704,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2761=$2760^-1; //@line 38 "inc/pcmap.h"
 var $2762=$2761>>>17; //@line 39 "inc/pcmap.h"
 var $2763=$2761>>31; //@line 40 "inc/pcmap.h"
 var $2764=$2763>>>18; //@line 40 "inc/pcmap.h"
 var $2765=$2762^$2764; //@line 40 "inc/pcmap.h"
 var $2766=((($2765)-($2759))|0); //@line 62 "inc/pcdecoder.inl"
 var $2767=$2766>>>14; //@line 48 "inc/pcmap.h"
 var $2768=(((-$2767))|0); //@line 48 "inc/pcmap.h"
 var $2769=$2768>>>18; //@line 48 "inc/pcmap.h"
 var $2770=$2769^$2766; //@line 48 "inc/pcmap.h"
 var $2771=$2770<<17; //@line 50 "inc/pcmap.h"
 var $2772=$2771^-131072; //@line 50 "inc/pcmap.h"
 var $_01215_in=$2772;label=527;break; //@line 63 "inc/pcdecoder.inl"
 case 526: 
 var $2774=(HEAPF32[((tempDoublePtr)>>2)]=$2704,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2775=$2774&-131072; //@line 60 "inc/pcmap.h"
 var $_01215_in=$2775;label=527;break; //@line 66 "inc/pcdecoder.inl"
 case 527: 
 var $_01215_in;
 var $_01215=(HEAP32[((tempDoublePtr)>>2)]=$_01215_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $2776=(($_21223+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21223)>>2)]=$_01215; //@line 65 "src/read.cpp"
 var $_01216=1;var $f_i378_sroa_55_6=$f_i378_sroa_55_5;label=528;break; //@line 22 "inc/front.h"
 case 528: 
 var $f_i378_sroa_55_6;
 var $_01216;
 var $2778=((($f_i378_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2779=$f_i378_sroa_55_6&$storemerge_i_i_i383; //@line 23 "inc/front.h"
 var $2780=(($2643+($2779<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2780)>>2)]=$_01215; //@line 23 "inc/front.h"
 var $2781=((($_01216)-(1))|0); //@line 23 "inc/front.h"
 var $2782=($2781|0)==0; //@line 23 "inc/front.h"
 if($2782){label=529;break;}else{var $_01216=$2781;var $f_i378_sroa_55_6=$2778;label=528;break;} //@line 23 "inc/front.h"
 case 529: 
 var $2783=((($x_i379_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21223=$2776;var $f_i378_sroa_55_5=$2778;var $x_i379_0=$2783;label=516;break; //@line 49 "src/read.cpp"
 case 530: 
 var $2785$0 = ___cxa_find_matching_catch(-1, -1); var $2785$1 = tempRet0;
 var $2786=$2785$0;
 var $2787=$2785$1;
 var $2788=($2610|0)==0;
 if($2788){var $_01224=$2786;var $_01225=$2787;label=542;break;}else{label=531;break;}
 case 531: 
 _free($2610);
 var $_01224=$2786;var $_01225=$2787;label=542;break;
 case 532: 
 var $2791$0 = ___cxa_find_matching_catch(-1, -1); var $2791$1 = tempRet0;
 var $2792=$2791$0;
 var $2793=$2791$1;
 var $2794=($2635|0)==0; //@line 11 "inc/front.h"
 if($2794){var $_01224=$2792;var $_01225=$2793;label=542;break;}else{label=533;break;} //@line 11 "inc/front.h"
 case 533: 
 _free($2635);
 var $_01224=$2792;var $_01225=$2793;label=542;break; //@line 11 "inc/front.h"
 case 534: 
 var $2796=((($y_i380_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11222=$_21223;var $f_i378_sroa_55_3=$f_i378_sroa_55_5;var $y_i380_0=$2796;label=514;break; //@line 48 "src/read.cpp"
 case 535: 
 var $2798=((($z_i381_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01221=$_11222;var $f_i378_sroa_55_1=$f_i378_sroa_55_3;var $z_i381_0=$2798;label=512;break; //@line 47 "src/read.cpp"
 case 536: 
 var $2800=($2614|0)==0; //@line 69 "src/read.cpp"
 if($2800){label=538;break;}else{label=537;break;} //@line 69 "src/read.cpp"
 case 537: 
 _free($2614);
 label=538;break; //@line 69 "src/read.cpp"
 case 538: 
 var $2802=HEAP32[(($rm_i376)>>2)]; //@line 70 "src/read.cpp"
 var $2803=($2802|0)==0; //@line 70 "src/read.cpp"
 if($2803){label=540;break;}else{label=539;break;} //@line 70 "src/read.cpp"
 case 539: 
 var $2805=$2802; //@line 70 "src/read.cpp"
 var $2806=HEAP32[(($2805)>>2)]; //@line 70 "src/read.cpp"
 var $2807=(($2806+4)|0); //@line 70 "src/read.cpp"
 var $2808=HEAP32[(($2807)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2808]($2802); //@line 70 "src/read.cpp"
 label=540;break; //@line 70 "src/read.cpp"
 case 540: 
 var $2810=($2635|0)==0; //@line 11 "inc/front.h"
 if($2810){label=1257;break;}else{label=541;break;} //@line 11 "inc/front.h"
 case 541: 
 _free($2635);
 label=1257;break; //@line 11 "inc/front.h"
 case 542: 
 var $_01225;
 var $_01224;
 var $2811$0=$_01224;
 var $2811$1=0;
 var $2812$0=$2811$0;
 var $2812$1=$_01225;
 ___resumeException($2812$0) //@line 71 "src/read.cpp"
 case 543: 
 var $2814=HEAP32[(($3)>>2)]; //@line 181 "src/read.cpp"
 var $2815=HEAP32[(($4)>>2)]; //@line 181 "src/read.cpp"
 var $2816=HEAP32[(($5)>>2)]; //@line 181 "src/read.cpp"
 var $2817=HEAP32[(($6)>>2)]; //@line 181 "src/read.cpp"
 var $$etemp$70$0=4;
 var $$etemp$70$1=0;

 var $2818=__Znwj(48); //@line 41 "src/read.cpp"
 var $2819=$2818; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2819,0,33,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=544;break; } else { label=572;break; } //@line 41 "src/read.cpp"
 case 544: 
 var $2821=$2818; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i412)>>2)]=$2821; //@line 71 "src/read.cpp"
 var $2822=__Znwj(12); //@line 42 "src/read.cpp"
 var $2823=(($2822+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2824=$2823; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2824)>>2)]=$2814; //@line 34 "inc/pcdecoder.inl"
 var $2825=(($2822+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2826=$2825; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2826)>>2)]=$rm_i412; //@line 34 "inc/pcdecoder.inl"
 var $2827=((($2815)+(1))|0); //@line 10 "inc/front.h"
 var $2828=((($2816)+(1))|0); //@line 10 "inc/front.h"
 var $2829=(Math_imul($2827,$2828)|0); //@line 10 "inc/front.h"
 var $2830=((($2815)+(2))|0); //@line 9 "inc/front.h"
 var $2831=((($2830)+($2829))|0); //@line 9 "inc/front.h"
 var $2832=((($2831)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i419=$2832;label=545;break; //@line 45 "inc/front.h"
 case 545: 
 var $storemerge_i_i_i419;
 var $2834=((($storemerge_i_i_i419)+(1))|0); //@line 45 "inc/front.h"
 var $2835=$storemerge_i_i_i419&$2834; //@line 45 "inc/front.h"
 var $2836=($2835|0)==0; //@line 45 "inc/front.h"
 if($2836){label=547;break;}else{label=546;break;} //@line 45 "inc/front.h"
 case 546: 
 var $2838=$storemerge_i_i_i419|$2834; //@line 45 "inc/front.h"
 var $storemerge_i_i_i419=$2838;label=545;break; //@line 45 "inc/front.h"
 case 547: 
 var $2839$0=_llvm_umul_with_overflow_i32($2834,4);
 var $2839$1=tempRet0;
 var $2840=$2839$1;
 var $2841=$2839$0;
 var $2842=($2840?-1:$2841); //@line 9 "inc/front.h"
 var $2843=(function() { try { __THREW__ = 0; return __Znwj($2842) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=551;break; } else { label=548;break; }
 case 548: 
 var $2845$0 = ___cxa_find_matching_catch(-1, -1); var $2845$1 = tempRet0;
 var $2846=$2845$1;
 var $2847=($2846|0)<0;
 if($2847){label=549;break;}else{label=550;break;}
 case 549: 
 var $2849=$2845$0;
 ___cxa_call_unexpected($2849);
 throw "Reached an unreachable!";
 case 550: 
 ___resumeException($2845$0)
 case 551: 
 var $2851=$2843; //@line 9 "inc/front.h"
 var $_01209=$2829;var $f_i414_sroa_55_0=0;label=552;break; //@line 22 "inc/front.h"
 case 552: 
 var $f_i414_sroa_55_0;
 var $_01209;
 var $2853=((($f_i414_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2854=$f_i414_sroa_55_0&$storemerge_i_i_i419; //@line 23 "inc/front.h"
 var $2855=(($2851+($2854<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2855)>>2)]=0; //@line 23 "inc/front.h"
 var $2856=((($_01209)-(1))|0); //@line 23 "inc/front.h"
 var $2857=($2856|0)==0; //@line 23 "inc/front.h"
 if($2857){label=553;break;}else{var $_01209=$2856;var $f_i414_sroa_55_0=$2853;label=552;break;} //@line 23 "inc/front.h"
 case 553: 
 var $2858=(($2822+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2859=$2858; //@line 50 "inc/pcdecoder.inl"
 var $2860=(($2822+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2861=$2860; //@line 50 "inc/pcdecoder.inl"
 var $_01210=$_01012;var $f_i414_sroa_55_1=$2853;var $z_i417_0=0;label=554;break; //@line 47 "src/read.cpp"
 case 554: 
 var $z_i417_0;
 var $f_i414_sroa_55_1;
 var $_01210;
 var $2863=($z_i417_0>>>0)<($2817>>>0); //@line 47 "src/read.cpp"
 if($2863){var $_01208=$2827;var $f_i414_sroa_55_2=$f_i414_sroa_55_1;label=555;break;}else{label=578;break;} //@line 47 "src/read.cpp"
 case 555: 
 var $f_i414_sroa_55_2;
 var $_01208;
 var $2865=((($f_i414_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2866=$f_i414_sroa_55_2&$storemerge_i_i_i419; //@line 23 "inc/front.h"
 var $2867=(($2851+($2866<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2867)>>2)]=0; //@line 23 "inc/front.h"
 var $2868=((($_01208)-(1))|0); //@line 23 "inc/front.h"
 var $2869=($2868|0)==0; //@line 23 "inc/front.h"
 if($2869){var $_11211=$_01210;var $f_i414_sroa_55_3=$2865;var $y_i416_0=0;label=556;break;}else{var $_01208=$2868;var $f_i414_sroa_55_2=$2865;label=555;break;} //@line 23 "inc/front.h"
 case 556: 
 var $y_i416_0;
 var $f_i414_sroa_55_3;
 var $_11211;
 var $2870=($y_i416_0>>>0)<($2816>>>0); //@line 48 "src/read.cpp"
 if($2870){var $_01207=1;var $f_i414_sroa_55_4=$f_i414_sroa_55_3;label=557;break;}else{label=577;break;} //@line 48 "src/read.cpp"
 case 557: 
 var $f_i414_sroa_55_4;
 var $_01207;
 var $2872=((($f_i414_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2873=$f_i414_sroa_55_4&$storemerge_i_i_i419; //@line 23 "inc/front.h"
 var $2874=(($2851+($2873<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2874)>>2)]=0; //@line 23 "inc/front.h"
 var $2875=((($_01207)-(1))|0); //@line 23 "inc/front.h"
 var $2876=($2875|0)==0; //@line 23 "inc/front.h"
 if($2876){var $_21212=$_11211;var $f_i414_sroa_55_5=$2872;var $x_i415_0=0;label=558;break;}else{var $_01207=$2875;var $f_i414_sroa_55_4=$2872;label=557;break;} //@line 23 "inc/front.h"
 case 558: 
 var $x_i415_0;
 var $f_i414_sroa_55_5;
 var $_21212;
 var $2877=($x_i415_0>>>0)<($2815>>>0); //@line 49 "src/read.cpp"
 if($2877){label=559;break;}else{label=576;break;} //@line 49 "src/read.cpp"
 case 559: 
 var $2879=((($f_i414_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2880=$2879&$storemerge_i_i_i419; //@line 16 "inc/front.h"
 var $2881=(($2851+($2880<<2))|0); //@line 16 "inc/front.h"
 var $2882=HEAPF32[(($2881)>>2)]; //@line 59 "src/read.cpp"
 var $2883=((($f_i414_sroa_55_5)-($2827))|0); //@line 16 "inc/front.h"
 var $2884=((($2883)-($2829))|0); //@line 16 "inc/front.h"
 var $2885=$2884&$storemerge_i_i_i419; //@line 16 "inc/front.h"
 var $2886=(($2851+($2885<<2))|0); //@line 16 "inc/front.h"
 var $2887=HEAPF32[(($2886)>>2)]; //@line 59 "src/read.cpp"
 var $2888=$2883&$storemerge_i_i_i419; //@line 16 "inc/front.h"
 var $2889=(($2851+($2888<<2))|0); //@line 16 "inc/front.h"
 var $2890=HEAPF32[(($2889)>>2)]; //@line 60 "src/read.cpp"
 var $2891=((($2879)-($2829))|0); //@line 16 "inc/front.h"
 var $2892=$2891&$storemerge_i_i_i419; //@line 16 "inc/front.h"
 var $2893=(($2851+($2892<<2))|0); //@line 16 "inc/front.h"
 var $2894=HEAPF32[(($2893)>>2)]; //@line 60 "src/read.cpp"
 var $2895=((($f_i414_sroa_55_5)-($2829))|0); //@line 16 "inc/front.h"
 var $2896=$2895&$storemerge_i_i_i419; //@line 16 "inc/front.h"
 var $2897=(($2851+($2896<<2))|0); //@line 16 "inc/front.h"
 var $2898=HEAPF32[(($2897)>>2)]; //@line 61 "src/read.cpp"
 var $2899=((($2879)-($2827))|0); //@line 16 "inc/front.h"
 var $2900=$2899&$storemerge_i_i_i419; //@line 16 "inc/front.h"
 var $2901=(($2851+($2900<<2))|0); //@line 16 "inc/front.h"
 var $2902=HEAPF32[(($2901)>>2)]; //@line 61 "src/read.cpp"
 var $2903=((($2899)-($2829))|0); //@line 16 "inc/front.h"
 var $2904=$2903&$storemerge_i_i_i419; //@line 16 "inc/front.h"
 var $2905=(($2851+($2904<<2))|0); //@line 16 "inc/front.h"
 var $2906=($2882)-($2887); //@line 59 "src/read.cpp"
 var $2907=($2906)+($2890); //@line 60 "src/read.cpp"
 var $2908=($2907)-($2894); //@line 60 "src/read.cpp"
 var $2909=($2908)+($2898); //@line 61 "src/read.cpp"
 var $2910=($2909)-($2902); //@line 61 "src/read.cpp"
 var $2911=HEAPF32[(($2905)>>2)]; //@line 62 "src/read.cpp"
 var $2912=($2910)+($2911); //@line 62 "src/read.cpp"
 var $2913=HEAP32[(($2859)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2914=HEAP32[(($2861)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2915=HEAP32[(($2914)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$71$0=4;
 var $$etemp$71$1=0;

 var $$etemp$72$0=4;
 var $$etemp$72$1=0;

 var $2916=$2915; //@line 25 "src/rcdecoder.cpp"
 var $2917=HEAP32[(($2916)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2918=(($2917+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2919=HEAP32[(($2918)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2920=(($2913+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2919]($2915,$2920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=560;break; } else { label=574;break; }
 case 560: 
 var $2921=(($2913+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2922=HEAP32[(($2921)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2923=(($2913+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2924=HEAP32[(($2923)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2925=((($2922)-($2924))|0); //@line 26 "src/rcdecoder.cpp"
 var $2926=HEAP32[(($2920)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2927=(((($2925>>>0))/(($2926>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i406)>>2)]=$2927; //@line 26 "src/rcdecoder.cpp"
 var $2928=$2915; //@line 27 "src/rcdecoder.cpp"
 var $2929=HEAP32[(($2928)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2930=(($2929+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2931=HEAP32[(($2930)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2932=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2931]($2915,$l_i_i_i406,$r_i_i_i407) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=561;break; } else { label=574;break; }
 case 561: 
 var $2933=HEAP32[(($2920)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2934=HEAP32[(($l_i_i_i406)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2935=(Math_imul($2933,$2934)|0); //@line 28 "src/rcdecoder.cpp"
 var $2936=HEAP32[(($2923)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2937=((($2936)+($2935))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2923)>>2)]=$2937; //@line 28 "src/rcdecoder.cpp"
 var $2938=HEAP32[(($r_i_i_i407)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2939=(Math_imul($2933,$2938)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2920)>>2)]=$2939; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2913) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=562;break; } else { label=574;break; }
 case 562: 
 var $$etemp$73$0=4;
 var $$etemp$73$1=0;

 var $$etemp$74$0=4;
 var $$etemp$74$1=0;

 var $2940=($2932>>>0)>16; //@line 51 "inc/pcdecoder.inl"
 if($2940){label=563;break;}else{label=565;break;} //@line 51 "inc/pcdecoder.inl"
 case 563: 
 var $2942=((($2932)-(17))|0); //@line 52 "inc/pcdecoder.inl"
 var $2943=HEAP32[(($2859)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2944=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2943,$2942) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=564;break; } else { label=574;break; }
 case 564: 
 var $2945=1<<$2942; //@line 53 "inc/pcdecoder.inl"
 var $2946=((($2945)+($2944))|0); //@line 53 "inc/pcdecoder.inl"
 var $2947=(HEAPF32[((tempDoublePtr)>>2)]=$2912,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2948=$2947^-1; //@line 38 "inc/pcmap.h"
 var $2949=$2948>>>16; //@line 39 "inc/pcmap.h"
 var $2950=$2948>>31; //@line 40 "inc/pcmap.h"
 var $2951=$2950>>>17; //@line 40 "inc/pcmap.h"
 var $2952=$2949^$2951; //@line 40 "inc/pcmap.h"
 var $2953=((($2952)+($2946))|0); //@line 55 "inc/pcdecoder.inl"
 var $2954=$2953>>>15; //@line 48 "inc/pcmap.h"
 var $2955=(((-$2954))|0); //@line 48 "inc/pcmap.h"
 var $2956=$2955>>>17; //@line 48 "inc/pcmap.h"
 var $2957=$2956^$2953; //@line 48 "inc/pcmap.h"
 var $2958=$2957<<16; //@line 50 "inc/pcmap.h"
 var $2959=$2958^-65536; //@line 50 "inc/pcmap.h"
 var $_01204_in=$2959;label=569;break; //@line 56 "inc/pcdecoder.inl"
 case 565: 
 var $2961=($2932>>>0)<16; //@line undefined "inc/pcdecoder.inl"
 if($2961){label=566;break;}else{label=568;break;} //@line undefined "inc/pcdecoder.inl"
 case 566: 
 var $2963=(((15)-($2932))|0); //@line 59 "inc/pcdecoder.inl"
 var $2964=HEAP32[(($2859)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2965=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($2964,$2963) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=567;break; } else { label=574;break; }
 case 567: 
 var $2966=1<<$2963; //@line 60 "inc/pcdecoder.inl"
 var $2967=((($2966)+($2965))|0); //@line 60 "inc/pcdecoder.inl"
 var $2968=(HEAPF32[((tempDoublePtr)>>2)]=$2912,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2969=$2968^-1; //@line 38 "inc/pcmap.h"
 var $2970=$2969>>>16; //@line 39 "inc/pcmap.h"
 var $2971=$2969>>31; //@line 40 "inc/pcmap.h"
 var $2972=$2971>>>17; //@line 40 "inc/pcmap.h"
 var $2973=$2970^$2972; //@line 40 "inc/pcmap.h"
 var $2974=((($2973)-($2967))|0); //@line 62 "inc/pcdecoder.inl"
 var $2975=$2974>>>15; //@line 48 "inc/pcmap.h"
 var $2976=(((-$2975))|0); //@line 48 "inc/pcmap.h"
 var $2977=$2976>>>17; //@line 48 "inc/pcmap.h"
 var $2978=$2977^$2974; //@line 48 "inc/pcmap.h"
 var $2979=$2978<<16; //@line 50 "inc/pcmap.h"
 var $2980=$2979^-65536; //@line 50 "inc/pcmap.h"
 var $_01204_in=$2980;label=569;break; //@line 63 "inc/pcdecoder.inl"
 case 568: 
 var $2982=(HEAPF32[((tempDoublePtr)>>2)]=$2912,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $2983=$2982&-65536; //@line 60 "inc/pcmap.h"
 var $_01204_in=$2983;label=569;break; //@line 66 "inc/pcdecoder.inl"
 case 569: 
 var $_01204_in;
 var $_01204=(HEAP32[((tempDoublePtr)>>2)]=$_01204_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $2984=(($_21212+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21212)>>2)]=$_01204; //@line 65 "src/read.cpp"
 var $_01205=1;var $f_i414_sroa_55_6=$f_i414_sroa_55_5;label=570;break; //@line 22 "inc/front.h"
 case 570: 
 var $f_i414_sroa_55_6;
 var $_01205;
 var $2986=((($f_i414_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2987=$f_i414_sroa_55_6&$storemerge_i_i_i419; //@line 23 "inc/front.h"
 var $2988=(($2851+($2987<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($2988)>>2)]=$_01204; //@line 23 "inc/front.h"
 var $2989=((($_01205)-(1))|0); //@line 23 "inc/front.h"
 var $2990=($2989|0)==0; //@line 23 "inc/front.h"
 if($2990){label=571;break;}else{var $_01205=$2989;var $f_i414_sroa_55_6=$2986;label=570;break;} //@line 23 "inc/front.h"
 case 571: 
 var $2991=((($x_i415_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21212=$2984;var $f_i414_sroa_55_5=$2986;var $x_i415_0=$2991;label=558;break; //@line 49 "src/read.cpp"
 case 572: 
 var $2993$0 = ___cxa_find_matching_catch(-1, -1); var $2993$1 = tempRet0;
 var $2994=$2993$0;
 var $2995=$2993$1;
 var $2996=($2818|0)==0;
 if($2996){var $_01213=$2994;var $_01214=$2995;label=584;break;}else{label=573;break;}
 case 573: 
 _free($2818);
 var $_01213=$2994;var $_01214=$2995;label=584;break;
 case 574: 
 var $2999$0 = ___cxa_find_matching_catch(-1, -1); var $2999$1 = tempRet0;
 var $3000=$2999$0;
 var $3001=$2999$1;
 var $3002=($2843|0)==0; //@line 11 "inc/front.h"
 if($3002){var $_01213=$3000;var $_01214=$3001;label=584;break;}else{label=575;break;} //@line 11 "inc/front.h"
 case 575: 
 _free($2843);
 var $_01213=$3000;var $_01214=$3001;label=584;break; //@line 11 "inc/front.h"
 case 576: 
 var $3004=((($y_i416_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11211=$_21212;var $f_i414_sroa_55_3=$f_i414_sroa_55_5;var $y_i416_0=$3004;label=556;break; //@line 48 "src/read.cpp"
 case 577: 
 var $3006=((($z_i417_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01210=$_11211;var $f_i414_sroa_55_1=$f_i414_sroa_55_3;var $z_i417_0=$3006;label=554;break; //@line 47 "src/read.cpp"
 case 578: 
 var $3008=($2822|0)==0; //@line 69 "src/read.cpp"
 if($3008){label=580;break;}else{label=579;break;} //@line 69 "src/read.cpp"
 case 579: 
 _free($2822);
 label=580;break; //@line 69 "src/read.cpp"
 case 580: 
 var $3010=HEAP32[(($rm_i412)>>2)]; //@line 70 "src/read.cpp"
 var $3011=($3010|0)==0; //@line 70 "src/read.cpp"
 if($3011){label=582;break;}else{label=581;break;} //@line 70 "src/read.cpp"
 case 581: 
 var $3013=$3010; //@line 70 "src/read.cpp"
 var $3014=HEAP32[(($3013)>>2)]; //@line 70 "src/read.cpp"
 var $3015=(($3014+4)|0); //@line 70 "src/read.cpp"
 var $3016=HEAP32[(($3015)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3016]($3010); //@line 70 "src/read.cpp"
 label=582;break; //@line 70 "src/read.cpp"
 case 582: 
 var $3018=($2843|0)==0; //@line 11 "inc/front.h"
 if($3018){label=1257;break;}else{label=583;break;} //@line 11 "inc/front.h"
 case 583: 
 _free($2843);
 label=1257;break; //@line 11 "inc/front.h"
 case 584: 
 var $_01214;
 var $_01213;
 var $3019$0=$_01213;
 var $3019$1=0;
 var $3020$0=$3019$0;
 var $3020$1=$_01214;
 ___resumeException($3020$0) //@line 71 "src/read.cpp"
 case 585: 
 var $3022=HEAP32[(($3)>>2)]; //@line 182 "src/read.cpp"
 var $3023=HEAP32[(($4)>>2)]; //@line 182 "src/read.cpp"
 var $3024=HEAP32[(($5)>>2)]; //@line 182 "src/read.cpp"
 var $3025=HEAP32[(($6)>>2)]; //@line 182 "src/read.cpp"
 var $$etemp$75$0=4;
 var $$etemp$75$1=0;

 var $3026=__Znwj(48); //@line 41 "src/read.cpp"
 var $3027=$3026; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3027,0,35,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=586;break; } else { label=614;break; } //@line 41 "src/read.cpp"
 case 586: 
 var $3029=$3026; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i448)>>2)]=$3029; //@line 71 "src/read.cpp"
 var $3030=__Znwj(12); //@line 42 "src/read.cpp"
 var $3031=(($3030+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3032=$3031; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3032)>>2)]=$3022; //@line 34 "inc/pcdecoder.inl"
 var $3033=(($3030+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3034=$3033; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3034)>>2)]=$rm_i448; //@line 34 "inc/pcdecoder.inl"
 var $3035=((($3023)+(1))|0); //@line 10 "inc/front.h"
 var $3036=((($3024)+(1))|0); //@line 10 "inc/front.h"
 var $3037=(Math_imul($3035,$3036)|0); //@line 10 "inc/front.h"
 var $3038=((($3023)+(2))|0); //@line 9 "inc/front.h"
 var $3039=((($3038)+($3037))|0); //@line 9 "inc/front.h"
 var $3040=((($3039)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i455=$3040;label=587;break; //@line 45 "inc/front.h"
 case 587: 
 var $storemerge_i_i_i455;
 var $3042=((($storemerge_i_i_i455)+(1))|0); //@line 45 "inc/front.h"
 var $3043=$storemerge_i_i_i455&$3042; //@line 45 "inc/front.h"
 var $3044=($3043|0)==0; //@line 45 "inc/front.h"
 if($3044){label=589;break;}else{label=588;break;} //@line 45 "inc/front.h"
 case 588: 
 var $3046=$storemerge_i_i_i455|$3042; //@line 45 "inc/front.h"
 var $storemerge_i_i_i455=$3046;label=587;break; //@line 45 "inc/front.h"
 case 589: 
 var $3047$0=_llvm_umul_with_overflow_i32($3042,4);
 var $3047$1=tempRet0;
 var $3048=$3047$1;
 var $3049=$3047$0;
 var $3050=($3048?-1:$3049); //@line 9 "inc/front.h"
 var $3051=(function() { try { __THREW__ = 0; return __Znwj($3050) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=593;break; } else { label=590;break; }
 case 590: 
 var $3053$0 = ___cxa_find_matching_catch(-1, -1); var $3053$1 = tempRet0;
 var $3054=$3053$1;
 var $3055=($3054|0)<0;
 if($3055){label=591;break;}else{label=592;break;}
 case 591: 
 var $3057=$3053$0;
 ___cxa_call_unexpected($3057);
 throw "Reached an unreachable!";
 case 592: 
 ___resumeException($3053$0)
 case 593: 
 var $3059=$3051; //@line 9 "inc/front.h"
 var $_01196=$3037;var $f_i450_sroa_55_0=0;label=594;break; //@line 22 "inc/front.h"
 case 594: 
 var $f_i450_sroa_55_0;
 var $_01196;
 var $3061=((($f_i450_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3062=$f_i450_sroa_55_0&$storemerge_i_i_i455; //@line 23 "inc/front.h"
 var $3063=(($3059+($3062<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3063)>>2)]=0; //@line 23 "inc/front.h"
 var $3064=((($_01196)-(1))|0); //@line 23 "inc/front.h"
 var $3065=($3064|0)==0; //@line 23 "inc/front.h"
 if($3065){label=595;break;}else{var $_01196=$3064;var $f_i450_sroa_55_0=$3061;label=594;break;} //@line 23 "inc/front.h"
 case 595: 
 var $3066=(($3030+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3067=$3066; //@line 50 "inc/pcdecoder.inl"
 var $3068=(($3030+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3069=$3068; //@line 50 "inc/pcdecoder.inl"
 var $_01197=$_01012;var $f_i450_sroa_55_1=$3061;var $z_i453_0=0;label=596;break; //@line 47 "src/read.cpp"
 case 596: 
 var $z_i453_0;
 var $f_i450_sroa_55_1;
 var $_01197;
 var $3071=($z_i453_0>>>0)<($3025>>>0); //@line 47 "src/read.cpp"
 if($3071){var $_01195=$3035;var $f_i450_sroa_55_2=$f_i450_sroa_55_1;label=597;break;}else{label=620;break;} //@line 47 "src/read.cpp"
 case 597: 
 var $f_i450_sroa_55_2;
 var $_01195;
 var $3073=((($f_i450_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3074=$f_i450_sroa_55_2&$storemerge_i_i_i455; //@line 23 "inc/front.h"
 var $3075=(($3059+($3074<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3075)>>2)]=0; //@line 23 "inc/front.h"
 var $3076=((($_01195)-(1))|0); //@line 23 "inc/front.h"
 var $3077=($3076|0)==0; //@line 23 "inc/front.h"
 if($3077){var $_11198=$_01197;var $f_i450_sroa_55_3=$3073;var $y_i452_0=0;label=598;break;}else{var $_01195=$3076;var $f_i450_sroa_55_2=$3073;label=597;break;} //@line 23 "inc/front.h"
 case 598: 
 var $y_i452_0;
 var $f_i450_sroa_55_3;
 var $_11198;
 var $3078=($y_i452_0>>>0)<($3024>>>0); //@line 48 "src/read.cpp"
 if($3078){var $_01194=1;var $f_i450_sroa_55_4=$f_i450_sroa_55_3;label=599;break;}else{label=619;break;} //@line 48 "src/read.cpp"
 case 599: 
 var $f_i450_sroa_55_4;
 var $_01194;
 var $3080=((($f_i450_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3081=$f_i450_sroa_55_4&$storemerge_i_i_i455; //@line 23 "inc/front.h"
 var $3082=(($3059+($3081<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3082)>>2)]=0; //@line 23 "inc/front.h"
 var $3083=((($_01194)-(1))|0); //@line 23 "inc/front.h"
 var $3084=($3083|0)==0; //@line 23 "inc/front.h"
 if($3084){var $_21199=$_11198;var $f_i450_sroa_55_5=$3080;var $x_i451_0=0;label=600;break;}else{var $_01194=$3083;var $f_i450_sroa_55_4=$3080;label=599;break;} //@line 23 "inc/front.h"
 case 600: 
 var $x_i451_0;
 var $f_i450_sroa_55_5;
 var $_21199;
 var $3085=($x_i451_0>>>0)<($3023>>>0); //@line 49 "src/read.cpp"
 if($3085){label=601;break;}else{label=618;break;} //@line 49 "src/read.cpp"
 case 601: 
 var $3087=((($f_i450_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3088=$3087&$storemerge_i_i_i455; //@line 16 "inc/front.h"
 var $3089=(($3059+($3088<<2))|0); //@line 16 "inc/front.h"
 var $3090=HEAPF32[(($3089)>>2)]; //@line 59 "src/read.cpp"
 var $3091=((($f_i450_sroa_55_5)-($3035))|0); //@line 16 "inc/front.h"
 var $3092=((($3091)-($3037))|0); //@line 16 "inc/front.h"
 var $3093=$3092&$storemerge_i_i_i455; //@line 16 "inc/front.h"
 var $3094=(($3059+($3093<<2))|0); //@line 16 "inc/front.h"
 var $3095=HEAPF32[(($3094)>>2)]; //@line 59 "src/read.cpp"
 var $3096=$3091&$storemerge_i_i_i455; //@line 16 "inc/front.h"
 var $3097=(($3059+($3096<<2))|0); //@line 16 "inc/front.h"
 var $3098=HEAPF32[(($3097)>>2)]; //@line 60 "src/read.cpp"
 var $3099=((($3087)-($3037))|0); //@line 16 "inc/front.h"
 var $3100=$3099&$storemerge_i_i_i455; //@line 16 "inc/front.h"
 var $3101=(($3059+($3100<<2))|0); //@line 16 "inc/front.h"
 var $3102=HEAPF32[(($3101)>>2)]; //@line 60 "src/read.cpp"
 var $3103=((($f_i450_sroa_55_5)-($3037))|0); //@line 16 "inc/front.h"
 var $3104=$3103&$storemerge_i_i_i455; //@line 16 "inc/front.h"
 var $3105=(($3059+($3104<<2))|0); //@line 16 "inc/front.h"
 var $3106=HEAPF32[(($3105)>>2)]; //@line 61 "src/read.cpp"
 var $3107=((($3087)-($3035))|0); //@line 16 "inc/front.h"
 var $3108=$3107&$storemerge_i_i_i455; //@line 16 "inc/front.h"
 var $3109=(($3059+($3108<<2))|0); //@line 16 "inc/front.h"
 var $3110=HEAPF32[(($3109)>>2)]; //@line 61 "src/read.cpp"
 var $3111=((($3107)-($3037))|0); //@line 16 "inc/front.h"
 var $3112=$3111&$storemerge_i_i_i455; //@line 16 "inc/front.h"
 var $3113=(($3059+($3112<<2))|0); //@line 16 "inc/front.h"
 var $3114=($3090)-($3095); //@line 59 "src/read.cpp"
 var $3115=($3114)+($3098); //@line 60 "src/read.cpp"
 var $3116=($3115)-($3102); //@line 60 "src/read.cpp"
 var $3117=($3116)+($3106); //@line 61 "src/read.cpp"
 var $3118=($3117)-($3110); //@line 61 "src/read.cpp"
 var $3119=HEAPF32[(($3113)>>2)]; //@line 62 "src/read.cpp"
 var $3120=($3118)+($3119); //@line 62 "src/read.cpp"
 var $3121=HEAP32[(($3067)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3122=HEAP32[(($3069)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3123=HEAP32[(($3122)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$76$0=4;
 var $$etemp$76$1=0;

 var $$etemp$77$0=4;
 var $$etemp$77$1=0;

 var $3124=$3123; //@line 25 "src/rcdecoder.cpp"
 var $3125=HEAP32[(($3124)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3126=(($3125+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3127=HEAP32[(($3126)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3128=(($3121+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3127]($3123,$3128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=602;break; } else { label=616;break; }
 case 602: 
 var $3129=(($3121+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3130=HEAP32[(($3129)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3131=(($3121+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3132=HEAP32[(($3131)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3133=((($3130)-($3132))|0); //@line 26 "src/rcdecoder.cpp"
 var $3134=HEAP32[(($3128)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3135=(((($3133>>>0))/(($3134>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i442)>>2)]=$3135; //@line 26 "src/rcdecoder.cpp"
 var $3136=$3123; //@line 27 "src/rcdecoder.cpp"
 var $3137=HEAP32[(($3136)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3138=(($3137+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3139=HEAP32[(($3138)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3140=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3139]($3123,$l_i_i_i442,$r_i_i_i443) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=603;break; } else { label=616;break; }
 case 603: 
 var $3141=HEAP32[(($3128)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3142=HEAP32[(($l_i_i_i442)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3143=(Math_imul($3141,$3142)|0); //@line 28 "src/rcdecoder.cpp"
 var $3144=HEAP32[(($3131)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3145=((($3144)+($3143))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3131)>>2)]=$3145; //@line 28 "src/rcdecoder.cpp"
 var $3146=HEAP32[(($r_i_i_i443)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3147=(Math_imul($3141,$3146)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3128)>>2)]=$3147; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3121) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=604;break; } else { label=616;break; }
 case 604: 
 var $$etemp$78$0=4;
 var $$etemp$78$1=0;

 var $$etemp$79$0=4;
 var $$etemp$79$1=0;

 var $3148=($3140>>>0)>17; //@line 51 "inc/pcdecoder.inl"
 if($3148){label=605;break;}else{label=607;break;} //@line 51 "inc/pcdecoder.inl"
 case 605: 
 var $3150=((($3140)-(18))|0); //@line 52 "inc/pcdecoder.inl"
 var $3151=HEAP32[(($3067)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3152=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3151,$3150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=606;break; } else { label=616;break; }
 case 606: 
 var $3153=1<<$3150; //@line 53 "inc/pcdecoder.inl"
 var $3154=((($3153)+($3152))|0); //@line 53 "inc/pcdecoder.inl"
 var $3155=(HEAPF32[((tempDoublePtr)>>2)]=$3120,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3156=$3155^-1; //@line 38 "inc/pcmap.h"
 var $3157=$3156>>>15; //@line 39 "inc/pcmap.h"
 var $3158=$3156>>31; //@line 40 "inc/pcmap.h"
 var $3159=$3158>>>16; //@line 40 "inc/pcmap.h"
 var $3160=$3157^$3159; //@line 40 "inc/pcmap.h"
 var $3161=((($3160)+($3154))|0); //@line 55 "inc/pcdecoder.inl"
 var $3162=$3161>>>16; //@line 48 "inc/pcmap.h"
 var $3163=(((-$3162))|0); //@line 48 "inc/pcmap.h"
 var $3164=$3163>>>16; //@line 48 "inc/pcmap.h"
 var $3165=$3164^$3161; //@line 48 "inc/pcmap.h"
 var $3166=$3165<<15; //@line 50 "inc/pcmap.h"
 var $3167=$3166^-32768; //@line 50 "inc/pcmap.h"
 var $_01192_in=$3167;label=611;break; //@line 56 "inc/pcdecoder.inl"
 case 607: 
 var $3169=($3140>>>0)<17; //@line undefined "inc/pcdecoder.inl"
 if($3169){label=608;break;}else{label=610;break;} //@line undefined "inc/pcdecoder.inl"
 case 608: 
 var $3171=(((16)-($3140))|0); //@line 59 "inc/pcdecoder.inl"
 var $3172=HEAP32[(($3067)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3173=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3172,$3171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=609;break; } else { label=616;break; }
 case 609: 
 var $3174=1<<$3171; //@line 60 "inc/pcdecoder.inl"
 var $3175=((($3174)+($3173))|0); //@line 60 "inc/pcdecoder.inl"
 var $3176=(HEAPF32[((tempDoublePtr)>>2)]=$3120,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3177=$3176^-1; //@line 38 "inc/pcmap.h"
 var $3178=$3177>>>15; //@line 39 "inc/pcmap.h"
 var $3179=$3177>>31; //@line 40 "inc/pcmap.h"
 var $3180=$3179>>>16; //@line 40 "inc/pcmap.h"
 var $3181=$3178^$3180; //@line 40 "inc/pcmap.h"
 var $3182=((($3181)-($3175))|0); //@line 62 "inc/pcdecoder.inl"
 var $3183=$3182>>>16; //@line 48 "inc/pcmap.h"
 var $3184=(((-$3183))|0); //@line 48 "inc/pcmap.h"
 var $3185=$3184>>>16; //@line 48 "inc/pcmap.h"
 var $3186=$3185^$3182; //@line 48 "inc/pcmap.h"
 var $3187=$3186<<15; //@line 50 "inc/pcmap.h"
 var $3188=$3187^-32768; //@line 50 "inc/pcmap.h"
 var $_01192_in=$3188;label=611;break; //@line 63 "inc/pcdecoder.inl"
 case 610: 
 var $3190=(HEAPF32[((tempDoublePtr)>>2)]=$3120,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3191=$3190&-32768; //@line 60 "inc/pcmap.h"
 var $_01192_in=$3191;label=611;break; //@line 66 "inc/pcdecoder.inl"
 case 611: 
 var $_01192_in;
 var $_01192=(HEAP32[((tempDoublePtr)>>2)]=$_01192_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $3192=(($_21199+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21199)>>2)]=$_01192; //@line 65 "src/read.cpp"
 var $_01193=1;var $f_i450_sroa_55_6=$f_i450_sroa_55_5;label=612;break; //@line 22 "inc/front.h"
 case 612: 
 var $f_i450_sroa_55_6;
 var $_01193;
 var $3194=((($f_i450_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3195=$f_i450_sroa_55_6&$storemerge_i_i_i455; //@line 23 "inc/front.h"
 var $3196=(($3059+($3195<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3196)>>2)]=$_01192; //@line 23 "inc/front.h"
 var $3197=((($_01193)-(1))|0); //@line 23 "inc/front.h"
 var $3198=($3197|0)==0; //@line 23 "inc/front.h"
 if($3198){label=613;break;}else{var $_01193=$3197;var $f_i450_sroa_55_6=$3194;label=612;break;} //@line 23 "inc/front.h"
 case 613: 
 var $3199=((($x_i451_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21199=$3192;var $f_i450_sroa_55_5=$3194;var $x_i451_0=$3199;label=600;break; //@line 49 "src/read.cpp"
 case 614: 
 var $3201$0 = ___cxa_find_matching_catch(-1, -1); var $3201$1 = tempRet0;
 var $3202=$3201$0;
 var $3203=$3201$1;
 var $3204=($3026|0)==0;
 if($3204){var $_01201=$3202;var $_01202=$3203;label=626;break;}else{label=615;break;}
 case 615: 
 _free($3026);
 var $_01201=$3202;var $_01202=$3203;label=626;break;
 case 616: 
 var $3207$0 = ___cxa_find_matching_catch(-1, -1); var $3207$1 = tempRet0;
 var $3208=$3207$0;
 var $3209=$3207$1;
 var $3210=($3051|0)==0; //@line 11 "inc/front.h"
 if($3210){var $_01201=$3208;var $_01202=$3209;label=626;break;}else{label=617;break;} //@line 11 "inc/front.h"
 case 617: 
 _free($3051);
 var $_01201=$3208;var $_01202=$3209;label=626;break; //@line 11 "inc/front.h"
 case 618: 
 var $3212=((($y_i452_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11198=$_21199;var $f_i450_sroa_55_3=$f_i450_sroa_55_5;var $y_i452_0=$3212;label=598;break; //@line 48 "src/read.cpp"
 case 619: 
 var $3214=((($z_i453_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01197=$_11198;var $f_i450_sroa_55_1=$f_i450_sroa_55_3;var $z_i453_0=$3214;label=596;break; //@line 47 "src/read.cpp"
 case 620: 
 var $3216=($3030|0)==0; //@line 69 "src/read.cpp"
 if($3216){label=622;break;}else{label=621;break;} //@line 69 "src/read.cpp"
 case 621: 
 _free($3030);
 label=622;break; //@line 69 "src/read.cpp"
 case 622: 
 var $3218=HEAP32[(($rm_i448)>>2)]; //@line 70 "src/read.cpp"
 var $3219=($3218|0)==0; //@line 70 "src/read.cpp"
 if($3219){label=624;break;}else{label=623;break;} //@line 70 "src/read.cpp"
 case 623: 
 var $3221=$3218; //@line 70 "src/read.cpp"
 var $3222=HEAP32[(($3221)>>2)]; //@line 70 "src/read.cpp"
 var $3223=(($3222+4)|0); //@line 70 "src/read.cpp"
 var $3224=HEAP32[(($3223)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3224]($3218); //@line 70 "src/read.cpp"
 label=624;break; //@line 70 "src/read.cpp"
 case 624: 
 var $3226=($3051|0)==0; //@line 11 "inc/front.h"
 if($3226){label=1257;break;}else{label=625;break;} //@line 11 "inc/front.h"
 case 625: 
 _free($3051);
 label=1257;break; //@line 11 "inc/front.h"
 case 626: 
 var $_01202;
 var $_01201;
 var $3227$0=$_01201;
 var $3227$1=0;
 var $3228$0=$3227$0;
 var $3228$1=$_01202;
 ___resumeException($3228$0) //@line 71 "src/read.cpp"
 case 627: 
 var $3230=HEAP32[(($3)>>2)]; //@line 183 "src/read.cpp"
 var $3231=HEAP32[(($4)>>2)]; //@line 183 "src/read.cpp"
 var $3232=HEAP32[(($5)>>2)]; //@line 183 "src/read.cpp"
 var $3233=HEAP32[(($6)>>2)]; //@line 183 "src/read.cpp"
 var $$etemp$80$0=4;
 var $$etemp$80$1=0;

 var $3234=__Znwj(48); //@line 41 "src/read.cpp"
 var $3235=$3234; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3235,0,37,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=628;break; } else { label=656;break; } //@line 41 "src/read.cpp"
 case 628: 
 var $3237=$3234; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i484)>>2)]=$3237; //@line 71 "src/read.cpp"
 var $3238=__Znwj(12); //@line 42 "src/read.cpp"
 var $3239=(($3238+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3240=$3239; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3240)>>2)]=$3230; //@line 34 "inc/pcdecoder.inl"
 var $3241=(($3238+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3242=$3241; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3242)>>2)]=$rm_i484; //@line 34 "inc/pcdecoder.inl"
 var $3243=((($3231)+(1))|0); //@line 10 "inc/front.h"
 var $3244=((($3232)+(1))|0); //@line 10 "inc/front.h"
 var $3245=(Math_imul($3243,$3244)|0); //@line 10 "inc/front.h"
 var $3246=((($3231)+(2))|0); //@line 9 "inc/front.h"
 var $3247=((($3246)+($3245))|0); //@line 9 "inc/front.h"
 var $3248=((($3247)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i491=$3248;label=629;break; //@line 45 "inc/front.h"
 case 629: 
 var $storemerge_i_i_i491;
 var $3250=((($storemerge_i_i_i491)+(1))|0); //@line 45 "inc/front.h"
 var $3251=$storemerge_i_i_i491&$3250; //@line 45 "inc/front.h"
 var $3252=($3251|0)==0; //@line 45 "inc/front.h"
 if($3252){label=631;break;}else{label=630;break;} //@line 45 "inc/front.h"
 case 630: 
 var $3254=$storemerge_i_i_i491|$3250; //@line 45 "inc/front.h"
 var $storemerge_i_i_i491=$3254;label=629;break; //@line 45 "inc/front.h"
 case 631: 
 var $3255$0=_llvm_umul_with_overflow_i32($3250,4);
 var $3255$1=tempRet0;
 var $3256=$3255$1;
 var $3257=$3255$0;
 var $3258=($3256?-1:$3257); //@line 9 "inc/front.h"
 var $3259=(function() { try { __THREW__ = 0; return __Znwj($3258) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=635;break; } else { label=632;break; }
 case 632: 
 var $3261$0 = ___cxa_find_matching_catch(-1, -1); var $3261$1 = tempRet0;
 var $3262=$3261$1;
 var $3263=($3262|0)<0;
 if($3263){label=633;break;}else{label=634;break;}
 case 633: 
 var $3265=$3261$0;
 ___cxa_call_unexpected($3265);
 throw "Reached an unreachable!";
 case 634: 
 ___resumeException($3261$0)
 case 635: 
 var $3267=$3259; //@line 9 "inc/front.h"
 var $_01181=$3245;var $f_i486_sroa_55_0=0;label=636;break; //@line 22 "inc/front.h"
 case 636: 
 var $f_i486_sroa_55_0;
 var $_01181;
 var $3269=((($f_i486_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3270=$f_i486_sroa_55_0&$storemerge_i_i_i491; //@line 23 "inc/front.h"
 var $3271=(($3267+($3270<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3271)>>2)]=0; //@line 23 "inc/front.h"
 var $3272=((($_01181)-(1))|0); //@line 23 "inc/front.h"
 var $3273=($3272|0)==0; //@line 23 "inc/front.h"
 if($3273){label=637;break;}else{var $_01181=$3272;var $f_i486_sroa_55_0=$3269;label=636;break;} //@line 23 "inc/front.h"
 case 637: 
 var $3274=(($3238+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3275=$3274; //@line 50 "inc/pcdecoder.inl"
 var $3276=(($3238+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3277=$3276; //@line 50 "inc/pcdecoder.inl"
 var $_01182=$_01012;var $f_i486_sroa_55_1=$3269;var $z_i489_0=0;label=638;break; //@line 47 "src/read.cpp"
 case 638: 
 var $z_i489_0;
 var $f_i486_sroa_55_1;
 var $_01182;
 var $3279=($z_i489_0>>>0)<($3233>>>0); //@line 47 "src/read.cpp"
 if($3279){var $_01180=$3243;var $f_i486_sroa_55_2=$f_i486_sroa_55_1;label=639;break;}else{label=662;break;} //@line 47 "src/read.cpp"
 case 639: 
 var $f_i486_sroa_55_2;
 var $_01180;
 var $3281=((($f_i486_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3282=$f_i486_sroa_55_2&$storemerge_i_i_i491; //@line 23 "inc/front.h"
 var $3283=(($3267+($3282<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3283)>>2)]=0; //@line 23 "inc/front.h"
 var $3284=((($_01180)-(1))|0); //@line 23 "inc/front.h"
 var $3285=($3284|0)==0; //@line 23 "inc/front.h"
 if($3285){var $_11183=$_01182;var $f_i486_sroa_55_3=$3281;var $y_i488_0=0;label=640;break;}else{var $_01180=$3284;var $f_i486_sroa_55_2=$3281;label=639;break;} //@line 23 "inc/front.h"
 case 640: 
 var $y_i488_0;
 var $f_i486_sroa_55_3;
 var $_11183;
 var $3286=($y_i488_0>>>0)<($3232>>>0); //@line 48 "src/read.cpp"
 if($3286){var $_01179=1;var $f_i486_sroa_55_4=$f_i486_sroa_55_3;label=641;break;}else{label=661;break;} //@line 48 "src/read.cpp"
 case 641: 
 var $f_i486_sroa_55_4;
 var $_01179;
 var $3288=((($f_i486_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3289=$f_i486_sroa_55_4&$storemerge_i_i_i491; //@line 23 "inc/front.h"
 var $3290=(($3267+($3289<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3290)>>2)]=0; //@line 23 "inc/front.h"
 var $3291=((($_01179)-(1))|0); //@line 23 "inc/front.h"
 var $3292=($3291|0)==0; //@line 23 "inc/front.h"
 if($3292){var $_21184=$_11183;var $f_i486_sroa_55_5=$3288;var $x_i487_0=0;label=642;break;}else{var $_01179=$3291;var $f_i486_sroa_55_4=$3288;label=641;break;} //@line 23 "inc/front.h"
 case 642: 
 var $x_i487_0;
 var $f_i486_sroa_55_5;
 var $_21184;
 var $3293=($x_i487_0>>>0)<($3231>>>0); //@line 49 "src/read.cpp"
 if($3293){label=643;break;}else{label=660;break;} //@line 49 "src/read.cpp"
 case 643: 
 var $3295=((($f_i486_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3296=$3295&$storemerge_i_i_i491; //@line 16 "inc/front.h"
 var $3297=(($3267+($3296<<2))|0); //@line 16 "inc/front.h"
 var $3298=HEAPF32[(($3297)>>2)]; //@line 59 "src/read.cpp"
 var $3299=((($f_i486_sroa_55_5)-($3243))|0); //@line 16 "inc/front.h"
 var $3300=((($3299)-($3245))|0); //@line 16 "inc/front.h"
 var $3301=$3300&$storemerge_i_i_i491; //@line 16 "inc/front.h"
 var $3302=(($3267+($3301<<2))|0); //@line 16 "inc/front.h"
 var $3303=HEAPF32[(($3302)>>2)]; //@line 59 "src/read.cpp"
 var $3304=$3299&$storemerge_i_i_i491; //@line 16 "inc/front.h"
 var $3305=(($3267+($3304<<2))|0); //@line 16 "inc/front.h"
 var $3306=HEAPF32[(($3305)>>2)]; //@line 60 "src/read.cpp"
 var $3307=((($3295)-($3245))|0); //@line 16 "inc/front.h"
 var $3308=$3307&$storemerge_i_i_i491; //@line 16 "inc/front.h"
 var $3309=(($3267+($3308<<2))|0); //@line 16 "inc/front.h"
 var $3310=HEAPF32[(($3309)>>2)]; //@line 60 "src/read.cpp"
 var $3311=((($f_i486_sroa_55_5)-($3245))|0); //@line 16 "inc/front.h"
 var $3312=$3311&$storemerge_i_i_i491; //@line 16 "inc/front.h"
 var $3313=(($3267+($3312<<2))|0); //@line 16 "inc/front.h"
 var $3314=HEAPF32[(($3313)>>2)]; //@line 61 "src/read.cpp"
 var $3315=((($3295)-($3243))|0); //@line 16 "inc/front.h"
 var $3316=$3315&$storemerge_i_i_i491; //@line 16 "inc/front.h"
 var $3317=(($3267+($3316<<2))|0); //@line 16 "inc/front.h"
 var $3318=HEAPF32[(($3317)>>2)]; //@line 61 "src/read.cpp"
 var $3319=((($3315)-($3245))|0); //@line 16 "inc/front.h"
 var $3320=$3319&$storemerge_i_i_i491; //@line 16 "inc/front.h"
 var $3321=(($3267+($3320<<2))|0); //@line 16 "inc/front.h"
 var $3322=($3298)-($3303); //@line 59 "src/read.cpp"
 var $3323=($3322)+($3306); //@line 60 "src/read.cpp"
 var $3324=($3323)-($3310); //@line 60 "src/read.cpp"
 var $3325=($3324)+($3314); //@line 61 "src/read.cpp"
 var $3326=($3325)-($3318); //@line 61 "src/read.cpp"
 var $3327=HEAPF32[(($3321)>>2)]; //@line 62 "src/read.cpp"
 var $3328=($3326)+($3327); //@line 62 "src/read.cpp"
 var $3329=HEAP32[(($3275)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3330=HEAP32[(($3277)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3331=HEAP32[(($3330)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$81$0=4;
 var $$etemp$81$1=0;

 var $$etemp$82$0=4;
 var $$etemp$82$1=0;

 var $3332=$3331; //@line 25 "src/rcdecoder.cpp"
 var $3333=HEAP32[(($3332)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3334=(($3333+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3335=HEAP32[(($3334)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3336=(($3329+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3335]($3331,$3336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=644;break; } else { label=658;break; }
 case 644: 
 var $3337=(($3329+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3338=HEAP32[(($3337)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3339=(($3329+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3340=HEAP32[(($3339)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3341=((($3338)-($3340))|0); //@line 26 "src/rcdecoder.cpp"
 var $3342=HEAP32[(($3336)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3343=(((($3341>>>0))/(($3342>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i478)>>2)]=$3343; //@line 26 "src/rcdecoder.cpp"
 var $3344=$3331; //@line 27 "src/rcdecoder.cpp"
 var $3345=HEAP32[(($3344)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3346=(($3345+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3347=HEAP32[(($3346)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3348=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3347]($3331,$l_i_i_i478,$r_i_i_i479) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=645;break; } else { label=658;break; }
 case 645: 
 var $3349=HEAP32[(($3336)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3350=HEAP32[(($l_i_i_i478)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3351=(Math_imul($3349,$3350)|0); //@line 28 "src/rcdecoder.cpp"
 var $3352=HEAP32[(($3339)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3353=((($3352)+($3351))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3339)>>2)]=$3353; //@line 28 "src/rcdecoder.cpp"
 var $3354=HEAP32[(($r_i_i_i479)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3355=(Math_imul($3349,$3354)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3336)>>2)]=$3355; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3329) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=646;break; } else { label=658;break; }
 case 646: 
 var $$etemp$83$0=4;
 var $$etemp$83$1=0;

 var $$etemp$84$0=4;
 var $$etemp$84$1=0;

 var $3356=($3348>>>0)>18; //@line 51 "inc/pcdecoder.inl"
 if($3356){label=647;break;}else{label=649;break;} //@line 51 "inc/pcdecoder.inl"
 case 647: 
 var $3358=((($3348)-(19))|0); //@line 52 "inc/pcdecoder.inl"
 var $3359=HEAP32[(($3275)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3360=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3359,$3358) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=648;break; } else { label=658;break; }
 case 648: 
 var $3361=1<<$3358; //@line 53 "inc/pcdecoder.inl"
 var $3362=((($3361)+($3360))|0); //@line 53 "inc/pcdecoder.inl"
 var $3363=(HEAPF32[((tempDoublePtr)>>2)]=$3328,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3364=$3363^-1; //@line 38 "inc/pcmap.h"
 var $3365=$3364>>>14; //@line 39 "inc/pcmap.h"
 var $3366=$3364>>31; //@line 40 "inc/pcmap.h"
 var $3367=$3366>>>15; //@line 40 "inc/pcmap.h"
 var $3368=$3365^$3367; //@line 40 "inc/pcmap.h"
 var $3369=((($3368)+($3362))|0); //@line 55 "inc/pcdecoder.inl"
 var $3370=$3369>>>17; //@line 48 "inc/pcmap.h"
 var $3371=(((-$3370))|0); //@line 48 "inc/pcmap.h"
 var $3372=$3371>>>15; //@line 48 "inc/pcmap.h"
 var $3373=$3372^$3369; //@line 48 "inc/pcmap.h"
 var $3374=$3373<<14; //@line 50 "inc/pcmap.h"
 var $3375=$3374^-16384; //@line 50 "inc/pcmap.h"
 var $_01177_in=$3375;label=653;break; //@line 56 "inc/pcdecoder.inl"
 case 649: 
 var $3377=($3348>>>0)<18; //@line undefined "inc/pcdecoder.inl"
 if($3377){label=650;break;}else{label=652;break;} //@line undefined "inc/pcdecoder.inl"
 case 650: 
 var $3379=(((17)-($3348))|0); //@line 59 "inc/pcdecoder.inl"
 var $3380=HEAP32[(($3275)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3381=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3380,$3379) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=651;break; } else { label=658;break; }
 case 651: 
 var $3382=1<<$3379; //@line 60 "inc/pcdecoder.inl"
 var $3383=((($3382)+($3381))|0); //@line 60 "inc/pcdecoder.inl"
 var $3384=(HEAPF32[((tempDoublePtr)>>2)]=$3328,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3385=$3384^-1; //@line 38 "inc/pcmap.h"
 var $3386=$3385>>>14; //@line 39 "inc/pcmap.h"
 var $3387=$3385>>31; //@line 40 "inc/pcmap.h"
 var $3388=$3387>>>15; //@line 40 "inc/pcmap.h"
 var $3389=$3386^$3388; //@line 40 "inc/pcmap.h"
 var $3390=((($3389)-($3383))|0); //@line 62 "inc/pcdecoder.inl"
 var $3391=$3390>>>17; //@line 48 "inc/pcmap.h"
 var $3392=(((-$3391))|0); //@line 48 "inc/pcmap.h"
 var $3393=$3392>>>15; //@line 48 "inc/pcmap.h"
 var $3394=$3393^$3390; //@line 48 "inc/pcmap.h"
 var $3395=$3394<<14; //@line 50 "inc/pcmap.h"
 var $3396=$3395^-16384; //@line 50 "inc/pcmap.h"
 var $_01177_in=$3396;label=653;break; //@line 63 "inc/pcdecoder.inl"
 case 652: 
 var $3398=(HEAPF32[((tempDoublePtr)>>2)]=$3328,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3399=$3398&-16384; //@line 60 "inc/pcmap.h"
 var $_01177_in=$3399;label=653;break; //@line 66 "inc/pcdecoder.inl"
 case 653: 
 var $_01177_in;
 var $_01177=(HEAP32[((tempDoublePtr)>>2)]=$_01177_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $3400=(($_21184+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21184)>>2)]=$_01177; //@line 65 "src/read.cpp"
 var $_01178=1;var $f_i486_sroa_55_6=$f_i486_sroa_55_5;label=654;break; //@line 22 "inc/front.h"
 case 654: 
 var $f_i486_sroa_55_6;
 var $_01178;
 var $3402=((($f_i486_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3403=$f_i486_sroa_55_6&$storemerge_i_i_i491; //@line 23 "inc/front.h"
 var $3404=(($3267+($3403<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3404)>>2)]=$_01177; //@line 23 "inc/front.h"
 var $3405=((($_01178)-(1))|0); //@line 23 "inc/front.h"
 var $3406=($3405|0)==0; //@line 23 "inc/front.h"
 if($3406){label=655;break;}else{var $_01178=$3405;var $f_i486_sroa_55_6=$3402;label=654;break;} //@line 23 "inc/front.h"
 case 655: 
 var $3407=((($x_i487_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21184=$3400;var $f_i486_sroa_55_5=$3402;var $x_i487_0=$3407;label=642;break; //@line 49 "src/read.cpp"
 case 656: 
 var $3409$0 = ___cxa_find_matching_catch(-1, -1); var $3409$1 = tempRet0;
 var $3410=$3409$0;
 var $3411=$3409$1;
 var $3412=($3234|0)==0;
 if($3412){var $_01185=$3410;var $_01188=$3411;label=668;break;}else{label=657;break;}
 case 657: 
 _free($3234);
 var $_01185=$3410;var $_01188=$3411;label=668;break;
 case 658: 
 var $3415$0 = ___cxa_find_matching_catch(-1, -1); var $3415$1 = tempRet0;
 var $3416=$3415$0;
 var $3417=$3415$1;
 var $3418=($3259|0)==0; //@line 11 "inc/front.h"
 if($3418){var $_01185=$3416;var $_01188=$3417;label=668;break;}else{label=659;break;} //@line 11 "inc/front.h"
 case 659: 
 _free($3259);
 var $_01185=$3416;var $_01188=$3417;label=668;break; //@line 11 "inc/front.h"
 case 660: 
 var $3420=((($y_i488_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11183=$_21184;var $f_i486_sroa_55_3=$f_i486_sroa_55_5;var $y_i488_0=$3420;label=640;break; //@line 48 "src/read.cpp"
 case 661: 
 var $3422=((($z_i489_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01182=$_11183;var $f_i486_sroa_55_1=$f_i486_sroa_55_3;var $z_i489_0=$3422;label=638;break; //@line 47 "src/read.cpp"
 case 662: 
 var $3424=($3238|0)==0; //@line 69 "src/read.cpp"
 if($3424){label=664;break;}else{label=663;break;} //@line 69 "src/read.cpp"
 case 663: 
 _free($3238);
 label=664;break; //@line 69 "src/read.cpp"
 case 664: 
 var $3426=HEAP32[(($rm_i484)>>2)]; //@line 70 "src/read.cpp"
 var $3427=($3426|0)==0; //@line 70 "src/read.cpp"
 if($3427){label=666;break;}else{label=665;break;} //@line 70 "src/read.cpp"
 case 665: 
 var $3429=$3426; //@line 70 "src/read.cpp"
 var $3430=HEAP32[(($3429)>>2)]; //@line 70 "src/read.cpp"
 var $3431=(($3430+4)|0); //@line 70 "src/read.cpp"
 var $3432=HEAP32[(($3431)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3432]($3426); //@line 70 "src/read.cpp"
 label=666;break; //@line 70 "src/read.cpp"
 case 666: 
 var $3434=($3259|0)==0; //@line 11 "inc/front.h"
 if($3434){label=1257;break;}else{label=667;break;} //@line 11 "inc/front.h"
 case 667: 
 _free($3259);
 label=1257;break; //@line 11 "inc/front.h"
 case 668: 
 var $_01188;
 var $_01185;
 var $3435$0=$_01185;
 var $3435$1=0;
 var $3436$0=$3435$0;
 var $3436$1=$_01188;
 ___resumeException($3436$0) //@line 71 "src/read.cpp"
 case 669: 
 var $3438=HEAP32[(($3)>>2)]; //@line 184 "src/read.cpp"
 var $3439=HEAP32[(($4)>>2)]; //@line 184 "src/read.cpp"
 var $3440=HEAP32[(($5)>>2)]; //@line 184 "src/read.cpp"
 var $3441=HEAP32[(($6)>>2)]; //@line 184 "src/read.cpp"
 var $$etemp$85$0=4;
 var $$etemp$85$1=0;

 var $3442=__Znwj(48); //@line 41 "src/read.cpp"
 var $3443=$3442; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3443,0,39,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=670;break; } else { label=698;break; } //@line 41 "src/read.cpp"
 case 670: 
 var $3445=$3442; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i520)>>2)]=$3445; //@line 71 "src/read.cpp"
 var $3446=__Znwj(12); //@line 42 "src/read.cpp"
 var $3447=(($3446+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3448=$3447; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3448)>>2)]=$3438; //@line 34 "inc/pcdecoder.inl"
 var $3449=(($3446+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3450=$3449; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3450)>>2)]=$rm_i520; //@line 34 "inc/pcdecoder.inl"
 var $3451=((($3439)+(1))|0); //@line 10 "inc/front.h"
 var $3452=((($3440)+(1))|0); //@line 10 "inc/front.h"
 var $3453=(Math_imul($3451,$3452)|0); //@line 10 "inc/front.h"
 var $3454=((($3439)+(2))|0); //@line 9 "inc/front.h"
 var $3455=((($3454)+($3453))|0); //@line 9 "inc/front.h"
 var $3456=((($3455)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i527=$3456;label=671;break; //@line 45 "inc/front.h"
 case 671: 
 var $storemerge_i_i_i527;
 var $3458=((($storemerge_i_i_i527)+(1))|0); //@line 45 "inc/front.h"
 var $3459=$storemerge_i_i_i527&$3458; //@line 45 "inc/front.h"
 var $3460=($3459|0)==0; //@line 45 "inc/front.h"
 if($3460){label=673;break;}else{label=672;break;} //@line 45 "inc/front.h"
 case 672: 
 var $3462=$storemerge_i_i_i527|$3458; //@line 45 "inc/front.h"
 var $storemerge_i_i_i527=$3462;label=671;break; //@line 45 "inc/front.h"
 case 673: 
 var $3463$0=_llvm_umul_with_overflow_i32($3458,4);
 var $3463$1=tempRet0;
 var $3464=$3463$1;
 var $3465=$3463$0;
 var $3466=($3464?-1:$3465); //@line 9 "inc/front.h"
 var $3467=(function() { try { __THREW__ = 0; return __Znwj($3466) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=677;break; } else { label=674;break; }
 case 674: 
 var $3469$0 = ___cxa_find_matching_catch(-1, -1); var $3469$1 = tempRet0;
 var $3470=$3469$1;
 var $3471=($3470|0)<0;
 if($3471){label=675;break;}else{label=676;break;}
 case 675: 
 var $3473=$3469$0;
 ___cxa_call_unexpected($3473);
 throw "Reached an unreachable!";
 case 676: 
 ___resumeException($3469$0)
 case 677: 
 var $3475=$3467; //@line 9 "inc/front.h"
 var $_01171=$3453;var $f_i522_sroa_55_0=0;label=678;break; //@line 22 "inc/front.h"
 case 678: 
 var $f_i522_sroa_55_0;
 var $_01171;
 var $3477=((($f_i522_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3478=$f_i522_sroa_55_0&$storemerge_i_i_i527; //@line 23 "inc/front.h"
 var $3479=(($3475+($3478<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3479)>>2)]=0; //@line 23 "inc/front.h"
 var $3480=((($_01171)-(1))|0); //@line 23 "inc/front.h"
 var $3481=($3480|0)==0; //@line 23 "inc/front.h"
 if($3481){label=679;break;}else{var $_01171=$3480;var $f_i522_sroa_55_0=$3477;label=678;break;} //@line 23 "inc/front.h"
 case 679: 
 var $3482=(($3446+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3483=$3482; //@line 50 "inc/pcdecoder.inl"
 var $3484=(($3446+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3485=$3484; //@line 50 "inc/pcdecoder.inl"
 var $_01172=$_01012;var $f_i522_sroa_55_1=$3477;var $z_i525_0=0;label=680;break; //@line 47 "src/read.cpp"
 case 680: 
 var $z_i525_0;
 var $f_i522_sroa_55_1;
 var $_01172;
 var $3487=($z_i525_0>>>0)<($3441>>>0); //@line 47 "src/read.cpp"
 if($3487){var $_01170=$3451;var $f_i522_sroa_55_2=$f_i522_sroa_55_1;label=681;break;}else{label=704;break;} //@line 47 "src/read.cpp"
 case 681: 
 var $f_i522_sroa_55_2;
 var $_01170;
 var $3489=((($f_i522_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3490=$f_i522_sroa_55_2&$storemerge_i_i_i527; //@line 23 "inc/front.h"
 var $3491=(($3475+($3490<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3491)>>2)]=0; //@line 23 "inc/front.h"
 var $3492=((($_01170)-(1))|0); //@line 23 "inc/front.h"
 var $3493=($3492|0)==0; //@line 23 "inc/front.h"
 if($3493){var $_11173=$_01172;var $f_i522_sroa_55_3=$3489;var $y_i524_0=0;label=682;break;}else{var $_01170=$3492;var $f_i522_sroa_55_2=$3489;label=681;break;} //@line 23 "inc/front.h"
 case 682: 
 var $y_i524_0;
 var $f_i522_sroa_55_3;
 var $_11173;
 var $3494=($y_i524_0>>>0)<($3440>>>0); //@line 48 "src/read.cpp"
 if($3494){var $_01169=1;var $f_i522_sroa_55_4=$f_i522_sroa_55_3;label=683;break;}else{label=703;break;} //@line 48 "src/read.cpp"
 case 683: 
 var $f_i522_sroa_55_4;
 var $_01169;
 var $3496=((($f_i522_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3497=$f_i522_sroa_55_4&$storemerge_i_i_i527; //@line 23 "inc/front.h"
 var $3498=(($3475+($3497<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3498)>>2)]=0; //@line 23 "inc/front.h"
 var $3499=((($_01169)-(1))|0); //@line 23 "inc/front.h"
 var $3500=($3499|0)==0; //@line 23 "inc/front.h"
 if($3500){var $_21174=$_11173;var $f_i522_sroa_55_5=$3496;var $x_i523_0=0;label=684;break;}else{var $_01169=$3499;var $f_i522_sroa_55_4=$3496;label=683;break;} //@line 23 "inc/front.h"
 case 684: 
 var $x_i523_0;
 var $f_i522_sroa_55_5;
 var $_21174;
 var $3501=($x_i523_0>>>0)<($3439>>>0); //@line 49 "src/read.cpp"
 if($3501){label=685;break;}else{label=702;break;} //@line 49 "src/read.cpp"
 case 685: 
 var $3503=((($f_i522_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3504=$3503&$storemerge_i_i_i527; //@line 16 "inc/front.h"
 var $3505=(($3475+($3504<<2))|0); //@line 16 "inc/front.h"
 var $3506=HEAPF32[(($3505)>>2)]; //@line 59 "src/read.cpp"
 var $3507=((($f_i522_sroa_55_5)-($3451))|0); //@line 16 "inc/front.h"
 var $3508=((($3507)-($3453))|0); //@line 16 "inc/front.h"
 var $3509=$3508&$storemerge_i_i_i527; //@line 16 "inc/front.h"
 var $3510=(($3475+($3509<<2))|0); //@line 16 "inc/front.h"
 var $3511=HEAPF32[(($3510)>>2)]; //@line 59 "src/read.cpp"
 var $3512=$3507&$storemerge_i_i_i527; //@line 16 "inc/front.h"
 var $3513=(($3475+($3512<<2))|0); //@line 16 "inc/front.h"
 var $3514=HEAPF32[(($3513)>>2)]; //@line 60 "src/read.cpp"
 var $3515=((($3503)-($3453))|0); //@line 16 "inc/front.h"
 var $3516=$3515&$storemerge_i_i_i527; //@line 16 "inc/front.h"
 var $3517=(($3475+($3516<<2))|0); //@line 16 "inc/front.h"
 var $3518=HEAPF32[(($3517)>>2)]; //@line 60 "src/read.cpp"
 var $3519=((($f_i522_sroa_55_5)-($3453))|0); //@line 16 "inc/front.h"
 var $3520=$3519&$storemerge_i_i_i527; //@line 16 "inc/front.h"
 var $3521=(($3475+($3520<<2))|0); //@line 16 "inc/front.h"
 var $3522=HEAPF32[(($3521)>>2)]; //@line 61 "src/read.cpp"
 var $3523=((($3503)-($3451))|0); //@line 16 "inc/front.h"
 var $3524=$3523&$storemerge_i_i_i527; //@line 16 "inc/front.h"
 var $3525=(($3475+($3524<<2))|0); //@line 16 "inc/front.h"
 var $3526=HEAPF32[(($3525)>>2)]; //@line 61 "src/read.cpp"
 var $3527=((($3523)-($3453))|0); //@line 16 "inc/front.h"
 var $3528=$3527&$storemerge_i_i_i527; //@line 16 "inc/front.h"
 var $3529=(($3475+($3528<<2))|0); //@line 16 "inc/front.h"
 var $3530=($3506)-($3511); //@line 59 "src/read.cpp"
 var $3531=($3530)+($3514); //@line 60 "src/read.cpp"
 var $3532=($3531)-($3518); //@line 60 "src/read.cpp"
 var $3533=($3532)+($3522); //@line 61 "src/read.cpp"
 var $3534=($3533)-($3526); //@line 61 "src/read.cpp"
 var $3535=HEAPF32[(($3529)>>2)]; //@line 62 "src/read.cpp"
 var $3536=($3534)+($3535); //@line 62 "src/read.cpp"
 var $3537=HEAP32[(($3483)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3538=HEAP32[(($3485)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3539=HEAP32[(($3538)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$86$0=4;
 var $$etemp$86$1=0;

 var $$etemp$87$0=4;
 var $$etemp$87$1=0;

 var $3540=$3539; //@line 25 "src/rcdecoder.cpp"
 var $3541=HEAP32[(($3540)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3542=(($3541+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3543=HEAP32[(($3542)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3544=(($3537+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3543]($3539,$3544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=686;break; } else { label=700;break; }
 case 686: 
 var $3545=(($3537+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3546=HEAP32[(($3545)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3547=(($3537+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3548=HEAP32[(($3547)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3549=((($3546)-($3548))|0); //@line 26 "src/rcdecoder.cpp"
 var $3550=HEAP32[(($3544)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3551=(((($3549>>>0))/(($3550>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i514)>>2)]=$3551; //@line 26 "src/rcdecoder.cpp"
 var $3552=$3539; //@line 27 "src/rcdecoder.cpp"
 var $3553=HEAP32[(($3552)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3554=(($3553+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3555=HEAP32[(($3554)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3556=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3555]($3539,$l_i_i_i514,$r_i_i_i515) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=687;break; } else { label=700;break; }
 case 687: 
 var $3557=HEAP32[(($3544)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3558=HEAP32[(($l_i_i_i514)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3559=(Math_imul($3557,$3558)|0); //@line 28 "src/rcdecoder.cpp"
 var $3560=HEAP32[(($3547)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3561=((($3560)+($3559))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3547)>>2)]=$3561; //@line 28 "src/rcdecoder.cpp"
 var $3562=HEAP32[(($r_i_i_i515)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3563=(Math_imul($3557,$3562)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3544)>>2)]=$3563; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3537) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=688;break; } else { label=700;break; }
 case 688: 
 var $$etemp$88$0=4;
 var $$etemp$88$1=0;

 var $$etemp$89$0=4;
 var $$etemp$89$1=0;

 var $3564=($3556>>>0)>19; //@line 51 "inc/pcdecoder.inl"
 if($3564){label=689;break;}else{label=691;break;} //@line 51 "inc/pcdecoder.inl"
 case 689: 
 var $3566=((($3556)-(20))|0); //@line 52 "inc/pcdecoder.inl"
 var $3567=HEAP32[(($3483)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3568=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3567,$3566) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=690;break; } else { label=700;break; }
 case 690: 
 var $3569=1<<$3566; //@line 53 "inc/pcdecoder.inl"
 var $3570=((($3569)+($3568))|0); //@line 53 "inc/pcdecoder.inl"
 var $3571=(HEAPF32[((tempDoublePtr)>>2)]=$3536,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3572=$3571^-1; //@line 38 "inc/pcmap.h"
 var $3573=$3572>>>13; //@line 39 "inc/pcmap.h"
 var $3574=$3572>>31; //@line 40 "inc/pcmap.h"
 var $3575=$3574>>>14; //@line 40 "inc/pcmap.h"
 var $3576=$3573^$3575; //@line 40 "inc/pcmap.h"
 var $3577=((($3576)+($3570))|0); //@line 55 "inc/pcdecoder.inl"
 var $3578=$3577>>>18; //@line 48 "inc/pcmap.h"
 var $3579=(((-$3578))|0); //@line 48 "inc/pcmap.h"
 var $3580=$3579>>>14; //@line 48 "inc/pcmap.h"
 var $3581=$3580^$3577; //@line 48 "inc/pcmap.h"
 var $3582=$3581<<13; //@line 50 "inc/pcmap.h"
 var $3583=$3582^-8192; //@line 50 "inc/pcmap.h"
 var $_01167_in=$3583;label=695;break; //@line 56 "inc/pcdecoder.inl"
 case 691: 
 var $3585=($3556>>>0)<19; //@line undefined "inc/pcdecoder.inl"
 if($3585){label=692;break;}else{label=694;break;} //@line undefined "inc/pcdecoder.inl"
 case 692: 
 var $3587=(((18)-($3556))|0); //@line 59 "inc/pcdecoder.inl"
 var $3588=HEAP32[(($3483)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3589=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3588,$3587) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=693;break; } else { label=700;break; }
 case 693: 
 var $3590=1<<$3587; //@line 60 "inc/pcdecoder.inl"
 var $3591=((($3590)+($3589))|0); //@line 60 "inc/pcdecoder.inl"
 var $3592=(HEAPF32[((tempDoublePtr)>>2)]=$3536,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3593=$3592^-1; //@line 38 "inc/pcmap.h"
 var $3594=$3593>>>13; //@line 39 "inc/pcmap.h"
 var $3595=$3593>>31; //@line 40 "inc/pcmap.h"
 var $3596=$3595>>>14; //@line 40 "inc/pcmap.h"
 var $3597=$3594^$3596; //@line 40 "inc/pcmap.h"
 var $3598=((($3597)-($3591))|0); //@line 62 "inc/pcdecoder.inl"
 var $3599=$3598>>>18; //@line 48 "inc/pcmap.h"
 var $3600=(((-$3599))|0); //@line 48 "inc/pcmap.h"
 var $3601=$3600>>>14; //@line 48 "inc/pcmap.h"
 var $3602=$3601^$3598; //@line 48 "inc/pcmap.h"
 var $3603=$3602<<13; //@line 50 "inc/pcmap.h"
 var $3604=$3603^-8192; //@line 50 "inc/pcmap.h"
 var $_01167_in=$3604;label=695;break; //@line 63 "inc/pcdecoder.inl"
 case 694: 
 var $3606=(HEAPF32[((tempDoublePtr)>>2)]=$3536,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3607=$3606&-8192; //@line 60 "inc/pcmap.h"
 var $_01167_in=$3607;label=695;break; //@line 66 "inc/pcdecoder.inl"
 case 695: 
 var $_01167_in;
 var $_01167=(HEAP32[((tempDoublePtr)>>2)]=$_01167_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $3608=(($_21174+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21174)>>2)]=$_01167; //@line 65 "src/read.cpp"
 var $_01168=1;var $f_i522_sroa_55_6=$f_i522_sroa_55_5;label=696;break; //@line 22 "inc/front.h"
 case 696: 
 var $f_i522_sroa_55_6;
 var $_01168;
 var $3610=((($f_i522_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3611=$f_i522_sroa_55_6&$storemerge_i_i_i527; //@line 23 "inc/front.h"
 var $3612=(($3475+($3611<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3612)>>2)]=$_01167; //@line 23 "inc/front.h"
 var $3613=((($_01168)-(1))|0); //@line 23 "inc/front.h"
 var $3614=($3613|0)==0; //@line 23 "inc/front.h"
 if($3614){label=697;break;}else{var $_01168=$3613;var $f_i522_sroa_55_6=$3610;label=696;break;} //@line 23 "inc/front.h"
 case 697: 
 var $3615=((($x_i523_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21174=$3608;var $f_i522_sroa_55_5=$3610;var $x_i523_0=$3615;label=684;break; //@line 49 "src/read.cpp"
 case 698: 
 var $3617$0 = ___cxa_find_matching_catch(-1, -1); var $3617$1 = tempRet0;
 var $3618=$3617$0;
 var $3619=$3617$1;
 var $3620=($3442|0)==0;
 if($3620){var $_01175=$3618;var $_01176=$3619;label=710;break;}else{label=699;break;}
 case 699: 
 _free($3442);
 var $_01175=$3618;var $_01176=$3619;label=710;break;
 case 700: 
 var $3623$0 = ___cxa_find_matching_catch(-1, -1); var $3623$1 = tempRet0;
 var $3624=$3623$0;
 var $3625=$3623$1;
 var $3626=($3467|0)==0; //@line 11 "inc/front.h"
 if($3626){var $_01175=$3624;var $_01176=$3625;label=710;break;}else{label=701;break;} //@line 11 "inc/front.h"
 case 701: 
 _free($3467);
 var $_01175=$3624;var $_01176=$3625;label=710;break; //@line 11 "inc/front.h"
 case 702: 
 var $3628=((($y_i524_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11173=$_21174;var $f_i522_sroa_55_3=$f_i522_sroa_55_5;var $y_i524_0=$3628;label=682;break; //@line 48 "src/read.cpp"
 case 703: 
 var $3630=((($z_i525_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01172=$_11173;var $f_i522_sroa_55_1=$f_i522_sroa_55_3;var $z_i525_0=$3630;label=680;break; //@line 47 "src/read.cpp"
 case 704: 
 var $3632=($3446|0)==0; //@line 69 "src/read.cpp"
 if($3632){label=706;break;}else{label=705;break;} //@line 69 "src/read.cpp"
 case 705: 
 _free($3446);
 label=706;break; //@line 69 "src/read.cpp"
 case 706: 
 var $3634=HEAP32[(($rm_i520)>>2)]; //@line 70 "src/read.cpp"
 var $3635=($3634|0)==0; //@line 70 "src/read.cpp"
 if($3635){label=708;break;}else{label=707;break;} //@line 70 "src/read.cpp"
 case 707: 
 var $3637=$3634; //@line 70 "src/read.cpp"
 var $3638=HEAP32[(($3637)>>2)]; //@line 70 "src/read.cpp"
 var $3639=(($3638+4)|0); //@line 70 "src/read.cpp"
 var $3640=HEAP32[(($3639)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3640]($3634); //@line 70 "src/read.cpp"
 label=708;break; //@line 70 "src/read.cpp"
 case 708: 
 var $3642=($3467|0)==0; //@line 11 "inc/front.h"
 if($3642){label=1257;break;}else{label=709;break;} //@line 11 "inc/front.h"
 case 709: 
 _free($3467);
 label=1257;break; //@line 11 "inc/front.h"
 case 710: 
 var $_01176;
 var $_01175;
 var $3643$0=$_01175;
 var $3643$1=0;
 var $3644$0=$3643$0;
 var $3644$1=$_01176;
 ___resumeException($3644$0) //@line 71 "src/read.cpp"
 case 711: 
 var $3646=HEAP32[(($3)>>2)]; //@line 185 "src/read.cpp"
 var $3647=HEAP32[(($4)>>2)]; //@line 185 "src/read.cpp"
 var $3648=HEAP32[(($5)>>2)]; //@line 185 "src/read.cpp"
 var $3649=HEAP32[(($6)>>2)]; //@line 185 "src/read.cpp"
 var $$etemp$90$0=4;
 var $$etemp$90$1=0;

 var $3650=__Znwj(48); //@line 41 "src/read.cpp"
 var $3651=$3650; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3651,0,41,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=712;break; } else { label=740;break; } //@line 41 "src/read.cpp"
 case 712: 
 var $3653=$3650; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i556)>>2)]=$3653; //@line 71 "src/read.cpp"
 var $3654=__Znwj(12); //@line 42 "src/read.cpp"
 var $3655=(($3654+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3656=$3655; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3656)>>2)]=$3646; //@line 34 "inc/pcdecoder.inl"
 var $3657=(($3654+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3658=$3657; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3658)>>2)]=$rm_i556; //@line 34 "inc/pcdecoder.inl"
 var $3659=((($3647)+(1))|0); //@line 10 "inc/front.h"
 var $3660=((($3648)+(1))|0); //@line 10 "inc/front.h"
 var $3661=(Math_imul($3659,$3660)|0); //@line 10 "inc/front.h"
 var $3662=((($3647)+(2))|0); //@line 9 "inc/front.h"
 var $3663=((($3662)+($3661))|0); //@line 9 "inc/front.h"
 var $3664=((($3663)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i563=$3664;label=713;break; //@line 45 "inc/front.h"
 case 713: 
 var $storemerge_i_i_i563;
 var $3666=((($storemerge_i_i_i563)+(1))|0); //@line 45 "inc/front.h"
 var $3667=$storemerge_i_i_i563&$3666; //@line 45 "inc/front.h"
 var $3668=($3667|0)==0; //@line 45 "inc/front.h"
 if($3668){label=715;break;}else{label=714;break;} //@line 45 "inc/front.h"
 case 714: 
 var $3670=$storemerge_i_i_i563|$3666; //@line 45 "inc/front.h"
 var $storemerge_i_i_i563=$3670;label=713;break; //@line 45 "inc/front.h"
 case 715: 
 var $3671$0=_llvm_umul_with_overflow_i32($3666,4);
 var $3671$1=tempRet0;
 var $3672=$3671$1;
 var $3673=$3671$0;
 var $3674=($3672?-1:$3673); //@line 9 "inc/front.h"
 var $3675=(function() { try { __THREW__ = 0; return __Znwj($3674) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=719;break; } else { label=716;break; }
 case 716: 
 var $3677$0 = ___cxa_find_matching_catch(-1, -1); var $3677$1 = tempRet0;
 var $3678=$3677$1;
 var $3679=($3678|0)<0;
 if($3679){label=717;break;}else{label=718;break;}
 case 717: 
 var $3681=$3677$0;
 ___cxa_call_unexpected($3681);
 throw "Reached an unreachable!";
 case 718: 
 ___resumeException($3677$0)
 case 719: 
 var $3683=$3675; //@line 9 "inc/front.h"
 var $_01160=$3661;var $f_i558_sroa_55_0=0;label=720;break; //@line 22 "inc/front.h"
 case 720: 
 var $f_i558_sroa_55_0;
 var $_01160;
 var $3685=((($f_i558_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3686=$f_i558_sroa_55_0&$storemerge_i_i_i563; //@line 23 "inc/front.h"
 var $3687=(($3683+($3686<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3687)>>2)]=0; //@line 23 "inc/front.h"
 var $3688=((($_01160)-(1))|0); //@line 23 "inc/front.h"
 var $3689=($3688|0)==0; //@line 23 "inc/front.h"
 if($3689){label=721;break;}else{var $_01160=$3688;var $f_i558_sroa_55_0=$3685;label=720;break;} //@line 23 "inc/front.h"
 case 721: 
 var $3690=(($3654+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3691=$3690; //@line 50 "inc/pcdecoder.inl"
 var $3692=(($3654+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3693=$3692; //@line 50 "inc/pcdecoder.inl"
 var $_01161=$_01012;var $f_i558_sroa_55_1=$3685;var $z_i561_0=0;label=722;break; //@line 47 "src/read.cpp"
 case 722: 
 var $z_i561_0;
 var $f_i558_sroa_55_1;
 var $_01161;
 var $3695=($z_i561_0>>>0)<($3649>>>0); //@line 47 "src/read.cpp"
 if($3695){var $_01159=$3659;var $f_i558_sroa_55_2=$f_i558_sroa_55_1;label=723;break;}else{label=746;break;} //@line 47 "src/read.cpp"
 case 723: 
 var $f_i558_sroa_55_2;
 var $_01159;
 var $3697=((($f_i558_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3698=$f_i558_sroa_55_2&$storemerge_i_i_i563; //@line 23 "inc/front.h"
 var $3699=(($3683+($3698<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3699)>>2)]=0; //@line 23 "inc/front.h"
 var $3700=((($_01159)-(1))|0); //@line 23 "inc/front.h"
 var $3701=($3700|0)==0; //@line 23 "inc/front.h"
 if($3701){var $_11162=$_01161;var $f_i558_sroa_55_3=$3697;var $y_i560_0=0;label=724;break;}else{var $_01159=$3700;var $f_i558_sroa_55_2=$3697;label=723;break;} //@line 23 "inc/front.h"
 case 724: 
 var $y_i560_0;
 var $f_i558_sroa_55_3;
 var $_11162;
 var $3702=($y_i560_0>>>0)<($3648>>>0); //@line 48 "src/read.cpp"
 if($3702){var $_01158=1;var $f_i558_sroa_55_4=$f_i558_sroa_55_3;label=725;break;}else{label=745;break;} //@line 48 "src/read.cpp"
 case 725: 
 var $f_i558_sroa_55_4;
 var $_01158;
 var $3704=((($f_i558_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3705=$f_i558_sroa_55_4&$storemerge_i_i_i563; //@line 23 "inc/front.h"
 var $3706=(($3683+($3705<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3706)>>2)]=0; //@line 23 "inc/front.h"
 var $3707=((($_01158)-(1))|0); //@line 23 "inc/front.h"
 var $3708=($3707|0)==0; //@line 23 "inc/front.h"
 if($3708){var $_21163=$_11162;var $f_i558_sroa_55_5=$3704;var $x_i559_0=0;label=726;break;}else{var $_01158=$3707;var $f_i558_sroa_55_4=$3704;label=725;break;} //@line 23 "inc/front.h"
 case 726: 
 var $x_i559_0;
 var $f_i558_sroa_55_5;
 var $_21163;
 var $3709=($x_i559_0>>>0)<($3647>>>0); //@line 49 "src/read.cpp"
 if($3709){label=727;break;}else{label=744;break;} //@line 49 "src/read.cpp"
 case 727: 
 var $3711=((($f_i558_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3712=$3711&$storemerge_i_i_i563; //@line 16 "inc/front.h"
 var $3713=(($3683+($3712<<2))|0); //@line 16 "inc/front.h"
 var $3714=HEAPF32[(($3713)>>2)]; //@line 59 "src/read.cpp"
 var $3715=((($f_i558_sroa_55_5)-($3659))|0); //@line 16 "inc/front.h"
 var $3716=((($3715)-($3661))|0); //@line 16 "inc/front.h"
 var $3717=$3716&$storemerge_i_i_i563; //@line 16 "inc/front.h"
 var $3718=(($3683+($3717<<2))|0); //@line 16 "inc/front.h"
 var $3719=HEAPF32[(($3718)>>2)]; //@line 59 "src/read.cpp"
 var $3720=$3715&$storemerge_i_i_i563; //@line 16 "inc/front.h"
 var $3721=(($3683+($3720<<2))|0); //@line 16 "inc/front.h"
 var $3722=HEAPF32[(($3721)>>2)]; //@line 60 "src/read.cpp"
 var $3723=((($3711)-($3661))|0); //@line 16 "inc/front.h"
 var $3724=$3723&$storemerge_i_i_i563; //@line 16 "inc/front.h"
 var $3725=(($3683+($3724<<2))|0); //@line 16 "inc/front.h"
 var $3726=HEAPF32[(($3725)>>2)]; //@line 60 "src/read.cpp"
 var $3727=((($f_i558_sroa_55_5)-($3661))|0); //@line 16 "inc/front.h"
 var $3728=$3727&$storemerge_i_i_i563; //@line 16 "inc/front.h"
 var $3729=(($3683+($3728<<2))|0); //@line 16 "inc/front.h"
 var $3730=HEAPF32[(($3729)>>2)]; //@line 61 "src/read.cpp"
 var $3731=((($3711)-($3659))|0); //@line 16 "inc/front.h"
 var $3732=$3731&$storemerge_i_i_i563; //@line 16 "inc/front.h"
 var $3733=(($3683+($3732<<2))|0); //@line 16 "inc/front.h"
 var $3734=HEAPF32[(($3733)>>2)]; //@line 61 "src/read.cpp"
 var $3735=((($3731)-($3661))|0); //@line 16 "inc/front.h"
 var $3736=$3735&$storemerge_i_i_i563; //@line 16 "inc/front.h"
 var $3737=(($3683+($3736<<2))|0); //@line 16 "inc/front.h"
 var $3738=($3714)-($3719); //@line 59 "src/read.cpp"
 var $3739=($3738)+($3722); //@line 60 "src/read.cpp"
 var $3740=($3739)-($3726); //@line 60 "src/read.cpp"
 var $3741=($3740)+($3730); //@line 61 "src/read.cpp"
 var $3742=($3741)-($3734); //@line 61 "src/read.cpp"
 var $3743=HEAPF32[(($3737)>>2)]; //@line 62 "src/read.cpp"
 var $3744=($3742)+($3743); //@line 62 "src/read.cpp"
 var $3745=HEAP32[(($3691)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3746=HEAP32[(($3693)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3747=HEAP32[(($3746)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$91$0=4;
 var $$etemp$91$1=0;

 var $$etemp$92$0=4;
 var $$etemp$92$1=0;

 var $3748=$3747; //@line 25 "src/rcdecoder.cpp"
 var $3749=HEAP32[(($3748)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3750=(($3749+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3751=HEAP32[(($3750)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3752=(($3745+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3751]($3747,$3752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=728;break; } else { label=742;break; }
 case 728: 
 var $3753=(($3745+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3754=HEAP32[(($3753)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3755=(($3745+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3756=HEAP32[(($3755)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3757=((($3754)-($3756))|0); //@line 26 "src/rcdecoder.cpp"
 var $3758=HEAP32[(($3752)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3759=(((($3757>>>0))/(($3758>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i550)>>2)]=$3759; //@line 26 "src/rcdecoder.cpp"
 var $3760=$3747; //@line 27 "src/rcdecoder.cpp"
 var $3761=HEAP32[(($3760)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3762=(($3761+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3763=HEAP32[(($3762)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3764=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3763]($3747,$l_i_i_i550,$r_i_i_i551) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=729;break; } else { label=742;break; }
 case 729: 
 var $3765=HEAP32[(($3752)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3766=HEAP32[(($l_i_i_i550)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3767=(Math_imul($3765,$3766)|0); //@line 28 "src/rcdecoder.cpp"
 var $3768=HEAP32[(($3755)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3769=((($3768)+($3767))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3755)>>2)]=$3769; //@line 28 "src/rcdecoder.cpp"
 var $3770=HEAP32[(($r_i_i_i551)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3771=(Math_imul($3765,$3770)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3752)>>2)]=$3771; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3745) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=730;break; } else { label=742;break; }
 case 730: 
 var $$etemp$93$0=4;
 var $$etemp$93$1=0;

 var $$etemp$94$0=4;
 var $$etemp$94$1=0;

 var $3772=($3764>>>0)>20; //@line 51 "inc/pcdecoder.inl"
 if($3772){label=731;break;}else{label=733;break;} //@line 51 "inc/pcdecoder.inl"
 case 731: 
 var $3774=((($3764)-(21))|0); //@line 52 "inc/pcdecoder.inl"
 var $3775=HEAP32[(($3691)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3776=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3775,$3774) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=732;break; } else { label=742;break; }
 case 732: 
 var $3777=1<<$3774; //@line 53 "inc/pcdecoder.inl"
 var $3778=((($3777)+($3776))|0); //@line 53 "inc/pcdecoder.inl"
 var $3779=(HEAPF32[((tempDoublePtr)>>2)]=$3744,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3780=$3779^-1; //@line 38 "inc/pcmap.h"
 var $3781=$3780>>>12; //@line 39 "inc/pcmap.h"
 var $3782=$3780>>31; //@line 40 "inc/pcmap.h"
 var $3783=$3782>>>13; //@line 40 "inc/pcmap.h"
 var $3784=$3781^$3783; //@line 40 "inc/pcmap.h"
 var $3785=((($3784)+($3778))|0); //@line 55 "inc/pcdecoder.inl"
 var $3786=$3785>>>19; //@line 48 "inc/pcmap.h"
 var $3787=(((-$3786))|0); //@line 48 "inc/pcmap.h"
 var $3788=$3787>>>13; //@line 48 "inc/pcmap.h"
 var $3789=$3788^$3785; //@line 48 "inc/pcmap.h"
 var $3790=$3789<<12; //@line 50 "inc/pcmap.h"
 var $3791=$3790^-4096; //@line 50 "inc/pcmap.h"
 var $_01156_in=$3791;label=737;break; //@line 56 "inc/pcdecoder.inl"
 case 733: 
 var $3793=($3764>>>0)<20; //@line undefined "inc/pcdecoder.inl"
 if($3793){label=734;break;}else{label=736;break;} //@line undefined "inc/pcdecoder.inl"
 case 734: 
 var $3795=(((19)-($3764))|0); //@line 59 "inc/pcdecoder.inl"
 var $3796=HEAP32[(($3691)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3797=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3796,$3795) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=735;break; } else { label=742;break; }
 case 735: 
 var $3798=1<<$3795; //@line 60 "inc/pcdecoder.inl"
 var $3799=((($3798)+($3797))|0); //@line 60 "inc/pcdecoder.inl"
 var $3800=(HEAPF32[((tempDoublePtr)>>2)]=$3744,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3801=$3800^-1; //@line 38 "inc/pcmap.h"
 var $3802=$3801>>>12; //@line 39 "inc/pcmap.h"
 var $3803=$3801>>31; //@line 40 "inc/pcmap.h"
 var $3804=$3803>>>13; //@line 40 "inc/pcmap.h"
 var $3805=$3802^$3804; //@line 40 "inc/pcmap.h"
 var $3806=((($3805)-($3799))|0); //@line 62 "inc/pcdecoder.inl"
 var $3807=$3806>>>19; //@line 48 "inc/pcmap.h"
 var $3808=(((-$3807))|0); //@line 48 "inc/pcmap.h"
 var $3809=$3808>>>13; //@line 48 "inc/pcmap.h"
 var $3810=$3809^$3806; //@line 48 "inc/pcmap.h"
 var $3811=$3810<<12; //@line 50 "inc/pcmap.h"
 var $3812=$3811^-4096; //@line 50 "inc/pcmap.h"
 var $_01156_in=$3812;label=737;break; //@line 63 "inc/pcdecoder.inl"
 case 736: 
 var $3814=(HEAPF32[((tempDoublePtr)>>2)]=$3744,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3815=$3814&-4096; //@line 60 "inc/pcmap.h"
 var $_01156_in=$3815;label=737;break; //@line 66 "inc/pcdecoder.inl"
 case 737: 
 var $_01156_in;
 var $_01156=(HEAP32[((tempDoublePtr)>>2)]=$_01156_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $3816=(($_21163+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21163)>>2)]=$_01156; //@line 65 "src/read.cpp"
 var $_01157=1;var $f_i558_sroa_55_6=$f_i558_sroa_55_5;label=738;break; //@line 22 "inc/front.h"
 case 738: 
 var $f_i558_sroa_55_6;
 var $_01157;
 var $3818=((($f_i558_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3819=$f_i558_sroa_55_6&$storemerge_i_i_i563; //@line 23 "inc/front.h"
 var $3820=(($3683+($3819<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3820)>>2)]=$_01156; //@line 23 "inc/front.h"
 var $3821=((($_01157)-(1))|0); //@line 23 "inc/front.h"
 var $3822=($3821|0)==0; //@line 23 "inc/front.h"
 if($3822){label=739;break;}else{var $_01157=$3821;var $f_i558_sroa_55_6=$3818;label=738;break;} //@line 23 "inc/front.h"
 case 739: 
 var $3823=((($x_i559_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21163=$3816;var $f_i558_sroa_55_5=$3818;var $x_i559_0=$3823;label=726;break; //@line 49 "src/read.cpp"
 case 740: 
 var $3825$0 = ___cxa_find_matching_catch(-1, -1); var $3825$1 = tempRet0;
 var $3826=$3825$0;
 var $3827=$3825$1;
 var $3828=($3650|0)==0;
 if($3828){var $_01164=$3826;var $_01165=$3827;label=752;break;}else{label=741;break;}
 case 741: 
 _free($3650);
 var $_01164=$3826;var $_01165=$3827;label=752;break;
 case 742: 
 var $3831$0 = ___cxa_find_matching_catch(-1, -1); var $3831$1 = tempRet0;
 var $3832=$3831$0;
 var $3833=$3831$1;
 var $3834=($3675|0)==0; //@line 11 "inc/front.h"
 if($3834){var $_01164=$3832;var $_01165=$3833;label=752;break;}else{label=743;break;} //@line 11 "inc/front.h"
 case 743: 
 _free($3675);
 var $_01164=$3832;var $_01165=$3833;label=752;break; //@line 11 "inc/front.h"
 case 744: 
 var $3836=((($y_i560_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11162=$_21163;var $f_i558_sroa_55_3=$f_i558_sroa_55_5;var $y_i560_0=$3836;label=724;break; //@line 48 "src/read.cpp"
 case 745: 
 var $3838=((($z_i561_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01161=$_11162;var $f_i558_sroa_55_1=$f_i558_sroa_55_3;var $z_i561_0=$3838;label=722;break; //@line 47 "src/read.cpp"
 case 746: 
 var $3840=($3654|0)==0; //@line 69 "src/read.cpp"
 if($3840){label=748;break;}else{label=747;break;} //@line 69 "src/read.cpp"
 case 747: 
 _free($3654);
 label=748;break; //@line 69 "src/read.cpp"
 case 748: 
 var $3842=HEAP32[(($rm_i556)>>2)]; //@line 70 "src/read.cpp"
 var $3843=($3842|0)==0; //@line 70 "src/read.cpp"
 if($3843){label=750;break;}else{label=749;break;} //@line 70 "src/read.cpp"
 case 749: 
 var $3845=$3842; //@line 70 "src/read.cpp"
 var $3846=HEAP32[(($3845)>>2)]; //@line 70 "src/read.cpp"
 var $3847=(($3846+4)|0); //@line 70 "src/read.cpp"
 var $3848=HEAP32[(($3847)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3848]($3842); //@line 70 "src/read.cpp"
 label=750;break; //@line 70 "src/read.cpp"
 case 750: 
 var $3850=($3675|0)==0; //@line 11 "inc/front.h"
 if($3850){label=1257;break;}else{label=751;break;} //@line 11 "inc/front.h"
 case 751: 
 _free($3675);
 label=1257;break; //@line 11 "inc/front.h"
 case 752: 
 var $_01165;
 var $_01164;
 var $3851$0=$_01164;
 var $3851$1=0;
 var $3852$0=$3851$0;
 var $3852$1=$_01165;
 ___resumeException($3852$0) //@line 71 "src/read.cpp"
 case 753: 
 var $3854=HEAP32[(($3)>>2)]; //@line 186 "src/read.cpp"
 var $3855=HEAP32[(($4)>>2)]; //@line 186 "src/read.cpp"
 var $3856=HEAP32[(($5)>>2)]; //@line 186 "src/read.cpp"
 var $3857=HEAP32[(($6)>>2)]; //@line 186 "src/read.cpp"
 var $$etemp$95$0=4;
 var $$etemp$95$1=0;

 var $3858=__Znwj(48); //@line 41 "src/read.cpp"
 var $3859=$3858; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3859,0,43,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=754;break; } else { label=782;break; } //@line 41 "src/read.cpp"
 case 754: 
 var $3861=$3858; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i592)>>2)]=$3861; //@line 71 "src/read.cpp"
 var $3862=__Znwj(12); //@line 42 "src/read.cpp"
 var $3863=(($3862+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3864=$3863; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3864)>>2)]=$3854; //@line 34 "inc/pcdecoder.inl"
 var $3865=(($3862+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3866=$3865; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3866)>>2)]=$rm_i592; //@line 34 "inc/pcdecoder.inl"
 var $3867=((($3855)+(1))|0); //@line 10 "inc/front.h"
 var $3868=((($3856)+(1))|0); //@line 10 "inc/front.h"
 var $3869=(Math_imul($3867,$3868)|0); //@line 10 "inc/front.h"
 var $3870=((($3855)+(2))|0); //@line 9 "inc/front.h"
 var $3871=((($3870)+($3869))|0); //@line 9 "inc/front.h"
 var $3872=((($3871)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i599=$3872;label=755;break; //@line 45 "inc/front.h"
 case 755: 
 var $storemerge_i_i_i599;
 var $3874=((($storemerge_i_i_i599)+(1))|0); //@line 45 "inc/front.h"
 var $3875=$storemerge_i_i_i599&$3874; //@line 45 "inc/front.h"
 var $3876=($3875|0)==0; //@line 45 "inc/front.h"
 if($3876){label=757;break;}else{label=756;break;} //@line 45 "inc/front.h"
 case 756: 
 var $3878=$storemerge_i_i_i599|$3874; //@line 45 "inc/front.h"
 var $storemerge_i_i_i599=$3878;label=755;break; //@line 45 "inc/front.h"
 case 757: 
 var $3879$0=_llvm_umul_with_overflow_i32($3874,4);
 var $3879$1=tempRet0;
 var $3880=$3879$1;
 var $3881=$3879$0;
 var $3882=($3880?-1:$3881); //@line 9 "inc/front.h"
 var $3883=(function() { try { __THREW__ = 0; return __Znwj($3882) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=761;break; } else { label=758;break; }
 case 758: 
 var $3885$0 = ___cxa_find_matching_catch(-1, -1); var $3885$1 = tempRet0;
 var $3886=$3885$1;
 var $3887=($3886|0)<0;
 if($3887){label=759;break;}else{label=760;break;}
 case 759: 
 var $3889=$3885$0;
 ___cxa_call_unexpected($3889);
 throw "Reached an unreachable!";
 case 760: 
 ___resumeException($3885$0)
 case 761: 
 var $3891=$3883; //@line 9 "inc/front.h"
 var $_01149=$3869;var $f_i594_sroa_55_0=0;label=762;break; //@line 22 "inc/front.h"
 case 762: 
 var $f_i594_sroa_55_0;
 var $_01149;
 var $3893=((($f_i594_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3894=$f_i594_sroa_55_0&$storemerge_i_i_i599; //@line 23 "inc/front.h"
 var $3895=(($3891+($3894<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3895)>>2)]=0; //@line 23 "inc/front.h"
 var $3896=((($_01149)-(1))|0); //@line 23 "inc/front.h"
 var $3897=($3896|0)==0; //@line 23 "inc/front.h"
 if($3897){label=763;break;}else{var $_01149=$3896;var $f_i594_sroa_55_0=$3893;label=762;break;} //@line 23 "inc/front.h"
 case 763: 
 var $3898=(($3862+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3899=$3898; //@line 50 "inc/pcdecoder.inl"
 var $3900=(($3862+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3901=$3900; //@line 50 "inc/pcdecoder.inl"
 var $_01150=$_01012;var $f_i594_sroa_55_1=$3893;var $z_i597_0=0;label=764;break; //@line 47 "src/read.cpp"
 case 764: 
 var $z_i597_0;
 var $f_i594_sroa_55_1;
 var $_01150;
 var $3903=($z_i597_0>>>0)<($3857>>>0); //@line 47 "src/read.cpp"
 if($3903){var $_01148=$3867;var $f_i594_sroa_55_2=$f_i594_sroa_55_1;label=765;break;}else{label=788;break;} //@line 47 "src/read.cpp"
 case 765: 
 var $f_i594_sroa_55_2;
 var $_01148;
 var $3905=((($f_i594_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3906=$f_i594_sroa_55_2&$storemerge_i_i_i599; //@line 23 "inc/front.h"
 var $3907=(($3891+($3906<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3907)>>2)]=0; //@line 23 "inc/front.h"
 var $3908=((($_01148)-(1))|0); //@line 23 "inc/front.h"
 var $3909=($3908|0)==0; //@line 23 "inc/front.h"
 if($3909){var $_11151=$_01150;var $f_i594_sroa_55_3=$3905;var $y_i596_0=0;label=766;break;}else{var $_01148=$3908;var $f_i594_sroa_55_2=$3905;label=765;break;} //@line 23 "inc/front.h"
 case 766: 
 var $y_i596_0;
 var $f_i594_sroa_55_3;
 var $_11151;
 var $3910=($y_i596_0>>>0)<($3856>>>0); //@line 48 "src/read.cpp"
 if($3910){var $_01146=1;var $f_i594_sroa_55_4=$f_i594_sroa_55_3;label=767;break;}else{label=787;break;} //@line 48 "src/read.cpp"
 case 767: 
 var $f_i594_sroa_55_4;
 var $_01146;
 var $3912=((($f_i594_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3913=$f_i594_sroa_55_4&$storemerge_i_i_i599; //@line 23 "inc/front.h"
 var $3914=(($3891+($3913<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($3914)>>2)]=0; //@line 23 "inc/front.h"
 var $3915=((($_01146)-(1))|0); //@line 23 "inc/front.h"
 var $3916=($3915|0)==0; //@line 23 "inc/front.h"
 if($3916){var $_21152=$_11151;var $f_i594_sroa_55_5=$3912;var $x_i595_0=0;label=768;break;}else{var $_01146=$3915;var $f_i594_sroa_55_4=$3912;label=767;break;} //@line 23 "inc/front.h"
 case 768: 
 var $x_i595_0;
 var $f_i594_sroa_55_5;
 var $_21152;
 var $3917=($x_i595_0>>>0)<($3855>>>0); //@line 49 "src/read.cpp"
 if($3917){label=769;break;}else{label=786;break;} //@line 49 "src/read.cpp"
 case 769: 
 var $3919=((($f_i594_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3920=$3919&$storemerge_i_i_i599; //@line 16 "inc/front.h"
 var $3921=(($3891+($3920<<2))|0); //@line 16 "inc/front.h"
 var $3922=HEAPF32[(($3921)>>2)]; //@line 59 "src/read.cpp"
 var $3923=((($f_i594_sroa_55_5)-($3867))|0); //@line 16 "inc/front.h"
 var $3924=((($3923)-($3869))|0); //@line 16 "inc/front.h"
 var $3925=$3924&$storemerge_i_i_i599; //@line 16 "inc/front.h"
 var $3926=(($3891+($3925<<2))|0); //@line 16 "inc/front.h"
 var $3927=HEAPF32[(($3926)>>2)]; //@line 59 "src/read.cpp"
 var $3928=$3923&$storemerge_i_i_i599; //@line 16 "inc/front.h"
 var $3929=(($3891+($3928<<2))|0); //@line 16 "inc/front.h"
 var $3930=HEAPF32[(($3929)>>2)]; //@line 60 "src/read.cpp"
 var $3931=((($3919)-($3869))|0); //@line 16 "inc/front.h"
 var $3932=$3931&$storemerge_i_i_i599; //@line 16 "inc/front.h"
 var $3933=(($3891+($3932<<2))|0); //@line 16 "inc/front.h"
 var $3934=HEAPF32[(($3933)>>2)]; //@line 60 "src/read.cpp"
 var $3935=((($f_i594_sroa_55_5)-($3869))|0); //@line 16 "inc/front.h"
 var $3936=$3935&$storemerge_i_i_i599; //@line 16 "inc/front.h"
 var $3937=(($3891+($3936<<2))|0); //@line 16 "inc/front.h"
 var $3938=HEAPF32[(($3937)>>2)]; //@line 61 "src/read.cpp"
 var $3939=((($3919)-($3867))|0); //@line 16 "inc/front.h"
 var $3940=$3939&$storemerge_i_i_i599; //@line 16 "inc/front.h"
 var $3941=(($3891+($3940<<2))|0); //@line 16 "inc/front.h"
 var $3942=HEAPF32[(($3941)>>2)]; //@line 61 "src/read.cpp"
 var $3943=((($3939)-($3869))|0); //@line 16 "inc/front.h"
 var $3944=$3943&$storemerge_i_i_i599; //@line 16 "inc/front.h"
 var $3945=(($3891+($3944<<2))|0); //@line 16 "inc/front.h"
 var $3946=($3922)-($3927); //@line 59 "src/read.cpp"
 var $3947=($3946)+($3930); //@line 60 "src/read.cpp"
 var $3948=($3947)-($3934); //@line 60 "src/read.cpp"
 var $3949=($3948)+($3938); //@line 61 "src/read.cpp"
 var $3950=($3949)-($3942); //@line 61 "src/read.cpp"
 var $3951=HEAPF32[(($3945)>>2)]; //@line 62 "src/read.cpp"
 var $3952=($3950)+($3951); //@line 62 "src/read.cpp"
 var $3953=HEAP32[(($3899)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3954=HEAP32[(($3901)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3955=HEAP32[(($3954)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$96$0=4;
 var $$etemp$96$1=0;

 var $$etemp$97$0=4;
 var $$etemp$97$1=0;

 var $3956=$3955; //@line 25 "src/rcdecoder.cpp"
 var $3957=HEAP32[(($3956)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3958=(($3957+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3959=HEAP32[(($3958)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3960=(($3953+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3959]($3955,$3960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=770;break; } else { label=784;break; }
 case 770: 
 var $3961=(($3953+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3962=HEAP32[(($3961)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3963=(($3953+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3964=HEAP32[(($3963)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3965=((($3962)-($3964))|0); //@line 26 "src/rcdecoder.cpp"
 var $3966=HEAP32[(($3960)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3967=(((($3965>>>0))/(($3966>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i586)>>2)]=$3967; //@line 26 "src/rcdecoder.cpp"
 var $3968=$3955; //@line 27 "src/rcdecoder.cpp"
 var $3969=HEAP32[(($3968)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3970=(($3969+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3971=HEAP32[(($3970)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3972=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3971]($3955,$l_i_i_i586,$r_i_i_i587) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=771;break; } else { label=784;break; }
 case 771: 
 var $3973=HEAP32[(($3960)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3974=HEAP32[(($l_i_i_i586)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3975=(Math_imul($3973,$3974)|0); //@line 28 "src/rcdecoder.cpp"
 var $3976=HEAP32[(($3963)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3977=((($3976)+($3975))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3963)>>2)]=$3977; //@line 28 "src/rcdecoder.cpp"
 var $3978=HEAP32[(($r_i_i_i587)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3979=(Math_imul($3973,$3978)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3960)>>2)]=$3979; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3953) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=772;break; } else { label=784;break; }
 case 772: 
 var $$etemp$98$0=4;
 var $$etemp$98$1=0;

 var $$etemp$99$0=4;
 var $$etemp$99$1=0;

 var $3980=($3972>>>0)>21; //@line 51 "inc/pcdecoder.inl"
 if($3980){label=773;break;}else{label=775;break;} //@line 51 "inc/pcdecoder.inl"
 case 773: 
 var $3982=((($3972)-(22))|0); //@line 52 "inc/pcdecoder.inl"
 var $3983=HEAP32[(($3899)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3984=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($3983,$3982) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=774;break; } else { label=784;break; }
 case 774: 
 var $3985=1<<$3982; //@line 53 "inc/pcdecoder.inl"
 var $3986=((($3985)+($3984))|0); //@line 53 "inc/pcdecoder.inl"
 var $3987=(HEAPF32[((tempDoublePtr)>>2)]=$3952,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $3988=$3987^-1; //@line 38 "inc/pcmap.h"
 var $3989=$3988>>>11; //@line 39 "inc/pcmap.h"
 var $3990=$3988>>31; //@line 40 "inc/pcmap.h"
 var $3991=$3990>>>12; //@line 40 "inc/pcmap.h"
 var $3992=$3989^$3991; //@line 40 "inc/pcmap.h"
 var $3993=((($3992)+($3986))|0); //@line 55 "inc/pcdecoder.inl"
 var $3994=$3993>>>20; //@line 48 "inc/pcmap.h"
 var $3995=(((-$3994))|0); //@line 48 "inc/pcmap.h"
 var $3996=$3995>>>12; //@line 48 "inc/pcmap.h"
 var $3997=$3996^$3993; //@line 48 "inc/pcmap.h"
 var $3998=$3997<<11; //@line 50 "inc/pcmap.h"
 var $3999=$3998^-2048; //@line 50 "inc/pcmap.h"
 var $_01144_in=$3999;label=779;break; //@line 56 "inc/pcdecoder.inl"
 case 775: 
 var $4001=($3972>>>0)<21; //@line undefined "inc/pcdecoder.inl"
 if($4001){label=776;break;}else{label=778;break;} //@line undefined "inc/pcdecoder.inl"
 case 776: 
 var $4003=(((20)-($3972))|0); //@line 59 "inc/pcdecoder.inl"
 var $4004=HEAP32[(($3899)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4005=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4004,$4003) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=777;break; } else { label=784;break; }
 case 777: 
 var $4006=1<<$4003; //@line 60 "inc/pcdecoder.inl"
 var $4007=((($4006)+($4005))|0); //@line 60 "inc/pcdecoder.inl"
 var $4008=(HEAPF32[((tempDoublePtr)>>2)]=$3952,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4009=$4008^-1; //@line 38 "inc/pcmap.h"
 var $4010=$4009>>>11; //@line 39 "inc/pcmap.h"
 var $4011=$4009>>31; //@line 40 "inc/pcmap.h"
 var $4012=$4011>>>12; //@line 40 "inc/pcmap.h"
 var $4013=$4010^$4012; //@line 40 "inc/pcmap.h"
 var $4014=((($4013)-($4007))|0); //@line 62 "inc/pcdecoder.inl"
 var $4015=$4014>>>20; //@line 48 "inc/pcmap.h"
 var $4016=(((-$4015))|0); //@line 48 "inc/pcmap.h"
 var $4017=$4016>>>12; //@line 48 "inc/pcmap.h"
 var $4018=$4017^$4014; //@line 48 "inc/pcmap.h"
 var $4019=$4018<<11; //@line 50 "inc/pcmap.h"
 var $4020=$4019^-2048; //@line 50 "inc/pcmap.h"
 var $_01144_in=$4020;label=779;break; //@line 63 "inc/pcdecoder.inl"
 case 778: 
 var $4022=(HEAPF32[((tempDoublePtr)>>2)]=$3952,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4023=$4022&-2048; //@line 60 "inc/pcmap.h"
 var $_01144_in=$4023;label=779;break; //@line 66 "inc/pcdecoder.inl"
 case 779: 
 var $_01144_in;
 var $_01144=(HEAP32[((tempDoublePtr)>>2)]=$_01144_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $4024=(($_21152+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21152)>>2)]=$_01144; //@line 65 "src/read.cpp"
 var $_01145=1;var $f_i594_sroa_55_6=$f_i594_sroa_55_5;label=780;break; //@line 22 "inc/front.h"
 case 780: 
 var $f_i594_sroa_55_6;
 var $_01145;
 var $4026=((($f_i594_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4027=$f_i594_sroa_55_6&$storemerge_i_i_i599; //@line 23 "inc/front.h"
 var $4028=(($3891+($4027<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4028)>>2)]=$_01144; //@line 23 "inc/front.h"
 var $4029=((($_01145)-(1))|0); //@line 23 "inc/front.h"
 var $4030=($4029|0)==0; //@line 23 "inc/front.h"
 if($4030){label=781;break;}else{var $_01145=$4029;var $f_i594_sroa_55_6=$4026;label=780;break;} //@line 23 "inc/front.h"
 case 781: 
 var $4031=((($x_i595_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21152=$4024;var $f_i594_sroa_55_5=$4026;var $x_i595_0=$4031;label=768;break; //@line 49 "src/read.cpp"
 case 782: 
 var $4033$0 = ___cxa_find_matching_catch(-1, -1); var $4033$1 = tempRet0;
 var $4034=$4033$0;
 var $4035=$4033$1;
 var $4036=($3858|0)==0;
 if($4036){var $_01153=$4034;var $_01155=$4035;label=794;break;}else{label=783;break;}
 case 783: 
 _free($3858);
 var $_01153=$4034;var $_01155=$4035;label=794;break;
 case 784: 
 var $4039$0 = ___cxa_find_matching_catch(-1, -1); var $4039$1 = tempRet0;
 var $4040=$4039$0;
 var $4041=$4039$1;
 var $4042=($3883|0)==0; //@line 11 "inc/front.h"
 if($4042){var $_01153=$4040;var $_01155=$4041;label=794;break;}else{label=785;break;} //@line 11 "inc/front.h"
 case 785: 
 _free($3883);
 var $_01153=$4040;var $_01155=$4041;label=794;break; //@line 11 "inc/front.h"
 case 786: 
 var $4044=((($y_i596_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11151=$_21152;var $f_i594_sroa_55_3=$f_i594_sroa_55_5;var $y_i596_0=$4044;label=766;break; //@line 48 "src/read.cpp"
 case 787: 
 var $4046=((($z_i597_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01150=$_11151;var $f_i594_sroa_55_1=$f_i594_sroa_55_3;var $z_i597_0=$4046;label=764;break; //@line 47 "src/read.cpp"
 case 788: 
 var $4048=($3862|0)==0; //@line 69 "src/read.cpp"
 if($4048){label=790;break;}else{label=789;break;} //@line 69 "src/read.cpp"
 case 789: 
 _free($3862);
 label=790;break; //@line 69 "src/read.cpp"
 case 790: 
 var $4050=HEAP32[(($rm_i592)>>2)]; //@line 70 "src/read.cpp"
 var $4051=($4050|0)==0; //@line 70 "src/read.cpp"
 if($4051){label=792;break;}else{label=791;break;} //@line 70 "src/read.cpp"
 case 791: 
 var $4053=$4050; //@line 70 "src/read.cpp"
 var $4054=HEAP32[(($4053)>>2)]; //@line 70 "src/read.cpp"
 var $4055=(($4054+4)|0); //@line 70 "src/read.cpp"
 var $4056=HEAP32[(($4055)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4056]($4050); //@line 70 "src/read.cpp"
 label=792;break; //@line 70 "src/read.cpp"
 case 792: 
 var $4058=($3883|0)==0; //@line 11 "inc/front.h"
 if($4058){label=1257;break;}else{label=793;break;} //@line 11 "inc/front.h"
 case 793: 
 _free($3883);
 label=1257;break; //@line 11 "inc/front.h"
 case 794: 
 var $_01155;
 var $_01153;
 var $4059$0=$_01153;
 var $4059$1=0;
 var $4060$0=$4059$0;
 var $4060$1=$_01155;
 ___resumeException($4060$0) //@line 71 "src/read.cpp"
 case 795: 
 var $4062=HEAP32[(($3)>>2)]; //@line 187 "src/read.cpp"
 var $4063=HEAP32[(($4)>>2)]; //@line 187 "src/read.cpp"
 var $4064=HEAP32[(($5)>>2)]; //@line 187 "src/read.cpp"
 var $4065=HEAP32[(($6)>>2)]; //@line 187 "src/read.cpp"
 var $$etemp$100$0=4;
 var $$etemp$100$1=0;

 var $4066=__Znwj(48); //@line 41 "src/read.cpp"
 var $4067=$4066; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4067,0,45,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=796;break; } else { label=824;break; } //@line 41 "src/read.cpp"
 case 796: 
 var $4069=$4066; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i628)>>2)]=$4069; //@line 71 "src/read.cpp"
 var $4070=__Znwj(12); //@line 42 "src/read.cpp"
 var $4071=(($4070+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4072=$4071; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4072)>>2)]=$4062; //@line 34 "inc/pcdecoder.inl"
 var $4073=(($4070+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4074=$4073; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4074)>>2)]=$rm_i628; //@line 34 "inc/pcdecoder.inl"
 var $4075=((($4063)+(1))|0); //@line 10 "inc/front.h"
 var $4076=((($4064)+(1))|0); //@line 10 "inc/front.h"
 var $4077=(Math_imul($4075,$4076)|0); //@line 10 "inc/front.h"
 var $4078=((($4063)+(2))|0); //@line 9 "inc/front.h"
 var $4079=((($4078)+($4077))|0); //@line 9 "inc/front.h"
 var $4080=((($4079)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i635=$4080;label=797;break; //@line 45 "inc/front.h"
 case 797: 
 var $storemerge_i_i_i635;
 var $4082=((($storemerge_i_i_i635)+(1))|0); //@line 45 "inc/front.h"
 var $4083=$storemerge_i_i_i635&$4082; //@line 45 "inc/front.h"
 var $4084=($4083|0)==0; //@line 45 "inc/front.h"
 if($4084){label=799;break;}else{label=798;break;} //@line 45 "inc/front.h"
 case 798: 
 var $4086=$storemerge_i_i_i635|$4082; //@line 45 "inc/front.h"
 var $storemerge_i_i_i635=$4086;label=797;break; //@line 45 "inc/front.h"
 case 799: 
 var $4087$0=_llvm_umul_with_overflow_i32($4082,4);
 var $4087$1=tempRet0;
 var $4088=$4087$1;
 var $4089=$4087$0;
 var $4090=($4088?-1:$4089); //@line 9 "inc/front.h"
 var $4091=(function() { try { __THREW__ = 0; return __Znwj($4090) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=803;break; } else { label=800;break; }
 case 800: 
 var $4093$0 = ___cxa_find_matching_catch(-1, -1); var $4093$1 = tempRet0;
 var $4094=$4093$1;
 var $4095=($4094|0)<0;
 if($4095){label=801;break;}else{label=802;break;}
 case 801: 
 var $4097=$4093$0;
 ___cxa_call_unexpected($4097);
 throw "Reached an unreachable!";
 case 802: 
 ___resumeException($4093$0)
 case 803: 
 var $4099=$4091; //@line 9 "inc/front.h"
 var $_01137=$4077;var $f_i630_sroa_55_0=0;label=804;break; //@line 22 "inc/front.h"
 case 804: 
 var $f_i630_sroa_55_0;
 var $_01137;
 var $4101=((($f_i630_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4102=$f_i630_sroa_55_0&$storemerge_i_i_i635; //@line 23 "inc/front.h"
 var $4103=(($4099+($4102<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4103)>>2)]=0; //@line 23 "inc/front.h"
 var $4104=((($_01137)-(1))|0); //@line 23 "inc/front.h"
 var $4105=($4104|0)==0; //@line 23 "inc/front.h"
 if($4105){label=805;break;}else{var $_01137=$4104;var $f_i630_sroa_55_0=$4101;label=804;break;} //@line 23 "inc/front.h"
 case 805: 
 var $4106=(($4070+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4107=$4106; //@line 50 "inc/pcdecoder.inl"
 var $4108=(($4070+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4109=$4108; //@line 50 "inc/pcdecoder.inl"
 var $_01138=$_01012;var $f_i630_sroa_55_1=$4101;var $z_i633_0=0;label=806;break; //@line 47 "src/read.cpp"
 case 806: 
 var $z_i633_0;
 var $f_i630_sroa_55_1;
 var $_01138;
 var $4111=($z_i633_0>>>0)<($4065>>>0); //@line 47 "src/read.cpp"
 if($4111){var $_01136=$4075;var $f_i630_sroa_55_2=$f_i630_sroa_55_1;label=807;break;}else{label=830;break;} //@line 47 "src/read.cpp"
 case 807: 
 var $f_i630_sroa_55_2;
 var $_01136;
 var $4113=((($f_i630_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4114=$f_i630_sroa_55_2&$storemerge_i_i_i635; //@line 23 "inc/front.h"
 var $4115=(($4099+($4114<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4115)>>2)]=0; //@line 23 "inc/front.h"
 var $4116=((($_01136)-(1))|0); //@line 23 "inc/front.h"
 var $4117=($4116|0)==0; //@line 23 "inc/front.h"
 if($4117){var $_11139=$_01138;var $f_i630_sroa_55_3=$4113;var $y_i632_0=0;label=808;break;}else{var $_01136=$4116;var $f_i630_sroa_55_2=$4113;label=807;break;} //@line 23 "inc/front.h"
 case 808: 
 var $y_i632_0;
 var $f_i630_sroa_55_3;
 var $_11139;
 var $4118=($y_i632_0>>>0)<($4064>>>0); //@line 48 "src/read.cpp"
 if($4118){var $_01132=1;var $f_i630_sroa_55_4=$f_i630_sroa_55_3;label=809;break;}else{label=829;break;} //@line 48 "src/read.cpp"
 case 809: 
 var $f_i630_sroa_55_4;
 var $_01132;
 var $4120=((($f_i630_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4121=$f_i630_sroa_55_4&$storemerge_i_i_i635; //@line 23 "inc/front.h"
 var $4122=(($4099+($4121<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4122)>>2)]=0; //@line 23 "inc/front.h"
 var $4123=((($_01132)-(1))|0); //@line 23 "inc/front.h"
 var $4124=($4123|0)==0; //@line 23 "inc/front.h"
 if($4124){var $_21140=$_11139;var $f_i630_sroa_55_5=$4120;var $x_i631_0=0;label=810;break;}else{var $_01132=$4123;var $f_i630_sroa_55_4=$4120;label=809;break;} //@line 23 "inc/front.h"
 case 810: 
 var $x_i631_0;
 var $f_i630_sroa_55_5;
 var $_21140;
 var $4125=($x_i631_0>>>0)<($4063>>>0); //@line 49 "src/read.cpp"
 if($4125){label=811;break;}else{label=828;break;} //@line 49 "src/read.cpp"
 case 811: 
 var $4127=((($f_i630_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4128=$4127&$storemerge_i_i_i635; //@line 16 "inc/front.h"
 var $4129=(($4099+($4128<<2))|0); //@line 16 "inc/front.h"
 var $4130=HEAPF32[(($4129)>>2)]; //@line 59 "src/read.cpp"
 var $4131=((($f_i630_sroa_55_5)-($4075))|0); //@line 16 "inc/front.h"
 var $4132=((($4131)-($4077))|0); //@line 16 "inc/front.h"
 var $4133=$4132&$storemerge_i_i_i635; //@line 16 "inc/front.h"
 var $4134=(($4099+($4133<<2))|0); //@line 16 "inc/front.h"
 var $4135=HEAPF32[(($4134)>>2)]; //@line 59 "src/read.cpp"
 var $4136=$4131&$storemerge_i_i_i635; //@line 16 "inc/front.h"
 var $4137=(($4099+($4136<<2))|0); //@line 16 "inc/front.h"
 var $4138=HEAPF32[(($4137)>>2)]; //@line 60 "src/read.cpp"
 var $4139=((($4127)-($4077))|0); //@line 16 "inc/front.h"
 var $4140=$4139&$storemerge_i_i_i635; //@line 16 "inc/front.h"
 var $4141=(($4099+($4140<<2))|0); //@line 16 "inc/front.h"
 var $4142=HEAPF32[(($4141)>>2)]; //@line 60 "src/read.cpp"
 var $4143=((($f_i630_sroa_55_5)-($4077))|0); //@line 16 "inc/front.h"
 var $4144=$4143&$storemerge_i_i_i635; //@line 16 "inc/front.h"
 var $4145=(($4099+($4144<<2))|0); //@line 16 "inc/front.h"
 var $4146=HEAPF32[(($4145)>>2)]; //@line 61 "src/read.cpp"
 var $4147=((($4127)-($4075))|0); //@line 16 "inc/front.h"
 var $4148=$4147&$storemerge_i_i_i635; //@line 16 "inc/front.h"
 var $4149=(($4099+($4148<<2))|0); //@line 16 "inc/front.h"
 var $4150=HEAPF32[(($4149)>>2)]; //@line 61 "src/read.cpp"
 var $4151=((($4147)-($4077))|0); //@line 16 "inc/front.h"
 var $4152=$4151&$storemerge_i_i_i635; //@line 16 "inc/front.h"
 var $4153=(($4099+($4152<<2))|0); //@line 16 "inc/front.h"
 var $4154=($4130)-($4135); //@line 59 "src/read.cpp"
 var $4155=($4154)+($4138); //@line 60 "src/read.cpp"
 var $4156=($4155)-($4142); //@line 60 "src/read.cpp"
 var $4157=($4156)+($4146); //@line 61 "src/read.cpp"
 var $4158=($4157)-($4150); //@line 61 "src/read.cpp"
 var $4159=HEAPF32[(($4153)>>2)]; //@line 62 "src/read.cpp"
 var $4160=($4158)+($4159); //@line 62 "src/read.cpp"
 var $4161=HEAP32[(($4107)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4162=HEAP32[(($4109)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4163=HEAP32[(($4162)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$101$0=4;
 var $$etemp$101$1=0;

 var $$etemp$102$0=4;
 var $$etemp$102$1=0;

 var $4164=$4163; //@line 25 "src/rcdecoder.cpp"
 var $4165=HEAP32[(($4164)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4166=(($4165+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4167=HEAP32[(($4166)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4168=(($4161+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4167]($4163,$4168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=812;break; } else { label=826;break; }
 case 812: 
 var $4169=(($4161+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4170=HEAP32[(($4169)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4171=(($4161+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4172=HEAP32[(($4171)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4173=((($4170)-($4172))|0); //@line 26 "src/rcdecoder.cpp"
 var $4174=HEAP32[(($4168)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4175=(((($4173>>>0))/(($4174>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i622)>>2)]=$4175; //@line 26 "src/rcdecoder.cpp"
 var $4176=$4163; //@line 27 "src/rcdecoder.cpp"
 var $4177=HEAP32[(($4176)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4178=(($4177+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4179=HEAP32[(($4178)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4179]($4163,$l_i_i_i622,$r_i_i_i623) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=813;break; } else { label=826;break; }
 case 813: 
 var $4181=HEAP32[(($4168)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4182=HEAP32[(($l_i_i_i622)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4183=(Math_imul($4181,$4182)|0); //@line 28 "src/rcdecoder.cpp"
 var $4184=HEAP32[(($4171)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4185=((($4184)+($4183))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4171)>>2)]=$4185; //@line 28 "src/rcdecoder.cpp"
 var $4186=HEAP32[(($r_i_i_i623)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4187=(Math_imul($4181,$4186)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4168)>>2)]=$4187; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=814;break; } else { label=826;break; }
 case 814: 
 var $$etemp$103$0=4;
 var $$etemp$103$1=0;

 var $$etemp$104$0=4;
 var $$etemp$104$1=0;

 var $4188=($4180>>>0)>22; //@line 51 "inc/pcdecoder.inl"
 if($4188){label=815;break;}else{label=817;break;} //@line 51 "inc/pcdecoder.inl"
 case 815: 
 var $4190=((($4180)-(23))|0); //@line 52 "inc/pcdecoder.inl"
 var $4191=HEAP32[(($4107)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4192=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4191,$4190) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=816;break; } else { label=826;break; }
 case 816: 
 var $4193=1<<$4190; //@line 53 "inc/pcdecoder.inl"
 var $4194=((($4193)+($4192))|0); //@line 53 "inc/pcdecoder.inl"
 var $4195=(HEAPF32[((tempDoublePtr)>>2)]=$4160,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4196=$4195^-1; //@line 38 "inc/pcmap.h"
 var $4197=$4196>>>10; //@line 39 "inc/pcmap.h"
 var $4198=$4196>>31; //@line 40 "inc/pcmap.h"
 var $4199=$4198>>>11; //@line 40 "inc/pcmap.h"
 var $4200=$4197^$4199; //@line 40 "inc/pcmap.h"
 var $4201=((($4200)+($4194))|0); //@line 55 "inc/pcdecoder.inl"
 var $4202=$4201>>>21; //@line 48 "inc/pcmap.h"
 var $4203=(((-$4202))|0); //@line 48 "inc/pcmap.h"
 var $4204=$4203>>>11; //@line 48 "inc/pcmap.h"
 var $4205=$4204^$4201; //@line 48 "inc/pcmap.h"
 var $4206=$4205<<10; //@line 50 "inc/pcmap.h"
 var $4207=$4206^-1024; //@line 50 "inc/pcmap.h"
 var $_01130_in=$4207;label=821;break; //@line 56 "inc/pcdecoder.inl"
 case 817: 
 var $4209=($4180>>>0)<22; //@line undefined "inc/pcdecoder.inl"
 if($4209){label=818;break;}else{label=820;break;} //@line undefined "inc/pcdecoder.inl"
 case 818: 
 var $4211=(((21)-($4180))|0); //@line 59 "inc/pcdecoder.inl"
 var $4212=HEAP32[(($4107)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4213=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4212,$4211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=819;break; } else { label=826;break; }
 case 819: 
 var $4214=1<<$4211; //@line 60 "inc/pcdecoder.inl"
 var $4215=((($4214)+($4213))|0); //@line 60 "inc/pcdecoder.inl"
 var $4216=(HEAPF32[((tempDoublePtr)>>2)]=$4160,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4217=$4216^-1; //@line 38 "inc/pcmap.h"
 var $4218=$4217>>>10; //@line 39 "inc/pcmap.h"
 var $4219=$4217>>31; //@line 40 "inc/pcmap.h"
 var $4220=$4219>>>11; //@line 40 "inc/pcmap.h"
 var $4221=$4218^$4220; //@line 40 "inc/pcmap.h"
 var $4222=((($4221)-($4215))|0); //@line 62 "inc/pcdecoder.inl"
 var $4223=$4222>>>21; //@line 48 "inc/pcmap.h"
 var $4224=(((-$4223))|0); //@line 48 "inc/pcmap.h"
 var $4225=$4224>>>11; //@line 48 "inc/pcmap.h"
 var $4226=$4225^$4222; //@line 48 "inc/pcmap.h"
 var $4227=$4226<<10; //@line 50 "inc/pcmap.h"
 var $4228=$4227^-1024; //@line 50 "inc/pcmap.h"
 var $_01130_in=$4228;label=821;break; //@line 63 "inc/pcdecoder.inl"
 case 820: 
 var $4230=(HEAPF32[((tempDoublePtr)>>2)]=$4160,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4231=$4230&-1024; //@line 60 "inc/pcmap.h"
 var $_01130_in=$4231;label=821;break; //@line 66 "inc/pcdecoder.inl"
 case 821: 
 var $_01130_in;
 var $_01130=(HEAP32[((tempDoublePtr)>>2)]=$_01130_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $4232=(($_21140+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21140)>>2)]=$_01130; //@line 65 "src/read.cpp"
 var $_01131=1;var $f_i630_sroa_55_6=$f_i630_sroa_55_5;label=822;break; //@line 22 "inc/front.h"
 case 822: 
 var $f_i630_sroa_55_6;
 var $_01131;
 var $4234=((($f_i630_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4235=$f_i630_sroa_55_6&$storemerge_i_i_i635; //@line 23 "inc/front.h"
 var $4236=(($4099+($4235<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4236)>>2)]=$_01130; //@line 23 "inc/front.h"
 var $4237=((($_01131)-(1))|0); //@line 23 "inc/front.h"
 var $4238=($4237|0)==0; //@line 23 "inc/front.h"
 if($4238){label=823;break;}else{var $_01131=$4237;var $f_i630_sroa_55_6=$4234;label=822;break;} //@line 23 "inc/front.h"
 case 823: 
 var $4239=((($x_i631_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21140=$4232;var $f_i630_sroa_55_5=$4234;var $x_i631_0=$4239;label=810;break; //@line 49 "src/read.cpp"
 case 824: 
 var $4241$0 = ___cxa_find_matching_catch(-1, -1); var $4241$1 = tempRet0;
 var $4242=$4241$0;
 var $4243=$4241$1;
 var $4244=($4066|0)==0;
 if($4244){var $_01141=$4242;var $_01142=$4243;label=836;break;}else{label=825;break;}
 case 825: 
 _free($4066);
 var $_01141=$4242;var $_01142=$4243;label=836;break;
 case 826: 
 var $4247$0 = ___cxa_find_matching_catch(-1, -1); var $4247$1 = tempRet0;
 var $4248=$4247$0;
 var $4249=$4247$1;
 var $4250=($4091|0)==0; //@line 11 "inc/front.h"
 if($4250){var $_01141=$4248;var $_01142=$4249;label=836;break;}else{label=827;break;} //@line 11 "inc/front.h"
 case 827: 
 _free($4091);
 var $_01141=$4248;var $_01142=$4249;label=836;break; //@line 11 "inc/front.h"
 case 828: 
 var $4252=((($y_i632_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11139=$_21140;var $f_i630_sroa_55_3=$f_i630_sroa_55_5;var $y_i632_0=$4252;label=808;break; //@line 48 "src/read.cpp"
 case 829: 
 var $4254=((($z_i633_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01138=$_11139;var $f_i630_sroa_55_1=$f_i630_sroa_55_3;var $z_i633_0=$4254;label=806;break; //@line 47 "src/read.cpp"
 case 830: 
 var $4256=($4070|0)==0; //@line 69 "src/read.cpp"
 if($4256){label=832;break;}else{label=831;break;} //@line 69 "src/read.cpp"
 case 831: 
 _free($4070);
 label=832;break; //@line 69 "src/read.cpp"
 case 832: 
 var $4258=HEAP32[(($rm_i628)>>2)]; //@line 70 "src/read.cpp"
 var $4259=($4258|0)==0; //@line 70 "src/read.cpp"
 if($4259){label=834;break;}else{label=833;break;} //@line 70 "src/read.cpp"
 case 833: 
 var $4261=$4258; //@line 70 "src/read.cpp"
 var $4262=HEAP32[(($4261)>>2)]; //@line 70 "src/read.cpp"
 var $4263=(($4262+4)|0); //@line 70 "src/read.cpp"
 var $4264=HEAP32[(($4263)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4264]($4258); //@line 70 "src/read.cpp"
 label=834;break; //@line 70 "src/read.cpp"
 case 834: 
 var $4266=($4091|0)==0; //@line 11 "inc/front.h"
 if($4266){label=1257;break;}else{label=835;break;} //@line 11 "inc/front.h"
 case 835: 
 _free($4091);
 label=1257;break; //@line 11 "inc/front.h"
 case 836: 
 var $_01142;
 var $_01141;
 var $4267$0=$_01141;
 var $4267$1=0;
 var $4268$0=$4267$0;
 var $4268$1=$_01142;
 ___resumeException($4268$0) //@line 71 "src/read.cpp"
 case 837: 
 var $4270=HEAP32[(($3)>>2)]; //@line 188 "src/read.cpp"
 var $4271=HEAP32[(($4)>>2)]; //@line 188 "src/read.cpp"
 var $4272=HEAP32[(($5)>>2)]; //@line 188 "src/read.cpp"
 var $4273=HEAP32[(($6)>>2)]; //@line 188 "src/read.cpp"
 var $$etemp$105$0=4;
 var $$etemp$105$1=0;

 var $4274=__Znwj(48); //@line 41 "src/read.cpp"
 var $4275=$4274; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4275,0,47,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=838;break; } else { label=866;break; } //@line 41 "src/read.cpp"
 case 838: 
 var $4277=$4274; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i664)>>2)]=$4277; //@line 71 "src/read.cpp"
 var $4278=__Znwj(12); //@line 42 "src/read.cpp"
 var $4279=(($4278+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4280=$4279; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4280)>>2)]=$4270; //@line 34 "inc/pcdecoder.inl"
 var $4281=(($4278+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4282=$4281; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4282)>>2)]=$rm_i664; //@line 34 "inc/pcdecoder.inl"
 var $4283=((($4271)+(1))|0); //@line 10 "inc/front.h"
 var $4284=((($4272)+(1))|0); //@line 10 "inc/front.h"
 var $4285=(Math_imul($4283,$4284)|0); //@line 10 "inc/front.h"
 var $4286=((($4271)+(2))|0); //@line 9 "inc/front.h"
 var $4287=((($4286)+($4285))|0); //@line 9 "inc/front.h"
 var $4288=((($4287)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i671=$4288;label=839;break; //@line 45 "inc/front.h"
 case 839: 
 var $storemerge_i_i_i671;
 var $4290=((($storemerge_i_i_i671)+(1))|0); //@line 45 "inc/front.h"
 var $4291=$storemerge_i_i_i671&$4290; //@line 45 "inc/front.h"
 var $4292=($4291|0)==0; //@line 45 "inc/front.h"
 if($4292){label=841;break;}else{label=840;break;} //@line 45 "inc/front.h"
 case 840: 
 var $4294=$storemerge_i_i_i671|$4290; //@line 45 "inc/front.h"
 var $storemerge_i_i_i671=$4294;label=839;break; //@line 45 "inc/front.h"
 case 841: 
 var $4295$0=_llvm_umul_with_overflow_i32($4290,4);
 var $4295$1=tempRet0;
 var $4296=$4295$1;
 var $4297=$4295$0;
 var $4298=($4296?-1:$4297); //@line 9 "inc/front.h"
 var $4299=(function() { try { __THREW__ = 0; return __Znwj($4298) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=845;break; } else { label=842;break; }
 case 842: 
 var $4301$0 = ___cxa_find_matching_catch(-1, -1); var $4301$1 = tempRet0;
 var $4302=$4301$1;
 var $4303=($4302|0)<0;
 if($4303){label=843;break;}else{label=844;break;}
 case 843: 
 var $4305=$4301$0;
 ___cxa_call_unexpected($4305);
 throw "Reached an unreachable!";
 case 844: 
 ___resumeException($4301$0)
 case 845: 
 var $4307=$4299; //@line 9 "inc/front.h"
 var $_01122=$4285;var $f_i666_sroa_55_0=0;label=846;break; //@line 22 "inc/front.h"
 case 846: 
 var $f_i666_sroa_55_0;
 var $_01122;
 var $4309=((($f_i666_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4310=$f_i666_sroa_55_0&$storemerge_i_i_i671; //@line 23 "inc/front.h"
 var $4311=(($4307+($4310<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4311)>>2)]=0; //@line 23 "inc/front.h"
 var $4312=((($_01122)-(1))|0); //@line 23 "inc/front.h"
 var $4313=($4312|0)==0; //@line 23 "inc/front.h"
 if($4313){label=847;break;}else{var $_01122=$4312;var $f_i666_sroa_55_0=$4309;label=846;break;} //@line 23 "inc/front.h"
 case 847: 
 var $4314=(($4278+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4315=$4314; //@line 50 "inc/pcdecoder.inl"
 var $4316=(($4278+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4317=$4316; //@line 50 "inc/pcdecoder.inl"
 var $_01123=$_01012;var $f_i666_sroa_55_1=$4309;var $z_i669_0=0;label=848;break; //@line 47 "src/read.cpp"
 case 848: 
 var $z_i669_0;
 var $f_i666_sroa_55_1;
 var $_01123;
 var $4319=($z_i669_0>>>0)<($4273>>>0); //@line 47 "src/read.cpp"
 if($4319){var $_01121=$4283;var $f_i666_sroa_55_2=$f_i666_sroa_55_1;label=849;break;}else{label=872;break;} //@line 47 "src/read.cpp"
 case 849: 
 var $f_i666_sroa_55_2;
 var $_01121;
 var $4321=((($f_i666_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4322=$f_i666_sroa_55_2&$storemerge_i_i_i671; //@line 23 "inc/front.h"
 var $4323=(($4307+($4322<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4323)>>2)]=0; //@line 23 "inc/front.h"
 var $4324=((($_01121)-(1))|0); //@line 23 "inc/front.h"
 var $4325=($4324|0)==0; //@line 23 "inc/front.h"
 if($4325){var $_11124=$_01123;var $f_i666_sroa_55_3=$4321;var $y_i668_0=0;label=850;break;}else{var $_01121=$4324;var $f_i666_sroa_55_2=$4321;label=849;break;} //@line 23 "inc/front.h"
 case 850: 
 var $y_i668_0;
 var $f_i666_sroa_55_3;
 var $_11124;
 var $4326=($y_i668_0>>>0)<($4272>>>0); //@line 48 "src/read.cpp"
 if($4326){var $_01120=1;var $f_i666_sroa_55_4=$f_i666_sroa_55_3;label=851;break;}else{label=871;break;} //@line 48 "src/read.cpp"
 case 851: 
 var $f_i666_sroa_55_4;
 var $_01120;
 var $4328=((($f_i666_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4329=$f_i666_sroa_55_4&$storemerge_i_i_i671; //@line 23 "inc/front.h"
 var $4330=(($4307+($4329<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4330)>>2)]=0; //@line 23 "inc/front.h"
 var $4331=((($_01120)-(1))|0); //@line 23 "inc/front.h"
 var $4332=($4331|0)==0; //@line 23 "inc/front.h"
 if($4332){var $_21125=$_11124;var $f_i666_sroa_55_5=$4328;var $x_i667_0=0;label=852;break;}else{var $_01120=$4331;var $f_i666_sroa_55_4=$4328;label=851;break;} //@line 23 "inc/front.h"
 case 852: 
 var $x_i667_0;
 var $f_i666_sroa_55_5;
 var $_21125;
 var $4333=($x_i667_0>>>0)<($4271>>>0); //@line 49 "src/read.cpp"
 if($4333){label=853;break;}else{label=870;break;} //@line 49 "src/read.cpp"
 case 853: 
 var $4335=((($f_i666_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4336=$4335&$storemerge_i_i_i671; //@line 16 "inc/front.h"
 var $4337=(($4307+($4336<<2))|0); //@line 16 "inc/front.h"
 var $4338=HEAPF32[(($4337)>>2)]; //@line 59 "src/read.cpp"
 var $4339=((($f_i666_sroa_55_5)-($4283))|0); //@line 16 "inc/front.h"
 var $4340=((($4339)-($4285))|0); //@line 16 "inc/front.h"
 var $4341=$4340&$storemerge_i_i_i671; //@line 16 "inc/front.h"
 var $4342=(($4307+($4341<<2))|0); //@line 16 "inc/front.h"
 var $4343=HEAPF32[(($4342)>>2)]; //@line 59 "src/read.cpp"
 var $4344=$4339&$storemerge_i_i_i671; //@line 16 "inc/front.h"
 var $4345=(($4307+($4344<<2))|0); //@line 16 "inc/front.h"
 var $4346=HEAPF32[(($4345)>>2)]; //@line 60 "src/read.cpp"
 var $4347=((($4335)-($4285))|0); //@line 16 "inc/front.h"
 var $4348=$4347&$storemerge_i_i_i671; //@line 16 "inc/front.h"
 var $4349=(($4307+($4348<<2))|0); //@line 16 "inc/front.h"
 var $4350=HEAPF32[(($4349)>>2)]; //@line 60 "src/read.cpp"
 var $4351=((($f_i666_sroa_55_5)-($4285))|0); //@line 16 "inc/front.h"
 var $4352=$4351&$storemerge_i_i_i671; //@line 16 "inc/front.h"
 var $4353=(($4307+($4352<<2))|0); //@line 16 "inc/front.h"
 var $4354=HEAPF32[(($4353)>>2)]; //@line 61 "src/read.cpp"
 var $4355=((($4335)-($4283))|0); //@line 16 "inc/front.h"
 var $4356=$4355&$storemerge_i_i_i671; //@line 16 "inc/front.h"
 var $4357=(($4307+($4356<<2))|0); //@line 16 "inc/front.h"
 var $4358=HEAPF32[(($4357)>>2)]; //@line 61 "src/read.cpp"
 var $4359=((($4355)-($4285))|0); //@line 16 "inc/front.h"
 var $4360=$4359&$storemerge_i_i_i671; //@line 16 "inc/front.h"
 var $4361=(($4307+($4360<<2))|0); //@line 16 "inc/front.h"
 var $4362=($4338)-($4343); //@line 59 "src/read.cpp"
 var $4363=($4362)+($4346); //@line 60 "src/read.cpp"
 var $4364=($4363)-($4350); //@line 60 "src/read.cpp"
 var $4365=($4364)+($4354); //@line 61 "src/read.cpp"
 var $4366=($4365)-($4358); //@line 61 "src/read.cpp"
 var $4367=HEAPF32[(($4361)>>2)]; //@line 62 "src/read.cpp"
 var $4368=($4366)+($4367); //@line 62 "src/read.cpp"
 var $4369=HEAP32[(($4315)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4370=HEAP32[(($4317)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4371=HEAP32[(($4370)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$106$0=4;
 var $$etemp$106$1=0;

 var $$etemp$107$0=4;
 var $$etemp$107$1=0;

 var $4372=$4371; //@line 25 "src/rcdecoder.cpp"
 var $4373=HEAP32[(($4372)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4374=(($4373+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4375=HEAP32[(($4374)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4376=(($4369+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4375]($4371,$4376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=854;break; } else { label=868;break; }
 case 854: 
 var $4377=(($4369+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4378=HEAP32[(($4377)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4379=(($4369+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4380=HEAP32[(($4379)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4381=((($4378)-($4380))|0); //@line 26 "src/rcdecoder.cpp"
 var $4382=HEAP32[(($4376)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4383=(((($4381>>>0))/(($4382>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i658)>>2)]=$4383; //@line 26 "src/rcdecoder.cpp"
 var $4384=$4371; //@line 27 "src/rcdecoder.cpp"
 var $4385=HEAP32[(($4384)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4386=(($4385+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4387=HEAP32[(($4386)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4388=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4387]($4371,$l_i_i_i658,$r_i_i_i659) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=855;break; } else { label=868;break; }
 case 855: 
 var $4389=HEAP32[(($4376)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4390=HEAP32[(($l_i_i_i658)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4391=(Math_imul($4389,$4390)|0); //@line 28 "src/rcdecoder.cpp"
 var $4392=HEAP32[(($4379)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4393=((($4392)+($4391))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4379)>>2)]=$4393; //@line 28 "src/rcdecoder.cpp"
 var $4394=HEAP32[(($r_i_i_i659)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4395=(Math_imul($4389,$4394)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4376)>>2)]=$4395; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4369) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=856;break; } else { label=868;break; }
 case 856: 
 var $$etemp$108$0=4;
 var $$etemp$108$1=0;

 var $$etemp$109$0=4;
 var $$etemp$109$1=0;

 var $4396=($4388>>>0)>23; //@line 51 "inc/pcdecoder.inl"
 if($4396){label=857;break;}else{label=859;break;} //@line 51 "inc/pcdecoder.inl"
 case 857: 
 var $4398=((($4388)-(24))|0); //@line 52 "inc/pcdecoder.inl"
 var $4399=HEAP32[(($4315)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4400=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4399,$4398) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=858;break; } else { label=868;break; }
 case 858: 
 var $4401=1<<$4398; //@line 53 "inc/pcdecoder.inl"
 var $4402=((($4401)+($4400))|0); //@line 53 "inc/pcdecoder.inl"
 var $4403=(HEAPF32[((tempDoublePtr)>>2)]=$4368,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4404=$4403^-1; //@line 38 "inc/pcmap.h"
 var $4405=$4404>>>9; //@line 39 "inc/pcmap.h"
 var $4406=$4404>>31; //@line 40 "inc/pcmap.h"
 var $4407=$4406>>>10; //@line 40 "inc/pcmap.h"
 var $4408=$4405^$4407; //@line 40 "inc/pcmap.h"
 var $4409=((($4408)+($4402))|0); //@line 55 "inc/pcdecoder.inl"
 var $4410=$4409>>>22; //@line 48 "inc/pcmap.h"
 var $4411=(((-$4410))|0); //@line 48 "inc/pcmap.h"
 var $4412=$4411>>>10; //@line 48 "inc/pcmap.h"
 var $4413=$4412^$4409; //@line 48 "inc/pcmap.h"
 var $4414=$4413<<9; //@line 50 "inc/pcmap.h"
 var $4415=$4414^-512; //@line 50 "inc/pcmap.h"
 var $_01118_in=$4415;label=863;break; //@line 56 "inc/pcdecoder.inl"
 case 859: 
 var $4417=($4388>>>0)<23; //@line undefined "inc/pcdecoder.inl"
 if($4417){label=860;break;}else{label=862;break;} //@line undefined "inc/pcdecoder.inl"
 case 860: 
 var $4419=(((22)-($4388))|0); //@line 59 "inc/pcdecoder.inl"
 var $4420=HEAP32[(($4315)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4421=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4420,$4419) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=861;break; } else { label=868;break; }
 case 861: 
 var $4422=1<<$4419; //@line 60 "inc/pcdecoder.inl"
 var $4423=((($4422)+($4421))|0); //@line 60 "inc/pcdecoder.inl"
 var $4424=(HEAPF32[((tempDoublePtr)>>2)]=$4368,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4425=$4424^-1; //@line 38 "inc/pcmap.h"
 var $4426=$4425>>>9; //@line 39 "inc/pcmap.h"
 var $4427=$4425>>31; //@line 40 "inc/pcmap.h"
 var $4428=$4427>>>10; //@line 40 "inc/pcmap.h"
 var $4429=$4426^$4428; //@line 40 "inc/pcmap.h"
 var $4430=((($4429)-($4423))|0); //@line 62 "inc/pcdecoder.inl"
 var $4431=$4430>>>22; //@line 48 "inc/pcmap.h"
 var $4432=(((-$4431))|0); //@line 48 "inc/pcmap.h"
 var $4433=$4432>>>10; //@line 48 "inc/pcmap.h"
 var $4434=$4433^$4430; //@line 48 "inc/pcmap.h"
 var $4435=$4434<<9; //@line 50 "inc/pcmap.h"
 var $4436=$4435^-512; //@line 50 "inc/pcmap.h"
 var $_01118_in=$4436;label=863;break; //@line 63 "inc/pcdecoder.inl"
 case 862: 
 var $4438=(HEAPF32[((tempDoublePtr)>>2)]=$4368,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4439=$4438&-512; //@line 60 "inc/pcmap.h"
 var $_01118_in=$4439;label=863;break; //@line 66 "inc/pcdecoder.inl"
 case 863: 
 var $_01118_in;
 var $_01118=(HEAP32[((tempDoublePtr)>>2)]=$_01118_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $4440=(($_21125+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21125)>>2)]=$_01118; //@line 65 "src/read.cpp"
 var $_01119=1;var $f_i666_sroa_55_6=$f_i666_sroa_55_5;label=864;break; //@line 22 "inc/front.h"
 case 864: 
 var $f_i666_sroa_55_6;
 var $_01119;
 var $4442=((($f_i666_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4443=$f_i666_sroa_55_6&$storemerge_i_i_i671; //@line 23 "inc/front.h"
 var $4444=(($4307+($4443<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4444)>>2)]=$_01118; //@line 23 "inc/front.h"
 var $4445=((($_01119)-(1))|0); //@line 23 "inc/front.h"
 var $4446=($4445|0)==0; //@line 23 "inc/front.h"
 if($4446){label=865;break;}else{var $_01119=$4445;var $f_i666_sroa_55_6=$4442;label=864;break;} //@line 23 "inc/front.h"
 case 865: 
 var $4447=((($x_i667_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21125=$4440;var $f_i666_sroa_55_5=$4442;var $x_i667_0=$4447;label=852;break; //@line 49 "src/read.cpp"
 case 866: 
 var $4449$0 = ___cxa_find_matching_catch(-1, -1); var $4449$1 = tempRet0;
 var $4450=$4449$0;
 var $4451=$4449$1;
 var $4452=($4274|0)==0;
 if($4452){var $_01126=$4450;var $_01127=$4451;label=878;break;}else{label=867;break;}
 case 867: 
 _free($4274);
 var $_01126=$4450;var $_01127=$4451;label=878;break;
 case 868: 
 var $4455$0 = ___cxa_find_matching_catch(-1, -1); var $4455$1 = tempRet0;
 var $4456=$4455$0;
 var $4457=$4455$1;
 var $4458=($4299|0)==0; //@line 11 "inc/front.h"
 if($4458){var $_01126=$4456;var $_01127=$4457;label=878;break;}else{label=869;break;} //@line 11 "inc/front.h"
 case 869: 
 _free($4299);
 var $_01126=$4456;var $_01127=$4457;label=878;break; //@line 11 "inc/front.h"
 case 870: 
 var $4460=((($y_i668_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11124=$_21125;var $f_i666_sroa_55_3=$f_i666_sroa_55_5;var $y_i668_0=$4460;label=850;break; //@line 48 "src/read.cpp"
 case 871: 
 var $4462=((($z_i669_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01123=$_11124;var $f_i666_sroa_55_1=$f_i666_sroa_55_3;var $z_i669_0=$4462;label=848;break; //@line 47 "src/read.cpp"
 case 872: 
 var $4464=($4278|0)==0; //@line 69 "src/read.cpp"
 if($4464){label=874;break;}else{label=873;break;} //@line 69 "src/read.cpp"
 case 873: 
 _free($4278);
 label=874;break; //@line 69 "src/read.cpp"
 case 874: 
 var $4466=HEAP32[(($rm_i664)>>2)]; //@line 70 "src/read.cpp"
 var $4467=($4466|0)==0; //@line 70 "src/read.cpp"
 if($4467){label=876;break;}else{label=875;break;} //@line 70 "src/read.cpp"
 case 875: 
 var $4469=$4466; //@line 70 "src/read.cpp"
 var $4470=HEAP32[(($4469)>>2)]; //@line 70 "src/read.cpp"
 var $4471=(($4470+4)|0); //@line 70 "src/read.cpp"
 var $4472=HEAP32[(($4471)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4472]($4466); //@line 70 "src/read.cpp"
 label=876;break; //@line 70 "src/read.cpp"
 case 876: 
 var $4474=($4299|0)==0; //@line 11 "inc/front.h"
 if($4474){label=1257;break;}else{label=877;break;} //@line 11 "inc/front.h"
 case 877: 
 _free($4299);
 label=1257;break; //@line 11 "inc/front.h"
 case 878: 
 var $_01127;
 var $_01126;
 var $4475$0=$_01126;
 var $4475$1=0;
 var $4476$0=$4475$0;
 var $4476$1=$_01127;
 ___resumeException($4476$0) //@line 71 "src/read.cpp"
 case 879: 
 var $4478=HEAP32[(($3)>>2)]; //@line 189 "src/read.cpp"
 var $4479=HEAP32[(($4)>>2)]; //@line 189 "src/read.cpp"
 var $4480=HEAP32[(($5)>>2)]; //@line 189 "src/read.cpp"
 var $4481=HEAP32[(($6)>>2)]; //@line 189 "src/read.cpp"
 var $$etemp$110$0=4;
 var $$etemp$110$1=0;

 var $4482=__Znwj(48); //@line 41 "src/read.cpp"
 var $4483=$4482; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4483,0,49,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=880;break; } else { label=908;break; } //@line 41 "src/read.cpp"
 case 880: 
 var $4485=$4482; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i700)>>2)]=$4485; //@line 71 "src/read.cpp"
 var $4486=__Znwj(12); //@line 42 "src/read.cpp"
 var $4487=(($4486+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4488=$4487; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4488)>>2)]=$4478; //@line 34 "inc/pcdecoder.inl"
 var $4489=(($4486+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4490=$4489; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4490)>>2)]=$rm_i700; //@line 34 "inc/pcdecoder.inl"
 var $4491=((($4479)+(1))|0); //@line 10 "inc/front.h"
 var $4492=((($4480)+(1))|0); //@line 10 "inc/front.h"
 var $4493=(Math_imul($4491,$4492)|0); //@line 10 "inc/front.h"
 var $4494=((($4479)+(2))|0); //@line 9 "inc/front.h"
 var $4495=((($4494)+($4493))|0); //@line 9 "inc/front.h"
 var $4496=((($4495)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i707=$4496;label=881;break; //@line 45 "inc/front.h"
 case 881: 
 var $storemerge_i_i_i707;
 var $4498=((($storemerge_i_i_i707)+(1))|0); //@line 45 "inc/front.h"
 var $4499=$storemerge_i_i_i707&$4498; //@line 45 "inc/front.h"
 var $4500=($4499|0)==0; //@line 45 "inc/front.h"
 if($4500){label=883;break;}else{label=882;break;} //@line 45 "inc/front.h"
 case 882: 
 var $4502=$storemerge_i_i_i707|$4498; //@line 45 "inc/front.h"
 var $storemerge_i_i_i707=$4502;label=881;break; //@line 45 "inc/front.h"
 case 883: 
 var $4503$0=_llvm_umul_with_overflow_i32($4498,4);
 var $4503$1=tempRet0;
 var $4504=$4503$1;
 var $4505=$4503$0;
 var $4506=($4504?-1:$4505); //@line 9 "inc/front.h"
 var $4507=(function() { try { __THREW__ = 0; return __Znwj($4506) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=887;break; } else { label=884;break; }
 case 884: 
 var $4509$0 = ___cxa_find_matching_catch(-1, -1); var $4509$1 = tempRet0;
 var $4510=$4509$1;
 var $4511=($4510|0)<0;
 if($4511){label=885;break;}else{label=886;break;}
 case 885: 
 var $4513=$4509$0;
 ___cxa_call_unexpected($4513);
 throw "Reached an unreachable!";
 case 886: 
 ___resumeException($4509$0)
 case 887: 
 var $4515=$4507; //@line 9 "inc/front.h"
 var $_01112=$4493;var $f_i702_sroa_55_0=0;label=888;break; //@line 22 "inc/front.h"
 case 888: 
 var $f_i702_sroa_55_0;
 var $_01112;
 var $4517=((($f_i702_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4518=$f_i702_sroa_55_0&$storemerge_i_i_i707; //@line 23 "inc/front.h"
 var $4519=(($4515+($4518<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4519)>>2)]=0; //@line 23 "inc/front.h"
 var $4520=((($_01112)-(1))|0); //@line 23 "inc/front.h"
 var $4521=($4520|0)==0; //@line 23 "inc/front.h"
 if($4521){label=889;break;}else{var $_01112=$4520;var $f_i702_sroa_55_0=$4517;label=888;break;} //@line 23 "inc/front.h"
 case 889: 
 var $4522=(($4486+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4523=$4522; //@line 50 "inc/pcdecoder.inl"
 var $4524=(($4486+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4525=$4524; //@line 50 "inc/pcdecoder.inl"
 var $_01113=$_01012;var $f_i702_sroa_55_1=$4517;var $z_i705_0=0;label=890;break; //@line 47 "src/read.cpp"
 case 890: 
 var $z_i705_0;
 var $f_i702_sroa_55_1;
 var $_01113;
 var $4527=($z_i705_0>>>0)<($4481>>>0); //@line 47 "src/read.cpp"
 if($4527){var $_01111=$4491;var $f_i702_sroa_55_2=$f_i702_sroa_55_1;label=891;break;}else{label=914;break;} //@line 47 "src/read.cpp"
 case 891: 
 var $f_i702_sroa_55_2;
 var $_01111;
 var $4529=((($f_i702_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4530=$f_i702_sroa_55_2&$storemerge_i_i_i707; //@line 23 "inc/front.h"
 var $4531=(($4515+($4530<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4531)>>2)]=0; //@line 23 "inc/front.h"
 var $4532=((($_01111)-(1))|0); //@line 23 "inc/front.h"
 var $4533=($4532|0)==0; //@line 23 "inc/front.h"
 if($4533){var $_11114=$_01113;var $f_i702_sroa_55_3=$4529;var $y_i704_0=0;label=892;break;}else{var $_01111=$4532;var $f_i702_sroa_55_2=$4529;label=891;break;} //@line 23 "inc/front.h"
 case 892: 
 var $y_i704_0;
 var $f_i702_sroa_55_3;
 var $_11114;
 var $4534=($y_i704_0>>>0)<($4480>>>0); //@line 48 "src/read.cpp"
 if($4534){var $_01110=1;var $f_i702_sroa_55_4=$f_i702_sroa_55_3;label=893;break;}else{label=913;break;} //@line 48 "src/read.cpp"
 case 893: 
 var $f_i702_sroa_55_4;
 var $_01110;
 var $4536=((($f_i702_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4537=$f_i702_sroa_55_4&$storemerge_i_i_i707; //@line 23 "inc/front.h"
 var $4538=(($4515+($4537<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4538)>>2)]=0; //@line 23 "inc/front.h"
 var $4539=((($_01110)-(1))|0); //@line 23 "inc/front.h"
 var $4540=($4539|0)==0; //@line 23 "inc/front.h"
 if($4540){var $_21115=$_11114;var $f_i702_sroa_55_5=$4536;var $x_i703_0=0;label=894;break;}else{var $_01110=$4539;var $f_i702_sroa_55_4=$4536;label=893;break;} //@line 23 "inc/front.h"
 case 894: 
 var $x_i703_0;
 var $f_i702_sroa_55_5;
 var $_21115;
 var $4541=($x_i703_0>>>0)<($4479>>>0); //@line 49 "src/read.cpp"
 if($4541){label=895;break;}else{label=912;break;} //@line 49 "src/read.cpp"
 case 895: 
 var $4543=((($f_i702_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4544=$4543&$storemerge_i_i_i707; //@line 16 "inc/front.h"
 var $4545=(($4515+($4544<<2))|0); //@line 16 "inc/front.h"
 var $4546=HEAPF32[(($4545)>>2)]; //@line 59 "src/read.cpp"
 var $4547=((($f_i702_sroa_55_5)-($4491))|0); //@line 16 "inc/front.h"
 var $4548=((($4547)-($4493))|0); //@line 16 "inc/front.h"
 var $4549=$4548&$storemerge_i_i_i707; //@line 16 "inc/front.h"
 var $4550=(($4515+($4549<<2))|0); //@line 16 "inc/front.h"
 var $4551=HEAPF32[(($4550)>>2)]; //@line 59 "src/read.cpp"
 var $4552=$4547&$storemerge_i_i_i707; //@line 16 "inc/front.h"
 var $4553=(($4515+($4552<<2))|0); //@line 16 "inc/front.h"
 var $4554=HEAPF32[(($4553)>>2)]; //@line 60 "src/read.cpp"
 var $4555=((($4543)-($4493))|0); //@line 16 "inc/front.h"
 var $4556=$4555&$storemerge_i_i_i707; //@line 16 "inc/front.h"
 var $4557=(($4515+($4556<<2))|0); //@line 16 "inc/front.h"
 var $4558=HEAPF32[(($4557)>>2)]; //@line 60 "src/read.cpp"
 var $4559=((($f_i702_sroa_55_5)-($4493))|0); //@line 16 "inc/front.h"
 var $4560=$4559&$storemerge_i_i_i707; //@line 16 "inc/front.h"
 var $4561=(($4515+($4560<<2))|0); //@line 16 "inc/front.h"
 var $4562=HEAPF32[(($4561)>>2)]; //@line 61 "src/read.cpp"
 var $4563=((($4543)-($4491))|0); //@line 16 "inc/front.h"
 var $4564=$4563&$storemerge_i_i_i707; //@line 16 "inc/front.h"
 var $4565=(($4515+($4564<<2))|0); //@line 16 "inc/front.h"
 var $4566=HEAPF32[(($4565)>>2)]; //@line 61 "src/read.cpp"
 var $4567=((($4563)-($4493))|0); //@line 16 "inc/front.h"
 var $4568=$4567&$storemerge_i_i_i707; //@line 16 "inc/front.h"
 var $4569=(($4515+($4568<<2))|0); //@line 16 "inc/front.h"
 var $4570=($4546)-($4551); //@line 59 "src/read.cpp"
 var $4571=($4570)+($4554); //@line 60 "src/read.cpp"
 var $4572=($4571)-($4558); //@line 60 "src/read.cpp"
 var $4573=($4572)+($4562); //@line 61 "src/read.cpp"
 var $4574=($4573)-($4566); //@line 61 "src/read.cpp"
 var $4575=HEAPF32[(($4569)>>2)]; //@line 62 "src/read.cpp"
 var $4576=($4574)+($4575); //@line 62 "src/read.cpp"
 var $4577=HEAP32[(($4523)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4578=HEAP32[(($4525)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4579=HEAP32[(($4578)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$111$0=4;
 var $$etemp$111$1=0;

 var $$etemp$112$0=4;
 var $$etemp$112$1=0;

 var $4580=$4579; //@line 25 "src/rcdecoder.cpp"
 var $4581=HEAP32[(($4580)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4582=(($4581+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4583=HEAP32[(($4582)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4584=(($4577+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4583]($4579,$4584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=896;break; } else { label=910;break; }
 case 896: 
 var $4585=(($4577+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4586=HEAP32[(($4585)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4587=(($4577+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4588=HEAP32[(($4587)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4589=((($4586)-($4588))|0); //@line 26 "src/rcdecoder.cpp"
 var $4590=HEAP32[(($4584)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4591=(((($4589>>>0))/(($4590>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i694)>>2)]=$4591; //@line 26 "src/rcdecoder.cpp"
 var $4592=$4579; //@line 27 "src/rcdecoder.cpp"
 var $4593=HEAP32[(($4592)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4594=(($4593+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4595=HEAP32[(($4594)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4596=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4595]($4579,$l_i_i_i694,$r_i_i_i695) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=897;break; } else { label=910;break; }
 case 897: 
 var $4597=HEAP32[(($4584)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4598=HEAP32[(($l_i_i_i694)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4599=(Math_imul($4597,$4598)|0); //@line 28 "src/rcdecoder.cpp"
 var $4600=HEAP32[(($4587)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4601=((($4600)+($4599))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4587)>>2)]=$4601; //@line 28 "src/rcdecoder.cpp"
 var $4602=HEAP32[(($r_i_i_i695)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4603=(Math_imul($4597,$4602)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4584)>>2)]=$4603; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4577) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=898;break; } else { label=910;break; }
 case 898: 
 var $$etemp$113$0=4;
 var $$etemp$113$1=0;

 var $$etemp$114$0=4;
 var $$etemp$114$1=0;

 var $4604=($4596>>>0)>24; //@line 51 "inc/pcdecoder.inl"
 if($4604){label=899;break;}else{label=901;break;} //@line 51 "inc/pcdecoder.inl"
 case 899: 
 var $4606=((($4596)-(25))|0); //@line 52 "inc/pcdecoder.inl"
 var $4607=HEAP32[(($4523)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4608=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4607,$4606) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=900;break; } else { label=910;break; }
 case 900: 
 var $4609=1<<$4606; //@line 53 "inc/pcdecoder.inl"
 var $4610=((($4609)+($4608))|0); //@line 53 "inc/pcdecoder.inl"
 var $4611=(HEAPF32[((tempDoublePtr)>>2)]=$4576,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4612=$4611^-1; //@line 38 "inc/pcmap.h"
 var $4613=$4612>>>8; //@line 39 "inc/pcmap.h"
 var $4614=$4612>>31; //@line 40 "inc/pcmap.h"
 var $4615=$4614>>>9; //@line 40 "inc/pcmap.h"
 var $4616=$4613^$4615; //@line 40 "inc/pcmap.h"
 var $4617=((($4616)+($4610))|0); //@line 55 "inc/pcdecoder.inl"
 var $4618=$4617>>>23; //@line 48 "inc/pcmap.h"
 var $4619=(((-$4618))|0); //@line 48 "inc/pcmap.h"
 var $4620=$4619>>>9; //@line 48 "inc/pcmap.h"
 var $4621=$4620^$4617; //@line 48 "inc/pcmap.h"
 var $4622=$4621<<8; //@line 50 "inc/pcmap.h"
 var $4623=$4622^-256; //@line 50 "inc/pcmap.h"
 var $_01107_in=$4623;label=905;break; //@line 56 "inc/pcdecoder.inl"
 case 901: 
 var $4625=($4596>>>0)<24; //@line undefined "inc/pcdecoder.inl"
 if($4625){label=902;break;}else{label=904;break;} //@line undefined "inc/pcdecoder.inl"
 case 902: 
 var $4627=(((23)-($4596))|0); //@line 59 "inc/pcdecoder.inl"
 var $4628=HEAP32[(($4523)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4629=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4628,$4627) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=903;break; } else { label=910;break; }
 case 903: 
 var $4630=1<<$4627; //@line 60 "inc/pcdecoder.inl"
 var $4631=((($4630)+($4629))|0); //@line 60 "inc/pcdecoder.inl"
 var $4632=(HEAPF32[((tempDoublePtr)>>2)]=$4576,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4633=$4632^-1; //@line 38 "inc/pcmap.h"
 var $4634=$4633>>>8; //@line 39 "inc/pcmap.h"
 var $4635=$4633>>31; //@line 40 "inc/pcmap.h"
 var $4636=$4635>>>9; //@line 40 "inc/pcmap.h"
 var $4637=$4634^$4636; //@line 40 "inc/pcmap.h"
 var $4638=((($4637)-($4631))|0); //@line 62 "inc/pcdecoder.inl"
 var $4639=$4638>>>23; //@line 48 "inc/pcmap.h"
 var $4640=(((-$4639))|0); //@line 48 "inc/pcmap.h"
 var $4641=$4640>>>9; //@line 48 "inc/pcmap.h"
 var $4642=$4641^$4638; //@line 48 "inc/pcmap.h"
 var $4643=$4642<<8; //@line 50 "inc/pcmap.h"
 var $4644=$4643^-256; //@line 50 "inc/pcmap.h"
 var $_01107_in=$4644;label=905;break; //@line 63 "inc/pcdecoder.inl"
 case 904: 
 var $4646=(HEAPF32[((tempDoublePtr)>>2)]=$4576,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4647=$4646&-256; //@line 60 "inc/pcmap.h"
 var $_01107_in=$4647;label=905;break; //@line 66 "inc/pcdecoder.inl"
 case 905: 
 var $_01107_in;
 var $_01107=(HEAP32[((tempDoublePtr)>>2)]=$_01107_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $4648=(($_21115+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21115)>>2)]=$_01107; //@line 65 "src/read.cpp"
 var $_01109=1;var $f_i702_sroa_55_6=$f_i702_sroa_55_5;label=906;break; //@line 22 "inc/front.h"
 case 906: 
 var $f_i702_sroa_55_6;
 var $_01109;
 var $4650=((($f_i702_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4651=$f_i702_sroa_55_6&$storemerge_i_i_i707; //@line 23 "inc/front.h"
 var $4652=(($4515+($4651<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4652)>>2)]=$_01107; //@line 23 "inc/front.h"
 var $4653=((($_01109)-(1))|0); //@line 23 "inc/front.h"
 var $4654=($4653|0)==0; //@line 23 "inc/front.h"
 if($4654){label=907;break;}else{var $_01109=$4653;var $f_i702_sroa_55_6=$4650;label=906;break;} //@line 23 "inc/front.h"
 case 907: 
 var $4655=((($x_i703_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21115=$4648;var $f_i702_sroa_55_5=$4650;var $x_i703_0=$4655;label=894;break; //@line 49 "src/read.cpp"
 case 908: 
 var $4657$0 = ___cxa_find_matching_catch(-1, -1); var $4657$1 = tempRet0;
 var $4658=$4657$0;
 var $4659=$4657$1;
 var $4660=($4482|0)==0;
 if($4660){var $_01116=$4658;var $_01117=$4659;label=920;break;}else{label=909;break;}
 case 909: 
 _free($4482);
 var $_01116=$4658;var $_01117=$4659;label=920;break;
 case 910: 
 var $4663$0 = ___cxa_find_matching_catch(-1, -1); var $4663$1 = tempRet0;
 var $4664=$4663$0;
 var $4665=$4663$1;
 var $4666=($4507|0)==0; //@line 11 "inc/front.h"
 if($4666){var $_01116=$4664;var $_01117=$4665;label=920;break;}else{label=911;break;} //@line 11 "inc/front.h"
 case 911: 
 _free($4507);
 var $_01116=$4664;var $_01117=$4665;label=920;break; //@line 11 "inc/front.h"
 case 912: 
 var $4668=((($y_i704_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11114=$_21115;var $f_i702_sroa_55_3=$f_i702_sroa_55_5;var $y_i704_0=$4668;label=892;break; //@line 48 "src/read.cpp"
 case 913: 
 var $4670=((($z_i705_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01113=$_11114;var $f_i702_sroa_55_1=$f_i702_sroa_55_3;var $z_i705_0=$4670;label=890;break; //@line 47 "src/read.cpp"
 case 914: 
 var $4672=($4486|0)==0; //@line 69 "src/read.cpp"
 if($4672){label=916;break;}else{label=915;break;} //@line 69 "src/read.cpp"
 case 915: 
 _free($4486);
 label=916;break; //@line 69 "src/read.cpp"
 case 916: 
 var $4674=HEAP32[(($rm_i700)>>2)]; //@line 70 "src/read.cpp"
 var $4675=($4674|0)==0; //@line 70 "src/read.cpp"
 if($4675){label=918;break;}else{label=917;break;} //@line 70 "src/read.cpp"
 case 917: 
 var $4677=$4674; //@line 70 "src/read.cpp"
 var $4678=HEAP32[(($4677)>>2)]; //@line 70 "src/read.cpp"
 var $4679=(($4678+4)|0); //@line 70 "src/read.cpp"
 var $4680=HEAP32[(($4679)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4680]($4674); //@line 70 "src/read.cpp"
 label=918;break; //@line 70 "src/read.cpp"
 case 918: 
 var $4682=($4507|0)==0; //@line 11 "inc/front.h"
 if($4682){label=1257;break;}else{label=919;break;} //@line 11 "inc/front.h"
 case 919: 
 _free($4507);
 label=1257;break; //@line 11 "inc/front.h"
 case 920: 
 var $_01117;
 var $_01116;
 var $4683$0=$_01116;
 var $4683$1=0;
 var $4684$0=$4683$0;
 var $4684$1=$_01117;
 ___resumeException($4684$0) //@line 71 "src/read.cpp"
 case 921: 
 var $4686=HEAP32[(($3)>>2)]; //@line 190 "src/read.cpp"
 var $4687=HEAP32[(($4)>>2)]; //@line 190 "src/read.cpp"
 var $4688=HEAP32[(($5)>>2)]; //@line 190 "src/read.cpp"
 var $4689=HEAP32[(($6)>>2)]; //@line 190 "src/read.cpp"
 var $$etemp$115$0=4;
 var $$etemp$115$1=0;

 var $4690=__Znwj(48); //@line 41 "src/read.cpp"
 var $4691=$4690; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4691,0,51,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=922;break; } else { label=950;break; } //@line 41 "src/read.cpp"
 case 922: 
 var $4693=$4690; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i736)>>2)]=$4693; //@line 71 "src/read.cpp"
 var $4694=__Znwj(12); //@line 42 "src/read.cpp"
 var $4695=(($4694+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4696=$4695; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4696)>>2)]=$4686; //@line 34 "inc/pcdecoder.inl"
 var $4697=(($4694+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4698=$4697; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4698)>>2)]=$rm_i736; //@line 34 "inc/pcdecoder.inl"
 var $4699=((($4687)+(1))|0); //@line 10 "inc/front.h"
 var $4700=((($4688)+(1))|0); //@line 10 "inc/front.h"
 var $4701=(Math_imul($4699,$4700)|0); //@line 10 "inc/front.h"
 var $4702=((($4687)+(2))|0); //@line 9 "inc/front.h"
 var $4703=((($4702)+($4701))|0); //@line 9 "inc/front.h"
 var $4704=((($4703)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i743=$4704;label=923;break; //@line 45 "inc/front.h"
 case 923: 
 var $storemerge_i_i_i743;
 var $4706=((($storemerge_i_i_i743)+(1))|0); //@line 45 "inc/front.h"
 var $4707=$storemerge_i_i_i743&$4706; //@line 45 "inc/front.h"
 var $4708=($4707|0)==0; //@line 45 "inc/front.h"
 if($4708){label=925;break;}else{label=924;break;} //@line 45 "inc/front.h"
 case 924: 
 var $4710=$storemerge_i_i_i743|$4706; //@line 45 "inc/front.h"
 var $storemerge_i_i_i743=$4710;label=923;break; //@line 45 "inc/front.h"
 case 925: 
 var $4711$0=_llvm_umul_with_overflow_i32($4706,4);
 var $4711$1=tempRet0;
 var $4712=$4711$1;
 var $4713=$4711$0;
 var $4714=($4712?-1:$4713); //@line 9 "inc/front.h"
 var $4715=(function() { try { __THREW__ = 0; return __Znwj($4714) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=929;break; } else { label=926;break; }
 case 926: 
 var $4717$0 = ___cxa_find_matching_catch(-1, -1); var $4717$1 = tempRet0;
 var $4718=$4717$1;
 var $4719=($4718|0)<0;
 if($4719){label=927;break;}else{label=928;break;}
 case 927: 
 var $4721=$4717$0;
 ___cxa_call_unexpected($4721);
 throw "Reached an unreachable!";
 case 928: 
 ___resumeException($4717$0)
 case 929: 
 var $4723=$4715; //@line 9 "inc/front.h"
 var $_01101=$4701;var $f_i738_sroa_55_0=0;label=930;break; //@line 22 "inc/front.h"
 case 930: 
 var $f_i738_sroa_55_0;
 var $_01101;
 var $4725=((($f_i738_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4726=$f_i738_sroa_55_0&$storemerge_i_i_i743; //@line 23 "inc/front.h"
 var $4727=(($4723+($4726<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4727)>>2)]=0; //@line 23 "inc/front.h"
 var $4728=((($_01101)-(1))|0); //@line 23 "inc/front.h"
 var $4729=($4728|0)==0; //@line 23 "inc/front.h"
 if($4729){label=931;break;}else{var $_01101=$4728;var $f_i738_sroa_55_0=$4725;label=930;break;} //@line 23 "inc/front.h"
 case 931: 
 var $4730=(($4694+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4731=$4730; //@line 50 "inc/pcdecoder.inl"
 var $4732=(($4694+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4733=$4732; //@line 50 "inc/pcdecoder.inl"
 var $_01102=$_01012;var $f_i738_sroa_55_1=$4725;var $z_i741_0=0;label=932;break; //@line 47 "src/read.cpp"
 case 932: 
 var $z_i741_0;
 var $f_i738_sroa_55_1;
 var $_01102;
 var $4735=($z_i741_0>>>0)<($4689>>>0); //@line 47 "src/read.cpp"
 if($4735){var $_01100=$4699;var $f_i738_sroa_55_2=$f_i738_sroa_55_1;label=933;break;}else{label=956;break;} //@line 47 "src/read.cpp"
 case 933: 
 var $f_i738_sroa_55_2;
 var $_01100;
 var $4737=((($f_i738_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4738=$f_i738_sroa_55_2&$storemerge_i_i_i743; //@line 23 "inc/front.h"
 var $4739=(($4723+($4738<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4739)>>2)]=0; //@line 23 "inc/front.h"
 var $4740=((($_01100)-(1))|0); //@line 23 "inc/front.h"
 var $4741=($4740|0)==0; //@line 23 "inc/front.h"
 if($4741){var $_11103=$_01102;var $f_i738_sroa_55_3=$4737;var $y_i740_0=0;label=934;break;}else{var $_01100=$4740;var $f_i738_sroa_55_2=$4737;label=933;break;} //@line 23 "inc/front.h"
 case 934: 
 var $y_i740_0;
 var $f_i738_sroa_55_3;
 var $_11103;
 var $4742=($y_i740_0>>>0)<($4688>>>0); //@line 48 "src/read.cpp"
 if($4742){var $_01099=1;var $f_i738_sroa_55_4=$f_i738_sroa_55_3;label=935;break;}else{label=955;break;} //@line 48 "src/read.cpp"
 case 935: 
 var $f_i738_sroa_55_4;
 var $_01099;
 var $4744=((($f_i738_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4745=$f_i738_sroa_55_4&$storemerge_i_i_i743; //@line 23 "inc/front.h"
 var $4746=(($4723+($4745<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4746)>>2)]=0; //@line 23 "inc/front.h"
 var $4747=((($_01099)-(1))|0); //@line 23 "inc/front.h"
 var $4748=($4747|0)==0; //@line 23 "inc/front.h"
 if($4748){var $_21104=$_11103;var $f_i738_sroa_55_5=$4744;var $x_i739_0=0;label=936;break;}else{var $_01099=$4747;var $f_i738_sroa_55_4=$4744;label=935;break;} //@line 23 "inc/front.h"
 case 936: 
 var $x_i739_0;
 var $f_i738_sroa_55_5;
 var $_21104;
 var $4749=($x_i739_0>>>0)<($4687>>>0); //@line 49 "src/read.cpp"
 if($4749){label=937;break;}else{label=954;break;} //@line 49 "src/read.cpp"
 case 937: 
 var $4751=((($f_i738_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4752=$4751&$storemerge_i_i_i743; //@line 16 "inc/front.h"
 var $4753=(($4723+($4752<<2))|0); //@line 16 "inc/front.h"
 var $4754=HEAPF32[(($4753)>>2)]; //@line 59 "src/read.cpp"
 var $4755=((($f_i738_sroa_55_5)-($4699))|0); //@line 16 "inc/front.h"
 var $4756=((($4755)-($4701))|0); //@line 16 "inc/front.h"
 var $4757=$4756&$storemerge_i_i_i743; //@line 16 "inc/front.h"
 var $4758=(($4723+($4757<<2))|0); //@line 16 "inc/front.h"
 var $4759=HEAPF32[(($4758)>>2)]; //@line 59 "src/read.cpp"
 var $4760=$4755&$storemerge_i_i_i743; //@line 16 "inc/front.h"
 var $4761=(($4723+($4760<<2))|0); //@line 16 "inc/front.h"
 var $4762=HEAPF32[(($4761)>>2)]; //@line 60 "src/read.cpp"
 var $4763=((($4751)-($4701))|0); //@line 16 "inc/front.h"
 var $4764=$4763&$storemerge_i_i_i743; //@line 16 "inc/front.h"
 var $4765=(($4723+($4764<<2))|0); //@line 16 "inc/front.h"
 var $4766=HEAPF32[(($4765)>>2)]; //@line 60 "src/read.cpp"
 var $4767=((($f_i738_sroa_55_5)-($4701))|0); //@line 16 "inc/front.h"
 var $4768=$4767&$storemerge_i_i_i743; //@line 16 "inc/front.h"
 var $4769=(($4723+($4768<<2))|0); //@line 16 "inc/front.h"
 var $4770=HEAPF32[(($4769)>>2)]; //@line 61 "src/read.cpp"
 var $4771=((($4751)-($4699))|0); //@line 16 "inc/front.h"
 var $4772=$4771&$storemerge_i_i_i743; //@line 16 "inc/front.h"
 var $4773=(($4723+($4772<<2))|0); //@line 16 "inc/front.h"
 var $4774=HEAPF32[(($4773)>>2)]; //@line 61 "src/read.cpp"
 var $4775=((($4771)-($4701))|0); //@line 16 "inc/front.h"
 var $4776=$4775&$storemerge_i_i_i743; //@line 16 "inc/front.h"
 var $4777=(($4723+($4776<<2))|0); //@line 16 "inc/front.h"
 var $4778=($4754)-($4759); //@line 59 "src/read.cpp"
 var $4779=($4778)+($4762); //@line 60 "src/read.cpp"
 var $4780=($4779)-($4766); //@line 60 "src/read.cpp"
 var $4781=($4780)+($4770); //@line 61 "src/read.cpp"
 var $4782=($4781)-($4774); //@line 61 "src/read.cpp"
 var $4783=HEAPF32[(($4777)>>2)]; //@line 62 "src/read.cpp"
 var $4784=($4782)+($4783); //@line 62 "src/read.cpp"
 var $4785=HEAP32[(($4731)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4786=HEAP32[(($4733)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4787=HEAP32[(($4786)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$116$0=4;
 var $$etemp$116$1=0;

 var $$etemp$117$0=4;
 var $$etemp$117$1=0;

 var $4788=$4787; //@line 25 "src/rcdecoder.cpp"
 var $4789=HEAP32[(($4788)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4790=(($4789+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4791=HEAP32[(($4790)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4792=(($4785+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4791]($4787,$4792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=938;break; } else { label=952;break; }
 case 938: 
 var $4793=(($4785+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4794=HEAP32[(($4793)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4795=(($4785+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4796=HEAP32[(($4795)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4797=((($4794)-($4796))|0); //@line 26 "src/rcdecoder.cpp"
 var $4798=HEAP32[(($4792)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4799=(((($4797>>>0))/(($4798>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i730)>>2)]=$4799; //@line 26 "src/rcdecoder.cpp"
 var $4800=$4787; //@line 27 "src/rcdecoder.cpp"
 var $4801=HEAP32[(($4800)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4802=(($4801+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4803=HEAP32[(($4802)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4804=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4803]($4787,$l_i_i_i730,$r_i_i_i731) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=939;break; } else { label=952;break; }
 case 939: 
 var $4805=HEAP32[(($4792)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4806=HEAP32[(($l_i_i_i730)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4807=(Math_imul($4805,$4806)|0); //@line 28 "src/rcdecoder.cpp"
 var $4808=HEAP32[(($4795)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4809=((($4808)+($4807))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4795)>>2)]=$4809; //@line 28 "src/rcdecoder.cpp"
 var $4810=HEAP32[(($r_i_i_i731)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4811=(Math_imul($4805,$4810)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4792)>>2)]=$4811; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4785) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=940;break; } else { label=952;break; }
 case 940: 
 var $$etemp$118$0=4;
 var $$etemp$118$1=0;

 var $$etemp$119$0=4;
 var $$etemp$119$1=0;

 var $4812=($4804>>>0)>25; //@line 51 "inc/pcdecoder.inl"
 if($4812){label=941;break;}else{label=943;break;} //@line 51 "inc/pcdecoder.inl"
 case 941: 
 var $4814=((($4804)-(26))|0); //@line 52 "inc/pcdecoder.inl"
 var $4815=HEAP32[(($4731)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4816=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4815,$4814) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=942;break; } else { label=952;break; }
 case 942: 
 var $4817=1<<$4814; //@line 53 "inc/pcdecoder.inl"
 var $4818=((($4817)+($4816))|0); //@line 53 "inc/pcdecoder.inl"
 var $4819=(HEAPF32[((tempDoublePtr)>>2)]=$4784,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4820=$4819^-1; //@line 38 "inc/pcmap.h"
 var $4821=$4820>>>7; //@line 39 "inc/pcmap.h"
 var $4822=$4820>>31; //@line 40 "inc/pcmap.h"
 var $4823=$4822>>>8; //@line 40 "inc/pcmap.h"
 var $4824=$4821^$4823; //@line 40 "inc/pcmap.h"
 var $4825=((($4824)+($4818))|0); //@line 55 "inc/pcdecoder.inl"
 var $4826=$4825>>>24; //@line 48 "inc/pcmap.h"
 var $4827=(((-$4826))|0); //@line 48 "inc/pcmap.h"
 var $4828=$4827>>>8; //@line 48 "inc/pcmap.h"
 var $4829=$4828^$4825; //@line 48 "inc/pcmap.h"
 var $4830=$4829<<7; //@line 50 "inc/pcmap.h"
 var $4831=$4830^-128; //@line 50 "inc/pcmap.h"
 var $_01097_in=$4831;label=947;break; //@line 56 "inc/pcdecoder.inl"
 case 943: 
 var $4833=($4804>>>0)<25; //@line undefined "inc/pcdecoder.inl"
 if($4833){label=944;break;}else{label=946;break;} //@line undefined "inc/pcdecoder.inl"
 case 944: 
 var $4835=(((24)-($4804))|0); //@line 59 "inc/pcdecoder.inl"
 var $4836=HEAP32[(($4731)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4837=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($4836,$4835) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=945;break; } else { label=952;break; }
 case 945: 
 var $4838=1<<$4835; //@line 60 "inc/pcdecoder.inl"
 var $4839=((($4838)+($4837))|0); //@line 60 "inc/pcdecoder.inl"
 var $4840=(HEAPF32[((tempDoublePtr)>>2)]=$4784,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4841=$4840^-1; //@line 38 "inc/pcmap.h"
 var $4842=$4841>>>7; //@line 39 "inc/pcmap.h"
 var $4843=$4841>>31; //@line 40 "inc/pcmap.h"
 var $4844=$4843>>>8; //@line 40 "inc/pcmap.h"
 var $4845=$4842^$4844; //@line 40 "inc/pcmap.h"
 var $4846=((($4845)-($4839))|0); //@line 62 "inc/pcdecoder.inl"
 var $4847=$4846>>>24; //@line 48 "inc/pcmap.h"
 var $4848=(((-$4847))|0); //@line 48 "inc/pcmap.h"
 var $4849=$4848>>>8; //@line 48 "inc/pcmap.h"
 var $4850=$4849^$4846; //@line 48 "inc/pcmap.h"
 var $4851=$4850<<7; //@line 50 "inc/pcmap.h"
 var $4852=$4851^-128; //@line 50 "inc/pcmap.h"
 var $_01097_in=$4852;label=947;break; //@line 63 "inc/pcdecoder.inl"
 case 946: 
 var $4854=(HEAPF32[((tempDoublePtr)>>2)]=$4784,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $4855=$4854&-128; //@line 60 "inc/pcmap.h"
 var $_01097_in=$4855;label=947;break; //@line 66 "inc/pcdecoder.inl"
 case 947: 
 var $_01097_in;
 var $_01097=(HEAP32[((tempDoublePtr)>>2)]=$_01097_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $4856=(($_21104+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21104)>>2)]=$_01097; //@line 65 "src/read.cpp"
 var $_01098=1;var $f_i738_sroa_55_6=$f_i738_sroa_55_5;label=948;break; //@line 22 "inc/front.h"
 case 948: 
 var $f_i738_sroa_55_6;
 var $_01098;
 var $4858=((($f_i738_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4859=$f_i738_sroa_55_6&$storemerge_i_i_i743; //@line 23 "inc/front.h"
 var $4860=(($4723+($4859<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4860)>>2)]=$_01097; //@line 23 "inc/front.h"
 var $4861=((($_01098)-(1))|0); //@line 23 "inc/front.h"
 var $4862=($4861|0)==0; //@line 23 "inc/front.h"
 if($4862){label=949;break;}else{var $_01098=$4861;var $f_i738_sroa_55_6=$4858;label=948;break;} //@line 23 "inc/front.h"
 case 949: 
 var $4863=((($x_i739_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21104=$4856;var $f_i738_sroa_55_5=$4858;var $x_i739_0=$4863;label=936;break; //@line 49 "src/read.cpp"
 case 950: 
 var $4865$0 = ___cxa_find_matching_catch(-1, -1); var $4865$1 = tempRet0;
 var $4866=$4865$0;
 var $4867=$4865$1;
 var $4868=($4690|0)==0;
 if($4868){var $_01105=$4866;var $_01106=$4867;label=962;break;}else{label=951;break;}
 case 951: 
 _free($4690);
 var $_01105=$4866;var $_01106=$4867;label=962;break;
 case 952: 
 var $4871$0 = ___cxa_find_matching_catch(-1, -1); var $4871$1 = tempRet0;
 var $4872=$4871$0;
 var $4873=$4871$1;
 var $4874=($4715|0)==0; //@line 11 "inc/front.h"
 if($4874){var $_01105=$4872;var $_01106=$4873;label=962;break;}else{label=953;break;} //@line 11 "inc/front.h"
 case 953: 
 _free($4715);
 var $_01105=$4872;var $_01106=$4873;label=962;break; //@line 11 "inc/front.h"
 case 954: 
 var $4876=((($y_i740_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11103=$_21104;var $f_i738_sroa_55_3=$f_i738_sroa_55_5;var $y_i740_0=$4876;label=934;break; //@line 48 "src/read.cpp"
 case 955: 
 var $4878=((($z_i741_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01102=$_11103;var $f_i738_sroa_55_1=$f_i738_sroa_55_3;var $z_i741_0=$4878;label=932;break; //@line 47 "src/read.cpp"
 case 956: 
 var $4880=($4694|0)==0; //@line 69 "src/read.cpp"
 if($4880){label=958;break;}else{label=957;break;} //@line 69 "src/read.cpp"
 case 957: 
 _free($4694);
 label=958;break; //@line 69 "src/read.cpp"
 case 958: 
 var $4882=HEAP32[(($rm_i736)>>2)]; //@line 70 "src/read.cpp"
 var $4883=($4882|0)==0; //@line 70 "src/read.cpp"
 if($4883){label=960;break;}else{label=959;break;} //@line 70 "src/read.cpp"
 case 959: 
 var $4885=$4882; //@line 70 "src/read.cpp"
 var $4886=HEAP32[(($4885)>>2)]; //@line 70 "src/read.cpp"
 var $4887=(($4886+4)|0); //@line 70 "src/read.cpp"
 var $4888=HEAP32[(($4887)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4888]($4882); //@line 70 "src/read.cpp"
 label=960;break; //@line 70 "src/read.cpp"
 case 960: 
 var $4890=($4715|0)==0; //@line 11 "inc/front.h"
 if($4890){label=1257;break;}else{label=961;break;} //@line 11 "inc/front.h"
 case 961: 
 _free($4715);
 label=1257;break; //@line 11 "inc/front.h"
 case 962: 
 var $_01106;
 var $_01105;
 var $4891$0=$_01105;
 var $4891$1=0;
 var $4892$0=$4891$0;
 var $4892$1=$_01106;
 ___resumeException($4892$0) //@line 71 "src/read.cpp"
 case 963: 
 var $4894=HEAP32[(($3)>>2)]; //@line 191 "src/read.cpp"
 var $4895=HEAP32[(($4)>>2)]; //@line 191 "src/read.cpp"
 var $4896=HEAP32[(($5)>>2)]; //@line 191 "src/read.cpp"
 var $4897=HEAP32[(($6)>>2)]; //@line 191 "src/read.cpp"
 var $$etemp$120$0=4;
 var $$etemp$120$1=0;

 var $4898=__Znwj(48); //@line 41 "src/read.cpp"
 var $4899=$4898; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4899,0,53,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=964;break; } else { label=992;break; } //@line 41 "src/read.cpp"
 case 964: 
 var $4901=$4898; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i772)>>2)]=$4901; //@line 71 "src/read.cpp"
 var $4902=__Znwj(12); //@line 42 "src/read.cpp"
 var $4903=(($4902+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4904=$4903; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4904)>>2)]=$4894; //@line 34 "inc/pcdecoder.inl"
 var $4905=(($4902+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4906=$4905; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4906)>>2)]=$rm_i772; //@line 34 "inc/pcdecoder.inl"
 var $4907=((($4895)+(1))|0); //@line 10 "inc/front.h"
 var $4908=((($4896)+(1))|0); //@line 10 "inc/front.h"
 var $4909=(Math_imul($4907,$4908)|0); //@line 10 "inc/front.h"
 var $4910=((($4895)+(2))|0); //@line 9 "inc/front.h"
 var $4911=((($4910)+($4909))|0); //@line 9 "inc/front.h"
 var $4912=((($4911)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i779=$4912;label=965;break; //@line 45 "inc/front.h"
 case 965: 
 var $storemerge_i_i_i779;
 var $4914=((($storemerge_i_i_i779)+(1))|0); //@line 45 "inc/front.h"
 var $4915=$storemerge_i_i_i779&$4914; //@line 45 "inc/front.h"
 var $4916=($4915|0)==0; //@line 45 "inc/front.h"
 if($4916){label=967;break;}else{label=966;break;} //@line 45 "inc/front.h"
 case 966: 
 var $4918=$storemerge_i_i_i779|$4914; //@line 45 "inc/front.h"
 var $storemerge_i_i_i779=$4918;label=965;break; //@line 45 "inc/front.h"
 case 967: 
 var $4919$0=_llvm_umul_with_overflow_i32($4914,4);
 var $4919$1=tempRet0;
 var $4920=$4919$1;
 var $4921=$4919$0;
 var $4922=($4920?-1:$4921); //@line 9 "inc/front.h"
 var $4923=(function() { try { __THREW__ = 0; return __Znwj($4922) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=971;break; } else { label=968;break; }
 case 968: 
 var $4925$0 = ___cxa_find_matching_catch(-1, -1); var $4925$1 = tempRet0;
 var $4926=$4925$1;
 var $4927=($4926|0)<0;
 if($4927){label=969;break;}else{label=970;break;}
 case 969: 
 var $4929=$4925$0;
 ___cxa_call_unexpected($4929);
 throw "Reached an unreachable!";
 case 970: 
 ___resumeException($4925$0)
 case 971: 
 var $4931=$4923; //@line 9 "inc/front.h"
 var $_01089=$4909;var $f_i774_sroa_55_0=0;label=972;break; //@line 22 "inc/front.h"
 case 972: 
 var $f_i774_sroa_55_0;
 var $_01089;
 var $4933=((($f_i774_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4934=$f_i774_sroa_55_0&$storemerge_i_i_i779; //@line 23 "inc/front.h"
 var $4935=(($4931+($4934<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4935)>>2)]=0; //@line 23 "inc/front.h"
 var $4936=((($_01089)-(1))|0); //@line 23 "inc/front.h"
 var $4937=($4936|0)==0; //@line 23 "inc/front.h"
 if($4937){label=973;break;}else{var $_01089=$4936;var $f_i774_sroa_55_0=$4933;label=972;break;} //@line 23 "inc/front.h"
 case 973: 
 var $4938=(($4902+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4939=$4938; //@line 50 "inc/pcdecoder.inl"
 var $4940=(($4902+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4941=$4940; //@line 50 "inc/pcdecoder.inl"
 var $_01090=$_01012;var $f_i774_sroa_55_1=$4933;var $z_i777_0=0;label=974;break; //@line 47 "src/read.cpp"
 case 974: 
 var $z_i777_0;
 var $f_i774_sroa_55_1;
 var $_01090;
 var $4943=($z_i777_0>>>0)<($4897>>>0); //@line 47 "src/read.cpp"
 if($4943){var $_01087=$4907;var $f_i774_sroa_55_2=$f_i774_sroa_55_1;label=975;break;}else{label=998;break;} //@line 47 "src/read.cpp"
 case 975: 
 var $f_i774_sroa_55_2;
 var $_01087;
 var $4945=((($f_i774_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4946=$f_i774_sroa_55_2&$storemerge_i_i_i779; //@line 23 "inc/front.h"
 var $4947=(($4931+($4946<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4947)>>2)]=0; //@line 23 "inc/front.h"
 var $4948=((($_01087)-(1))|0); //@line 23 "inc/front.h"
 var $4949=($4948|0)==0; //@line 23 "inc/front.h"
 if($4949){var $_11091=$_01090;var $f_i774_sroa_55_3=$4945;var $y_i776_0=0;label=976;break;}else{var $_01087=$4948;var $f_i774_sroa_55_2=$4945;label=975;break;} //@line 23 "inc/front.h"
 case 976: 
 var $y_i776_0;
 var $f_i774_sroa_55_3;
 var $_11091;
 var $4950=($y_i776_0>>>0)<($4896>>>0); //@line 48 "src/read.cpp"
 if($4950){var $_01086=1;var $f_i774_sroa_55_4=$f_i774_sroa_55_3;label=977;break;}else{label=997;break;} //@line 48 "src/read.cpp"
 case 977: 
 var $f_i774_sroa_55_4;
 var $_01086;
 var $4952=((($f_i774_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4953=$f_i774_sroa_55_4&$storemerge_i_i_i779; //@line 23 "inc/front.h"
 var $4954=(($4931+($4953<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($4954)>>2)]=0; //@line 23 "inc/front.h"
 var $4955=((($_01086)-(1))|0); //@line 23 "inc/front.h"
 var $4956=($4955|0)==0; //@line 23 "inc/front.h"
 if($4956){var $_21092=$_11091;var $f_i774_sroa_55_5=$4952;var $x_i775_0=0;label=978;break;}else{var $_01086=$4955;var $f_i774_sroa_55_4=$4952;label=977;break;} //@line 23 "inc/front.h"
 case 978: 
 var $x_i775_0;
 var $f_i774_sroa_55_5;
 var $_21092;
 var $4957=($x_i775_0>>>0)<($4895>>>0); //@line 49 "src/read.cpp"
 if($4957){label=979;break;}else{label=996;break;} //@line 49 "src/read.cpp"
 case 979: 
 var $4959=((($f_i774_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4960=$4959&$storemerge_i_i_i779; //@line 16 "inc/front.h"
 var $4961=(($4931+($4960<<2))|0); //@line 16 "inc/front.h"
 var $4962=HEAPF32[(($4961)>>2)]; //@line 59 "src/read.cpp"
 var $4963=((($f_i774_sroa_55_5)-($4907))|0); //@line 16 "inc/front.h"
 var $4964=((($4963)-($4909))|0); //@line 16 "inc/front.h"
 var $4965=$4964&$storemerge_i_i_i779; //@line 16 "inc/front.h"
 var $4966=(($4931+($4965<<2))|0); //@line 16 "inc/front.h"
 var $4967=HEAPF32[(($4966)>>2)]; //@line 59 "src/read.cpp"
 var $4968=$4963&$storemerge_i_i_i779; //@line 16 "inc/front.h"
 var $4969=(($4931+($4968<<2))|0); //@line 16 "inc/front.h"
 var $4970=HEAPF32[(($4969)>>2)]; //@line 60 "src/read.cpp"
 var $4971=((($4959)-($4909))|0); //@line 16 "inc/front.h"
 var $4972=$4971&$storemerge_i_i_i779; //@line 16 "inc/front.h"
 var $4973=(($4931+($4972<<2))|0); //@line 16 "inc/front.h"
 var $4974=HEAPF32[(($4973)>>2)]; //@line 60 "src/read.cpp"
 var $4975=((($f_i774_sroa_55_5)-($4909))|0); //@line 16 "inc/front.h"
 var $4976=$4975&$storemerge_i_i_i779; //@line 16 "inc/front.h"
 var $4977=(($4931+($4976<<2))|0); //@line 16 "inc/front.h"
 var $4978=HEAPF32[(($4977)>>2)]; //@line 61 "src/read.cpp"
 var $4979=((($4959)-($4907))|0); //@line 16 "inc/front.h"
 var $4980=$4979&$storemerge_i_i_i779; //@line 16 "inc/front.h"
 var $4981=(($4931+($4980<<2))|0); //@line 16 "inc/front.h"
 var $4982=HEAPF32[(($4981)>>2)]; //@line 61 "src/read.cpp"
 var $4983=((($4979)-($4909))|0); //@line 16 "inc/front.h"
 var $4984=$4983&$storemerge_i_i_i779; //@line 16 "inc/front.h"
 var $4985=(($4931+($4984<<2))|0); //@line 16 "inc/front.h"
 var $4986=($4962)-($4967); //@line 59 "src/read.cpp"
 var $4987=($4986)+($4970); //@line 60 "src/read.cpp"
 var $4988=($4987)-($4974); //@line 60 "src/read.cpp"
 var $4989=($4988)+($4978); //@line 61 "src/read.cpp"
 var $4990=($4989)-($4982); //@line 61 "src/read.cpp"
 var $4991=HEAPF32[(($4985)>>2)]; //@line 62 "src/read.cpp"
 var $4992=($4990)+($4991); //@line 62 "src/read.cpp"
 var $4993=HEAP32[(($4939)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4994=HEAP32[(($4941)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4995=HEAP32[(($4994)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$121$0=4;
 var $$etemp$121$1=0;

 var $$etemp$122$0=4;
 var $$etemp$122$1=0;

 var $4996=$4995; //@line 25 "src/rcdecoder.cpp"
 var $4997=HEAP32[(($4996)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4998=(($4997+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4999=HEAP32[(($4998)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5000=(($4993+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4999]($4995,$5000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=980;break; } else { label=994;break; }
 case 980: 
 var $5001=(($4993+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5002=HEAP32[(($5001)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5003=(($4993+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5004=HEAP32[(($5003)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5005=((($5002)-($5004))|0); //@line 26 "src/rcdecoder.cpp"
 var $5006=HEAP32[(($5000)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5007=(((($5005>>>0))/(($5006>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i766)>>2)]=$5007; //@line 26 "src/rcdecoder.cpp"
 var $5008=$4995; //@line 27 "src/rcdecoder.cpp"
 var $5009=HEAP32[(($5008)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5010=(($5009+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5011=HEAP32[(($5010)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5012=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5011]($4995,$l_i_i_i766,$r_i_i_i767) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=981;break; } else { label=994;break; }
 case 981: 
 var $5013=HEAP32[(($5000)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5014=HEAP32[(($l_i_i_i766)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5015=(Math_imul($5013,$5014)|0); //@line 28 "src/rcdecoder.cpp"
 var $5016=HEAP32[(($5003)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5017=((($5016)+($5015))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5003)>>2)]=$5017; //@line 28 "src/rcdecoder.cpp"
 var $5018=HEAP32[(($r_i_i_i767)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5019=(Math_imul($5013,$5018)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5000)>>2)]=$5019; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4993) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=982;break; } else { label=994;break; }
 case 982: 
 var $$etemp$123$0=4;
 var $$etemp$123$1=0;

 var $$etemp$124$0=4;
 var $$etemp$124$1=0;

 var $5020=($5012>>>0)>26; //@line 51 "inc/pcdecoder.inl"
 if($5020){label=983;break;}else{label=985;break;} //@line 51 "inc/pcdecoder.inl"
 case 983: 
 var $5022=((($5012)-(27))|0); //@line 52 "inc/pcdecoder.inl"
 var $5023=HEAP32[(($4939)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5024=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5023,$5022) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=984;break; } else { label=994;break; }
 case 984: 
 var $5025=1<<$5022; //@line 53 "inc/pcdecoder.inl"
 var $5026=((($5025)+($5024))|0); //@line 53 "inc/pcdecoder.inl"
 var $5027=(HEAPF32[((tempDoublePtr)>>2)]=$4992,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5028=$5027^-1; //@line 38 "inc/pcmap.h"
 var $5029=$5028>>>6; //@line 39 "inc/pcmap.h"
 var $5030=$5028>>31; //@line 40 "inc/pcmap.h"
 var $5031=$5030>>>7; //@line 40 "inc/pcmap.h"
 var $5032=$5029^$5031; //@line 40 "inc/pcmap.h"
 var $5033=((($5032)+($5026))|0); //@line 55 "inc/pcdecoder.inl"
 var $5034=$5033>>>25; //@line 48 "inc/pcmap.h"
 var $5035=(((-$5034))|0); //@line 48 "inc/pcmap.h"
 var $5036=$5035>>>7; //@line 48 "inc/pcmap.h"
 var $5037=$5036^$5033; //@line 48 "inc/pcmap.h"
 var $5038=$5037<<6; //@line 50 "inc/pcmap.h"
 var $5039=$5038^-64; //@line 50 "inc/pcmap.h"
 var $_01084_in=$5039;label=989;break; //@line 56 "inc/pcdecoder.inl"
 case 985: 
 var $5041=($5012>>>0)<26; //@line undefined "inc/pcdecoder.inl"
 if($5041){label=986;break;}else{label=988;break;} //@line undefined "inc/pcdecoder.inl"
 case 986: 
 var $5043=(((25)-($5012))|0); //@line 59 "inc/pcdecoder.inl"
 var $5044=HEAP32[(($4939)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5045=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5044,$5043) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=987;break; } else { label=994;break; }
 case 987: 
 var $5046=1<<$5043; //@line 60 "inc/pcdecoder.inl"
 var $5047=((($5046)+($5045))|0); //@line 60 "inc/pcdecoder.inl"
 var $5048=(HEAPF32[((tempDoublePtr)>>2)]=$4992,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5049=$5048^-1; //@line 38 "inc/pcmap.h"
 var $5050=$5049>>>6; //@line 39 "inc/pcmap.h"
 var $5051=$5049>>31; //@line 40 "inc/pcmap.h"
 var $5052=$5051>>>7; //@line 40 "inc/pcmap.h"
 var $5053=$5050^$5052; //@line 40 "inc/pcmap.h"
 var $5054=((($5053)-($5047))|0); //@line 62 "inc/pcdecoder.inl"
 var $5055=$5054>>>25; //@line 48 "inc/pcmap.h"
 var $5056=(((-$5055))|0); //@line 48 "inc/pcmap.h"
 var $5057=$5056>>>7; //@line 48 "inc/pcmap.h"
 var $5058=$5057^$5054; //@line 48 "inc/pcmap.h"
 var $5059=$5058<<6; //@line 50 "inc/pcmap.h"
 var $5060=$5059^-64; //@line 50 "inc/pcmap.h"
 var $_01084_in=$5060;label=989;break; //@line 63 "inc/pcdecoder.inl"
 case 988: 
 var $5062=(HEAPF32[((tempDoublePtr)>>2)]=$4992,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5063=$5062&-64; //@line 60 "inc/pcmap.h"
 var $_01084_in=$5063;label=989;break; //@line 66 "inc/pcdecoder.inl"
 case 989: 
 var $_01084_in;
 var $_01084=(HEAP32[((tempDoublePtr)>>2)]=$_01084_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $5064=(($_21092+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21092)>>2)]=$_01084; //@line 65 "src/read.cpp"
 var $_01085=1;var $f_i774_sroa_55_6=$f_i774_sroa_55_5;label=990;break; //@line 22 "inc/front.h"
 case 990: 
 var $f_i774_sroa_55_6;
 var $_01085;
 var $5066=((($f_i774_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5067=$f_i774_sroa_55_6&$storemerge_i_i_i779; //@line 23 "inc/front.h"
 var $5068=(($4931+($5067<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5068)>>2)]=$_01084; //@line 23 "inc/front.h"
 var $5069=((($_01085)-(1))|0); //@line 23 "inc/front.h"
 var $5070=($5069|0)==0; //@line 23 "inc/front.h"
 if($5070){label=991;break;}else{var $_01085=$5069;var $f_i774_sroa_55_6=$5066;label=990;break;} //@line 23 "inc/front.h"
 case 991: 
 var $5071=((($x_i775_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21092=$5064;var $f_i774_sroa_55_5=$5066;var $x_i775_0=$5071;label=978;break; //@line 49 "src/read.cpp"
 case 992: 
 var $5073$0 = ___cxa_find_matching_catch(-1, -1); var $5073$1 = tempRet0;
 var $5074=$5073$0;
 var $5075=$5073$1;
 var $5076=($4898|0)==0;
 if($5076){var $_01093=$5074;var $_01094=$5075;label=1004;break;}else{label=993;break;}
 case 993: 
 _free($4898);
 var $_01093=$5074;var $_01094=$5075;label=1004;break;
 case 994: 
 var $5079$0 = ___cxa_find_matching_catch(-1, -1); var $5079$1 = tempRet0;
 var $5080=$5079$0;
 var $5081=$5079$1;
 var $5082=($4923|0)==0; //@line 11 "inc/front.h"
 if($5082){var $_01093=$5080;var $_01094=$5081;label=1004;break;}else{label=995;break;} //@line 11 "inc/front.h"
 case 995: 
 _free($4923);
 var $_01093=$5080;var $_01094=$5081;label=1004;break; //@line 11 "inc/front.h"
 case 996: 
 var $5084=((($y_i776_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11091=$_21092;var $f_i774_sroa_55_3=$f_i774_sroa_55_5;var $y_i776_0=$5084;label=976;break; //@line 48 "src/read.cpp"
 case 997: 
 var $5086=((($z_i777_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01090=$_11091;var $f_i774_sroa_55_1=$f_i774_sroa_55_3;var $z_i777_0=$5086;label=974;break; //@line 47 "src/read.cpp"
 case 998: 
 var $5088=($4902|0)==0; //@line 69 "src/read.cpp"
 if($5088){label=1000;break;}else{label=999;break;} //@line 69 "src/read.cpp"
 case 999: 
 _free($4902);
 label=1000;break; //@line 69 "src/read.cpp"
 case 1000: 
 var $5090=HEAP32[(($rm_i772)>>2)]; //@line 70 "src/read.cpp"
 var $5091=($5090|0)==0; //@line 70 "src/read.cpp"
 if($5091){label=1002;break;}else{label=1001;break;} //@line 70 "src/read.cpp"
 case 1001: 
 var $5093=$5090; //@line 70 "src/read.cpp"
 var $5094=HEAP32[(($5093)>>2)]; //@line 70 "src/read.cpp"
 var $5095=(($5094+4)|0); //@line 70 "src/read.cpp"
 var $5096=HEAP32[(($5095)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5096]($5090); //@line 70 "src/read.cpp"
 label=1002;break; //@line 70 "src/read.cpp"
 case 1002: 
 var $5098=($4923|0)==0; //@line 11 "inc/front.h"
 if($5098){label=1257;break;}else{label=1003;break;} //@line 11 "inc/front.h"
 case 1003: 
 _free($4923);
 label=1257;break; //@line 11 "inc/front.h"
 case 1004: 
 var $_01094;
 var $_01093;
 var $5099$0=$_01093;
 var $5099$1=0;
 var $5100$0=$5099$0;
 var $5100$1=$_01094;
 ___resumeException($5100$0) //@line 71 "src/read.cpp"
 case 1005: 
 var $5102=HEAP32[(($3)>>2)]; //@line 192 "src/read.cpp"
 var $5103=HEAP32[(($4)>>2)]; //@line 192 "src/read.cpp"
 var $5104=HEAP32[(($5)>>2)]; //@line 192 "src/read.cpp"
 var $5105=HEAP32[(($6)>>2)]; //@line 192 "src/read.cpp"
 var $$etemp$125$0=4;
 var $$etemp$125$1=0;

 var $5106=__Znwj(48); //@line 41 "src/read.cpp"
 var $5107=$5106; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5107,0,55,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1006;break; } else { label=1034;break; } //@line 41 "src/read.cpp"
 case 1006: 
 var $5109=$5106; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i808)>>2)]=$5109; //@line 71 "src/read.cpp"
 var $5110=__Znwj(12); //@line 42 "src/read.cpp"
 var $5111=(($5110+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5112=$5111; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5112)>>2)]=$5102; //@line 34 "inc/pcdecoder.inl"
 var $5113=(($5110+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5114=$5113; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5114)>>2)]=$rm_i808; //@line 34 "inc/pcdecoder.inl"
 var $5115=((($5103)+(1))|0); //@line 10 "inc/front.h"
 var $5116=((($5104)+(1))|0); //@line 10 "inc/front.h"
 var $5117=(Math_imul($5115,$5116)|0); //@line 10 "inc/front.h"
 var $5118=((($5103)+(2))|0); //@line 9 "inc/front.h"
 var $5119=((($5118)+($5117))|0); //@line 9 "inc/front.h"
 var $5120=((($5119)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i815=$5120;label=1007;break; //@line 45 "inc/front.h"
 case 1007: 
 var $storemerge_i_i_i815;
 var $5122=((($storemerge_i_i_i815)+(1))|0); //@line 45 "inc/front.h"
 var $5123=$storemerge_i_i_i815&$5122; //@line 45 "inc/front.h"
 var $5124=($5123|0)==0; //@line 45 "inc/front.h"
 if($5124){label=1009;break;}else{label=1008;break;} //@line 45 "inc/front.h"
 case 1008: 
 var $5126=$storemerge_i_i_i815|$5122; //@line 45 "inc/front.h"
 var $storemerge_i_i_i815=$5126;label=1007;break; //@line 45 "inc/front.h"
 case 1009: 
 var $5127$0=_llvm_umul_with_overflow_i32($5122,4);
 var $5127$1=tempRet0;
 var $5128=$5127$1;
 var $5129=$5127$0;
 var $5130=($5128?-1:$5129); //@line 9 "inc/front.h"
 var $5131=(function() { try { __THREW__ = 0; return __Znwj($5130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1013;break; } else { label=1010;break; }
 case 1010: 
 var $5133$0 = ___cxa_find_matching_catch(-1, -1); var $5133$1 = tempRet0;
 var $5134=$5133$1;
 var $5135=($5134|0)<0;
 if($5135){label=1011;break;}else{label=1012;break;}
 case 1011: 
 var $5137=$5133$0;
 ___cxa_call_unexpected($5137);
 throw "Reached an unreachable!";
 case 1012: 
 ___resumeException($5133$0)
 case 1013: 
 var $5139=$5131; //@line 9 "inc/front.h"
 var $_01073=$5117;var $f_i810_sroa_55_0=0;label=1014;break; //@line 22 "inc/front.h"
 case 1014: 
 var $f_i810_sroa_55_0;
 var $_01073;
 var $5141=((($f_i810_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5142=$f_i810_sroa_55_0&$storemerge_i_i_i815; //@line 23 "inc/front.h"
 var $5143=(($5139+($5142<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5143)>>2)]=0; //@line 23 "inc/front.h"
 var $5144=((($_01073)-(1))|0); //@line 23 "inc/front.h"
 var $5145=($5144|0)==0; //@line 23 "inc/front.h"
 if($5145){label=1015;break;}else{var $_01073=$5144;var $f_i810_sroa_55_0=$5141;label=1014;break;} //@line 23 "inc/front.h"
 case 1015: 
 var $5146=(($5110+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5147=$5146; //@line 50 "inc/pcdecoder.inl"
 var $5148=(($5110+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5149=$5148; //@line 50 "inc/pcdecoder.inl"
 var $_01076=$_01012;var $f_i810_sroa_55_1=$5141;var $z_i813_0=0;label=1016;break; //@line 47 "src/read.cpp"
 case 1016: 
 var $z_i813_0;
 var $f_i810_sroa_55_1;
 var $_01076;
 var $5151=($z_i813_0>>>0)<($5105>>>0); //@line 47 "src/read.cpp"
 if($5151){var $_01072=$5115;var $f_i810_sroa_55_2=$f_i810_sroa_55_1;label=1017;break;}else{label=1040;break;} //@line 47 "src/read.cpp"
 case 1017: 
 var $f_i810_sroa_55_2;
 var $_01072;
 var $5153=((($f_i810_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5154=$f_i810_sroa_55_2&$storemerge_i_i_i815; //@line 23 "inc/front.h"
 var $5155=(($5139+($5154<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5155)>>2)]=0; //@line 23 "inc/front.h"
 var $5156=((($_01072)-(1))|0); //@line 23 "inc/front.h"
 var $5157=($5156|0)==0; //@line 23 "inc/front.h"
 if($5157){var $_11077=$_01076;var $f_i810_sroa_55_3=$5153;var $y_i812_0=0;label=1018;break;}else{var $_01072=$5156;var $f_i810_sroa_55_2=$5153;label=1017;break;} //@line 23 "inc/front.h"
 case 1018: 
 var $y_i812_0;
 var $f_i810_sroa_55_3;
 var $_11077;
 var $5158=($y_i812_0>>>0)<($5104>>>0); //@line 48 "src/read.cpp"
 if($5158){var $_01071=1;var $f_i810_sroa_55_4=$f_i810_sroa_55_3;label=1019;break;}else{label=1039;break;} //@line 48 "src/read.cpp"
 case 1019: 
 var $f_i810_sroa_55_4;
 var $_01071;
 var $5160=((($f_i810_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5161=$f_i810_sroa_55_4&$storemerge_i_i_i815; //@line 23 "inc/front.h"
 var $5162=(($5139+($5161<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5162)>>2)]=0; //@line 23 "inc/front.h"
 var $5163=((($_01071)-(1))|0); //@line 23 "inc/front.h"
 var $5164=($5163|0)==0; //@line 23 "inc/front.h"
 if($5164){var $_21078=$_11077;var $f_i810_sroa_55_5=$5160;var $x_i811_0=0;label=1020;break;}else{var $_01071=$5163;var $f_i810_sroa_55_4=$5160;label=1019;break;} //@line 23 "inc/front.h"
 case 1020: 
 var $x_i811_0;
 var $f_i810_sroa_55_5;
 var $_21078;
 var $5165=($x_i811_0>>>0)<($5103>>>0); //@line 49 "src/read.cpp"
 if($5165){label=1021;break;}else{label=1038;break;} //@line 49 "src/read.cpp"
 case 1021: 
 var $5167=((($f_i810_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5168=$5167&$storemerge_i_i_i815; //@line 16 "inc/front.h"
 var $5169=(($5139+($5168<<2))|0); //@line 16 "inc/front.h"
 var $5170=HEAPF32[(($5169)>>2)]; //@line 59 "src/read.cpp"
 var $5171=((($f_i810_sroa_55_5)-($5115))|0); //@line 16 "inc/front.h"
 var $5172=((($5171)-($5117))|0); //@line 16 "inc/front.h"
 var $5173=$5172&$storemerge_i_i_i815; //@line 16 "inc/front.h"
 var $5174=(($5139+($5173<<2))|0); //@line 16 "inc/front.h"
 var $5175=HEAPF32[(($5174)>>2)]; //@line 59 "src/read.cpp"
 var $5176=$5171&$storemerge_i_i_i815; //@line 16 "inc/front.h"
 var $5177=(($5139+($5176<<2))|0); //@line 16 "inc/front.h"
 var $5178=HEAPF32[(($5177)>>2)]; //@line 60 "src/read.cpp"
 var $5179=((($5167)-($5117))|0); //@line 16 "inc/front.h"
 var $5180=$5179&$storemerge_i_i_i815; //@line 16 "inc/front.h"
 var $5181=(($5139+($5180<<2))|0); //@line 16 "inc/front.h"
 var $5182=HEAPF32[(($5181)>>2)]; //@line 60 "src/read.cpp"
 var $5183=((($f_i810_sroa_55_5)-($5117))|0); //@line 16 "inc/front.h"
 var $5184=$5183&$storemerge_i_i_i815; //@line 16 "inc/front.h"
 var $5185=(($5139+($5184<<2))|0); //@line 16 "inc/front.h"
 var $5186=HEAPF32[(($5185)>>2)]; //@line 61 "src/read.cpp"
 var $5187=((($5167)-($5115))|0); //@line 16 "inc/front.h"
 var $5188=$5187&$storemerge_i_i_i815; //@line 16 "inc/front.h"
 var $5189=(($5139+($5188<<2))|0); //@line 16 "inc/front.h"
 var $5190=HEAPF32[(($5189)>>2)]; //@line 61 "src/read.cpp"
 var $5191=((($5187)-($5117))|0); //@line 16 "inc/front.h"
 var $5192=$5191&$storemerge_i_i_i815; //@line 16 "inc/front.h"
 var $5193=(($5139+($5192<<2))|0); //@line 16 "inc/front.h"
 var $5194=($5170)-($5175); //@line 59 "src/read.cpp"
 var $5195=($5194)+($5178); //@line 60 "src/read.cpp"
 var $5196=($5195)-($5182); //@line 60 "src/read.cpp"
 var $5197=($5196)+($5186); //@line 61 "src/read.cpp"
 var $5198=($5197)-($5190); //@line 61 "src/read.cpp"
 var $5199=HEAPF32[(($5193)>>2)]; //@line 62 "src/read.cpp"
 var $5200=($5198)+($5199); //@line 62 "src/read.cpp"
 var $5201=HEAP32[(($5147)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5202=HEAP32[(($5149)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5203=HEAP32[(($5202)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$126$0=4;
 var $$etemp$126$1=0;

 var $$etemp$127$0=4;
 var $$etemp$127$1=0;

 var $5204=$5203; //@line 25 "src/rcdecoder.cpp"
 var $5205=HEAP32[(($5204)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5206=(($5205+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5207=HEAP32[(($5206)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5208=(($5201+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5207]($5203,$5208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1022;break; } else { label=1036;break; }
 case 1022: 
 var $5209=(($5201+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5210=HEAP32[(($5209)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5211=(($5201+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5212=HEAP32[(($5211)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5213=((($5210)-($5212))|0); //@line 26 "src/rcdecoder.cpp"
 var $5214=HEAP32[(($5208)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5215=(((($5213>>>0))/(($5214>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i802)>>2)]=$5215; //@line 26 "src/rcdecoder.cpp"
 var $5216=$5203; //@line 27 "src/rcdecoder.cpp"
 var $5217=HEAP32[(($5216)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5218=(($5217+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5219=HEAP32[(($5218)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5220=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5219]($5203,$l_i_i_i802,$r_i_i_i803) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1023;break; } else { label=1036;break; }
 case 1023: 
 var $5221=HEAP32[(($5208)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5222=HEAP32[(($l_i_i_i802)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5223=(Math_imul($5221,$5222)|0); //@line 28 "src/rcdecoder.cpp"
 var $5224=HEAP32[(($5211)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5225=((($5224)+($5223))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5211)>>2)]=$5225; //@line 28 "src/rcdecoder.cpp"
 var $5226=HEAP32[(($r_i_i_i803)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5227=(Math_imul($5221,$5226)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5208)>>2)]=$5227; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5201) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1024;break; } else { label=1036;break; }
 case 1024: 
 var $$etemp$128$0=4;
 var $$etemp$128$1=0;

 var $$etemp$129$0=4;
 var $$etemp$129$1=0;

 var $5228=($5220>>>0)>27; //@line 51 "inc/pcdecoder.inl"
 if($5228){label=1025;break;}else{label=1027;break;} //@line 51 "inc/pcdecoder.inl"
 case 1025: 
 var $5230=((($5220)-(28))|0); //@line 52 "inc/pcdecoder.inl"
 var $5231=HEAP32[(($5147)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5232=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5231,$5230) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1026;break; } else { label=1036;break; }
 case 1026: 
 var $5233=1<<$5230; //@line 53 "inc/pcdecoder.inl"
 var $5234=((($5233)+($5232))|0); //@line 53 "inc/pcdecoder.inl"
 var $5235=(HEAPF32[((tempDoublePtr)>>2)]=$5200,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5236=$5235^-1; //@line 38 "inc/pcmap.h"
 var $5237=$5236>>>5; //@line 39 "inc/pcmap.h"
 var $5238=$5236>>31; //@line 40 "inc/pcmap.h"
 var $5239=$5238>>>6; //@line 40 "inc/pcmap.h"
 var $5240=$5237^$5239; //@line 40 "inc/pcmap.h"
 var $5241=((($5240)+($5234))|0); //@line 55 "inc/pcdecoder.inl"
 var $5242=$5241>>>26; //@line 48 "inc/pcmap.h"
 var $5243=(((-$5242))|0); //@line 48 "inc/pcmap.h"
 var $5244=$5243>>>6; //@line 48 "inc/pcmap.h"
 var $5245=$5244^$5241; //@line 48 "inc/pcmap.h"
 var $5246=$5245<<5; //@line 50 "inc/pcmap.h"
 var $5247=$5246^-32; //@line 50 "inc/pcmap.h"
 var $_01069_in=$5247;label=1031;break; //@line 56 "inc/pcdecoder.inl"
 case 1027: 
 var $5249=($5220>>>0)<27; //@line undefined "inc/pcdecoder.inl"
 if($5249){label=1028;break;}else{label=1030;break;} //@line undefined "inc/pcdecoder.inl"
 case 1028: 
 var $5251=(((26)-($5220))|0); //@line 59 "inc/pcdecoder.inl"
 var $5252=HEAP32[(($5147)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5253=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5252,$5251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1029;break; } else { label=1036;break; }
 case 1029: 
 var $5254=1<<$5251; //@line 60 "inc/pcdecoder.inl"
 var $5255=((($5254)+($5253))|0); //@line 60 "inc/pcdecoder.inl"
 var $5256=(HEAPF32[((tempDoublePtr)>>2)]=$5200,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5257=$5256^-1; //@line 38 "inc/pcmap.h"
 var $5258=$5257>>>5; //@line 39 "inc/pcmap.h"
 var $5259=$5257>>31; //@line 40 "inc/pcmap.h"
 var $5260=$5259>>>6; //@line 40 "inc/pcmap.h"
 var $5261=$5258^$5260; //@line 40 "inc/pcmap.h"
 var $5262=((($5261)-($5255))|0); //@line 62 "inc/pcdecoder.inl"
 var $5263=$5262>>>26; //@line 48 "inc/pcmap.h"
 var $5264=(((-$5263))|0); //@line 48 "inc/pcmap.h"
 var $5265=$5264>>>6; //@line 48 "inc/pcmap.h"
 var $5266=$5265^$5262; //@line 48 "inc/pcmap.h"
 var $5267=$5266<<5; //@line 50 "inc/pcmap.h"
 var $5268=$5267^-32; //@line 50 "inc/pcmap.h"
 var $_01069_in=$5268;label=1031;break; //@line 63 "inc/pcdecoder.inl"
 case 1030: 
 var $5270=(HEAPF32[((tempDoublePtr)>>2)]=$5200,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5271=$5270&-32; //@line 60 "inc/pcmap.h"
 var $_01069_in=$5271;label=1031;break; //@line 66 "inc/pcdecoder.inl"
 case 1031: 
 var $_01069_in;
 var $_01069=(HEAP32[((tempDoublePtr)>>2)]=$_01069_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $5272=(($_21078+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21078)>>2)]=$_01069; //@line 65 "src/read.cpp"
 var $_01070=1;var $f_i810_sroa_55_6=$f_i810_sroa_55_5;label=1032;break; //@line 22 "inc/front.h"
 case 1032: 
 var $f_i810_sroa_55_6;
 var $_01070;
 var $5274=((($f_i810_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5275=$f_i810_sroa_55_6&$storemerge_i_i_i815; //@line 23 "inc/front.h"
 var $5276=(($5139+($5275<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5276)>>2)]=$_01069; //@line 23 "inc/front.h"
 var $5277=((($_01070)-(1))|0); //@line 23 "inc/front.h"
 var $5278=($5277|0)==0; //@line 23 "inc/front.h"
 if($5278){label=1033;break;}else{var $_01070=$5277;var $f_i810_sroa_55_6=$5274;label=1032;break;} //@line 23 "inc/front.h"
 case 1033: 
 var $5279=((($x_i811_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21078=$5272;var $f_i810_sroa_55_5=$5274;var $x_i811_0=$5279;label=1020;break; //@line 49 "src/read.cpp"
 case 1034: 
 var $5281$0 = ___cxa_find_matching_catch(-1, -1); var $5281$1 = tempRet0;
 var $5282=$5281$0;
 var $5283=$5281$1;
 var $5284=($5106|0)==0;
 if($5284){var $_01079=$5282;var $_01080=$5283;label=1046;break;}else{label=1035;break;}
 case 1035: 
 _free($5106);
 var $_01079=$5282;var $_01080=$5283;label=1046;break;
 case 1036: 
 var $5287$0 = ___cxa_find_matching_catch(-1, -1); var $5287$1 = tempRet0;
 var $5288=$5287$0;
 var $5289=$5287$1;
 var $5290=($5131|0)==0; //@line 11 "inc/front.h"
 if($5290){var $_01079=$5288;var $_01080=$5289;label=1046;break;}else{label=1037;break;} //@line 11 "inc/front.h"
 case 1037: 
 _free($5131);
 var $_01079=$5288;var $_01080=$5289;label=1046;break; //@line 11 "inc/front.h"
 case 1038: 
 var $5292=((($y_i812_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11077=$_21078;var $f_i810_sroa_55_3=$f_i810_sroa_55_5;var $y_i812_0=$5292;label=1018;break; //@line 48 "src/read.cpp"
 case 1039: 
 var $5294=((($z_i813_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01076=$_11077;var $f_i810_sroa_55_1=$f_i810_sroa_55_3;var $z_i813_0=$5294;label=1016;break; //@line 47 "src/read.cpp"
 case 1040: 
 var $5296=($5110|0)==0; //@line 69 "src/read.cpp"
 if($5296){label=1042;break;}else{label=1041;break;} //@line 69 "src/read.cpp"
 case 1041: 
 _free($5110);
 label=1042;break; //@line 69 "src/read.cpp"
 case 1042: 
 var $5298=HEAP32[(($rm_i808)>>2)]; //@line 70 "src/read.cpp"
 var $5299=($5298|0)==0; //@line 70 "src/read.cpp"
 if($5299){label=1044;break;}else{label=1043;break;} //@line 70 "src/read.cpp"
 case 1043: 
 var $5301=$5298; //@line 70 "src/read.cpp"
 var $5302=HEAP32[(($5301)>>2)]; //@line 70 "src/read.cpp"
 var $5303=(($5302+4)|0); //@line 70 "src/read.cpp"
 var $5304=HEAP32[(($5303)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5304]($5298); //@line 70 "src/read.cpp"
 label=1044;break; //@line 70 "src/read.cpp"
 case 1044: 
 var $5306=($5131|0)==0; //@line 11 "inc/front.h"
 if($5306){label=1257;break;}else{label=1045;break;} //@line 11 "inc/front.h"
 case 1045: 
 _free($5131);
 label=1257;break; //@line 11 "inc/front.h"
 case 1046: 
 var $_01080;
 var $_01079;
 var $5307$0=$_01079;
 var $5307$1=0;
 var $5308$0=$5307$0;
 var $5308$1=$_01080;
 ___resumeException($5308$0) //@line 71 "src/read.cpp"
 case 1047: 
 var $5310=HEAP32[(($3)>>2)]; //@line 193 "src/read.cpp"
 var $5311=HEAP32[(($4)>>2)]; //@line 193 "src/read.cpp"
 var $5312=HEAP32[(($5)>>2)]; //@line 193 "src/read.cpp"
 var $5313=HEAP32[(($6)>>2)]; //@line 193 "src/read.cpp"
 var $$etemp$130$0=4;
 var $$etemp$130$1=0;

 var $5314=__Znwj(48); //@line 41 "src/read.cpp"
 var $5315=$5314; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5315,0,57,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1048;break; } else { label=1076;break; } //@line 41 "src/read.cpp"
 case 1048: 
 var $5317=$5314; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i844)>>2)]=$5317; //@line 71 "src/read.cpp"
 var $5318=__Znwj(12); //@line 42 "src/read.cpp"
 var $5319=(($5318+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5320=$5319; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5320)>>2)]=$5310; //@line 34 "inc/pcdecoder.inl"
 var $5321=(($5318+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5322=$5321; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5322)>>2)]=$rm_i844; //@line 34 "inc/pcdecoder.inl"
 var $5323=((($5311)+(1))|0); //@line 10 "inc/front.h"
 var $5324=((($5312)+(1))|0); //@line 10 "inc/front.h"
 var $5325=(Math_imul($5323,$5324)|0); //@line 10 "inc/front.h"
 var $5326=((($5311)+(2))|0); //@line 9 "inc/front.h"
 var $5327=((($5326)+($5325))|0); //@line 9 "inc/front.h"
 var $5328=((($5327)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i851=$5328;label=1049;break; //@line 45 "inc/front.h"
 case 1049: 
 var $storemerge_i_i_i851;
 var $5330=((($storemerge_i_i_i851)+(1))|0); //@line 45 "inc/front.h"
 var $5331=$storemerge_i_i_i851&$5330; //@line 45 "inc/front.h"
 var $5332=($5331|0)==0; //@line 45 "inc/front.h"
 if($5332){label=1051;break;}else{label=1050;break;} //@line 45 "inc/front.h"
 case 1050: 
 var $5334=$storemerge_i_i_i851|$5330; //@line 45 "inc/front.h"
 var $storemerge_i_i_i851=$5334;label=1049;break; //@line 45 "inc/front.h"
 case 1051: 
 var $5335$0=_llvm_umul_with_overflow_i32($5330,4);
 var $5335$1=tempRet0;
 var $5336=$5335$1;
 var $5337=$5335$0;
 var $5338=($5336?-1:$5337); //@line 9 "inc/front.h"
 var $5339=(function() { try { __THREW__ = 0; return __Znwj($5338) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1055;break; } else { label=1052;break; }
 case 1052: 
 var $5341$0 = ___cxa_find_matching_catch(-1, -1); var $5341$1 = tempRet0;
 var $5342=$5341$1;
 var $5343=($5342|0)<0;
 if($5343){label=1053;break;}else{label=1054;break;}
 case 1053: 
 var $5345=$5341$0;
 ___cxa_call_unexpected($5345);
 throw "Reached an unreachable!";
 case 1054: 
 ___resumeException($5341$0)
 case 1055: 
 var $5347=$5339; //@line 9 "inc/front.h"
 var $_01063=$5325;var $f_i846_sroa_55_0=0;label=1056;break; //@line 22 "inc/front.h"
 case 1056: 
 var $f_i846_sroa_55_0;
 var $_01063;
 var $5349=((($f_i846_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5350=$f_i846_sroa_55_0&$storemerge_i_i_i851; //@line 23 "inc/front.h"
 var $5351=(($5347+($5350<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5351)>>2)]=0; //@line 23 "inc/front.h"
 var $5352=((($_01063)-(1))|0); //@line 23 "inc/front.h"
 var $5353=($5352|0)==0; //@line 23 "inc/front.h"
 if($5353){label=1057;break;}else{var $_01063=$5352;var $f_i846_sroa_55_0=$5349;label=1056;break;} //@line 23 "inc/front.h"
 case 1057: 
 var $5354=(($5318+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5355=$5354; //@line 50 "inc/pcdecoder.inl"
 var $5356=(($5318+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5357=$5356; //@line 50 "inc/pcdecoder.inl"
 var $_01064=$_01012;var $f_i846_sroa_55_1=$5349;var $z_i849_0=0;label=1058;break; //@line 47 "src/read.cpp"
 case 1058: 
 var $z_i849_0;
 var $f_i846_sroa_55_1;
 var $_01064;
 var $5359=($z_i849_0>>>0)<($5313>>>0); //@line 47 "src/read.cpp"
 if($5359){var $_01062=$5323;var $f_i846_sroa_55_2=$f_i846_sroa_55_1;label=1059;break;}else{label=1082;break;} //@line 47 "src/read.cpp"
 case 1059: 
 var $f_i846_sroa_55_2;
 var $_01062;
 var $5361=((($f_i846_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5362=$f_i846_sroa_55_2&$storemerge_i_i_i851; //@line 23 "inc/front.h"
 var $5363=(($5347+($5362<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5363)>>2)]=0; //@line 23 "inc/front.h"
 var $5364=((($_01062)-(1))|0); //@line 23 "inc/front.h"
 var $5365=($5364|0)==0; //@line 23 "inc/front.h"
 if($5365){var $_11065=$_01064;var $f_i846_sroa_55_3=$5361;var $y_i848_0=0;label=1060;break;}else{var $_01062=$5364;var $f_i846_sroa_55_2=$5361;label=1059;break;} //@line 23 "inc/front.h"
 case 1060: 
 var $y_i848_0;
 var $f_i846_sroa_55_3;
 var $_11065;
 var $5366=($y_i848_0>>>0)<($5312>>>0); //@line 48 "src/read.cpp"
 if($5366){var $_01061=1;var $f_i846_sroa_55_4=$f_i846_sroa_55_3;label=1061;break;}else{label=1081;break;} //@line 48 "src/read.cpp"
 case 1061: 
 var $f_i846_sroa_55_4;
 var $_01061;
 var $5368=((($f_i846_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5369=$f_i846_sroa_55_4&$storemerge_i_i_i851; //@line 23 "inc/front.h"
 var $5370=(($5347+($5369<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5370)>>2)]=0; //@line 23 "inc/front.h"
 var $5371=((($_01061)-(1))|0); //@line 23 "inc/front.h"
 var $5372=($5371|0)==0; //@line 23 "inc/front.h"
 if($5372){var $_21066=$_11065;var $f_i846_sroa_55_5=$5368;var $x_i847_0=0;label=1062;break;}else{var $_01061=$5371;var $f_i846_sroa_55_4=$5368;label=1061;break;} //@line 23 "inc/front.h"
 case 1062: 
 var $x_i847_0;
 var $f_i846_sroa_55_5;
 var $_21066;
 var $5373=($x_i847_0>>>0)<($5311>>>0); //@line 49 "src/read.cpp"
 if($5373){label=1063;break;}else{label=1080;break;} //@line 49 "src/read.cpp"
 case 1063: 
 var $5375=((($f_i846_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5376=$5375&$storemerge_i_i_i851; //@line 16 "inc/front.h"
 var $5377=(($5347+($5376<<2))|0); //@line 16 "inc/front.h"
 var $5378=HEAPF32[(($5377)>>2)]; //@line 59 "src/read.cpp"
 var $5379=((($f_i846_sroa_55_5)-($5323))|0); //@line 16 "inc/front.h"
 var $5380=((($5379)-($5325))|0); //@line 16 "inc/front.h"
 var $5381=$5380&$storemerge_i_i_i851; //@line 16 "inc/front.h"
 var $5382=(($5347+($5381<<2))|0); //@line 16 "inc/front.h"
 var $5383=HEAPF32[(($5382)>>2)]; //@line 59 "src/read.cpp"
 var $5384=$5379&$storemerge_i_i_i851; //@line 16 "inc/front.h"
 var $5385=(($5347+($5384<<2))|0); //@line 16 "inc/front.h"
 var $5386=HEAPF32[(($5385)>>2)]; //@line 60 "src/read.cpp"
 var $5387=((($5375)-($5325))|0); //@line 16 "inc/front.h"
 var $5388=$5387&$storemerge_i_i_i851; //@line 16 "inc/front.h"
 var $5389=(($5347+($5388<<2))|0); //@line 16 "inc/front.h"
 var $5390=HEAPF32[(($5389)>>2)]; //@line 60 "src/read.cpp"
 var $5391=((($f_i846_sroa_55_5)-($5325))|0); //@line 16 "inc/front.h"
 var $5392=$5391&$storemerge_i_i_i851; //@line 16 "inc/front.h"
 var $5393=(($5347+($5392<<2))|0); //@line 16 "inc/front.h"
 var $5394=HEAPF32[(($5393)>>2)]; //@line 61 "src/read.cpp"
 var $5395=((($5375)-($5323))|0); //@line 16 "inc/front.h"
 var $5396=$5395&$storemerge_i_i_i851; //@line 16 "inc/front.h"
 var $5397=(($5347+($5396<<2))|0); //@line 16 "inc/front.h"
 var $5398=HEAPF32[(($5397)>>2)]; //@line 61 "src/read.cpp"
 var $5399=((($5395)-($5325))|0); //@line 16 "inc/front.h"
 var $5400=$5399&$storemerge_i_i_i851; //@line 16 "inc/front.h"
 var $5401=(($5347+($5400<<2))|0); //@line 16 "inc/front.h"
 var $5402=($5378)-($5383); //@line 59 "src/read.cpp"
 var $5403=($5402)+($5386); //@line 60 "src/read.cpp"
 var $5404=($5403)-($5390); //@line 60 "src/read.cpp"
 var $5405=($5404)+($5394); //@line 61 "src/read.cpp"
 var $5406=($5405)-($5398); //@line 61 "src/read.cpp"
 var $5407=HEAPF32[(($5401)>>2)]; //@line 62 "src/read.cpp"
 var $5408=($5406)+($5407); //@line 62 "src/read.cpp"
 var $5409=HEAP32[(($5355)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5410=HEAP32[(($5357)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5411=HEAP32[(($5410)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$131$0=4;
 var $$etemp$131$1=0;

 var $$etemp$132$0=4;
 var $$etemp$132$1=0;

 var $5412=$5411; //@line 25 "src/rcdecoder.cpp"
 var $5413=HEAP32[(($5412)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5414=(($5413+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5415=HEAP32[(($5414)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5416=(($5409+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5415]($5411,$5416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1064;break; } else { label=1078;break; }
 case 1064: 
 var $5417=(($5409+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5418=HEAP32[(($5417)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5419=(($5409+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5420=HEAP32[(($5419)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5421=((($5418)-($5420))|0); //@line 26 "src/rcdecoder.cpp"
 var $5422=HEAP32[(($5416)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5423=(((($5421>>>0))/(($5422>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i838)>>2)]=$5423; //@line 26 "src/rcdecoder.cpp"
 var $5424=$5411; //@line 27 "src/rcdecoder.cpp"
 var $5425=HEAP32[(($5424)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5426=(($5425+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5427=HEAP32[(($5426)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5428=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5427]($5411,$l_i_i_i838,$r_i_i_i839) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1065;break; } else { label=1078;break; }
 case 1065: 
 var $5429=HEAP32[(($5416)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5430=HEAP32[(($l_i_i_i838)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5431=(Math_imul($5429,$5430)|0); //@line 28 "src/rcdecoder.cpp"
 var $5432=HEAP32[(($5419)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5433=((($5432)+($5431))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5419)>>2)]=$5433; //@line 28 "src/rcdecoder.cpp"
 var $5434=HEAP32[(($r_i_i_i839)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5435=(Math_imul($5429,$5434)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5416)>>2)]=$5435; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5409) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1066;break; } else { label=1078;break; }
 case 1066: 
 var $$etemp$133$0=4;
 var $$etemp$133$1=0;

 var $$etemp$134$0=4;
 var $$etemp$134$1=0;

 var $5436=($5428>>>0)>28; //@line 51 "inc/pcdecoder.inl"
 if($5436){label=1067;break;}else{label=1069;break;} //@line 51 "inc/pcdecoder.inl"
 case 1067: 
 var $5438=((($5428)-(29))|0); //@line 52 "inc/pcdecoder.inl"
 var $5439=HEAP32[(($5355)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5440=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5439,$5438) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1068;break; } else { label=1078;break; }
 case 1068: 
 var $5441=1<<$5438; //@line 53 "inc/pcdecoder.inl"
 var $5442=((($5441)+($5440))|0); //@line 53 "inc/pcdecoder.inl"
 var $5443=(HEAPF32[((tempDoublePtr)>>2)]=$5408,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5444=$5443^-1; //@line 38 "inc/pcmap.h"
 var $5445=$5444>>>4; //@line 39 "inc/pcmap.h"
 var $5446=$5444>>31; //@line 40 "inc/pcmap.h"
 var $5447=$5446>>>5; //@line 40 "inc/pcmap.h"
 var $5448=$5445^$5447; //@line 40 "inc/pcmap.h"
 var $5449=((($5448)+($5442))|0); //@line 55 "inc/pcdecoder.inl"
 var $5450=$5449>>>27; //@line 48 "inc/pcmap.h"
 var $5451=(((-$5450))|0); //@line 48 "inc/pcmap.h"
 var $5452=$5451>>>5; //@line 48 "inc/pcmap.h"
 var $5453=$5452^$5449; //@line 48 "inc/pcmap.h"
 var $5454=$5453<<4; //@line 50 "inc/pcmap.h"
 var $5455=$5454^-16; //@line 50 "inc/pcmap.h"
 var $_01059_in=$5455;label=1073;break; //@line 56 "inc/pcdecoder.inl"
 case 1069: 
 var $5457=($5428>>>0)<28; //@line undefined "inc/pcdecoder.inl"
 if($5457){label=1070;break;}else{label=1072;break;} //@line undefined "inc/pcdecoder.inl"
 case 1070: 
 var $5459=(((27)-($5428))|0); //@line 59 "inc/pcdecoder.inl"
 var $5460=HEAP32[(($5355)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5461=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5460,$5459) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1071;break; } else { label=1078;break; }
 case 1071: 
 var $5462=1<<$5459; //@line 60 "inc/pcdecoder.inl"
 var $5463=((($5462)+($5461))|0); //@line 60 "inc/pcdecoder.inl"
 var $5464=(HEAPF32[((tempDoublePtr)>>2)]=$5408,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5465=$5464^-1; //@line 38 "inc/pcmap.h"
 var $5466=$5465>>>4; //@line 39 "inc/pcmap.h"
 var $5467=$5465>>31; //@line 40 "inc/pcmap.h"
 var $5468=$5467>>>5; //@line 40 "inc/pcmap.h"
 var $5469=$5466^$5468; //@line 40 "inc/pcmap.h"
 var $5470=((($5469)-($5463))|0); //@line 62 "inc/pcdecoder.inl"
 var $5471=$5470>>>27; //@line 48 "inc/pcmap.h"
 var $5472=(((-$5471))|0); //@line 48 "inc/pcmap.h"
 var $5473=$5472>>>5; //@line 48 "inc/pcmap.h"
 var $5474=$5473^$5470; //@line 48 "inc/pcmap.h"
 var $5475=$5474<<4; //@line 50 "inc/pcmap.h"
 var $5476=$5475^-16; //@line 50 "inc/pcmap.h"
 var $_01059_in=$5476;label=1073;break; //@line 63 "inc/pcdecoder.inl"
 case 1072: 
 var $5478=(HEAPF32[((tempDoublePtr)>>2)]=$5408,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5479=$5478&-16; //@line 60 "inc/pcmap.h"
 var $_01059_in=$5479;label=1073;break; //@line 66 "inc/pcdecoder.inl"
 case 1073: 
 var $_01059_in;
 var $_01059=(HEAP32[((tempDoublePtr)>>2)]=$_01059_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $5480=(($_21066+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21066)>>2)]=$_01059; //@line 65 "src/read.cpp"
 var $_01060=1;var $f_i846_sroa_55_6=$f_i846_sroa_55_5;label=1074;break; //@line 22 "inc/front.h"
 case 1074: 
 var $f_i846_sroa_55_6;
 var $_01060;
 var $5482=((($f_i846_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5483=$f_i846_sroa_55_6&$storemerge_i_i_i851; //@line 23 "inc/front.h"
 var $5484=(($5347+($5483<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5484)>>2)]=$_01059; //@line 23 "inc/front.h"
 var $5485=((($_01060)-(1))|0); //@line 23 "inc/front.h"
 var $5486=($5485|0)==0; //@line 23 "inc/front.h"
 if($5486){label=1075;break;}else{var $_01060=$5485;var $f_i846_sroa_55_6=$5482;label=1074;break;} //@line 23 "inc/front.h"
 case 1075: 
 var $5487=((($x_i847_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21066=$5480;var $f_i846_sroa_55_5=$5482;var $x_i847_0=$5487;label=1062;break; //@line 49 "src/read.cpp"
 case 1076: 
 var $5489$0 = ___cxa_find_matching_catch(-1, -1); var $5489$1 = tempRet0;
 var $5490=$5489$0;
 var $5491=$5489$1;
 var $5492=($5314|0)==0;
 if($5492){var $_01067=$5490;var $_01068=$5491;label=1088;break;}else{label=1077;break;}
 case 1077: 
 _free($5314);
 var $_01067=$5490;var $_01068=$5491;label=1088;break;
 case 1078: 
 var $5495$0 = ___cxa_find_matching_catch(-1, -1); var $5495$1 = tempRet0;
 var $5496=$5495$0;
 var $5497=$5495$1;
 var $5498=($5339|0)==0; //@line 11 "inc/front.h"
 if($5498){var $_01067=$5496;var $_01068=$5497;label=1088;break;}else{label=1079;break;} //@line 11 "inc/front.h"
 case 1079: 
 _free($5339);
 var $_01067=$5496;var $_01068=$5497;label=1088;break; //@line 11 "inc/front.h"
 case 1080: 
 var $5500=((($y_i848_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11065=$_21066;var $f_i846_sroa_55_3=$f_i846_sroa_55_5;var $y_i848_0=$5500;label=1060;break; //@line 48 "src/read.cpp"
 case 1081: 
 var $5502=((($z_i849_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01064=$_11065;var $f_i846_sroa_55_1=$f_i846_sroa_55_3;var $z_i849_0=$5502;label=1058;break; //@line 47 "src/read.cpp"
 case 1082: 
 var $5504=($5318|0)==0; //@line 69 "src/read.cpp"
 if($5504){label=1084;break;}else{label=1083;break;} //@line 69 "src/read.cpp"
 case 1083: 
 _free($5318);
 label=1084;break; //@line 69 "src/read.cpp"
 case 1084: 
 var $5506=HEAP32[(($rm_i844)>>2)]; //@line 70 "src/read.cpp"
 var $5507=($5506|0)==0; //@line 70 "src/read.cpp"
 if($5507){label=1086;break;}else{label=1085;break;} //@line 70 "src/read.cpp"
 case 1085: 
 var $5509=$5506; //@line 70 "src/read.cpp"
 var $5510=HEAP32[(($5509)>>2)]; //@line 70 "src/read.cpp"
 var $5511=(($5510+4)|0); //@line 70 "src/read.cpp"
 var $5512=HEAP32[(($5511)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5512]($5506); //@line 70 "src/read.cpp"
 label=1086;break; //@line 70 "src/read.cpp"
 case 1086: 
 var $5514=($5339|0)==0; //@line 11 "inc/front.h"
 if($5514){label=1257;break;}else{label=1087;break;} //@line 11 "inc/front.h"
 case 1087: 
 _free($5339);
 label=1257;break; //@line 11 "inc/front.h"
 case 1088: 
 var $_01068;
 var $_01067;
 var $5515$0=$_01067;
 var $5515$1=0;
 var $5516$0=$5515$0;
 var $5516$1=$_01068;
 ___resumeException($5516$0) //@line 71 "src/read.cpp"
 case 1089: 
 var $5518=HEAP32[(($3)>>2)]; //@line 194 "src/read.cpp"
 var $5519=HEAP32[(($4)>>2)]; //@line 194 "src/read.cpp"
 var $5520=HEAP32[(($5)>>2)]; //@line 194 "src/read.cpp"
 var $5521=HEAP32[(($6)>>2)]; //@line 194 "src/read.cpp"
 var $$etemp$135$0=4;
 var $$etemp$135$1=0;

 var $5522=__Znwj(48); //@line 41 "src/read.cpp"
 var $5523=$5522; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5523,0,59,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1090;break; } else { label=1118;break; } //@line 41 "src/read.cpp"
 case 1090: 
 var $5525=$5522; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i880)>>2)]=$5525; //@line 71 "src/read.cpp"
 var $5526=__Znwj(12); //@line 42 "src/read.cpp"
 var $5527=(($5526+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5528=$5527; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5528)>>2)]=$5518; //@line 34 "inc/pcdecoder.inl"
 var $5529=(($5526+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5530=$5529; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5530)>>2)]=$rm_i880; //@line 34 "inc/pcdecoder.inl"
 var $5531=((($5519)+(1))|0); //@line 10 "inc/front.h"
 var $5532=((($5520)+(1))|0); //@line 10 "inc/front.h"
 var $5533=(Math_imul($5531,$5532)|0); //@line 10 "inc/front.h"
 var $5534=((($5519)+(2))|0); //@line 9 "inc/front.h"
 var $5535=((($5534)+($5533))|0); //@line 9 "inc/front.h"
 var $5536=((($5535)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i887=$5536;label=1091;break; //@line 45 "inc/front.h"
 case 1091: 
 var $storemerge_i_i_i887;
 var $5538=((($storemerge_i_i_i887)+(1))|0); //@line 45 "inc/front.h"
 var $5539=$storemerge_i_i_i887&$5538; //@line 45 "inc/front.h"
 var $5540=($5539|0)==0; //@line 45 "inc/front.h"
 if($5540){label=1093;break;}else{label=1092;break;} //@line 45 "inc/front.h"
 case 1092: 
 var $5542=$storemerge_i_i_i887|$5538; //@line 45 "inc/front.h"
 var $storemerge_i_i_i887=$5542;label=1091;break; //@line 45 "inc/front.h"
 case 1093: 
 var $5543$0=_llvm_umul_with_overflow_i32($5538,4);
 var $5543$1=tempRet0;
 var $5544=$5543$1;
 var $5545=$5543$0;
 var $5546=($5544?-1:$5545); //@line 9 "inc/front.h"
 var $5547=(function() { try { __THREW__ = 0; return __Znwj($5546) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1097;break; } else { label=1094;break; }
 case 1094: 
 var $5549$0 = ___cxa_find_matching_catch(-1, -1); var $5549$1 = tempRet0;
 var $5550=$5549$1;
 var $5551=($5550|0)<0;
 if($5551){label=1095;break;}else{label=1096;break;}
 case 1095: 
 var $5553=$5549$0;
 ___cxa_call_unexpected($5553);
 throw "Reached an unreachable!";
 case 1096: 
 ___resumeException($5549$0)
 case 1097: 
 var $5555=$5547; //@line 9 "inc/front.h"
 var $_01052=$5533;var $f_i882_sroa_55_0=0;label=1098;break; //@line 22 "inc/front.h"
 case 1098: 
 var $f_i882_sroa_55_0;
 var $_01052;
 var $5557=((($f_i882_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5558=$f_i882_sroa_55_0&$storemerge_i_i_i887; //@line 23 "inc/front.h"
 var $5559=(($5555+($5558<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5559)>>2)]=0; //@line 23 "inc/front.h"
 var $5560=((($_01052)-(1))|0); //@line 23 "inc/front.h"
 var $5561=($5560|0)==0; //@line 23 "inc/front.h"
 if($5561){label=1099;break;}else{var $_01052=$5560;var $f_i882_sroa_55_0=$5557;label=1098;break;} //@line 23 "inc/front.h"
 case 1099: 
 var $5562=(($5526+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5563=$5562; //@line 50 "inc/pcdecoder.inl"
 var $5564=(($5526+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5565=$5564; //@line 50 "inc/pcdecoder.inl"
 var $_01053=$_01012;var $f_i882_sroa_55_1=$5557;var $z_i885_0=0;label=1100;break; //@line 47 "src/read.cpp"
 case 1100: 
 var $z_i885_0;
 var $f_i882_sroa_55_1;
 var $_01053;
 var $5567=($z_i885_0>>>0)<($5521>>>0); //@line 47 "src/read.cpp"
 if($5567){var $_01051=$5531;var $f_i882_sroa_55_2=$f_i882_sroa_55_1;label=1101;break;}else{label=1124;break;} //@line 47 "src/read.cpp"
 case 1101: 
 var $f_i882_sroa_55_2;
 var $_01051;
 var $5569=((($f_i882_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5570=$f_i882_sroa_55_2&$storemerge_i_i_i887; //@line 23 "inc/front.h"
 var $5571=(($5555+($5570<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5571)>>2)]=0; //@line 23 "inc/front.h"
 var $5572=((($_01051)-(1))|0); //@line 23 "inc/front.h"
 var $5573=($5572|0)==0; //@line 23 "inc/front.h"
 if($5573){var $_11054=$_01053;var $f_i882_sroa_55_3=$5569;var $y_i884_0=0;label=1102;break;}else{var $_01051=$5572;var $f_i882_sroa_55_2=$5569;label=1101;break;} //@line 23 "inc/front.h"
 case 1102: 
 var $y_i884_0;
 var $f_i882_sroa_55_3;
 var $_11054;
 var $5574=($y_i884_0>>>0)<($5520>>>0); //@line 48 "src/read.cpp"
 if($5574){var $_01050=1;var $f_i882_sroa_55_4=$f_i882_sroa_55_3;label=1103;break;}else{label=1123;break;} //@line 48 "src/read.cpp"
 case 1103: 
 var $f_i882_sroa_55_4;
 var $_01050;
 var $5576=((($f_i882_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5577=$f_i882_sroa_55_4&$storemerge_i_i_i887; //@line 23 "inc/front.h"
 var $5578=(($5555+($5577<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5578)>>2)]=0; //@line 23 "inc/front.h"
 var $5579=((($_01050)-(1))|0); //@line 23 "inc/front.h"
 var $5580=($5579|0)==0; //@line 23 "inc/front.h"
 if($5580){var $_21055=$_11054;var $f_i882_sroa_55_5=$5576;var $x_i883_0=0;label=1104;break;}else{var $_01050=$5579;var $f_i882_sroa_55_4=$5576;label=1103;break;} //@line 23 "inc/front.h"
 case 1104: 
 var $x_i883_0;
 var $f_i882_sroa_55_5;
 var $_21055;
 var $5581=($x_i883_0>>>0)<($5519>>>0); //@line 49 "src/read.cpp"
 if($5581){label=1105;break;}else{label=1122;break;} //@line 49 "src/read.cpp"
 case 1105: 
 var $5583=((($f_i882_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5584=$5583&$storemerge_i_i_i887; //@line 16 "inc/front.h"
 var $5585=(($5555+($5584<<2))|0); //@line 16 "inc/front.h"
 var $5586=HEAPF32[(($5585)>>2)]; //@line 59 "src/read.cpp"
 var $5587=((($f_i882_sroa_55_5)-($5531))|0); //@line 16 "inc/front.h"
 var $5588=((($5587)-($5533))|0); //@line 16 "inc/front.h"
 var $5589=$5588&$storemerge_i_i_i887; //@line 16 "inc/front.h"
 var $5590=(($5555+($5589<<2))|0); //@line 16 "inc/front.h"
 var $5591=HEAPF32[(($5590)>>2)]; //@line 59 "src/read.cpp"
 var $5592=$5587&$storemerge_i_i_i887; //@line 16 "inc/front.h"
 var $5593=(($5555+($5592<<2))|0); //@line 16 "inc/front.h"
 var $5594=HEAPF32[(($5593)>>2)]; //@line 60 "src/read.cpp"
 var $5595=((($5583)-($5533))|0); //@line 16 "inc/front.h"
 var $5596=$5595&$storemerge_i_i_i887; //@line 16 "inc/front.h"
 var $5597=(($5555+($5596<<2))|0); //@line 16 "inc/front.h"
 var $5598=HEAPF32[(($5597)>>2)]; //@line 60 "src/read.cpp"
 var $5599=((($f_i882_sroa_55_5)-($5533))|0); //@line 16 "inc/front.h"
 var $5600=$5599&$storemerge_i_i_i887; //@line 16 "inc/front.h"
 var $5601=(($5555+($5600<<2))|0); //@line 16 "inc/front.h"
 var $5602=HEAPF32[(($5601)>>2)]; //@line 61 "src/read.cpp"
 var $5603=((($5583)-($5531))|0); //@line 16 "inc/front.h"
 var $5604=$5603&$storemerge_i_i_i887; //@line 16 "inc/front.h"
 var $5605=(($5555+($5604<<2))|0); //@line 16 "inc/front.h"
 var $5606=HEAPF32[(($5605)>>2)]; //@line 61 "src/read.cpp"
 var $5607=((($5603)-($5533))|0); //@line 16 "inc/front.h"
 var $5608=$5607&$storemerge_i_i_i887; //@line 16 "inc/front.h"
 var $5609=(($5555+($5608<<2))|0); //@line 16 "inc/front.h"
 var $5610=($5586)-($5591); //@line 59 "src/read.cpp"
 var $5611=($5610)+($5594); //@line 60 "src/read.cpp"
 var $5612=($5611)-($5598); //@line 60 "src/read.cpp"
 var $5613=($5612)+($5602); //@line 61 "src/read.cpp"
 var $5614=($5613)-($5606); //@line 61 "src/read.cpp"
 var $5615=HEAPF32[(($5609)>>2)]; //@line 62 "src/read.cpp"
 var $5616=($5614)+($5615); //@line 62 "src/read.cpp"
 var $5617=HEAP32[(($5563)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5618=HEAP32[(($5565)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5619=HEAP32[(($5618)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$136$0=4;
 var $$etemp$136$1=0;

 var $$etemp$137$0=4;
 var $$etemp$137$1=0;

 var $5620=$5619; //@line 25 "src/rcdecoder.cpp"
 var $5621=HEAP32[(($5620)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5622=(($5621+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5623=HEAP32[(($5622)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5624=(($5617+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5623]($5619,$5624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1106;break; } else { label=1120;break; }
 case 1106: 
 var $5625=(($5617+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5626=HEAP32[(($5625)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5627=(($5617+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5628=HEAP32[(($5627)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5629=((($5626)-($5628))|0); //@line 26 "src/rcdecoder.cpp"
 var $5630=HEAP32[(($5624)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5631=(((($5629>>>0))/(($5630>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i874)>>2)]=$5631; //@line 26 "src/rcdecoder.cpp"
 var $5632=$5619; //@line 27 "src/rcdecoder.cpp"
 var $5633=HEAP32[(($5632)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5634=(($5633+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5635=HEAP32[(($5634)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5636=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5635]($5619,$l_i_i_i874,$r_i_i_i875) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1107;break; } else { label=1120;break; }
 case 1107: 
 var $5637=HEAP32[(($5624)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5638=HEAP32[(($l_i_i_i874)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5639=(Math_imul($5637,$5638)|0); //@line 28 "src/rcdecoder.cpp"
 var $5640=HEAP32[(($5627)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5641=((($5640)+($5639))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5627)>>2)]=$5641; //@line 28 "src/rcdecoder.cpp"
 var $5642=HEAP32[(($r_i_i_i875)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5643=(Math_imul($5637,$5642)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5624)>>2)]=$5643; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5617) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1108;break; } else { label=1120;break; }
 case 1108: 
 var $$etemp$138$0=4;
 var $$etemp$138$1=0;

 var $$etemp$139$0=4;
 var $$etemp$139$1=0;

 var $5644=($5636>>>0)>29; //@line 51 "inc/pcdecoder.inl"
 if($5644){label=1109;break;}else{label=1111;break;} //@line 51 "inc/pcdecoder.inl"
 case 1109: 
 var $5646=((($5636)-(30))|0); //@line 52 "inc/pcdecoder.inl"
 var $5647=HEAP32[(($5563)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5648=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5647,$5646) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1110;break; } else { label=1120;break; }
 case 1110: 
 var $5649=1<<$5646; //@line 53 "inc/pcdecoder.inl"
 var $5650=((($5649)+($5648))|0); //@line 53 "inc/pcdecoder.inl"
 var $5651=(HEAPF32[((tempDoublePtr)>>2)]=$5616,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5652=$5651^-1; //@line 38 "inc/pcmap.h"
 var $5653=$5652>>>3; //@line 39 "inc/pcmap.h"
 var $5654=$5652>>31; //@line 40 "inc/pcmap.h"
 var $5655=$5654>>>4; //@line 40 "inc/pcmap.h"
 var $5656=$5653^$5655; //@line 40 "inc/pcmap.h"
 var $5657=((($5656)+($5650))|0); //@line 55 "inc/pcdecoder.inl"
 var $5658=$5657>>>28; //@line 48 "inc/pcmap.h"
 var $5659=(((-$5658))|0); //@line 48 "inc/pcmap.h"
 var $5660=$5659>>>4; //@line 48 "inc/pcmap.h"
 var $5661=$5660^$5657; //@line 48 "inc/pcmap.h"
 var $5662=$5661<<3; //@line 50 "inc/pcmap.h"
 var $5663=$5662^-8; //@line 50 "inc/pcmap.h"
 var $_01048_in=$5663;label=1115;break; //@line 56 "inc/pcdecoder.inl"
 case 1111: 
 var $5665=($5636>>>0)<29; //@line undefined "inc/pcdecoder.inl"
 if($5665){label=1112;break;}else{label=1114;break;} //@line undefined "inc/pcdecoder.inl"
 case 1112: 
 var $5667=(((28)-($5636))|0); //@line 59 "inc/pcdecoder.inl"
 var $5668=HEAP32[(($5563)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5669=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5668,$5667) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1113;break; } else { label=1120;break; }
 case 1113: 
 var $5670=1<<$5667; //@line 60 "inc/pcdecoder.inl"
 var $5671=((($5670)+($5669))|0); //@line 60 "inc/pcdecoder.inl"
 var $5672=(HEAPF32[((tempDoublePtr)>>2)]=$5616,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5673=$5672^-1; //@line 38 "inc/pcmap.h"
 var $5674=$5673>>>3; //@line 39 "inc/pcmap.h"
 var $5675=$5673>>31; //@line 40 "inc/pcmap.h"
 var $5676=$5675>>>4; //@line 40 "inc/pcmap.h"
 var $5677=$5674^$5676; //@line 40 "inc/pcmap.h"
 var $5678=((($5677)-($5671))|0); //@line 62 "inc/pcdecoder.inl"
 var $5679=$5678>>>28; //@line 48 "inc/pcmap.h"
 var $5680=(((-$5679))|0); //@line 48 "inc/pcmap.h"
 var $5681=$5680>>>4; //@line 48 "inc/pcmap.h"
 var $5682=$5681^$5678; //@line 48 "inc/pcmap.h"
 var $5683=$5682<<3; //@line 50 "inc/pcmap.h"
 var $5684=$5683^-8; //@line 50 "inc/pcmap.h"
 var $_01048_in=$5684;label=1115;break; //@line 63 "inc/pcdecoder.inl"
 case 1114: 
 var $5686=(HEAPF32[((tempDoublePtr)>>2)]=$5616,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5687=$5686&-8; //@line 60 "inc/pcmap.h"
 var $_01048_in=$5687;label=1115;break; //@line 66 "inc/pcdecoder.inl"
 case 1115: 
 var $_01048_in;
 var $_01048=(HEAP32[((tempDoublePtr)>>2)]=$_01048_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $5688=(($_21055+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21055)>>2)]=$_01048; //@line 65 "src/read.cpp"
 var $_01049=1;var $f_i882_sroa_55_6=$f_i882_sroa_55_5;label=1116;break; //@line 22 "inc/front.h"
 case 1116: 
 var $f_i882_sroa_55_6;
 var $_01049;
 var $5690=((($f_i882_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5691=$f_i882_sroa_55_6&$storemerge_i_i_i887; //@line 23 "inc/front.h"
 var $5692=(($5555+($5691<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5692)>>2)]=$_01048; //@line 23 "inc/front.h"
 var $5693=((($_01049)-(1))|0); //@line 23 "inc/front.h"
 var $5694=($5693|0)==0; //@line 23 "inc/front.h"
 if($5694){label=1117;break;}else{var $_01049=$5693;var $f_i882_sroa_55_6=$5690;label=1116;break;} //@line 23 "inc/front.h"
 case 1117: 
 var $5695=((($x_i883_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21055=$5688;var $f_i882_sroa_55_5=$5690;var $x_i883_0=$5695;label=1104;break; //@line 49 "src/read.cpp"
 case 1118: 
 var $5697$0 = ___cxa_find_matching_catch(-1, -1); var $5697$1 = tempRet0;
 var $5698=$5697$0;
 var $5699=$5697$1;
 var $5700=($5522|0)==0;
 if($5700){var $_01057=$5698;var $_01058=$5699;label=1130;break;}else{label=1119;break;}
 case 1119: 
 _free($5522);
 var $_01057=$5698;var $_01058=$5699;label=1130;break;
 case 1120: 
 var $5703$0 = ___cxa_find_matching_catch(-1, -1); var $5703$1 = tempRet0;
 var $5704=$5703$0;
 var $5705=$5703$1;
 var $5706=($5547|0)==0; //@line 11 "inc/front.h"
 if($5706){var $_01057=$5704;var $_01058=$5705;label=1130;break;}else{label=1121;break;} //@line 11 "inc/front.h"
 case 1121: 
 _free($5547);
 var $_01057=$5704;var $_01058=$5705;label=1130;break; //@line 11 "inc/front.h"
 case 1122: 
 var $5708=((($y_i884_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11054=$_21055;var $f_i882_sroa_55_3=$f_i882_sroa_55_5;var $y_i884_0=$5708;label=1102;break; //@line 48 "src/read.cpp"
 case 1123: 
 var $5710=((($z_i885_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01053=$_11054;var $f_i882_sroa_55_1=$f_i882_sroa_55_3;var $z_i885_0=$5710;label=1100;break; //@line 47 "src/read.cpp"
 case 1124: 
 var $5712=($5526|0)==0; //@line 69 "src/read.cpp"
 if($5712){label=1126;break;}else{label=1125;break;} //@line 69 "src/read.cpp"
 case 1125: 
 _free($5526);
 label=1126;break; //@line 69 "src/read.cpp"
 case 1126: 
 var $5714=HEAP32[(($rm_i880)>>2)]; //@line 70 "src/read.cpp"
 var $5715=($5714|0)==0; //@line 70 "src/read.cpp"
 if($5715){label=1128;break;}else{label=1127;break;} //@line 70 "src/read.cpp"
 case 1127: 
 var $5717=$5714; //@line 70 "src/read.cpp"
 var $5718=HEAP32[(($5717)>>2)]; //@line 70 "src/read.cpp"
 var $5719=(($5718+4)|0); //@line 70 "src/read.cpp"
 var $5720=HEAP32[(($5719)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5720]($5714); //@line 70 "src/read.cpp"
 label=1128;break; //@line 70 "src/read.cpp"
 case 1128: 
 var $5722=($5547|0)==0; //@line 11 "inc/front.h"
 if($5722){label=1257;break;}else{label=1129;break;} //@line 11 "inc/front.h"
 case 1129: 
 _free($5547);
 label=1257;break; //@line 11 "inc/front.h"
 case 1130: 
 var $_01058;
 var $_01057;
 var $5723$0=$_01057;
 var $5723$1=0;
 var $5724$0=$5723$0;
 var $5724$1=$_01058;
 ___resumeException($5724$0) //@line 71 "src/read.cpp"
 case 1131: 
 var $5726=HEAP32[(($3)>>2)]; //@line 195 "src/read.cpp"
 var $5727=HEAP32[(($4)>>2)]; //@line 195 "src/read.cpp"
 var $5728=HEAP32[(($5)>>2)]; //@line 195 "src/read.cpp"
 var $5729=HEAP32[(($6)>>2)]; //@line 195 "src/read.cpp"
 var $$etemp$140$0=4;
 var $$etemp$140$1=0;

 var $5730=__Znwj(48); //@line 41 "src/read.cpp"
 var $5731=$5730; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5731,0,61,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1132;break; } else { label=1160;break; } //@line 41 "src/read.cpp"
 case 1132: 
 var $5733=$5730; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i916)>>2)]=$5733; //@line 71 "src/read.cpp"
 var $5734=__Znwj(12); //@line 42 "src/read.cpp"
 var $5735=(($5734+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5736=$5735; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5736)>>2)]=$5726; //@line 34 "inc/pcdecoder.inl"
 var $5737=(($5734+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5738=$5737; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5738)>>2)]=$rm_i916; //@line 34 "inc/pcdecoder.inl"
 var $5739=((($5727)+(1))|0); //@line 10 "inc/front.h"
 var $5740=((($5728)+(1))|0); //@line 10 "inc/front.h"
 var $5741=(Math_imul($5739,$5740)|0); //@line 10 "inc/front.h"
 var $5742=((($5727)+(2))|0); //@line 9 "inc/front.h"
 var $5743=((($5742)+($5741))|0); //@line 9 "inc/front.h"
 var $5744=((($5743)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i923=$5744;label=1133;break; //@line 45 "inc/front.h"
 case 1133: 
 var $storemerge_i_i_i923;
 var $5746=((($storemerge_i_i_i923)+(1))|0); //@line 45 "inc/front.h"
 var $5747=$storemerge_i_i_i923&$5746; //@line 45 "inc/front.h"
 var $5748=($5747|0)==0; //@line 45 "inc/front.h"
 if($5748){label=1135;break;}else{label=1134;break;} //@line 45 "inc/front.h"
 case 1134: 
 var $5750=$storemerge_i_i_i923|$5746; //@line 45 "inc/front.h"
 var $storemerge_i_i_i923=$5750;label=1133;break; //@line 45 "inc/front.h"
 case 1135: 
 var $5751$0=_llvm_umul_with_overflow_i32($5746,4);
 var $5751$1=tempRet0;
 var $5752=$5751$1;
 var $5753=$5751$0;
 var $5754=($5752?-1:$5753); //@line 9 "inc/front.h"
 var $5755=(function() { try { __THREW__ = 0; return __Znwj($5754) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1139;break; } else { label=1136;break; }
 case 1136: 
 var $5757$0 = ___cxa_find_matching_catch(-1, -1); var $5757$1 = tempRet0;
 var $5758=$5757$1;
 var $5759=($5758|0)<0;
 if($5759){label=1137;break;}else{label=1138;break;}
 case 1137: 
 var $5761=$5757$0;
 ___cxa_call_unexpected($5761);
 throw "Reached an unreachable!";
 case 1138: 
 ___resumeException($5757$0)
 case 1139: 
 var $5763=$5755; //@line 9 "inc/front.h"
 var $_01041=$5741;var $f_i918_sroa_55_0=0;label=1140;break; //@line 22 "inc/front.h"
 case 1140: 
 var $f_i918_sroa_55_0;
 var $_01041;
 var $5765=((($f_i918_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5766=$f_i918_sroa_55_0&$storemerge_i_i_i923; //@line 23 "inc/front.h"
 var $5767=(($5763+($5766<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5767)>>2)]=0; //@line 23 "inc/front.h"
 var $5768=((($_01041)-(1))|0); //@line 23 "inc/front.h"
 var $5769=($5768|0)==0; //@line 23 "inc/front.h"
 if($5769){label=1141;break;}else{var $_01041=$5768;var $f_i918_sroa_55_0=$5765;label=1140;break;} //@line 23 "inc/front.h"
 case 1141: 
 var $5770=(($5734+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5771=$5770; //@line 50 "inc/pcdecoder.inl"
 var $5772=(($5734+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5773=$5772; //@line 50 "inc/pcdecoder.inl"
 var $_01043=$_01012;var $f_i918_sroa_55_1=$5765;var $z_i921_0=0;label=1142;break; //@line 47 "src/read.cpp"
 case 1142: 
 var $z_i921_0;
 var $f_i918_sroa_55_1;
 var $_01043;
 var $5775=($z_i921_0>>>0)<($5729>>>0); //@line 47 "src/read.cpp"
 if($5775){var $_01040=$5739;var $f_i918_sroa_55_2=$f_i918_sroa_55_1;label=1143;break;}else{label=1166;break;} //@line 47 "src/read.cpp"
 case 1143: 
 var $f_i918_sroa_55_2;
 var $_01040;
 var $5777=((($f_i918_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5778=$f_i918_sroa_55_2&$storemerge_i_i_i923; //@line 23 "inc/front.h"
 var $5779=(($5763+($5778<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5779)>>2)]=0; //@line 23 "inc/front.h"
 var $5780=((($_01040)-(1))|0); //@line 23 "inc/front.h"
 var $5781=($5780|0)==0; //@line 23 "inc/front.h"
 if($5781){var $_11044=$_01043;var $f_i918_sroa_55_3=$5777;var $y_i920_0=0;label=1144;break;}else{var $_01040=$5780;var $f_i918_sroa_55_2=$5777;label=1143;break;} //@line 23 "inc/front.h"
 case 1144: 
 var $y_i920_0;
 var $f_i918_sroa_55_3;
 var $_11044;
 var $5782=($y_i920_0>>>0)<($5728>>>0); //@line 48 "src/read.cpp"
 if($5782){var $_01039=1;var $f_i918_sroa_55_4=$f_i918_sroa_55_3;label=1145;break;}else{label=1165;break;} //@line 48 "src/read.cpp"
 case 1145: 
 var $f_i918_sroa_55_4;
 var $_01039;
 var $5784=((($f_i918_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5785=$f_i918_sroa_55_4&$storemerge_i_i_i923; //@line 23 "inc/front.h"
 var $5786=(($5763+($5785<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5786)>>2)]=0; //@line 23 "inc/front.h"
 var $5787=((($_01039)-(1))|0); //@line 23 "inc/front.h"
 var $5788=($5787|0)==0; //@line 23 "inc/front.h"
 if($5788){var $_21045=$_11044;var $f_i918_sroa_55_5=$5784;var $x_i919_0=0;label=1146;break;}else{var $_01039=$5787;var $f_i918_sroa_55_4=$5784;label=1145;break;} //@line 23 "inc/front.h"
 case 1146: 
 var $x_i919_0;
 var $f_i918_sroa_55_5;
 var $_21045;
 var $5789=($x_i919_0>>>0)<($5727>>>0); //@line 49 "src/read.cpp"
 if($5789){label=1147;break;}else{label=1164;break;} //@line 49 "src/read.cpp"
 case 1147: 
 var $5791=((($f_i918_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5792=$5791&$storemerge_i_i_i923; //@line 16 "inc/front.h"
 var $5793=(($5763+($5792<<2))|0); //@line 16 "inc/front.h"
 var $5794=HEAPF32[(($5793)>>2)]; //@line 59 "src/read.cpp"
 var $5795=((($f_i918_sroa_55_5)-($5739))|0); //@line 16 "inc/front.h"
 var $5796=((($5795)-($5741))|0); //@line 16 "inc/front.h"
 var $5797=$5796&$storemerge_i_i_i923; //@line 16 "inc/front.h"
 var $5798=(($5763+($5797<<2))|0); //@line 16 "inc/front.h"
 var $5799=HEAPF32[(($5798)>>2)]; //@line 59 "src/read.cpp"
 var $5800=$5795&$storemerge_i_i_i923; //@line 16 "inc/front.h"
 var $5801=(($5763+($5800<<2))|0); //@line 16 "inc/front.h"
 var $5802=HEAPF32[(($5801)>>2)]; //@line 60 "src/read.cpp"
 var $5803=((($5791)-($5741))|0); //@line 16 "inc/front.h"
 var $5804=$5803&$storemerge_i_i_i923; //@line 16 "inc/front.h"
 var $5805=(($5763+($5804<<2))|0); //@line 16 "inc/front.h"
 var $5806=HEAPF32[(($5805)>>2)]; //@line 60 "src/read.cpp"
 var $5807=((($f_i918_sroa_55_5)-($5741))|0); //@line 16 "inc/front.h"
 var $5808=$5807&$storemerge_i_i_i923; //@line 16 "inc/front.h"
 var $5809=(($5763+($5808<<2))|0); //@line 16 "inc/front.h"
 var $5810=HEAPF32[(($5809)>>2)]; //@line 61 "src/read.cpp"
 var $5811=((($5791)-($5739))|0); //@line 16 "inc/front.h"
 var $5812=$5811&$storemerge_i_i_i923; //@line 16 "inc/front.h"
 var $5813=(($5763+($5812<<2))|0); //@line 16 "inc/front.h"
 var $5814=HEAPF32[(($5813)>>2)]; //@line 61 "src/read.cpp"
 var $5815=((($5811)-($5741))|0); //@line 16 "inc/front.h"
 var $5816=$5815&$storemerge_i_i_i923; //@line 16 "inc/front.h"
 var $5817=(($5763+($5816<<2))|0); //@line 16 "inc/front.h"
 var $5818=($5794)-($5799); //@line 59 "src/read.cpp"
 var $5819=($5818)+($5802); //@line 60 "src/read.cpp"
 var $5820=($5819)-($5806); //@line 60 "src/read.cpp"
 var $5821=($5820)+($5810); //@line 61 "src/read.cpp"
 var $5822=($5821)-($5814); //@line 61 "src/read.cpp"
 var $5823=HEAPF32[(($5817)>>2)]; //@line 62 "src/read.cpp"
 var $5824=($5822)+($5823); //@line 62 "src/read.cpp"
 var $5825=HEAP32[(($5771)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5826=HEAP32[(($5773)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5827=HEAP32[(($5826)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$141$0=4;
 var $$etemp$141$1=0;

 var $$etemp$142$0=4;
 var $$etemp$142$1=0;

 var $5828=$5827; //@line 25 "src/rcdecoder.cpp"
 var $5829=HEAP32[(($5828)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5830=(($5829+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5831=HEAP32[(($5830)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5832=(($5825+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5831]($5827,$5832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1148;break; } else { label=1162;break; }
 case 1148: 
 var $5833=(($5825+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5834=HEAP32[(($5833)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5835=(($5825+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5836=HEAP32[(($5835)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5837=((($5834)-($5836))|0); //@line 26 "src/rcdecoder.cpp"
 var $5838=HEAP32[(($5832)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5839=(((($5837>>>0))/(($5838>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i910)>>2)]=$5839; //@line 26 "src/rcdecoder.cpp"
 var $5840=$5827; //@line 27 "src/rcdecoder.cpp"
 var $5841=HEAP32[(($5840)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5842=(($5841+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5843=HEAP32[(($5842)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5844=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5843]($5827,$l_i_i_i910,$r_i_i_i911) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1149;break; } else { label=1162;break; }
 case 1149: 
 var $5845=HEAP32[(($5832)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5846=HEAP32[(($l_i_i_i910)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5847=(Math_imul($5845,$5846)|0); //@line 28 "src/rcdecoder.cpp"
 var $5848=HEAP32[(($5835)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5849=((($5848)+($5847))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5835)>>2)]=$5849; //@line 28 "src/rcdecoder.cpp"
 var $5850=HEAP32[(($r_i_i_i911)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5851=(Math_imul($5845,$5850)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5832)>>2)]=$5851; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5825) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1150;break; } else { label=1162;break; }
 case 1150: 
 var $$etemp$143$0=4;
 var $$etemp$143$1=0;

 var $$etemp$144$0=4;
 var $$etemp$144$1=0;

 var $5852=($5844>>>0)>30; //@line 51 "inc/pcdecoder.inl"
 if($5852){label=1151;break;}else{label=1153;break;} //@line 51 "inc/pcdecoder.inl"
 case 1151: 
 var $5854=((($5844)-(31))|0); //@line 52 "inc/pcdecoder.inl"
 var $5855=HEAP32[(($5771)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5856=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5855,$5854) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1152;break; } else { label=1162;break; }
 case 1152: 
 var $5857=1<<$5854; //@line 53 "inc/pcdecoder.inl"
 var $5858=((($5857)+($5856))|0); //@line 53 "inc/pcdecoder.inl"
 var $5859=(HEAPF32[((tempDoublePtr)>>2)]=$5824,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5860=$5859^-1; //@line 38 "inc/pcmap.h"
 var $5861=$5860>>>2; //@line 39 "inc/pcmap.h"
 var $5862=$5860>>31; //@line 40 "inc/pcmap.h"
 var $5863=$5862>>>3; //@line 40 "inc/pcmap.h"
 var $5864=$5861^$5863; //@line 40 "inc/pcmap.h"
 var $5865=((($5864)+($5858))|0); //@line 55 "inc/pcdecoder.inl"
 var $5866=$5865>>>29; //@line 48 "inc/pcmap.h"
 var $5867=(((-$5866))|0); //@line 48 "inc/pcmap.h"
 var $5868=$5867>>>3; //@line 48 "inc/pcmap.h"
 var $5869=$5868^$5865; //@line 48 "inc/pcmap.h"
 var $5870=$5869<<2; //@line 50 "inc/pcmap.h"
 var $5871=$5870^-4; //@line 50 "inc/pcmap.h"
 var $_01036_in=$5871;label=1157;break; //@line 56 "inc/pcdecoder.inl"
 case 1153: 
 var $5873=($5844>>>0)<30; //@line undefined "inc/pcdecoder.inl"
 if($5873){label=1154;break;}else{label=1156;break;} //@line undefined "inc/pcdecoder.inl"
 case 1154: 
 var $5875=(((29)-($5844))|0); //@line 59 "inc/pcdecoder.inl"
 var $5876=HEAP32[(($5771)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5877=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($5876,$5875) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1155;break; } else { label=1162;break; }
 case 1155: 
 var $5878=1<<$5875; //@line 60 "inc/pcdecoder.inl"
 var $5879=((($5878)+($5877))|0); //@line 60 "inc/pcdecoder.inl"
 var $5880=(HEAPF32[((tempDoublePtr)>>2)]=$5824,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5881=$5880^-1; //@line 38 "inc/pcmap.h"
 var $5882=$5881>>>2; //@line 39 "inc/pcmap.h"
 var $5883=$5881>>31; //@line 40 "inc/pcmap.h"
 var $5884=$5883>>>3; //@line 40 "inc/pcmap.h"
 var $5885=$5882^$5884; //@line 40 "inc/pcmap.h"
 var $5886=((($5885)-($5879))|0); //@line 62 "inc/pcdecoder.inl"
 var $5887=$5886>>>29; //@line 48 "inc/pcmap.h"
 var $5888=(((-$5887))|0); //@line 48 "inc/pcmap.h"
 var $5889=$5888>>>3; //@line 48 "inc/pcmap.h"
 var $5890=$5889^$5886; //@line 48 "inc/pcmap.h"
 var $5891=$5890<<2; //@line 50 "inc/pcmap.h"
 var $5892=$5891^-4; //@line 50 "inc/pcmap.h"
 var $_01036_in=$5892;label=1157;break; //@line 63 "inc/pcdecoder.inl"
 case 1156: 
 var $5894=(HEAPF32[((tempDoublePtr)>>2)]=$5824,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $5895=$5894&-4; //@line 60 "inc/pcmap.h"
 var $_01036_in=$5895;label=1157;break; //@line 66 "inc/pcdecoder.inl"
 case 1157: 
 var $_01036_in;
 var $_01036=(HEAP32[((tempDoublePtr)>>2)]=$_01036_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $5896=(($_21045+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21045)>>2)]=$_01036; //@line 65 "src/read.cpp"
 var $_01038=1;var $f_i918_sroa_55_6=$f_i918_sroa_55_5;label=1158;break; //@line 22 "inc/front.h"
 case 1158: 
 var $f_i918_sroa_55_6;
 var $_01038;
 var $5898=((($f_i918_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5899=$f_i918_sroa_55_6&$storemerge_i_i_i923; //@line 23 "inc/front.h"
 var $5900=(($5763+($5899<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5900)>>2)]=$_01036; //@line 23 "inc/front.h"
 var $5901=((($_01038)-(1))|0); //@line 23 "inc/front.h"
 var $5902=($5901|0)==0; //@line 23 "inc/front.h"
 if($5902){label=1159;break;}else{var $_01038=$5901;var $f_i918_sroa_55_6=$5898;label=1158;break;} //@line 23 "inc/front.h"
 case 1159: 
 var $5903=((($x_i919_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21045=$5896;var $f_i918_sroa_55_5=$5898;var $x_i919_0=$5903;label=1146;break; //@line 49 "src/read.cpp"
 case 1160: 
 var $5905$0 = ___cxa_find_matching_catch(-1, -1); var $5905$1 = tempRet0;
 var $5906=$5905$0;
 var $5907=$5905$1;
 var $5908=($5730|0)==0;
 if($5908){var $_01046=$5906;var $_01047=$5907;label=1172;break;}else{label=1161;break;}
 case 1161: 
 _free($5730);
 var $_01046=$5906;var $_01047=$5907;label=1172;break;
 case 1162: 
 var $5911$0 = ___cxa_find_matching_catch(-1, -1); var $5911$1 = tempRet0;
 var $5912=$5911$0;
 var $5913=$5911$1;
 var $5914=($5755|0)==0; //@line 11 "inc/front.h"
 if($5914){var $_01046=$5912;var $_01047=$5913;label=1172;break;}else{label=1163;break;} //@line 11 "inc/front.h"
 case 1163: 
 _free($5755);
 var $_01046=$5912;var $_01047=$5913;label=1172;break; //@line 11 "inc/front.h"
 case 1164: 
 var $5916=((($y_i920_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11044=$_21045;var $f_i918_sroa_55_3=$f_i918_sroa_55_5;var $y_i920_0=$5916;label=1144;break; //@line 48 "src/read.cpp"
 case 1165: 
 var $5918=((($z_i921_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01043=$_11044;var $f_i918_sroa_55_1=$f_i918_sroa_55_3;var $z_i921_0=$5918;label=1142;break; //@line 47 "src/read.cpp"
 case 1166: 
 var $5920=($5734|0)==0; //@line 69 "src/read.cpp"
 if($5920){label=1168;break;}else{label=1167;break;} //@line 69 "src/read.cpp"
 case 1167: 
 _free($5734);
 label=1168;break; //@line 69 "src/read.cpp"
 case 1168: 
 var $5922=HEAP32[(($rm_i916)>>2)]; //@line 70 "src/read.cpp"
 var $5923=($5922|0)==0; //@line 70 "src/read.cpp"
 if($5923){label=1170;break;}else{label=1169;break;} //@line 70 "src/read.cpp"
 case 1169: 
 var $5925=$5922; //@line 70 "src/read.cpp"
 var $5926=HEAP32[(($5925)>>2)]; //@line 70 "src/read.cpp"
 var $5927=(($5926+4)|0); //@line 70 "src/read.cpp"
 var $5928=HEAP32[(($5927)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5928]($5922); //@line 70 "src/read.cpp"
 label=1170;break; //@line 70 "src/read.cpp"
 case 1170: 
 var $5930=($5755|0)==0; //@line 11 "inc/front.h"
 if($5930){label=1257;break;}else{label=1171;break;} //@line 11 "inc/front.h"
 case 1171: 
 _free($5755);
 label=1257;break; //@line 11 "inc/front.h"
 case 1172: 
 var $_01047;
 var $_01046;
 var $5931$0=$_01046;
 var $5931$1=0;
 var $5932$0=$5931$0;
 var $5932$1=$_01047;
 ___resumeException($5932$0) //@line 71 "src/read.cpp"
 case 1173: 
 var $5934=HEAP32[(($3)>>2)]; //@line 196 "src/read.cpp"
 var $5935=HEAP32[(($4)>>2)]; //@line 196 "src/read.cpp"
 var $5936=HEAP32[(($5)>>2)]; //@line 196 "src/read.cpp"
 var $5937=HEAP32[(($6)>>2)]; //@line 196 "src/read.cpp"
 var $$etemp$145$0=4;
 var $$etemp$145$1=0;

 var $5938=__Znwj(48); //@line 41 "src/read.cpp"
 var $5939=$5938; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5939,0,63,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1174;break; } else { label=1202;break; } //@line 41 "src/read.cpp"
 case 1174: 
 var $5941=$5938; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i952)>>2)]=$5941; //@line 71 "src/read.cpp"
 var $5942=__Znwj(12); //@line 42 "src/read.cpp"
 var $5943=(($5942+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5944=$5943; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5944)>>2)]=$5934; //@line 34 "inc/pcdecoder.inl"
 var $5945=(($5942+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5946=$5945; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5946)>>2)]=$rm_i952; //@line 34 "inc/pcdecoder.inl"
 var $5947=((($5935)+(1))|0); //@line 10 "inc/front.h"
 var $5948=((($5936)+(1))|0); //@line 10 "inc/front.h"
 var $5949=(Math_imul($5947,$5948)|0); //@line 10 "inc/front.h"
 var $5950=((($5935)+(2))|0); //@line 9 "inc/front.h"
 var $5951=((($5950)+($5949))|0); //@line 9 "inc/front.h"
 var $5952=((($5951)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i959=$5952;label=1175;break; //@line 45 "inc/front.h"
 case 1175: 
 var $storemerge_i_i_i959;
 var $5954=((($storemerge_i_i_i959)+(1))|0); //@line 45 "inc/front.h"
 var $5955=$storemerge_i_i_i959&$5954; //@line 45 "inc/front.h"
 var $5956=($5955|0)==0; //@line 45 "inc/front.h"
 if($5956){label=1177;break;}else{label=1176;break;} //@line 45 "inc/front.h"
 case 1176: 
 var $5958=$storemerge_i_i_i959|$5954; //@line 45 "inc/front.h"
 var $storemerge_i_i_i959=$5958;label=1175;break; //@line 45 "inc/front.h"
 case 1177: 
 var $5959$0=_llvm_umul_with_overflow_i32($5954,4);
 var $5959$1=tempRet0;
 var $5960=$5959$1;
 var $5961=$5959$0;
 var $5962=($5960?-1:$5961); //@line 9 "inc/front.h"
 var $5963=(function() { try { __THREW__ = 0; return __Znwj($5962) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1181;break; } else { label=1178;break; }
 case 1178: 
 var $5965$0 = ___cxa_find_matching_catch(-1, -1); var $5965$1 = tempRet0;
 var $5966=$5965$1;
 var $5967=($5966|0)<0;
 if($5967){label=1179;break;}else{label=1180;break;}
 case 1179: 
 var $5969=$5965$0;
 ___cxa_call_unexpected($5969);
 throw "Reached an unreachable!";
 case 1180: 
 ___resumeException($5965$0)
 case 1181: 
 var $5971=$5963; //@line 9 "inc/front.h"
 var $_01029=$5949;var $f_i954_sroa_55_0=0;label=1182;break; //@line 22 "inc/front.h"
 case 1182: 
 var $f_i954_sroa_55_0;
 var $_01029;
 var $5973=((($f_i954_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5974=$f_i954_sroa_55_0&$storemerge_i_i_i959; //@line 23 "inc/front.h"
 var $5975=(($5971+($5974<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5975)>>2)]=0; //@line 23 "inc/front.h"
 var $5976=((($_01029)-(1))|0); //@line 23 "inc/front.h"
 var $5977=($5976|0)==0; //@line 23 "inc/front.h"
 if($5977){label=1183;break;}else{var $_01029=$5976;var $f_i954_sroa_55_0=$5973;label=1182;break;} //@line 23 "inc/front.h"
 case 1183: 
 var $5978=(($5942+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5979=$5978; //@line 50 "inc/pcdecoder.inl"
 var $5980=(($5942+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5981=$5980; //@line 50 "inc/pcdecoder.inl"
 var $_01030=$_01012;var $f_i954_sroa_55_1=$5973;var $z_i957_0=0;label=1184;break; //@line 47 "src/read.cpp"
 case 1184: 
 var $z_i957_0;
 var $f_i954_sroa_55_1;
 var $_01030;
 var $5983=($z_i957_0>>>0)<($5937>>>0); //@line 47 "src/read.cpp"
 if($5983){var $_01028=$5947;var $f_i954_sroa_55_2=$f_i954_sroa_55_1;label=1185;break;}else{label=1208;break;} //@line 47 "src/read.cpp"
 case 1185: 
 var $f_i954_sroa_55_2;
 var $_01028;
 var $5985=((($f_i954_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5986=$f_i954_sroa_55_2&$storemerge_i_i_i959; //@line 23 "inc/front.h"
 var $5987=(($5971+($5986<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5987)>>2)]=0; //@line 23 "inc/front.h"
 var $5988=((($_01028)-(1))|0); //@line 23 "inc/front.h"
 var $5989=($5988|0)==0; //@line 23 "inc/front.h"
 if($5989){var $_11031=$_01030;var $f_i954_sroa_55_3=$5985;var $y_i956_0=0;label=1186;break;}else{var $_01028=$5988;var $f_i954_sroa_55_2=$5985;label=1185;break;} //@line 23 "inc/front.h"
 case 1186: 
 var $y_i956_0;
 var $f_i954_sroa_55_3;
 var $_11031;
 var $5990=($y_i956_0>>>0)<($5936>>>0); //@line 48 "src/read.cpp"
 if($5990){var $_01027=1;var $f_i954_sroa_55_4=$f_i954_sroa_55_3;label=1187;break;}else{label=1207;break;} //@line 48 "src/read.cpp"
 case 1187: 
 var $f_i954_sroa_55_4;
 var $_01027;
 var $5992=((($f_i954_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5993=$f_i954_sroa_55_4&$storemerge_i_i_i959; //@line 23 "inc/front.h"
 var $5994=(($5971+($5993<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($5994)>>2)]=0; //@line 23 "inc/front.h"
 var $5995=((($_01027)-(1))|0); //@line 23 "inc/front.h"
 var $5996=($5995|0)==0; //@line 23 "inc/front.h"
 if($5996){var $_21032=$_11031;var $f_i954_sroa_55_5=$5992;var $x_i955_0=0;label=1188;break;}else{var $_01027=$5995;var $f_i954_sroa_55_4=$5992;label=1187;break;} //@line 23 "inc/front.h"
 case 1188: 
 var $x_i955_0;
 var $f_i954_sroa_55_5;
 var $_21032;
 var $5997=($x_i955_0>>>0)<($5935>>>0); //@line 49 "src/read.cpp"
 if($5997){label=1189;break;}else{label=1206;break;} //@line 49 "src/read.cpp"
 case 1189: 
 var $5999=((($f_i954_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $6000=$5999&$storemerge_i_i_i959; //@line 16 "inc/front.h"
 var $6001=(($5971+($6000<<2))|0); //@line 16 "inc/front.h"
 var $6002=HEAPF32[(($6001)>>2)]; //@line 59 "src/read.cpp"
 var $6003=((($f_i954_sroa_55_5)-($5947))|0); //@line 16 "inc/front.h"
 var $6004=((($6003)-($5949))|0); //@line 16 "inc/front.h"
 var $6005=$6004&$storemerge_i_i_i959; //@line 16 "inc/front.h"
 var $6006=(($5971+($6005<<2))|0); //@line 16 "inc/front.h"
 var $6007=HEAPF32[(($6006)>>2)]; //@line 59 "src/read.cpp"
 var $6008=$6003&$storemerge_i_i_i959; //@line 16 "inc/front.h"
 var $6009=(($5971+($6008<<2))|0); //@line 16 "inc/front.h"
 var $6010=HEAPF32[(($6009)>>2)]; //@line 60 "src/read.cpp"
 var $6011=((($5999)-($5949))|0); //@line 16 "inc/front.h"
 var $6012=$6011&$storemerge_i_i_i959; //@line 16 "inc/front.h"
 var $6013=(($5971+($6012<<2))|0); //@line 16 "inc/front.h"
 var $6014=HEAPF32[(($6013)>>2)]; //@line 60 "src/read.cpp"
 var $6015=((($f_i954_sroa_55_5)-($5949))|0); //@line 16 "inc/front.h"
 var $6016=$6015&$storemerge_i_i_i959; //@line 16 "inc/front.h"
 var $6017=(($5971+($6016<<2))|0); //@line 16 "inc/front.h"
 var $6018=HEAPF32[(($6017)>>2)]; //@line 61 "src/read.cpp"
 var $6019=((($5999)-($5947))|0); //@line 16 "inc/front.h"
 var $6020=$6019&$storemerge_i_i_i959; //@line 16 "inc/front.h"
 var $6021=(($5971+($6020<<2))|0); //@line 16 "inc/front.h"
 var $6022=HEAPF32[(($6021)>>2)]; //@line 61 "src/read.cpp"
 var $6023=((($6019)-($5949))|0); //@line 16 "inc/front.h"
 var $6024=$6023&$storemerge_i_i_i959; //@line 16 "inc/front.h"
 var $6025=(($5971+($6024<<2))|0); //@line 16 "inc/front.h"
 var $6026=($6002)-($6007); //@line 59 "src/read.cpp"
 var $6027=($6026)+($6010); //@line 60 "src/read.cpp"
 var $6028=($6027)-($6014); //@line 60 "src/read.cpp"
 var $6029=($6028)+($6018); //@line 61 "src/read.cpp"
 var $6030=($6029)-($6022); //@line 61 "src/read.cpp"
 var $6031=HEAPF32[(($6025)>>2)]; //@line 62 "src/read.cpp"
 var $6032=($6030)+($6031); //@line 62 "src/read.cpp"
 var $6033=HEAP32[(($5979)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6034=HEAP32[(($5981)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6035=HEAP32[(($6034)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$146$0=4;
 var $$etemp$146$1=0;

 var $$etemp$147$0=4;
 var $$etemp$147$1=0;

 var $6036=$6035; //@line 25 "src/rcdecoder.cpp"
 var $6037=HEAP32[(($6036)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6038=(($6037+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $6039=HEAP32[(($6038)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6040=(($6033+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6039]($6035,$6040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1190;break; } else { label=1204;break; }
 case 1190: 
 var $6041=(($6033+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $6042=HEAP32[(($6041)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6043=(($6033+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $6044=HEAP32[(($6043)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6045=((($6042)-($6044))|0); //@line 26 "src/rcdecoder.cpp"
 var $6046=HEAP32[(($6040)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6047=(((($6045>>>0))/(($6046>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i946)>>2)]=$6047; //@line 26 "src/rcdecoder.cpp"
 var $6048=$6035; //@line 27 "src/rcdecoder.cpp"
 var $6049=HEAP32[(($6048)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6050=(($6049+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $6051=HEAP32[(($6050)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6052=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6051]($6035,$l_i_i_i946,$r_i_i_i947) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1191;break; } else { label=1204;break; }
 case 1191: 
 var $6053=HEAP32[(($6040)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6054=HEAP32[(($l_i_i_i946)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6055=(Math_imul($6053,$6054)|0); //@line 28 "src/rcdecoder.cpp"
 var $6056=HEAP32[(($6043)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6057=((($6056)+($6055))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($6043)>>2)]=$6057; //@line 28 "src/rcdecoder.cpp"
 var $6058=HEAP32[(($r_i_i_i947)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $6059=(Math_imul($6053,$6058)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($6040)>>2)]=$6059; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($6033) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1192;break; } else { label=1204;break; }
 case 1192: 
 var $$etemp$148$0=4;
 var $$etemp$148$1=0;

 var $$etemp$149$0=4;
 var $$etemp$149$1=0;

 var $6060=($6052>>>0)>31; //@line 51 "inc/pcdecoder.inl"
 if($6060){label=1193;break;}else{label=1195;break;} //@line 51 "inc/pcdecoder.inl"
 case 1193: 
 var $6062=((($6052)-(32))|0); //@line 52 "inc/pcdecoder.inl"
 var $6063=HEAP32[(($5979)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $6064=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($6063,$6062) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1194;break; } else { label=1204;break; }
 case 1194: 
 var $6065=1<<$6062; //@line 53 "inc/pcdecoder.inl"
 var $6066=((($6065)+($6064))|0); //@line 53 "inc/pcdecoder.inl"
 var $6067=(HEAPF32[((tempDoublePtr)>>2)]=$6032,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $6068=$6067^-1; //@line 38 "inc/pcmap.h"
 var $6069=$6068>>>1; //@line 39 "inc/pcmap.h"
 var $6070=$6068>>31; //@line 40 "inc/pcmap.h"
 var $6071=$6070>>>2; //@line 40 "inc/pcmap.h"
 var $6072=$6069^$6071; //@line 40 "inc/pcmap.h"
 var $6073=((($6072)+($6066))|0); //@line 55 "inc/pcdecoder.inl"
 var $6074=$6073>>>30; //@line 48 "inc/pcmap.h"
 var $6075=(((-$6074))|0); //@line 48 "inc/pcmap.h"
 var $6076=$6075>>>2; //@line 48 "inc/pcmap.h"
 var $6077=$6076^$6073; //@line 48 "inc/pcmap.h"
 var $6078=$6077<<1; //@line 50 "inc/pcmap.h"
 var $6079=$6078^-2; //@line 50 "inc/pcmap.h"
 var $_01022_in=$6079;label=1199;break; //@line 56 "inc/pcdecoder.inl"
 case 1195: 
 var $6081=($6052>>>0)<31; //@line undefined "inc/pcdecoder.inl"
 if($6081){label=1196;break;}else{label=1198;break;} //@line undefined "inc/pcdecoder.inl"
 case 1196: 
 var $6083=(((30)-($6052))|0); //@line 59 "inc/pcdecoder.inl"
 var $6084=HEAP32[(($5979)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $6085=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($6084,$6083) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1197;break; } else { label=1204;break; }
 case 1197: 
 var $6086=1<<$6083; //@line 60 "inc/pcdecoder.inl"
 var $6087=((($6086)+($6085))|0); //@line 60 "inc/pcdecoder.inl"
 var $6088=(HEAPF32[((tempDoublePtr)>>2)]=$6032,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $6089=$6088^-1; //@line 38 "inc/pcmap.h"
 var $6090=$6089>>>1; //@line 39 "inc/pcmap.h"
 var $6091=$6089>>31; //@line 40 "inc/pcmap.h"
 var $6092=$6091>>>2; //@line 40 "inc/pcmap.h"
 var $6093=$6090^$6092; //@line 40 "inc/pcmap.h"
 var $6094=((($6093)-($6087))|0); //@line 62 "inc/pcdecoder.inl"
 var $6095=$6094>>>30; //@line 48 "inc/pcmap.h"
 var $6096=(((-$6095))|0); //@line 48 "inc/pcmap.h"
 var $6097=$6096>>>2; //@line 48 "inc/pcmap.h"
 var $6098=$6097^$6094; //@line 48 "inc/pcmap.h"
 var $6099=$6098<<1; //@line 50 "inc/pcmap.h"
 var $6100=$6099^-2; //@line 50 "inc/pcmap.h"
 var $_01022_in=$6100;label=1199;break; //@line 63 "inc/pcdecoder.inl"
 case 1198: 
 var $6102=(HEAPF32[((tempDoublePtr)>>2)]=$6032,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $6103=$6102&-2; //@line 60 "inc/pcmap.h"
 var $_01022_in=$6103;label=1199;break; //@line 66 "inc/pcdecoder.inl"
 case 1199: 
 var $_01022_in;
 var $_01022=(HEAP32[((tempDoublePtr)>>2)]=$_01022_in,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $6104=(($_21032+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_21032)>>2)]=$_01022; //@line 65 "src/read.cpp"
 var $_01026=1;var $f_i954_sroa_55_6=$f_i954_sroa_55_5;label=1200;break; //@line 22 "inc/front.h"
 case 1200: 
 var $f_i954_sroa_55_6;
 var $_01026;
 var $6106=((($f_i954_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $6107=$f_i954_sroa_55_6&$storemerge_i_i_i959; //@line 23 "inc/front.h"
 var $6108=(($5971+($6107<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($6108)>>2)]=$_01022; //@line 23 "inc/front.h"
 var $6109=((($_01026)-(1))|0); //@line 23 "inc/front.h"
 var $6110=($6109|0)==0; //@line 23 "inc/front.h"
 if($6110){label=1201;break;}else{var $_01026=$6109;var $f_i954_sroa_55_6=$6106;label=1200;break;} //@line 23 "inc/front.h"
 case 1201: 
 var $6111=((($x_i955_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21032=$6104;var $f_i954_sroa_55_5=$6106;var $x_i955_0=$6111;label=1188;break; //@line 49 "src/read.cpp"
 case 1202: 
 var $6113$0 = ___cxa_find_matching_catch(-1, -1); var $6113$1 = tempRet0;
 var $6114=$6113$0;
 var $6115=$6113$1;
 var $6116=($5938|0)==0;
 if($6116){var $_01033=$6114;var $_01034=$6115;label=1214;break;}else{label=1203;break;}
 case 1203: 
 _free($5938);
 var $_01033=$6114;var $_01034=$6115;label=1214;break;
 case 1204: 
 var $6119$0 = ___cxa_find_matching_catch(-1, -1); var $6119$1 = tempRet0;
 var $6120=$6119$0;
 var $6121=$6119$1;
 var $6122=($5963|0)==0; //@line 11 "inc/front.h"
 if($6122){var $_01033=$6120;var $_01034=$6121;label=1214;break;}else{label=1205;break;} //@line 11 "inc/front.h"
 case 1205: 
 _free($5963);
 var $_01033=$6120;var $_01034=$6121;label=1214;break; //@line 11 "inc/front.h"
 case 1206: 
 var $6124=((($y_i956_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11031=$_21032;var $f_i954_sroa_55_3=$f_i954_sroa_55_5;var $y_i956_0=$6124;label=1186;break; //@line 48 "src/read.cpp"
 case 1207: 
 var $6126=((($z_i957_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01030=$_11031;var $f_i954_sroa_55_1=$f_i954_sroa_55_3;var $z_i957_0=$6126;label=1184;break; //@line 47 "src/read.cpp"
 case 1208: 
 var $6128=($5942|0)==0; //@line 69 "src/read.cpp"
 if($6128){label=1210;break;}else{label=1209;break;} //@line 69 "src/read.cpp"
 case 1209: 
 _free($5942);
 label=1210;break; //@line 69 "src/read.cpp"
 case 1210: 
 var $6130=HEAP32[(($rm_i952)>>2)]; //@line 70 "src/read.cpp"
 var $6131=($6130|0)==0; //@line 70 "src/read.cpp"
 if($6131){label=1212;break;}else{label=1211;break;} //@line 70 "src/read.cpp"
 case 1211: 
 var $6133=$6130; //@line 70 "src/read.cpp"
 var $6134=HEAP32[(($6133)>>2)]; //@line 70 "src/read.cpp"
 var $6135=(($6134+4)|0); //@line 70 "src/read.cpp"
 var $6136=HEAP32[(($6135)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$6136]($6130); //@line 70 "src/read.cpp"
 label=1212;break; //@line 70 "src/read.cpp"
 case 1212: 
 var $6138=($5963|0)==0; //@line 11 "inc/front.h"
 if($6138){label=1257;break;}else{label=1213;break;} //@line 11 "inc/front.h"
 case 1213: 
 _free($5963);
 label=1257;break; //@line 11 "inc/front.h"
 case 1214: 
 var $_01034;
 var $_01033;
 var $6139$0=$_01033;
 var $6139$1=0;
 var $6140$0=$6139$0;
 var $6140$1=$_01034;
 ___resumeException($6140$0) //@line 71 "src/read.cpp"
 case 1215: 
 var $6141=HEAP32[(($3)>>2)]; //@line 197 "src/read.cpp"
 var $6142=HEAP32[(($4)>>2)]; //@line 197 "src/read.cpp"
 var $6143=HEAP32[(($5)>>2)]; //@line 197 "src/read.cpp"
 var $6144=HEAP32[(($6)>>2)]; //@line 197 "src/read.cpp"
 var $$etemp$150$0=4;
 var $$etemp$150$1=0;

 var $6145=__Znwj(48); //@line 41 "src/read.cpp"
 var $6146=$6145; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($6146,0,65,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1216;break; } else { label=1243;break; } //@line 41 "src/read.cpp"
 case 1216: 
 var $6148=$6145; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i988)>>2)]=$6148; //@line 71 "src/read.cpp"
 var $6149=__Znwj(12); //@line 42 "src/read.cpp"
 var $6150=(($6149+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $6151=$6150; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($6151)>>2)]=$6141; //@line 34 "inc/pcdecoder.inl"
 var $6152=(($6149+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $6153=$6152; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($6153)>>2)]=$rm_i988; //@line 34 "inc/pcdecoder.inl"
 var $6154=((($6142)+(1))|0); //@line 10 "inc/front.h"
 var $6155=((($6143)+(1))|0); //@line 10 "inc/front.h"
 var $6156=(Math_imul($6154,$6155)|0); //@line 10 "inc/front.h"
 var $6157=((($6142)+(2))|0); //@line 9 "inc/front.h"
 var $6158=((($6157)+($6156))|0); //@line 9 "inc/front.h"
 var $6159=((($6158)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i995=$6159;label=1217;break; //@line 45 "inc/front.h"
 case 1217: 
 var $storemerge_i_i_i995;
 var $6161=((($storemerge_i_i_i995)+(1))|0); //@line 45 "inc/front.h"
 var $6162=$storemerge_i_i_i995&$6161; //@line 45 "inc/front.h"
 var $6163=($6162|0)==0; //@line 45 "inc/front.h"
 if($6163){label=1219;break;}else{label=1218;break;} //@line 45 "inc/front.h"
 case 1218: 
 var $6165=$storemerge_i_i_i995|$6161; //@line 45 "inc/front.h"
 var $storemerge_i_i_i995=$6165;label=1217;break; //@line 45 "inc/front.h"
 case 1219: 
 var $6166$0=_llvm_umul_with_overflow_i32($6161,4);
 var $6166$1=tempRet0;
 var $6167=$6166$1;
 var $6168=$6166$0;
 var $6169=($6167?-1:$6168); //@line 9 "inc/front.h"
 var $6170=(function() { try { __THREW__ = 0; return __Znwj($6169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1223;break; } else { label=1220;break; }
 case 1220: 
 var $6172$0 = ___cxa_find_matching_catch(-1, -1); var $6172$1 = tempRet0;
 var $6173=$6172$1;
 var $6174=($6173|0)<0;
 if($6174){label=1221;break;}else{label=1222;break;}
 case 1221: 
 var $6176=$6172$0;
 ___cxa_call_unexpected($6176);
 throw "Reached an unreachable!";
 case 1222: 
 ___resumeException($6172$0)
 case 1223: 
 var $6178=$6170; //@line 9 "inc/front.h"
 var $_01016=$6156;var $f_i990_sroa_55_0=0;label=1224;break; //@line 22 "inc/front.h"
 case 1224: 
 var $f_i990_sroa_55_0;
 var $_01016;
 var $6180=((($f_i990_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $6181=$f_i990_sroa_55_0&$storemerge_i_i_i995; //@line 23 "inc/front.h"
 var $6182=(($6178+($6181<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($6182)>>2)]=0; //@line 23 "inc/front.h"
 var $6183=((($_01016)-(1))|0); //@line 23 "inc/front.h"
 var $6184=($6183|0)==0; //@line 23 "inc/front.h"
 if($6184){label=1225;break;}else{var $_01016=$6183;var $f_i990_sroa_55_0=$6180;label=1224;break;} //@line 23 "inc/front.h"
 case 1225: 
 var $6185=(($6149+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $6186=$6185; //@line 50 "inc/pcdecoder.inl"
 var $6187=(($6149+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $6188=$6187; //@line 50 "inc/pcdecoder.inl"
 var $_01017=$_01012;var $f_i990_sroa_55_1=$6180;var $z_i993_0=0;label=1226;break; //@line 47 "src/read.cpp"
 case 1226: 
 var $z_i993_0;
 var $f_i990_sroa_55_1;
 var $_01017;
 var $6190=($z_i993_0>>>0)<($6144>>>0); //@line 47 "src/read.cpp"
 if($6190){var $_01015=$6154;var $f_i990_sroa_55_2=$f_i990_sroa_55_1;label=1227;break;}else{label=1249;break;} //@line 47 "src/read.cpp"
 case 1227: 
 var $f_i990_sroa_55_2;
 var $_01015;
 var $6192=((($f_i990_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $6193=$f_i990_sroa_55_2&$storemerge_i_i_i995; //@line 23 "inc/front.h"
 var $6194=(($6178+($6193<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($6194)>>2)]=0; //@line 23 "inc/front.h"
 var $6195=((($_01015)-(1))|0); //@line 23 "inc/front.h"
 var $6196=($6195|0)==0; //@line 23 "inc/front.h"
 if($6196){var $_1=$_01017;var $f_i990_sroa_55_3=$6192;var $y_i992_0=0;label=1228;break;}else{var $_01015=$6195;var $f_i990_sroa_55_2=$6192;label=1227;break;} //@line 23 "inc/front.h"
 case 1228: 
 var $y_i992_0;
 var $f_i990_sroa_55_3;
 var $_1;
 var $6197=($y_i992_0>>>0)<($6143>>>0); //@line 48 "src/read.cpp"
 if($6197){var $_01014=1;var $f_i990_sroa_55_4=$f_i990_sroa_55_3;label=1229;break;}else{label=1248;break;} //@line 48 "src/read.cpp"
 case 1229: 
 var $f_i990_sroa_55_4;
 var $_01014;
 var $6199=((($f_i990_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $6200=$f_i990_sroa_55_4&$storemerge_i_i_i995; //@line 23 "inc/front.h"
 var $6201=(($6178+($6200<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($6201)>>2)]=0; //@line 23 "inc/front.h"
 var $6202=((($_01014)-(1))|0); //@line 23 "inc/front.h"
 var $6203=($6202|0)==0; //@line 23 "inc/front.h"
 if($6203){var $_2=$_1;var $f_i990_sroa_55_5=$6199;var $x_i991_0=0;label=1230;break;}else{var $_01014=$6202;var $f_i990_sroa_55_4=$6199;label=1229;break;} //@line 23 "inc/front.h"
 case 1230: 
 var $x_i991_0;
 var $f_i990_sroa_55_5;
 var $_2;
 var $6204=($x_i991_0>>>0)<($6142>>>0); //@line 49 "src/read.cpp"
 if($6204){label=1231;break;}else{label=1247;break;} //@line 49 "src/read.cpp"
 case 1231: 
 var $6206=((($f_i990_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $6207=$6206&$storemerge_i_i_i995; //@line 16 "inc/front.h"
 var $6208=(($6178+($6207<<2))|0); //@line 16 "inc/front.h"
 var $6209=HEAPF32[(($6208)>>2)]; //@line 59 "src/read.cpp"
 var $6210=((($f_i990_sroa_55_5)-($6154))|0); //@line 16 "inc/front.h"
 var $6211=((($6210)-($6156))|0); //@line 16 "inc/front.h"
 var $6212=$6211&$storemerge_i_i_i995; //@line 16 "inc/front.h"
 var $6213=(($6178+($6212<<2))|0); //@line 16 "inc/front.h"
 var $6214=HEAPF32[(($6213)>>2)]; //@line 59 "src/read.cpp"
 var $6215=$6210&$storemerge_i_i_i995; //@line 16 "inc/front.h"
 var $6216=(($6178+($6215<<2))|0); //@line 16 "inc/front.h"
 var $6217=HEAPF32[(($6216)>>2)]; //@line 60 "src/read.cpp"
 var $6218=((($6206)-($6156))|0); //@line 16 "inc/front.h"
 var $6219=$6218&$storemerge_i_i_i995; //@line 16 "inc/front.h"
 var $6220=(($6178+($6219<<2))|0); //@line 16 "inc/front.h"
 var $6221=HEAPF32[(($6220)>>2)]; //@line 60 "src/read.cpp"
 var $6222=((($f_i990_sroa_55_5)-($6156))|0); //@line 16 "inc/front.h"
 var $6223=$6222&$storemerge_i_i_i995; //@line 16 "inc/front.h"
 var $6224=(($6178+($6223<<2))|0); //@line 16 "inc/front.h"
 var $6225=HEAPF32[(($6224)>>2)]; //@line 61 "src/read.cpp"
 var $6226=((($6206)-($6154))|0); //@line 16 "inc/front.h"
 var $6227=$6226&$storemerge_i_i_i995; //@line 16 "inc/front.h"
 var $6228=(($6178+($6227<<2))|0); //@line 16 "inc/front.h"
 var $6229=HEAPF32[(($6228)>>2)]; //@line 61 "src/read.cpp"
 var $6230=((($6226)-($6156))|0); //@line 16 "inc/front.h"
 var $6231=$6230&$storemerge_i_i_i995; //@line 16 "inc/front.h"
 var $6232=(($6178+($6231<<2))|0); //@line 16 "inc/front.h"
 var $6233=($6209)-($6214); //@line 59 "src/read.cpp"
 var $6234=($6233)+($6217); //@line 60 "src/read.cpp"
 var $6235=($6234)-($6221); //@line 60 "src/read.cpp"
 var $6236=($6235)+($6225); //@line 61 "src/read.cpp"
 var $6237=($6236)-($6229); //@line 61 "src/read.cpp"
 var $6238=HEAPF32[(($6232)>>2)]; //@line 62 "src/read.cpp"
 var $6239=($6237)+($6238); //@line 62 "src/read.cpp"
 var $6240=HEAP32[(($6186)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6241=HEAP32[(($6188)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6242=HEAP32[(($6241)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$151$0=4;
 var $$etemp$151$1=0;

 var $$etemp$152$0=4;
 var $$etemp$152$1=0;

 var $6243=$6242; //@line 25 "src/rcdecoder.cpp"
 var $6244=HEAP32[(($6243)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6245=(($6244+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $6246=HEAP32[(($6245)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6247=(($6240+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6246]($6242,$6247) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1232;break; } else { label=1245;break; }
 case 1232: 
 var $6248=(($6240+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $6249=HEAP32[(($6248)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6250=(($6240+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $6251=HEAP32[(($6250)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6252=((($6249)-($6251))|0); //@line 26 "src/rcdecoder.cpp"
 var $6253=HEAP32[(($6247)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6254=(((($6252>>>0))/(($6253>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i982)>>2)]=$6254; //@line 26 "src/rcdecoder.cpp"
 var $6255=$6242; //@line 27 "src/rcdecoder.cpp"
 var $6256=HEAP32[(($6255)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6257=(($6256+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $6258=HEAP32[(($6257)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6259=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6258]($6242,$l_i_i_i982,$r_i_i_i983) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1233;break; } else { label=1245;break; }
 case 1233: 
 var $6260=HEAP32[(($6247)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6261=HEAP32[(($l_i_i_i982)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6262=(Math_imul($6260,$6261)|0); //@line 28 "src/rcdecoder.cpp"
 var $6263=HEAP32[(($6250)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6264=((($6263)+($6262))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($6250)>>2)]=$6264; //@line 28 "src/rcdecoder.cpp"
 var $6265=HEAP32[(($r_i_i_i983)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $6266=(Math_imul($6260,$6265)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($6247)>>2)]=$6266; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($6240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1234;break; } else { label=1245;break; }
 case 1234: 
 var $$etemp$153$0=4;
 var $$etemp$153$1=0;

 var $$etemp$154$0=4;
 var $$etemp$154$1=0;

 var $6267=($6259>>>0)>32; //@line 51 "inc/pcdecoder.inl"
 if($6267){label=1235;break;}else{label=1237;break;} //@line 51 "inc/pcdecoder.inl"
 case 1235: 
 var $6269=((($6259)-(33))|0); //@line 52 "inc/pcdecoder.inl"
 var $6270=HEAP32[(($6186)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $6271=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($6270,$6269) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1236;break; } else { label=1245;break; }
 case 1236: 
 var $6272=1<<$6269; //@line 53 "inc/pcdecoder.inl"
 var $6273=((($6272)+($6271))|0); //@line 53 "inc/pcdecoder.inl"
 var $6274=(HEAPF32[((tempDoublePtr)>>2)]=$6239,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $6275=$6274^-1; //@line 38 "inc/pcmap.h"
 var $6276=$6275>>31; //@line 40 "inc/pcmap.h"
 var $6277=$6276>>>1; //@line 40 "inc/pcmap.h"
 var $6278=$6277^$6275; //@line 40 "inc/pcmap.h"
 var $6279=((($6278)+($6273))|0); //@line 55 "inc/pcdecoder.inl"
 var $6280=$6279>>31; //@line 48 "inc/pcmap.h"
 var $6281=$6280>>>1; //@line 48 "inc/pcmap.h"
 var $6282=$6281^$6279; //@line 48 "inc/pcmap.h"
 var $6283=$6282^-1; //@line 49 "inc/pcmap.h"
 var $6284=(HEAP32[((tempDoublePtr)>>2)]=$6283,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $_0=$6284;label=1240;break; //@line 56 "inc/pcdecoder.inl"
 case 1237: 
 var $6286=($6259>>>0)<32; //@line undefined "inc/pcdecoder.inl"
 if($6286){label=1238;break;}else{var $_0=$6239;label=1240;break;} //@line undefined "inc/pcdecoder.inl"
 case 1238: 
 var $6288=(((31)-($6259))|0); //@line 59 "inc/pcdecoder.inl"
 var $6289=HEAP32[(($6186)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $6290=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIjEET_j($6289,$6288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1239;break; } else { label=1245;break; }
 case 1239: 
 var $6291=1<<$6288; //@line 60 "inc/pcdecoder.inl"
 var $6292=((($6291)+($6290))|0); //@line 60 "inc/pcdecoder.inl"
 var $6293=(HEAPF32[((tempDoublePtr)>>2)]=$6239,HEAP32[((tempDoublePtr)>>2)]); //@line 32 "inc/pcmap.h"
 var $6294=$6293^-1; //@line 38 "inc/pcmap.h"
 var $6295=$6294>>31; //@line 40 "inc/pcmap.h"
 var $6296=$6295>>>1; //@line 40 "inc/pcmap.h"
 var $6297=$6296^$6294; //@line 40 "inc/pcmap.h"
 var $6298=((($6297)-($6292))|0); //@line 62 "inc/pcdecoder.inl"
 var $6299=$6298>>31; //@line 48 "inc/pcmap.h"
 var $6300=$6299>>>1; //@line 48 "inc/pcmap.h"
 var $6301=$6300^$6298; //@line 48 "inc/pcmap.h"
 var $6302=$6301^-1; //@line 49 "inc/pcmap.h"
 var $6303=(HEAP32[((tempDoublePtr)>>2)]=$6302,HEAPF32[((tempDoublePtr)>>2)]); //@line 25 "inc/pcmap.h"
 var $_0=$6303;label=1240;break; //@line 63 "inc/pcdecoder.inl"
 case 1240: 
 var $_0;
 var $6304=(($_2+4)|0); //@line 65 "src/read.cpp"
 HEAPF32[(($_2)>>2)]=$_0; //@line 65 "src/read.cpp"
 var $_01013=1;var $f_i990_sroa_55_6=$f_i990_sroa_55_5;label=1241;break; //@line 22 "inc/front.h"
 case 1241: 
 var $f_i990_sroa_55_6;
 var $_01013;
 var $6306=((($f_i990_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $6307=$f_i990_sroa_55_6&$storemerge_i_i_i995; //@line 23 "inc/front.h"
 var $6308=(($6178+($6307<<2))|0); //@line 23 "inc/front.h"
 HEAPF32[(($6308)>>2)]=$_0; //@line 23 "inc/front.h"
 var $6309=((($_01013)-(1))|0); //@line 23 "inc/front.h"
 var $6310=($6309|0)==0; //@line 23 "inc/front.h"
 if($6310){label=1242;break;}else{var $_01013=$6309;var $f_i990_sroa_55_6=$6306;label=1241;break;} //@line 23 "inc/front.h"
 case 1242: 
 var $6311=((($x_i991_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_2=$6304;var $f_i990_sroa_55_5=$6306;var $x_i991_0=$6311;label=1230;break; //@line 49 "src/read.cpp"
 case 1243: 
 var $6313$0 = ___cxa_find_matching_catch(-1, -1); var $6313$1 = tempRet0;
 var $6314=$6313$0;
 var $6315=$6313$1;
 var $6316=($6145|0)==0;
 if($6316){var $_01018=$6314;var $_01019=$6315;label=1255;break;}else{label=1244;break;}
 case 1244: 
 _free($6145);
 var $_01018=$6314;var $_01019=$6315;label=1255;break;
 case 1245: 
 var $6319$0 = ___cxa_find_matching_catch(-1, -1); var $6319$1 = tempRet0;
 var $6320=$6319$0;
 var $6321=$6319$1;
 var $6322=($6170|0)==0; //@line 11 "inc/front.h"
 if($6322){var $_01018=$6320;var $_01019=$6321;label=1255;break;}else{label=1246;break;} //@line 11 "inc/front.h"
 case 1246: 
 _free($6170);
 var $_01018=$6320;var $_01019=$6321;label=1255;break; //@line 11 "inc/front.h"
 case 1247: 
 var $6324=((($y_i992_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_1=$_2;var $f_i990_sroa_55_3=$f_i990_sroa_55_5;var $y_i992_0=$6324;label=1228;break; //@line 48 "src/read.cpp"
 case 1248: 
 var $6326=((($z_i993_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01017=$_1;var $f_i990_sroa_55_1=$f_i990_sroa_55_3;var $z_i993_0=$6326;label=1226;break; //@line 47 "src/read.cpp"
 case 1249: 
 var $6328=($6149|0)==0; //@line 69 "src/read.cpp"
 if($6328){label=1251;break;}else{label=1250;break;} //@line 69 "src/read.cpp"
 case 1250: 
 _free($6149);
 label=1251;break; //@line 69 "src/read.cpp"
 case 1251: 
 var $6330=HEAP32[(($rm_i988)>>2)]; //@line 70 "src/read.cpp"
 var $6331=($6330|0)==0; //@line 70 "src/read.cpp"
 if($6331){label=1253;break;}else{label=1252;break;} //@line 70 "src/read.cpp"
 case 1252: 
 var $6333=$6330; //@line 70 "src/read.cpp"
 var $6334=HEAP32[(($6333)>>2)]; //@line 70 "src/read.cpp"
 var $6335=(($6334+4)|0); //@line 70 "src/read.cpp"
 var $6336=HEAP32[(($6335)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$6336]($6330); //@line 70 "src/read.cpp"
 label=1253;break; //@line 70 "src/read.cpp"
 case 1253: 
 var $6338=($6170|0)==0; //@line 11 "inc/front.h"
 if($6338){label=1257;break;}else{label=1254;break;} //@line 11 "inc/front.h"
 case 1254: 
 _free($6170);
 label=1257;break; //@line 11 "inc/front.h"
 case 1255: 
 var $_01019;
 var $_01018;
 var $6339$0=$_01018;
 var $6339$1=0;
 var $6340$0=$6339$0;
 var $6340$1=$_01019;
 ___resumeException($6340$0) //@line 71 "src/read.cpp"
 case 1256: 
 HEAP32[((_fpzip_errno)>>2)]=5; //@line 199 "src/read.cpp"
 var $storemerge1=0;label=1258;break; //@line 200 "src/read.cpp"
 case 1257: 
 var $6342=HEAP32[(($4)>>2)]; //@line 202 "src/read.cpp"
 var $6343=HEAP32[(($5)>>2)]; //@line 202 "src/read.cpp"
 var $6344=(Math_imul($6342,$6343)|0); //@line 202 "src/read.cpp"
 var $6345=HEAP32[(($6)>>2)]; //@line 202 "src/read.cpp"
 var $6346=(Math_imul($6344,$6345)|0); //@line 202 "src/read.cpp"
 var $6347=(($_01012+($6346<<2))|0); //@line 202 "src/read.cpp"
 var $6348=((($storemerge)+(1))|0); //@line 164 "src/read.cpp"
 var $storemerge=$6348;var $_01012=$6347;label=2;break; //@line 164 "src/read.cpp"
 case 1258: 
 var $storemerge1;
 STACKTOP=sp;return $storemerge1; //@line 205 "src/read.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZL12decompress4dIdEbP8FPZinputPT_($stream,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+744)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $l_i_i_i1022=sp;
 var $r_i_i_i1023=(sp)+(8);
 var $rm_i1028=(sp)+(16);
 var $l_i_i_i986=(sp)+(24);
 var $r_i_i_i987=(sp)+(32);
 var $rm_i992=(sp)+(40);
 var $l_i_i_i950=(sp)+(48);
 var $r_i_i_i951=(sp)+(56);
 var $rm_i956=(sp)+(64);
 var $l_i_i_i914=(sp)+(72);
 var $r_i_i_i915=(sp)+(80);
 var $rm_i920=(sp)+(88);
 var $l_i_i_i878=(sp)+(96);
 var $r_i_i_i879=(sp)+(104);
 var $rm_i884=(sp)+(112);
 var $l_i_i_i842=(sp)+(120);
 var $r_i_i_i843=(sp)+(128);
 var $rm_i848=(sp)+(136);
 var $l_i_i_i806=(sp)+(144);
 var $r_i_i_i807=(sp)+(152);
 var $rm_i812=(sp)+(160);
 var $l_i_i_i770=(sp)+(168);
 var $r_i_i_i771=(sp)+(176);
 var $rm_i776=(sp)+(184);
 var $l_i_i_i734=(sp)+(192);
 var $r_i_i_i735=(sp)+(200);
 var $rm_i740=(sp)+(208);
 var $l_i_i_i698=(sp)+(216);
 var $r_i_i_i699=(sp)+(224);
 var $rm_i704=(sp)+(232);
 var $l_i_i_i662=(sp)+(240);
 var $r_i_i_i663=(sp)+(248);
 var $rm_i668=(sp)+(256);
 var $l_i_i_i626=(sp)+(264);
 var $r_i_i_i627=(sp)+(272);
 var $rm_i632=(sp)+(280);
 var $l_i_i_i590=(sp)+(288);
 var $r_i_i_i591=(sp)+(296);
 var $rm_i596=(sp)+(304);
 var $l_i_i_i554=(sp)+(312);
 var $r_i_i_i555=(sp)+(320);
 var $rm_i560=(sp)+(328);
 var $l_i_i_i518=(sp)+(336);
 var $r_i_i_i519=(sp)+(344);
 var $rm_i524=(sp)+(352);
 var $l_i_i_i482=(sp)+(360);
 var $r_i_i_i483=(sp)+(368);
 var $rm_i488=(sp)+(376);
 var $l_i_i_i446=(sp)+(384);
 var $r_i_i_i447=(sp)+(392);
 var $rm_i452=(sp)+(400);
 var $l_i_i_i410=(sp)+(408);
 var $r_i_i_i411=(sp)+(416);
 var $rm_i416=(sp)+(424);
 var $l_i_i_i374=(sp)+(432);
 var $r_i_i_i375=(sp)+(440);
 var $rm_i380=(sp)+(448);
 var $l_i_i_i338=(sp)+(456);
 var $r_i_i_i339=(sp)+(464);
 var $rm_i344=(sp)+(472);
 var $l_i_i_i302=(sp)+(480);
 var $r_i_i_i303=(sp)+(488);
 var $rm_i308=(sp)+(496);
 var $l_i_i_i266=(sp)+(504);
 var $r_i_i_i267=(sp)+(512);
 var $rm_i272=(sp)+(520);
 var $l_i_i_i230=(sp)+(528);
 var $r_i_i_i231=(sp)+(536);
 var $rm_i236=(sp)+(544);
 var $l_i_i_i194=(sp)+(552);
 var $r_i_i_i195=(sp)+(560);
 var $rm_i200=(sp)+(568);
 var $l_i_i_i158=(sp)+(576);
 var $r_i_i_i159=(sp)+(584);
 var $rm_i164=(sp)+(592);
 var $l_i_i_i122=(sp)+(600);
 var $r_i_i_i123=(sp)+(608);
 var $rm_i128=(sp)+(616);
 var $l_i_i_i86=(sp)+(624);
 var $r_i_i_i87=(sp)+(632);
 var $rm_i92=(sp)+(640);
 var $l_i_i_i56=(sp)+(648);
 var $r_i_i_i57=(sp)+(656);
 var $rm_i59=(sp)+(664);
 var $l_i_i_i28=(sp)+(672);
 var $r_i_i_i29=(sp)+(680);
 var $rm_i33=(sp)+(688);
 var $l_i_i_i2=(sp)+(696);
 var $r_i_i_i3=(sp)+(704);
 var $rm_i7=(sp)+(712);
 var $l_i_i_i=(sp)+(720);
 var $r_i_i_i=(sp)+(728);
 var $rm_i=(sp)+(736);
 var $1=(($stream+20)|0); //@line 164 "src/read.cpp"
 var $2=(($stream+4)|0); //@line 165 "src/read.cpp"
 var $3=(($stream+24)|0); //@line 197 "src/read.cpp"
 var $4=(($stream+8)|0); //@line 197 "src/read.cpp"
 var $5=(($stream+12)|0); //@line 197 "src/read.cpp"
 var $6=(($stream+16)|0); //@line 197 "src/read.cpp"
 var $7=$rm_i1028; //@line 32 "src/read.cpp"
 var $8=$l_i_i_i1022; //@line 0 "src/rcdecoder.cpp"
 var $9=$r_i_i_i1023; //@line 0 "src/rcdecoder.cpp"
 var $10=$rm_i; //@line 32 "src/read.cpp"
 var $11=$l_i_i_i; //@line 0 "src/rcdecoder.cpp"
 var $12=$r_i_i_i; //@line 0 "src/rcdecoder.cpp"
 var $13=$rm_i7; //@line 32 "src/read.cpp"
 var $14=$l_i_i_i2; //@line 0 "src/rcdecoder.cpp"
 var $15=$r_i_i_i3; //@line 0 "src/rcdecoder.cpp"
 var $16=$rm_i33; //@line 32 "src/read.cpp"
 var $17=$l_i_i_i28; //@line 0 "src/rcdecoder.cpp"
 var $18=$r_i_i_i29; //@line 0 "src/rcdecoder.cpp"
 var $19=$rm_i59; //@line 32 "src/read.cpp"
 var $20=$l_i_i_i56; //@line 0 "src/rcdecoder.cpp"
 var $21=$r_i_i_i57; //@line 0 "src/rcdecoder.cpp"
 var $22=$rm_i92; //@line 32 "src/read.cpp"
 var $23=$l_i_i_i86; //@line 0 "src/rcdecoder.cpp"
 var $24=$r_i_i_i87; //@line 0 "src/rcdecoder.cpp"
 var $25=$rm_i128; //@line 32 "src/read.cpp"
 var $26=$l_i_i_i122; //@line 0 "src/rcdecoder.cpp"
 var $27=$r_i_i_i123; //@line 0 "src/rcdecoder.cpp"
 var $28=$rm_i164; //@line 32 "src/read.cpp"
 var $29=$l_i_i_i158; //@line 0 "src/rcdecoder.cpp"
 var $30=$r_i_i_i159; //@line 0 "src/rcdecoder.cpp"
 var $31=$rm_i200; //@line 32 "src/read.cpp"
 var $32=$l_i_i_i194; //@line 0 "src/rcdecoder.cpp"
 var $33=$r_i_i_i195; //@line 0 "src/rcdecoder.cpp"
 var $34=$rm_i236; //@line 32 "src/read.cpp"
 var $35=$l_i_i_i230; //@line 0 "src/rcdecoder.cpp"
 var $36=$r_i_i_i231; //@line 0 "src/rcdecoder.cpp"
 var $37=$rm_i272; //@line 32 "src/read.cpp"
 var $38=$l_i_i_i266; //@line 0 "src/rcdecoder.cpp"
 var $39=$r_i_i_i267; //@line 0 "src/rcdecoder.cpp"
 var $40=$rm_i308; //@line 32 "src/read.cpp"
 var $41=$l_i_i_i302; //@line 0 "src/rcdecoder.cpp"
 var $42=$r_i_i_i303; //@line 0 "src/rcdecoder.cpp"
 var $43=$rm_i344; //@line 32 "src/read.cpp"
 var $44=$l_i_i_i338; //@line 0 "src/rcdecoder.cpp"
 var $45=$r_i_i_i339; //@line 0 "src/rcdecoder.cpp"
 var $46=$rm_i380; //@line 32 "src/read.cpp"
 var $47=$l_i_i_i374; //@line 0 "src/rcdecoder.cpp"
 var $48=$r_i_i_i375; //@line 0 "src/rcdecoder.cpp"
 var $49=$rm_i416; //@line 32 "src/read.cpp"
 var $50=$l_i_i_i410; //@line 0 "src/rcdecoder.cpp"
 var $51=$r_i_i_i411; //@line 0 "src/rcdecoder.cpp"
 var $52=$rm_i452; //@line 32 "src/read.cpp"
 var $53=$l_i_i_i446; //@line 0 "src/rcdecoder.cpp"
 var $54=$r_i_i_i447; //@line 0 "src/rcdecoder.cpp"
 var $55=$rm_i488; //@line 32 "src/read.cpp"
 var $56=$l_i_i_i482; //@line 0 "src/rcdecoder.cpp"
 var $57=$r_i_i_i483; //@line 0 "src/rcdecoder.cpp"
 var $58=$rm_i524; //@line 32 "src/read.cpp"
 var $59=$l_i_i_i518; //@line 0 "src/rcdecoder.cpp"
 var $60=$r_i_i_i519; //@line 0 "src/rcdecoder.cpp"
 var $61=$rm_i560; //@line 32 "src/read.cpp"
 var $62=$l_i_i_i554; //@line 0 "src/rcdecoder.cpp"
 var $63=$r_i_i_i555; //@line 0 "src/rcdecoder.cpp"
 var $64=$rm_i596; //@line 32 "src/read.cpp"
 var $65=$l_i_i_i590; //@line 0 "src/rcdecoder.cpp"
 var $66=$r_i_i_i591; //@line 0 "src/rcdecoder.cpp"
 var $67=$rm_i632; //@line 32 "src/read.cpp"
 var $68=$l_i_i_i626; //@line 0 "src/rcdecoder.cpp"
 var $69=$r_i_i_i627; //@line 0 "src/rcdecoder.cpp"
 var $70=$rm_i668; //@line 32 "src/read.cpp"
 var $71=$l_i_i_i662; //@line 0 "src/rcdecoder.cpp"
 var $72=$r_i_i_i663; //@line 0 "src/rcdecoder.cpp"
 var $73=$rm_i704; //@line 32 "src/read.cpp"
 var $74=$l_i_i_i698; //@line 0 "src/rcdecoder.cpp"
 var $75=$r_i_i_i699; //@line 0 "src/rcdecoder.cpp"
 var $76=$rm_i740; //@line 32 "src/read.cpp"
 var $77=$l_i_i_i734; //@line 0 "src/rcdecoder.cpp"
 var $78=$r_i_i_i735; //@line 0 "src/rcdecoder.cpp"
 var $79=$rm_i776; //@line 32 "src/read.cpp"
 var $80=$l_i_i_i770; //@line 0 "src/rcdecoder.cpp"
 var $81=$r_i_i_i771; //@line 0 "src/rcdecoder.cpp"
 var $82=$rm_i812; //@line 32 "src/read.cpp"
 var $83=$l_i_i_i806; //@line 0 "src/rcdecoder.cpp"
 var $84=$r_i_i_i807; //@line 0 "src/rcdecoder.cpp"
 var $85=$rm_i848; //@line 32 "src/read.cpp"
 var $86=$l_i_i_i842; //@line 0 "src/rcdecoder.cpp"
 var $87=$r_i_i_i843; //@line 0 "src/rcdecoder.cpp"
 var $88=$rm_i884; //@line 32 "src/read.cpp"
 var $89=$l_i_i_i878; //@line 0 "src/rcdecoder.cpp"
 var $90=$r_i_i_i879; //@line 0 "src/rcdecoder.cpp"
 var $91=$rm_i920; //@line 32 "src/read.cpp"
 var $92=$l_i_i_i914; //@line 0 "src/rcdecoder.cpp"
 var $93=$r_i_i_i915; //@line 0 "src/rcdecoder.cpp"
 var $94=$rm_i956; //@line 32 "src/read.cpp"
 var $95=$l_i_i_i950; //@line 0 "src/rcdecoder.cpp"
 var $96=$r_i_i_i951; //@line 0 "src/rcdecoder.cpp"
 var $97=$rm_i992; //@line 32 "src/read.cpp"
 var $98=$l_i_i_i986; //@line 0 "src/rcdecoder.cpp"
 var $99=$r_i_i_i987; //@line 0 "src/rcdecoder.cpp"
 var $storemerge=0;var $_01052=$data;label=2;break; //@line 164 "src/read.cpp"
 case 2: 
 var $_01052;
 var $storemerge;
 var $101=HEAP32[(($1)>>2)]; //@line 164 "src/read.cpp"
 var $102=($storemerge|0)<($101|0); //@line 164 "src/read.cpp"
 if($102){label=3;break;}else{var $storemerge1=1;label=1286;break;} //@line 164 "src/read.cpp"
 case 3: 
 var $104=HEAP32[(($2)>>2)]; //@line 165 "src/read.cpp"
 switch(($104|0)){case 54:{ label=1033;break;}case 56:{ label=1075;break;}case 10:{ label=109;break;}case 58:{ label=1117;break;}case 60:{ label=1159;break;}case 62:{ label=1201;break;}case 0:case 64:{ label=1243;break;}case 12:{ label=151;break;}case 14:{ label=193;break;}case 16:{ label=235;break;}case 18:{ label=277;break;}case 20:{ label=319;break;}case 22:{ label=361;break;}case 6:{ label=39;break;}case 4:{ label=4;break;}case 24:{ label=403;break;}case 26:{ label=445;break;}case 28:{ label=487;break;}case 30:{ label=529;break;}case 32:{ label=571;break;}case 34:{ label=613;break;}case 36:{ label=655;break;}case 38:{ label=697;break;}case 40:{ label=739;break;}case 8:{ label=74;break;}case 42:{ label=781;break;}case 44:{ label=823;break;}case 46:{ label=865;break;}case 48:{ label=907;break;}case 50:{ label=949;break;}case 52:{ label=991;break;}default:{label=1284;break;}}break;
 case 4: 
 var $106=HEAP32[(($3)>>2)]; //@line 167 "src/read.cpp"
 var $107=HEAP32[(($4)>>2)]; //@line 167 "src/read.cpp"
 var $108=HEAP32[(($5)>>2)]; //@line 167 "src/read.cpp"
 var $109=HEAP32[(($6)>>2)]; //@line 167 "src/read.cpp"
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $110=__Znwj(48); //@line 41 "src/read.cpp"
 var $111=$110; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($111,0,31,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=26;break; } //@line 41 "src/read.cpp"
 case 5: 
 var $113=$110; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i)>>2)]=$113; //@line 71 "src/read.cpp"
 var $114=__Znwj(12); //@line 42 "src/read.cpp"
 var $115=(($114+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $116=$115; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($116)>>2)]=$106; //@line 6 "inc/pcdecoder.inl"
 var $117=(($114+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $118=$117; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($118)>>2)]=$rm_i; //@line 6 "inc/pcdecoder.inl"
 var $119=((($107)+(1))|0); //@line 10 "inc/front.h"
 var $120=((($108)+(1))|0); //@line 10 "inc/front.h"
 var $121=(Math_imul($119,$120)|0); //@line 10 "inc/front.h"
 var $122=((($107)+(2))|0); //@line 9 "inc/front.h"
 var $123=((($122)+($121))|0); //@line 9 "inc/front.h"
 var $124=((($123)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i=$124;label=6;break; //@line 45 "inc/front.h"
 case 6: 
 var $storemerge_i_i_i;
 var $126=((($storemerge_i_i_i)+(1))|0); //@line 45 "inc/front.h"
 var $127=$storemerge_i_i_i&$126; //@line 45 "inc/front.h"
 var $128=($127|0)==0; //@line 45 "inc/front.h"
 if($128){label=8;break;}else{label=7;break;} //@line 45 "inc/front.h"
 case 7: 
 var $130=$storemerge_i_i_i|$126; //@line 45 "inc/front.h"
 var $storemerge_i_i_i=$130;label=6;break; //@line 45 "inc/front.h"
 case 8: 
 var $131$0=_llvm_umul_with_overflow_i32($126,8);
 var $131$1=tempRet0;
 var $132=$131$1;
 var $133=$131$0;
 var $134=($132?-1:$133); //@line 9 "inc/front.h"
 var $135=(function() { try { __THREW__ = 0; return __Znwj($134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=9;break; }
 case 9: 
 var $137$0 = ___cxa_find_matching_catch(-1, -1); var $137$1 = tempRet0;
 var $138=$137$1;
 var $139=($138|0)<0;
 if($139){label=10;break;}else{label=11;break;}
 case 10: 
 var $141=$137$0;
 ___cxa_call_unexpected($141);
 throw "Reached an unreachable!";
 case 11: 
 ___resumeException($137$0)
 case 12: 
 var $143=$135; //@line 9 "inc/front.h"
 var $f_i_sroa_55_0=0;var $_01075=$121;label=13;break; //@line 22 "inc/front.h"
 case 13: 
 var $_01075;
 var $f_i_sroa_55_0;
 var $145=((($f_i_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $146=$f_i_sroa_55_0&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $147=(($143+($146<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($147)>>3)]=0; //@line 23 "inc/front.h"
 var $148=((($_01075)-(1))|0); //@line 23 "inc/front.h"
 var $149=($148|0)==0; //@line 23 "inc/front.h"
 if($149){label=14;break;}else{var $f_i_sroa_55_0=$145;var $_01075=$148;label=13;break;} //@line 23 "inc/front.h"
 case 14: 
 var $150=(($114+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $151=$150; //@line 25 "inc/pcdecoder.inl"
 var $152=(($114+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $153=$152; //@line 25 "inc/pcdecoder.inl"
 var $z_i_0=0;var $f_i_sroa_55_1=$145;var $_01063=$_01052;label=15;break; //@line 47 "src/read.cpp"
 case 15: 
 var $_01063;
 var $f_i_sroa_55_1;
 var $z_i_0;
 var $155=($z_i_0>>>0)<($109>>>0); //@line 47 "src/read.cpp"
 if($155){var $f_i_sroa_55_2=$f_i_sroa_55_1;var $_01077=$119;label=16;break;}else{label=32;break;} //@line 47 "src/read.cpp"
 case 16: 
 var $_01077;
 var $f_i_sroa_55_2;
 var $157=((($f_i_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $158=$f_i_sroa_55_2&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $159=(($143+($158<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($159)>>3)]=0; //@line 23 "inc/front.h"
 var $160=((($_01077)-(1))|0); //@line 23 "inc/front.h"
 var $161=($160|0)==0; //@line 23 "inc/front.h"
 if($161){var $y_i_0=0;var $f_i_sroa_55_3=$157;var $_11064=$_01063;label=17;break;}else{var $f_i_sroa_55_2=$157;var $_01077=$160;label=16;break;} //@line 23 "inc/front.h"
 case 17: 
 var $_11064;
 var $f_i_sroa_55_3;
 var $y_i_0;
 var $162=($y_i_0>>>0)<($108>>>0); //@line 48 "src/read.cpp"
 if($162){var $f_i_sroa_55_4=$f_i_sroa_55_3;var $_01082=1;label=18;break;}else{label=31;break;} //@line 48 "src/read.cpp"
 case 18: 
 var $_01082;
 var $f_i_sroa_55_4;
 var $164=((($f_i_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $165=$f_i_sroa_55_4&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $166=(($143+($165<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($166)>>3)]=0; //@line 23 "inc/front.h"
 var $167=((($_01082)-(1))|0); //@line 23 "inc/front.h"
 var $168=($167|0)==0; //@line 23 "inc/front.h"
 if($168){var $x_i_0=0;var $f_i_sroa_55_5=$164;var $_21065=$_11064;label=19;break;}else{var $f_i_sroa_55_4=$164;var $_01082=$167;label=18;break;} //@line 23 "inc/front.h"
 case 19: 
 var $_21065;
 var $f_i_sroa_55_5;
 var $x_i_0;
 var $169=($x_i_0>>>0)<($107>>>0); //@line 49 "src/read.cpp"
 if($169){label=20;break;}else{label=30;break;} //@line 49 "src/read.cpp"
 case 20: 
 var $171=((($f_i_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $172=$171&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $173=(($143+($172<<3))|0); //@line 16 "inc/front.h"
 var $174=HEAPF64[(($173)>>3)]; //@line 59 "src/read.cpp"
 var $ld$1$0=(($173)|0);
 var $174$$SHADOW$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($173+4)|0);
 var $174$$SHADOW$1=HEAP32[(($ld$2$1)>>2)];
 var $175=((($f_i_sroa_55_5)-($119))|0); //@line 16 "inc/front.h"
 var $176=((($175)-($121))|0); //@line 16 "inc/front.h"
 var $177=$176&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $178=(($143+($177<<3))|0); //@line 16 "inc/front.h"
 var $179=HEAPF64[(($178)>>3)]; //@line 59 "src/read.cpp"
 var $ld$3$0=(($178)|0);
 var $179$$SHADOW$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($178+4)|0);
 var $179$$SHADOW$1=HEAP32[(($ld$4$1)>>2)];
 var $180=$175&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $181=(($143+($180<<3))|0); //@line 16 "inc/front.h"
 var $182=HEAPF64[(($181)>>3)]; //@line 60 "src/read.cpp"
 var $ld$5$0=(($181)|0);
 var $182$$SHADOW$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($181+4)|0);
 var $182$$SHADOW$1=HEAP32[(($ld$6$1)>>2)];
 var $183=((($171)-($121))|0); //@line 16 "inc/front.h"
 var $184=$183&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $185=(($143+($184<<3))|0); //@line 16 "inc/front.h"
 var $186=HEAPF64[(($185)>>3)]; //@line 60 "src/read.cpp"
 var $ld$7$0=(($185)|0);
 var $186$$SHADOW$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($185+4)|0);
 var $186$$SHADOW$1=HEAP32[(($ld$8$1)>>2)];
 var $187=((($f_i_sroa_55_5)-($121))|0); //@line 16 "inc/front.h"
 var $188=$187&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $189=(($143+($188<<3))|0); //@line 16 "inc/front.h"
 var $190=HEAPF64[(($189)>>3)]; //@line 61 "src/read.cpp"
 var $ld$9$0=(($189)|0);
 var $190$$SHADOW$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($189+4)|0);
 var $190$$SHADOW$1=HEAP32[(($ld$10$1)>>2)];
 var $191=((($171)-($119))|0); //@line 16 "inc/front.h"
 var $192=$191&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $193=(($143+($192<<3))|0); //@line 16 "inc/front.h"
 var $194=HEAPF64[(($193)>>3)]; //@line 61 "src/read.cpp"
 var $ld$11$0=(($193)|0);
 var $194$$SHADOW$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=(($193+4)|0);
 var $194$$SHADOW$1=HEAP32[(($ld$12$1)>>2)];
 var $195=((($191)-($121))|0); //@line 16 "inc/front.h"
 var $196=$195&$storemerge_i_i_i; //@line 16 "inc/front.h"
 var $197=(($143+($196<<3))|0); //@line 16 "inc/front.h"
 var $198=($174)-($179); //@line 59 "src/read.cpp"
 var $199=($198)+($182); //@line 60 "src/read.cpp"
 var $200=($199)-($186); //@line 60 "src/read.cpp"
 var $201=($200)+($190); //@line 61 "src/read.cpp"
 var $202=($201)-($194); //@line 61 "src/read.cpp"
 var $203=HEAPF64[(($197)>>3)]; //@line 62 "src/read.cpp"
 var $ld$13$0=(($197)|0);
 var $203$$SHADOW$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($197+4)|0);
 var $203$$SHADOW$1=HEAP32[(($ld$14$1)>>2)];
 var $204=($202)+($203); //@line 62 "src/read.cpp"
 HEAPF64[(tempDoublePtr)>>3]=$204; var $205$0=HEAP32[((tempDoublePtr)>>2)];var $205$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$15$0=-1;
 var $$etemp$15$1=-1;
 var $206$0=$205$0^$$etemp$15$0;
 var $206$1=$205$1^$$etemp$15$1;
 var $207$0=($206$1>>>28)|(0<<4);
 var $207$1=(0>>>28)|(0<<4);
 var $208$0=($206$1>>31)|((((((($206$1|0)<0))|0)?-1:0))<<1);
 var $208$1=((((((($206$1|0)<0))|0)?-1:0))>>31)|((((((($206$1|0)<0))|0)?-1:0))<<1);
 var $209$0=($208$1>>>29)|(0<<3);
 var $209$1=(0>>>29)|(0<<3);
 var $210$0=$207$0^$209$0;
 var $210$1=$207$1^$209$1;
 var $211=HEAP32[(($151)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $212=HEAP32[(($153)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $213=HEAP32[(($212)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $214=$213; //@line 25 "src/rcdecoder.cpp"
 var $215=HEAP32[(($214)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $216=(($215+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $217=HEAP32[(($216)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $218=(($211+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$217]($213,$218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=28;break; }
 case 21: 
 var $219=(($211+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $220=HEAP32[(($219)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $221=(($211+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $222=HEAP32[(($221)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $223=((($220)-($222))|0); //@line 26 "src/rcdecoder.cpp"
 var $224=HEAP32[(($218)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $225=(((($223>>>0))/(($224>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i)>>2)]=$225; //@line 26 "src/rcdecoder.cpp"
 var $226=$213; //@line 27 "src/rcdecoder.cpp"
 var $227=HEAP32[(($226)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $228=(($227+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $229=HEAP32[(($228)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $230=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($213,$l_i_i_i,$r_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=28;break; }
 case 22: 
 var $231=HEAP32[(($218)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $232=HEAP32[(($l_i_i_i)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $233=(Math_imul($231,$232)|0); //@line 28 "src/rcdecoder.cpp"
 var $234=HEAP32[(($221)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $235=((($234)+($233))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($221)>>2)]=$235; //@line 28 "src/rcdecoder.cpp"
 var $236=HEAP32[(($r_i_i_i)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $237=(Math_imul($231,$236)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($218)>>2)]=$237; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=28;break; }
 case 23: 
 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $238$0=$230;
 var $238$1=0;
 var $239$0=_i64Add($210$0,$210$1,$238$0,$238$1);var $239$1=tempRet0; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$20$0=-15;
 var $$etemp$20$1=-1;
 var $240$0=_i64Add($239$0,$239$1,$$etemp$20$0,$$etemp$20$1);var $240$1=tempRet0; //@line 25 "inc/pcdecoder.inl"
 var $241$0=($240$0>>>3)|($240$1<<29);
 var $241$1=($240$1>>>3)|(0<<29);
 var $$etemp$21$0=0;
 var $$etemp$21$1=0;
 var $242$0=_i64Subtract($$etemp$21$0,$$etemp$21$1,$241$0,$241$1);var $242$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $243$0=($242$1>>>29)|(0<<3);
 var $243$1=(0>>>29)|(0<<3);
 var $244$0=$243$0^$240$0;
 var $244$1=$243$1^$240$1;
 var $245$0=(0<<28)|(0>>>4);
 var $245$1=($244$0<<28)|(0>>>4);
 var $$etemp$22$0=0;
 var $$etemp$22$1=-268435456;
 var $246$0=$245$0^$$etemp$22$0;
 var $246$1=$245$1^$$etemp$22$1;
 var $247=(HEAP32[((tempDoublePtr)>>2)]=$246$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$246$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $248=(($_21065+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21065)>>3)]=$247; //@line 65 "src/read.cpp"
 var $f_i_sroa_55_6=$f_i_sroa_55_5;var $_01096=1;label=24;break; //@line 22 "inc/front.h"
 case 24: 
 var $_01096;
 var $f_i_sroa_55_6;
 var $250=((($f_i_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $251=$f_i_sroa_55_6&$storemerge_i_i_i; //@line 23 "inc/front.h"
 var $252=(($143+($251<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($252)>>3)]=$247; //@line 23 "inc/front.h"
 var $253=((($_01096)-(1))|0); //@line 23 "inc/front.h"
 var $254=($253|0)==0; //@line 23 "inc/front.h"
 if($254){label=25;break;}else{var $f_i_sroa_55_6=$250;var $_01096=$253;label=24;break;} //@line 23 "inc/front.h"
 case 25: 
 var $255=((($x_i_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i_0=$255;var $f_i_sroa_55_5=$250;var $_21065=$248;label=19;break; //@line 49 "src/read.cpp"
 case 26: 
 var $257$0 = ___cxa_find_matching_catch(-1, -1); var $257$1 = tempRet0;
 var $258=$257$0;
 var $259=$257$1;
 var $260=($110|0)==0;
 if($260){var $_01060=$259;var $_01061=$258;label=38;break;}else{label=27;break;}
 case 27: 
 _free($110);
 var $_01060=$259;var $_01061=$258;label=38;break;
 case 28: 
 var $263$0 = ___cxa_find_matching_catch(-1, -1); var $263$1 = tempRet0;
 var $264=$263$0;
 var $265=$263$1;
 var $266=($135|0)==0; //@line 11 "inc/front.h"
 if($266){var $_01060=$265;var $_01061=$264;label=38;break;}else{label=29;break;} //@line 11 "inc/front.h"
 case 29: 
 _free($135);
 var $_01060=$265;var $_01061=$264;label=38;break; //@line 11 "inc/front.h"
 case 30: 
 var $268=((($y_i_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i_0=$268;var $f_i_sroa_55_3=$f_i_sroa_55_5;var $_11064=$_21065;label=17;break; //@line 48 "src/read.cpp"
 case 31: 
 var $270=((($z_i_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i_0=$270;var $f_i_sroa_55_1=$f_i_sroa_55_3;var $_01063=$_11064;label=15;break; //@line 47 "src/read.cpp"
 case 32: 
 var $272=($114|0)==0; //@line 69 "src/read.cpp"
 if($272){label=34;break;}else{label=33;break;} //@line 69 "src/read.cpp"
 case 33: 
 _free($114);
 label=34;break; //@line 69 "src/read.cpp"
 case 34: 
 var $274=HEAP32[(($rm_i)>>2)]; //@line 70 "src/read.cpp"
 var $275=($274|0)==0; //@line 70 "src/read.cpp"
 if($275){label=36;break;}else{label=35;break;} //@line 70 "src/read.cpp"
 case 35: 
 var $277=$274; //@line 70 "src/read.cpp"
 var $278=HEAP32[(($277)>>2)]; //@line 70 "src/read.cpp"
 var $279=(($278+4)|0); //@line 70 "src/read.cpp"
 var $280=HEAP32[(($279)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$280]($274); //@line 70 "src/read.cpp"
 label=36;break; //@line 70 "src/read.cpp"
 case 36: 
 var $282=($135|0)==0; //@line 11 "inc/front.h"
 if($282){label=1285;break;}else{label=37;break;} //@line 11 "inc/front.h"
 case 37: 
 _free($135);
 label=1285;break; //@line 11 "inc/front.h"
 case 38: 
 var $_01061;
 var $_01060;
 var $283$0=$_01061;
 var $283$1=0;
 var $284$0=$283$0;
 var $284$1=$_01060;
 ___resumeException($284$0) //@line 71 "src/read.cpp"
 case 39: 
 var $286=HEAP32[(($3)>>2)]; //@line 168 "src/read.cpp"
 var $287=HEAP32[(($4)>>2)]; //@line 168 "src/read.cpp"
 var $288=HEAP32[(($5)>>2)]; //@line 168 "src/read.cpp"
 var $289=HEAP32[(($6)>>2)]; //@line 168 "src/read.cpp"
 var $$etemp$23$0=4;
 var $$etemp$23$1=0;

 var $290=__Znwj(48); //@line 41 "src/read.cpp"
 var $291=$290; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($291,0,127,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=61;break; } //@line 41 "src/read.cpp"
 case 40: 
 var $293=$290; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i7)>>2)]=$293; //@line 71 "src/read.cpp"
 var $294=__Znwj(12); //@line 42 "src/read.cpp"
 var $295=(($294+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $296=$295; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($296)>>2)]=$286; //@line 6 "inc/pcdecoder.inl"
 var $297=(($294+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $298=$297; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($298)>>2)]=$rm_i7; //@line 6 "inc/pcdecoder.inl"
 var $299=((($287)+(1))|0); //@line 10 "inc/front.h"
 var $300=((($288)+(1))|0); //@line 10 "inc/front.h"
 var $301=(Math_imul($299,$300)|0); //@line 10 "inc/front.h"
 var $302=((($287)+(2))|0); //@line 9 "inc/front.h"
 var $303=((($302)+($301))|0); //@line 9 "inc/front.h"
 var $304=((($303)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i14=$304;label=41;break; //@line 45 "inc/front.h"
 case 41: 
 var $storemerge_i_i_i14;
 var $306=((($storemerge_i_i_i14)+(1))|0); //@line 45 "inc/front.h"
 var $307=$storemerge_i_i_i14&$306; //@line 45 "inc/front.h"
 var $308=($307|0)==0; //@line 45 "inc/front.h"
 if($308){label=43;break;}else{label=42;break;} //@line 45 "inc/front.h"
 case 42: 
 var $310=$storemerge_i_i_i14|$306; //@line 45 "inc/front.h"
 var $storemerge_i_i_i14=$310;label=41;break; //@line 45 "inc/front.h"
 case 43: 
 var $311$0=_llvm_umul_with_overflow_i32($306,8);
 var $311$1=tempRet0;
 var $312=$311$1;
 var $313=$311$0;
 var $314=($312?-1:$313); //@line 9 "inc/front.h"
 var $315=(function() { try { __THREW__ = 0; return __Znwj($314) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=44;break; }
 case 44: 
 var $317$0 = ___cxa_find_matching_catch(-1, -1); var $317$1 = tempRet0;
 var $318=$317$1;
 var $319=($318|0)<0;
 if($319){label=45;break;}else{label=46;break;}
 case 45: 
 var $321=$317$0;
 ___cxa_call_unexpected($321);
 throw "Reached an unreachable!";
 case 46: 
 ___resumeException($317$0)
 case 47: 
 var $323=$315; //@line 9 "inc/front.h"
 var $f_i9_sroa_55_0=0;var $_01128=$301;label=48;break; //@line 22 "inc/front.h"
 case 48: 
 var $_01128;
 var $f_i9_sroa_55_0;
 var $325=((($f_i9_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $326=$f_i9_sroa_55_0&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $327=(($323+($326<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($327)>>3)]=0; //@line 23 "inc/front.h"
 var $328=((($_01128)-(1))|0); //@line 23 "inc/front.h"
 var $329=($328|0)==0; //@line 23 "inc/front.h"
 if($329){label=49;break;}else{var $f_i9_sroa_55_0=$325;var $_01128=$328;label=48;break;} //@line 23 "inc/front.h"
 case 49: 
 var $330=(($294+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $331=$330; //@line 25 "inc/pcdecoder.inl"
 var $332=(($294+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $333=$332; //@line 25 "inc/pcdecoder.inl"
 var $z_i12_0=0;var $f_i9_sroa_55_1=$325;var $_01121=$_01052;label=50;break; //@line 47 "src/read.cpp"
 case 50: 
 var $_01121;
 var $f_i9_sroa_55_1;
 var $z_i12_0;
 var $335=($z_i12_0>>>0)<($289>>>0); //@line 47 "src/read.cpp"
 if($335){var $f_i9_sroa_55_2=$f_i9_sroa_55_1;var $_01135=$299;label=51;break;}else{label=67;break;} //@line 47 "src/read.cpp"
 case 51: 
 var $_01135;
 var $f_i9_sroa_55_2;
 var $337=((($f_i9_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $338=$f_i9_sroa_55_2&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $339=(($323+($338<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($339)>>3)]=0; //@line 23 "inc/front.h"
 var $340=((($_01135)-(1))|0); //@line 23 "inc/front.h"
 var $341=($340|0)==0; //@line 23 "inc/front.h"
 if($341){var $y_i11_0=0;var $f_i9_sroa_55_3=$337;var $_11122=$_01121;label=52;break;}else{var $f_i9_sroa_55_2=$337;var $_01135=$340;label=51;break;} //@line 23 "inc/front.h"
 case 52: 
 var $_11122;
 var $f_i9_sroa_55_3;
 var $y_i11_0;
 var $342=($y_i11_0>>>0)<($288>>>0); //@line 48 "src/read.cpp"
 if($342){var $f_i9_sroa_55_4=$f_i9_sroa_55_3;var $_01136=1;label=53;break;}else{label=66;break;} //@line 48 "src/read.cpp"
 case 53: 
 var $_01136;
 var $f_i9_sroa_55_4;
 var $344=((($f_i9_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $345=$f_i9_sroa_55_4&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $346=(($323+($345<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($346)>>3)]=0; //@line 23 "inc/front.h"
 var $347=((($_01136)-(1))|0); //@line 23 "inc/front.h"
 var $348=($347|0)==0; //@line 23 "inc/front.h"
 if($348){var $x_i10_0=0;var $f_i9_sroa_55_5=$344;var $_21123=$_11122;label=54;break;}else{var $f_i9_sroa_55_4=$344;var $_01136=$347;label=53;break;} //@line 23 "inc/front.h"
 case 54: 
 var $_21123;
 var $f_i9_sroa_55_5;
 var $x_i10_0;
 var $349=($x_i10_0>>>0)<($287>>>0); //@line 49 "src/read.cpp"
 if($349){label=55;break;}else{label=65;break;} //@line 49 "src/read.cpp"
 case 55: 
 var $351=((($f_i9_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $352=$351&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $353=(($323+($352<<3))|0); //@line 16 "inc/front.h"
 var $354=HEAPF64[(($353)>>3)]; //@line 59 "src/read.cpp"
 var $ld$24$0=(($353)|0);
 var $354$$SHADOW$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($353+4)|0);
 var $354$$SHADOW$1=HEAP32[(($ld$25$1)>>2)];
 var $355=((($f_i9_sroa_55_5)-($299))|0); //@line 16 "inc/front.h"
 var $356=((($355)-($301))|0); //@line 16 "inc/front.h"
 var $357=$356&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $358=(($323+($357<<3))|0); //@line 16 "inc/front.h"
 var $359=HEAPF64[(($358)>>3)]; //@line 59 "src/read.cpp"
 var $ld$26$0=(($358)|0);
 var $359$$SHADOW$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($358+4)|0);
 var $359$$SHADOW$1=HEAP32[(($ld$27$1)>>2)];
 var $360=$355&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $361=(($323+($360<<3))|0); //@line 16 "inc/front.h"
 var $362=HEAPF64[(($361)>>3)]; //@line 60 "src/read.cpp"
 var $ld$28$0=(($361)|0);
 var $362$$SHADOW$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($361+4)|0);
 var $362$$SHADOW$1=HEAP32[(($ld$29$1)>>2)];
 var $363=((($351)-($301))|0); //@line 16 "inc/front.h"
 var $364=$363&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $365=(($323+($364<<3))|0); //@line 16 "inc/front.h"
 var $366=HEAPF64[(($365)>>3)]; //@line 60 "src/read.cpp"
 var $ld$30$0=(($365)|0);
 var $366$$SHADOW$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=(($365+4)|0);
 var $366$$SHADOW$1=HEAP32[(($ld$31$1)>>2)];
 var $367=((($f_i9_sroa_55_5)-($301))|0); //@line 16 "inc/front.h"
 var $368=$367&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $369=(($323+($368<<3))|0); //@line 16 "inc/front.h"
 var $370=HEAPF64[(($369)>>3)]; //@line 61 "src/read.cpp"
 var $ld$32$0=(($369)|0);
 var $370$$SHADOW$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($369+4)|0);
 var $370$$SHADOW$1=HEAP32[(($ld$33$1)>>2)];
 var $371=((($351)-($299))|0); //@line 16 "inc/front.h"
 var $372=$371&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $373=(($323+($372<<3))|0); //@line 16 "inc/front.h"
 var $374=HEAPF64[(($373)>>3)]; //@line 61 "src/read.cpp"
 var $ld$34$0=(($373)|0);
 var $374$$SHADOW$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($373+4)|0);
 var $374$$SHADOW$1=HEAP32[(($ld$35$1)>>2)];
 var $375=((($371)-($301))|0); //@line 16 "inc/front.h"
 var $376=$375&$storemerge_i_i_i14; //@line 16 "inc/front.h"
 var $377=(($323+($376<<3))|0); //@line 16 "inc/front.h"
 var $378=($354)-($359); //@line 59 "src/read.cpp"
 var $379=($378)+($362); //@line 60 "src/read.cpp"
 var $380=($379)-($366); //@line 60 "src/read.cpp"
 var $381=($380)+($370); //@line 61 "src/read.cpp"
 var $382=($381)-($374); //@line 61 "src/read.cpp"
 var $383=HEAPF64[(($377)>>3)]; //@line 62 "src/read.cpp"
 var $ld$36$0=(($377)|0);
 var $383$$SHADOW$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($377+4)|0);
 var $383$$SHADOW$1=HEAP32[(($ld$37$1)>>2)];
 var $384=($382)+($383); //@line 62 "src/read.cpp"
 HEAPF64[(tempDoublePtr)>>3]=$384; var $385$0=HEAP32[((tempDoublePtr)>>2)];var $385$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$38$0=-1;
 var $$etemp$38$1=-1;
 var $386$0=$385$0^$$etemp$38$0;
 var $386$1=$385$1^$$etemp$38$1;
 var $387$0=($386$1>>>26)|(0<<6);
 var $387$1=(0>>>26)|(0<<6);
 var $388$0=($386$1>>31)|((((((($386$1|0)<0))|0)?-1:0))<<1);
 var $388$1=((((((($386$1|0)<0))|0)?-1:0))>>31)|((((((($386$1|0)<0))|0)?-1:0))<<1);
 var $389$0=($388$1>>>27)|(0<<5);
 var $389$1=(0>>>27)|(0<<5);
 var $390$0=$387$0^$389$0;
 var $390$1=$387$1^$389$1;
 var $391=HEAP32[(($331)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $392=HEAP32[(($333)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $393=HEAP32[(($392)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$39$0=4;
 var $$etemp$39$1=0;

 var $$etemp$40$0=4;
 var $$etemp$40$1=0;

 var $394=$393; //@line 25 "src/rcdecoder.cpp"
 var $395=HEAP32[(($394)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $396=(($395+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $397=HEAP32[(($396)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $398=(($391+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$397]($393,$398) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=63;break; }
 case 56: 
 var $399=(($391+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $400=HEAP32[(($399)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $401=(($391+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $402=HEAP32[(($401)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $403=((($400)-($402))|0); //@line 26 "src/rcdecoder.cpp"
 var $404=HEAP32[(($398)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $405=(((($403>>>0))/(($404>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i2)>>2)]=$405; //@line 26 "src/rcdecoder.cpp"
 var $406=$393; //@line 27 "src/rcdecoder.cpp"
 var $407=HEAP32[(($406)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $408=(($407+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $409=HEAP32[(($408)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $410=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$409]($393,$l_i_i_i2,$r_i_i_i3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=63;break; }
 case 57: 
 var $411=HEAP32[(($398)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $412=HEAP32[(($l_i_i_i2)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $413=(Math_imul($411,$412)|0); //@line 28 "src/rcdecoder.cpp"
 var $414=HEAP32[(($401)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $415=((($414)+($413))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($401)>>2)]=$415; //@line 28 "src/rcdecoder.cpp"
 var $416=HEAP32[(($r_i_i_i3)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $417=(Math_imul($411,$416)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($398)>>2)]=$417; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($391) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=63;break; }
 case 58: 
 var $$etemp$41$0=4;
 var $$etemp$41$1=0;

 var $$etemp$42$0=4;
 var $$etemp$42$1=0;

 var $418$0=$410;
 var $418$1=0;
 var $419$0=_i64Add($390$0,$390$1,$418$0,$418$1);var $419$1=tempRet0; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$43$0=-63;
 var $$etemp$43$1=-1;
 var $420$0=_i64Add($419$0,$419$1,$$etemp$43$0,$$etemp$43$1);var $420$1=tempRet0; //@line 25 "inc/pcdecoder.inl"
 var $421$0=($420$0>>>5)|($420$1<<27);
 var $421$1=($420$1>>>5)|(0<<27);
 var $$etemp$44$0=0;
 var $$etemp$44$1=0;
 var $422$0=_i64Subtract($$etemp$44$0,$$etemp$44$1,$421$0,$421$1);var $422$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $423$0=($422$1>>>27)|(0<<5);
 var $423$1=(0>>>27)|(0<<5);
 var $424$0=$423$0^$420$0;
 var $424$1=$423$1^$420$1;
 var $425$0=(0<<26)|(0>>>6);
 var $425$1=($424$0<<26)|(0>>>6);
 var $$etemp$45$0=0;
 var $$etemp$45$1=-67108864;
 var $426$0=$425$0^$$etemp$45$0;
 var $426$1=$425$1^$$etemp$45$1;
 var $427=(HEAP32[((tempDoublePtr)>>2)]=$426$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$426$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $428=(($_21123+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21123)>>3)]=$427; //@line 65 "src/read.cpp"
 var $f_i9_sroa_55_6=$f_i9_sroa_55_5;var $_01148=1;label=59;break; //@line 22 "inc/front.h"
 case 59: 
 var $_01148;
 var $f_i9_sroa_55_6;
 var $430=((($f_i9_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $431=$f_i9_sroa_55_6&$storemerge_i_i_i14; //@line 23 "inc/front.h"
 var $432=(($323+($431<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($432)>>3)]=$427; //@line 23 "inc/front.h"
 var $433=((($_01148)-(1))|0); //@line 23 "inc/front.h"
 var $434=($433|0)==0; //@line 23 "inc/front.h"
 if($434){label=60;break;}else{var $f_i9_sroa_55_6=$430;var $_01148=$433;label=59;break;} //@line 23 "inc/front.h"
 case 60: 
 var $435=((($x_i10_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i10_0=$435;var $f_i9_sroa_55_5=$430;var $_21123=$428;label=54;break; //@line 49 "src/read.cpp"
 case 61: 
 var $437$0 = ___cxa_find_matching_catch(-1, -1); var $437$1 = tempRet0;
 var $438=$437$0;
 var $439=$437$1;
 var $440=($290|0)==0;
 if($440){var $_01114=$439;var $_01115=$438;label=73;break;}else{label=62;break;}
 case 62: 
 _free($290);
 var $_01114=$439;var $_01115=$438;label=73;break;
 case 63: 
 var $443$0 = ___cxa_find_matching_catch(-1, -1); var $443$1 = tempRet0;
 var $444=$443$0;
 var $445=$443$1;
 var $446=($315|0)==0; //@line 11 "inc/front.h"
 if($446){var $_01114=$445;var $_01115=$444;label=73;break;}else{label=64;break;} //@line 11 "inc/front.h"
 case 64: 
 _free($315);
 var $_01114=$445;var $_01115=$444;label=73;break; //@line 11 "inc/front.h"
 case 65: 
 var $448=((($y_i11_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i11_0=$448;var $f_i9_sroa_55_3=$f_i9_sroa_55_5;var $_11122=$_21123;label=52;break; //@line 48 "src/read.cpp"
 case 66: 
 var $450=((($z_i12_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i12_0=$450;var $f_i9_sroa_55_1=$f_i9_sroa_55_3;var $_01121=$_11122;label=50;break; //@line 47 "src/read.cpp"
 case 67: 
 var $452=($294|0)==0; //@line 69 "src/read.cpp"
 if($452){label=69;break;}else{label=68;break;} //@line 69 "src/read.cpp"
 case 68: 
 _free($294);
 label=69;break; //@line 69 "src/read.cpp"
 case 69: 
 var $454=HEAP32[(($rm_i7)>>2)]; //@line 70 "src/read.cpp"
 var $455=($454|0)==0; //@line 70 "src/read.cpp"
 if($455){label=71;break;}else{label=70;break;} //@line 70 "src/read.cpp"
 case 70: 
 var $457=$454; //@line 70 "src/read.cpp"
 var $458=HEAP32[(($457)>>2)]; //@line 70 "src/read.cpp"
 var $459=(($458+4)|0); //@line 70 "src/read.cpp"
 var $460=HEAP32[(($459)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$460]($454); //@line 70 "src/read.cpp"
 label=71;break; //@line 70 "src/read.cpp"
 case 71: 
 var $462=($315|0)==0; //@line 11 "inc/front.h"
 if($462){label=1285;break;}else{label=72;break;} //@line 11 "inc/front.h"
 case 72: 
 _free($315);
 label=1285;break; //@line 11 "inc/front.h"
 case 73: 
 var $_01115;
 var $_01114;
 var $463$0=$_01115;
 var $463$1=0;
 var $464$0=$463$0;
 var $464$1=$_01114;
 ___resumeException($464$0) //@line 71 "src/read.cpp"
 case 74: 
 var $466=HEAP32[(($3)>>2)]; //@line 169 "src/read.cpp"
 var $467=HEAP32[(($4)>>2)]; //@line 169 "src/read.cpp"
 var $468=HEAP32[(($5)>>2)]; //@line 169 "src/read.cpp"
 var $469=HEAP32[(($6)>>2)]; //@line 169 "src/read.cpp"
 var $$etemp$46$0=4;
 var $$etemp$46$1=0;

 var $470=__Znwj(48); //@line 41 "src/read.cpp"
 var $471=$470; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($471,0,511,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=96;break; } //@line 41 "src/read.cpp"
 case 75: 
 var $473=$470; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i33)>>2)]=$473; //@line 71 "src/read.cpp"
 var $474=__Znwj(12); //@line 42 "src/read.cpp"
 var $475=(($474+4)|0); //@line 6 "inc/pcdecoder.inl"
 var $476=$475; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($476)>>2)]=$466; //@line 6 "inc/pcdecoder.inl"
 var $477=(($474+8)|0); //@line 6 "inc/pcdecoder.inl"
 var $478=$477; //@line 6 "inc/pcdecoder.inl"
 HEAP32[(($478)>>2)]=$rm_i33; //@line 6 "inc/pcdecoder.inl"
 var $479=((($467)+(1))|0); //@line 10 "inc/front.h"
 var $480=((($468)+(1))|0); //@line 10 "inc/front.h"
 var $481=(Math_imul($479,$480)|0); //@line 10 "inc/front.h"
 var $482=((($467)+(2))|0); //@line 9 "inc/front.h"
 var $483=((($482)+($481))|0); //@line 9 "inc/front.h"
 var $484=((($483)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i40=$484;label=76;break; //@line 45 "inc/front.h"
 case 76: 
 var $storemerge_i_i_i40;
 var $486=((($storemerge_i_i_i40)+(1))|0); //@line 45 "inc/front.h"
 var $487=$storemerge_i_i_i40&$486; //@line 45 "inc/front.h"
 var $488=($487|0)==0; //@line 45 "inc/front.h"
 if($488){label=78;break;}else{label=77;break;} //@line 45 "inc/front.h"
 case 77: 
 var $490=$storemerge_i_i_i40|$486; //@line 45 "inc/front.h"
 var $storemerge_i_i_i40=$490;label=76;break; //@line 45 "inc/front.h"
 case 78: 
 var $491$0=_llvm_umul_with_overflow_i32($486,8);
 var $491$1=tempRet0;
 var $492=$491$1;
 var $493=$491$0;
 var $494=($492?-1:$493); //@line 9 "inc/front.h"
 var $495=(function() { try { __THREW__ = 0; return __Znwj($494) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=79;break; }
 case 79: 
 var $497$0 = ___cxa_find_matching_catch(-1, -1); var $497$1 = tempRet0;
 var $498=$497$1;
 var $499=($498|0)<0;
 if($499){label=80;break;}else{label=81;break;}
 case 80: 
 var $501=$497$0;
 ___cxa_call_unexpected($501);
 throw "Reached an unreachable!";
 case 81: 
 ___resumeException($497$0)
 case 82: 
 var $503=$495; //@line 9 "inc/front.h"
 var $f_i35_sroa_55_0=0;var $_01183=$481;label=83;break; //@line 22 "inc/front.h"
 case 83: 
 var $_01183;
 var $f_i35_sroa_55_0;
 var $505=((($f_i35_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $506=$f_i35_sroa_55_0&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $507=(($503+($506<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($507)>>3)]=0; //@line 23 "inc/front.h"
 var $508=((($_01183)-(1))|0); //@line 23 "inc/front.h"
 var $509=($508|0)==0; //@line 23 "inc/front.h"
 if($509){label=84;break;}else{var $f_i35_sroa_55_0=$505;var $_01183=$508;label=83;break;} //@line 23 "inc/front.h"
 case 84: 
 var $510=(($474+4)|0); //@line 25 "inc/pcdecoder.inl"
 var $511=$510; //@line 25 "inc/pcdecoder.inl"
 var $512=(($474+8)|0); //@line 25 "inc/pcdecoder.inl"
 var $513=$512; //@line 25 "inc/pcdecoder.inl"
 var $z_i38_0=0;var $f_i35_sroa_55_1=$505;var $_01173=$_01052;label=85;break; //@line 47 "src/read.cpp"
 case 85: 
 var $_01173;
 var $f_i35_sroa_55_1;
 var $z_i38_0;
 var $515=($z_i38_0>>>0)<($469>>>0); //@line 47 "src/read.cpp"
 if($515){var $f_i35_sroa_55_2=$f_i35_sroa_55_1;var $_01187=$479;label=86;break;}else{label=102;break;} //@line 47 "src/read.cpp"
 case 86: 
 var $_01187;
 var $f_i35_sroa_55_2;
 var $517=((($f_i35_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $518=$f_i35_sroa_55_2&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $519=(($503+($518<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($519)>>3)]=0; //@line 23 "inc/front.h"
 var $520=((($_01187)-(1))|0); //@line 23 "inc/front.h"
 var $521=($520|0)==0; //@line 23 "inc/front.h"
 if($521){var $y_i37_0=0;var $f_i35_sroa_55_3=$517;var $_11174=$_01173;label=87;break;}else{var $f_i35_sroa_55_2=$517;var $_01187=$520;label=86;break;} //@line 23 "inc/front.h"
 case 87: 
 var $_11174;
 var $f_i35_sroa_55_3;
 var $y_i37_0;
 var $522=($y_i37_0>>>0)<($468>>>0); //@line 48 "src/read.cpp"
 if($522){var $f_i35_sroa_55_4=$f_i35_sroa_55_3;var $_01194=1;label=88;break;}else{label=101;break;} //@line 48 "src/read.cpp"
 case 88: 
 var $_01194;
 var $f_i35_sroa_55_4;
 var $524=((($f_i35_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $525=$f_i35_sroa_55_4&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $526=(($503+($525<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($526)>>3)]=0; //@line 23 "inc/front.h"
 var $527=((($_01194)-(1))|0); //@line 23 "inc/front.h"
 var $528=($527|0)==0; //@line 23 "inc/front.h"
 if($528){var $x_i36_0=0;var $f_i35_sroa_55_5=$524;var $_21175=$_11174;label=89;break;}else{var $f_i35_sroa_55_4=$524;var $_01194=$527;label=88;break;} //@line 23 "inc/front.h"
 case 89: 
 var $_21175;
 var $f_i35_sroa_55_5;
 var $x_i36_0;
 var $529=($x_i36_0>>>0)<($467>>>0); //@line 49 "src/read.cpp"
 if($529){label=90;break;}else{label=100;break;} //@line 49 "src/read.cpp"
 case 90: 
 var $531=((($f_i35_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $532=$531&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $533=(($503+($532<<3))|0); //@line 16 "inc/front.h"
 var $534=HEAPF64[(($533)>>3)]; //@line 59 "src/read.cpp"
 var $ld$47$0=(($533)|0);
 var $534$$SHADOW$0=HEAP32[(($ld$47$0)>>2)];
 var $ld$48$1=(($533+4)|0);
 var $534$$SHADOW$1=HEAP32[(($ld$48$1)>>2)];
 var $535=((($f_i35_sroa_55_5)-($479))|0); //@line 16 "inc/front.h"
 var $536=((($535)-($481))|0); //@line 16 "inc/front.h"
 var $537=$536&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $538=(($503+($537<<3))|0); //@line 16 "inc/front.h"
 var $539=HEAPF64[(($538)>>3)]; //@line 59 "src/read.cpp"
 var $ld$49$0=(($538)|0);
 var $539$$SHADOW$0=HEAP32[(($ld$49$0)>>2)];
 var $ld$50$1=(($538+4)|0);
 var $539$$SHADOW$1=HEAP32[(($ld$50$1)>>2)];
 var $540=$535&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $541=(($503+($540<<3))|0); //@line 16 "inc/front.h"
 var $542=HEAPF64[(($541)>>3)]; //@line 60 "src/read.cpp"
 var $ld$51$0=(($541)|0);
 var $542$$SHADOW$0=HEAP32[(($ld$51$0)>>2)];
 var $ld$52$1=(($541+4)|0);
 var $542$$SHADOW$1=HEAP32[(($ld$52$1)>>2)];
 var $543=((($531)-($481))|0); //@line 16 "inc/front.h"
 var $544=$543&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $545=(($503+($544<<3))|0); //@line 16 "inc/front.h"
 var $546=HEAPF64[(($545)>>3)]; //@line 60 "src/read.cpp"
 var $ld$53$0=(($545)|0);
 var $546$$SHADOW$0=HEAP32[(($ld$53$0)>>2)];
 var $ld$54$1=(($545+4)|0);
 var $546$$SHADOW$1=HEAP32[(($ld$54$1)>>2)];
 var $547=((($f_i35_sroa_55_5)-($481))|0); //@line 16 "inc/front.h"
 var $548=$547&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $549=(($503+($548<<3))|0); //@line 16 "inc/front.h"
 var $550=HEAPF64[(($549)>>3)]; //@line 61 "src/read.cpp"
 var $ld$55$0=(($549)|0);
 var $550$$SHADOW$0=HEAP32[(($ld$55$0)>>2)];
 var $ld$56$1=(($549+4)|0);
 var $550$$SHADOW$1=HEAP32[(($ld$56$1)>>2)];
 var $551=((($531)-($479))|0); //@line 16 "inc/front.h"
 var $552=$551&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $553=(($503+($552<<3))|0); //@line 16 "inc/front.h"
 var $554=HEAPF64[(($553)>>3)]; //@line 61 "src/read.cpp"
 var $ld$57$0=(($553)|0);
 var $554$$SHADOW$0=HEAP32[(($ld$57$0)>>2)];
 var $ld$58$1=(($553+4)|0);
 var $554$$SHADOW$1=HEAP32[(($ld$58$1)>>2)];
 var $555=((($551)-($481))|0); //@line 16 "inc/front.h"
 var $556=$555&$storemerge_i_i_i40; //@line 16 "inc/front.h"
 var $557=(($503+($556<<3))|0); //@line 16 "inc/front.h"
 var $558=($534)-($539); //@line 59 "src/read.cpp"
 var $559=($558)+($542); //@line 60 "src/read.cpp"
 var $560=($559)-($546); //@line 60 "src/read.cpp"
 var $561=($560)+($550); //@line 61 "src/read.cpp"
 var $562=($561)-($554); //@line 61 "src/read.cpp"
 var $563=HEAPF64[(($557)>>3)]; //@line 62 "src/read.cpp"
 var $ld$59$0=(($557)|0);
 var $563$$SHADOW$0=HEAP32[(($ld$59$0)>>2)];
 var $ld$60$1=(($557+4)|0);
 var $563$$SHADOW$1=HEAP32[(($ld$60$1)>>2)];
 var $564=($562)+($563); //@line 62 "src/read.cpp"
 HEAPF64[(tempDoublePtr)>>3]=$564; var $565$0=HEAP32[((tempDoublePtr)>>2)];var $565$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$61$0=-1;
 var $$etemp$61$1=-1;
 var $566$0=$565$0^$$etemp$61$0;
 var $566$1=$565$1^$$etemp$61$1;
 var $567$0=($566$1>>>24)|(0<<8);
 var $567$1=(0>>>24)|(0<<8);
 var $568$0=($566$1>>31)|((((((($566$1|0)<0))|0)?-1:0))<<1);
 var $568$1=((((((($566$1|0)<0))|0)?-1:0))>>31)|((((((($566$1|0)<0))|0)?-1:0))<<1);
 var $569$0=($568$1>>>25)|(0<<7);
 var $569$1=(0>>>25)|(0<<7);
 var $570$0=$567$0^$569$0;
 var $570$1=$567$1^$569$1;
 var $571=HEAP32[(($511)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $572=HEAP32[(($513)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $573=HEAP32[(($572)>>2)]; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$62$0=4;
 var $$etemp$62$1=0;

 var $$etemp$63$0=4;
 var $$etemp$63$1=0;

 var $574=$573; //@line 25 "src/rcdecoder.cpp"
 var $575=HEAP32[(($574)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $576=(($575+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $577=HEAP32[(($576)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $578=(($571+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$577]($573,$578) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=98;break; }
 case 91: 
 var $579=(($571+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $580=HEAP32[(($579)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $581=(($571+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $582=HEAP32[(($581)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $583=((($580)-($582))|0); //@line 26 "src/rcdecoder.cpp"
 var $584=HEAP32[(($578)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $585=(((($583>>>0))/(($584>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i28)>>2)]=$585; //@line 26 "src/rcdecoder.cpp"
 var $586=$573; //@line 27 "src/rcdecoder.cpp"
 var $587=HEAP32[(($586)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $588=(($587+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $589=HEAP32[(($588)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $590=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$589]($573,$l_i_i_i28,$r_i_i_i29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=98;break; }
 case 92: 
 var $591=HEAP32[(($578)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $592=HEAP32[(($l_i_i_i28)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $593=(Math_imul($591,$592)|0); //@line 28 "src/rcdecoder.cpp"
 var $594=HEAP32[(($581)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $595=((($594)+($593))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($581)>>2)]=$595; //@line 28 "src/rcdecoder.cpp"
 var $596=HEAP32[(($r_i_i_i29)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $597=(Math_imul($591,$596)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($578)>>2)]=$597; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($571) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=98;break; }
 case 93: 
 var $$etemp$64$0=4;
 var $$etemp$64$1=0;

 var $$etemp$65$0=4;
 var $$etemp$65$1=0;

 var $598$0=$590;
 var $598$1=0;
 var $599$0=_i64Add($570$0,$570$1,$598$0,$598$1);var $599$1=tempRet0; //@line 25 "inc/pcdecoder.inl"
 var $$etemp$66$0=-255;
 var $$etemp$66$1=-1;
 var $600$0=_i64Add($599$0,$599$1,$$etemp$66$0,$$etemp$66$1);var $600$1=tempRet0; //@line 25 "inc/pcdecoder.inl"
 var $601$0=($600$0>>>7)|($600$1<<25);
 var $601$1=($600$1>>>7)|(0<<25);
 var $$etemp$67$0=0;
 var $$etemp$67$1=0;
 var $602$0=_i64Subtract($$etemp$67$0,$$etemp$67$1,$601$0,$601$1);var $602$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $603$0=($602$1>>>25)|(0<<7);
 var $603$1=(0>>>25)|(0<<7);
 var $604$0=$603$0^$600$0;
 var $604$1=$603$1^$600$1;
 var $605$0=(0<<24)|(0>>>8);
 var $605$1=($604$0<<24)|(0>>>8);
 var $$etemp$68$0=0;
 var $$etemp$68$1=-16777216;
 var $606$0=$605$0^$$etemp$68$0;
 var $606$1=$605$1^$$etemp$68$1;
 var $607=(HEAP32[((tempDoublePtr)>>2)]=$606$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$606$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $608=(($_21175+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21175)>>3)]=$607; //@line 65 "src/read.cpp"
 var $f_i35_sroa_55_6=$f_i35_sroa_55_5;var $_01206=1;label=94;break; //@line 22 "inc/front.h"
 case 94: 
 var $_01206;
 var $f_i35_sroa_55_6;
 var $610=((($f_i35_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $611=$f_i35_sroa_55_6&$storemerge_i_i_i40; //@line 23 "inc/front.h"
 var $612=(($503+($611<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($612)>>3)]=$607; //@line 23 "inc/front.h"
 var $613=((($_01206)-(1))|0); //@line 23 "inc/front.h"
 var $614=($613|0)==0; //@line 23 "inc/front.h"
 if($614){label=95;break;}else{var $f_i35_sroa_55_6=$610;var $_01206=$613;label=94;break;} //@line 23 "inc/front.h"
 case 95: 
 var $615=((($x_i36_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i36_0=$615;var $f_i35_sroa_55_5=$610;var $_21175=$608;label=89;break; //@line 49 "src/read.cpp"
 case 96: 
 var $617$0 = ___cxa_find_matching_catch(-1, -1); var $617$1 = tempRet0;
 var $618=$617$0;
 var $619=$617$1;
 var $620=($470|0)==0;
 if($620){var $_01168=$619;var $_01169=$618;label=108;break;}else{label=97;break;}
 case 97: 
 _free($470);
 var $_01168=$619;var $_01169=$618;label=108;break;
 case 98: 
 var $623$0 = ___cxa_find_matching_catch(-1, -1); var $623$1 = tempRet0;
 var $624=$623$0;
 var $625=$623$1;
 var $626=($495|0)==0; //@line 11 "inc/front.h"
 if($626){var $_01168=$625;var $_01169=$624;label=108;break;}else{label=99;break;} //@line 11 "inc/front.h"
 case 99: 
 _free($495);
 var $_01168=$625;var $_01169=$624;label=108;break; //@line 11 "inc/front.h"
 case 100: 
 var $628=((($y_i37_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i37_0=$628;var $f_i35_sroa_55_3=$f_i35_sroa_55_5;var $_11174=$_21175;label=87;break; //@line 48 "src/read.cpp"
 case 101: 
 var $630=((($z_i38_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i38_0=$630;var $f_i35_sroa_55_1=$f_i35_sroa_55_3;var $_01173=$_11174;label=85;break; //@line 47 "src/read.cpp"
 case 102: 
 var $632=($474|0)==0; //@line 69 "src/read.cpp"
 if($632){label=104;break;}else{label=103;break;} //@line 69 "src/read.cpp"
 case 103: 
 _free($474);
 label=104;break; //@line 69 "src/read.cpp"
 case 104: 
 var $634=HEAP32[(($rm_i33)>>2)]; //@line 70 "src/read.cpp"
 var $635=($634|0)==0; //@line 70 "src/read.cpp"
 if($635){label=106;break;}else{label=105;break;} //@line 70 "src/read.cpp"
 case 105: 
 var $637=$634; //@line 70 "src/read.cpp"
 var $638=HEAP32[(($637)>>2)]; //@line 70 "src/read.cpp"
 var $639=(($638+4)|0); //@line 70 "src/read.cpp"
 var $640=HEAP32[(($639)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$640]($634); //@line 70 "src/read.cpp"
 label=106;break; //@line 70 "src/read.cpp"
 case 106: 
 var $642=($495|0)==0; //@line 11 "inc/front.h"
 if($642){label=1285;break;}else{label=107;break;} //@line 11 "inc/front.h"
 case 107: 
 _free($495);
 label=1285;break; //@line 11 "inc/front.h"
 case 108: 
 var $_01169;
 var $_01168;
 var $643$0=$_01169;
 var $643$1=0;
 var $644$0=$643$0;
 var $644$1=$_01168;
 ___resumeException($644$0) //@line 71 "src/read.cpp"
 case 109: 
 var $646=HEAP32[(($3)>>2)]; //@line 170 "src/read.cpp"
 var $647=HEAP32[(($4)>>2)]; //@line 170 "src/read.cpp"
 var $648=HEAP32[(($5)>>2)]; //@line 170 "src/read.cpp"
 var $649=HEAP32[(($6)>>2)]; //@line 170 "src/read.cpp"
 var $$etemp$69$0=4;
 var $$etemp$69$1=0;

 var $650=__Znwj(48); //@line 41 "src/read.cpp"
 var $651=$650; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($651,0,21,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=110;break; } else { label=138;break; } //@line 41 "src/read.cpp"
 case 110: 
 var $653=$650; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i59)>>2)]=$653; //@line 71 "src/read.cpp"
 var $654=__Znwj(12); //@line 42 "src/read.cpp"
 var $655=(($654+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $656=$655; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($656)>>2)]=$646; //@line 34 "inc/pcdecoder.inl"
 var $657=(($654+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $658=$657; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($658)>>2)]=$rm_i59; //@line 34 "inc/pcdecoder.inl"
 var $659=((($647)+(1))|0); //@line 10 "inc/front.h"
 var $660=((($648)+(1))|0); //@line 10 "inc/front.h"
 var $661=(Math_imul($659,$660)|0); //@line 10 "inc/front.h"
 var $662=((($647)+(2))|0); //@line 9 "inc/front.h"
 var $663=((($662)+($661))|0); //@line 9 "inc/front.h"
 var $664=((($663)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i66=$664;label=111;break; //@line 45 "inc/front.h"
 case 111: 
 var $storemerge_i_i_i66;
 var $666=((($storemerge_i_i_i66)+(1))|0); //@line 45 "inc/front.h"
 var $667=$storemerge_i_i_i66&$666; //@line 45 "inc/front.h"
 var $668=($667|0)==0; //@line 45 "inc/front.h"
 if($668){label=113;break;}else{label=112;break;} //@line 45 "inc/front.h"
 case 112: 
 var $670=$storemerge_i_i_i66|$666; //@line 45 "inc/front.h"
 var $storemerge_i_i_i66=$670;label=111;break; //@line 45 "inc/front.h"
 case 113: 
 var $671$0=_llvm_umul_with_overflow_i32($666,8);
 var $671$1=tempRet0;
 var $672=$671$1;
 var $673=$671$0;
 var $674=($672?-1:$673); //@line 9 "inc/front.h"
 var $675=(function() { try { __THREW__ = 0; return __Znwj($674) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { label=114;break; }
 case 114: 
 var $677$0 = ___cxa_find_matching_catch(-1, -1); var $677$1 = tempRet0;
 var $678=$677$1;
 var $679=($678|0)<0;
 if($679){label=115;break;}else{label=116;break;}
 case 115: 
 var $681=$677$0;
 ___cxa_call_unexpected($681);
 throw "Reached an unreachable!";
 case 116: 
 ___resumeException($677$0)
 case 117: 
 var $683=$675; //@line 9 "inc/front.h"
 var $f_i61_sroa_55_0=0;var $_01240=$661;label=118;break; //@line 22 "inc/front.h"
 case 118: 
 var $_01240;
 var $f_i61_sroa_55_0;
 var $685=((($f_i61_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $686=$f_i61_sroa_55_0&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $687=(($683+($686<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($687)>>3)]=0; //@line 23 "inc/front.h"
 var $688=((($_01240)-(1))|0); //@line 23 "inc/front.h"
 var $689=($688|0)==0; //@line 23 "inc/front.h"
 if($689){label=119;break;}else{var $f_i61_sroa_55_0=$685;var $_01240=$688;label=118;break;} //@line 23 "inc/front.h"
 case 119: 
 var $690=(($654+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $691=$690; //@line 50 "inc/pcdecoder.inl"
 var $692=(($654+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $693=$692; //@line 50 "inc/pcdecoder.inl"
 var $z_i64_0=0;var $f_i61_sroa_55_1=$685;var $_01229=$_01052;label=120;break; //@line 47 "src/read.cpp"
 case 120: 
 var $_01229;
 var $f_i61_sroa_55_1;
 var $z_i64_0;
 var $695=($z_i64_0>>>0)<($649>>>0); //@line 47 "src/read.cpp"
 if($695){var $f_i61_sroa_55_2=$f_i61_sroa_55_1;var $_01243=$659;label=121;break;}else{label=144;break;} //@line 47 "src/read.cpp"
 case 121: 
 var $_01243;
 var $f_i61_sroa_55_2;
 var $697=((($f_i61_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $698=$f_i61_sroa_55_2&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $699=(($683+($698<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($699)>>3)]=0; //@line 23 "inc/front.h"
 var $700=((($_01243)-(1))|0); //@line 23 "inc/front.h"
 var $701=($700|0)==0; //@line 23 "inc/front.h"
 if($701){var $y_i63_0=0;var $f_i61_sroa_55_3=$697;var $_11230=$_01229;label=122;break;}else{var $f_i61_sroa_55_2=$697;var $_01243=$700;label=121;break;} //@line 23 "inc/front.h"
 case 122: 
 var $_11230;
 var $f_i61_sroa_55_3;
 var $y_i63_0;
 var $702=($y_i63_0>>>0)<($648>>>0); //@line 48 "src/read.cpp"
 if($702){var $f_i61_sroa_55_4=$f_i61_sroa_55_3;var $_01246=1;label=123;break;}else{label=143;break;} //@line 48 "src/read.cpp"
 case 123: 
 var $_01246;
 var $f_i61_sroa_55_4;
 var $704=((($f_i61_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $705=$f_i61_sroa_55_4&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $706=(($683+($705<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($706)>>3)]=0; //@line 23 "inc/front.h"
 var $707=((($_01246)-(1))|0); //@line 23 "inc/front.h"
 var $708=($707|0)==0; //@line 23 "inc/front.h"
 if($708){var $x_i62_0=0;var $f_i61_sroa_55_5=$704;var $_21231=$_11230;label=124;break;}else{var $f_i61_sroa_55_4=$704;var $_01246=$707;label=123;break;} //@line 23 "inc/front.h"
 case 124: 
 var $_21231;
 var $f_i61_sroa_55_5;
 var $x_i62_0;
 var $709=($x_i62_0>>>0)<($647>>>0); //@line 49 "src/read.cpp"
 if($709){label=125;break;}else{label=142;break;} //@line 49 "src/read.cpp"
 case 125: 
 var $711=((($f_i61_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $712=$711&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $713=(($683+($712<<3))|0); //@line 16 "inc/front.h"
 var $714=HEAPF64[(($713)>>3)]; //@line 59 "src/read.cpp"
 var $ld$70$0=(($713)|0);
 var $714$$SHADOW$0=HEAP32[(($ld$70$0)>>2)];
 var $ld$71$1=(($713+4)|0);
 var $714$$SHADOW$1=HEAP32[(($ld$71$1)>>2)];
 var $715=((($f_i61_sroa_55_5)-($659))|0); //@line 16 "inc/front.h"
 var $716=((($715)-($661))|0); //@line 16 "inc/front.h"
 var $717=$716&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $718=(($683+($717<<3))|0); //@line 16 "inc/front.h"
 var $719=HEAPF64[(($718)>>3)]; //@line 59 "src/read.cpp"
 var $ld$72$0=(($718)|0);
 var $719$$SHADOW$0=HEAP32[(($ld$72$0)>>2)];
 var $ld$73$1=(($718+4)|0);
 var $719$$SHADOW$1=HEAP32[(($ld$73$1)>>2)];
 var $720=$715&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $721=(($683+($720<<3))|0); //@line 16 "inc/front.h"
 var $722=HEAPF64[(($721)>>3)]; //@line 60 "src/read.cpp"
 var $ld$74$0=(($721)|0);
 var $722$$SHADOW$0=HEAP32[(($ld$74$0)>>2)];
 var $ld$75$1=(($721+4)|0);
 var $722$$SHADOW$1=HEAP32[(($ld$75$1)>>2)];
 var $723=((($711)-($661))|0); //@line 16 "inc/front.h"
 var $724=$723&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $725=(($683+($724<<3))|0); //@line 16 "inc/front.h"
 var $726=HEAPF64[(($725)>>3)]; //@line 60 "src/read.cpp"
 var $ld$76$0=(($725)|0);
 var $726$$SHADOW$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=(($725+4)|0);
 var $726$$SHADOW$1=HEAP32[(($ld$77$1)>>2)];
 var $727=((($f_i61_sroa_55_5)-($661))|0); //@line 16 "inc/front.h"
 var $728=$727&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $729=(($683+($728<<3))|0); //@line 16 "inc/front.h"
 var $730=HEAPF64[(($729)>>3)]; //@line 61 "src/read.cpp"
 var $ld$78$0=(($729)|0);
 var $730$$SHADOW$0=HEAP32[(($ld$78$0)>>2)];
 var $ld$79$1=(($729+4)|0);
 var $730$$SHADOW$1=HEAP32[(($ld$79$1)>>2)];
 var $731=((($711)-($659))|0); //@line 16 "inc/front.h"
 var $732=$731&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $733=(($683+($732<<3))|0); //@line 16 "inc/front.h"
 var $734=HEAPF64[(($733)>>3)]; //@line 61 "src/read.cpp"
 var $ld$80$0=(($733)|0);
 var $734$$SHADOW$0=HEAP32[(($ld$80$0)>>2)];
 var $ld$81$1=(($733+4)|0);
 var $734$$SHADOW$1=HEAP32[(($ld$81$1)>>2)];
 var $735=((($731)-($661))|0); //@line 16 "inc/front.h"
 var $736=$735&$storemerge_i_i_i66; //@line 16 "inc/front.h"
 var $737=(($683+($736<<3))|0); //@line 16 "inc/front.h"
 var $738=($714)-($719); //@line 59 "src/read.cpp"
 var $739=($738)+($722); //@line 60 "src/read.cpp"
 var $740=($739)-($726); //@line 60 "src/read.cpp"
 var $741=($740)+($730); //@line 61 "src/read.cpp"
 var $742=($741)-($734); //@line 61 "src/read.cpp"
 var $743=HEAPF64[(($737)>>3)]; //@line 62 "src/read.cpp"
 var $ld$82$0=(($737)|0);
 var $743$$SHADOW$0=HEAP32[(($ld$82$0)>>2)];
 var $ld$83$1=(($737+4)|0);
 var $743$$SHADOW$1=HEAP32[(($ld$83$1)>>2)];
 var $744=($742)+($743); //@line 62 "src/read.cpp"
 var $745=HEAP32[(($691)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $746=HEAP32[(($693)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $747=HEAP32[(($746)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$84$0=4;
 var $$etemp$84$1=0;

 var $$etemp$85$0=4;
 var $$etemp$85$1=0;

 var $748=$747; //@line 25 "src/rcdecoder.cpp"
 var $749=HEAP32[(($748)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $750=(($749+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $751=HEAP32[(($750)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $752=(($745+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$751]($747,$752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=126;break; } else { label=140;break; }
 case 126: 
 var $753=(($745+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $754=HEAP32[(($753)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $755=(($745+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $756=HEAP32[(($755)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $757=((($754)-($756))|0); //@line 26 "src/rcdecoder.cpp"
 var $758=HEAP32[(($752)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $759=(((($757>>>0))/(($758>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i56)>>2)]=$759; //@line 26 "src/rcdecoder.cpp"
 var $760=$747; //@line 27 "src/rcdecoder.cpp"
 var $761=HEAP32[(($760)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $762=(($761+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $763=HEAP32[(($762)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $764=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$763]($747,$l_i_i_i56,$r_i_i_i57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=127;break; } else { label=140;break; }
 case 127: 
 var $765=HEAP32[(($752)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $766=HEAP32[(($l_i_i_i56)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $767=(Math_imul($765,$766)|0); //@line 28 "src/rcdecoder.cpp"
 var $768=HEAP32[(($755)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $769=((($768)+($767))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($755)>>2)]=$769; //@line 28 "src/rcdecoder.cpp"
 var $770=HEAP32[(($r_i_i_i57)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $771=(Math_imul($765,$770)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($752)>>2)]=$771; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($745) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { label=140;break; }
 case 128: 
 var $$etemp$86$0=4;
 var $$etemp$86$1=0;

 var $$etemp$87$0=4;
 var $$etemp$87$1=0;

 var $772=($764>>>0)>10; //@line 51 "inc/pcdecoder.inl"
 if($772){label=129;break;}else{label=131;break;} //@line 51 "inc/pcdecoder.inl"
 case 129: 
 var $774=((($764)-(11))|0); //@line 52 "inc/pcdecoder.inl"
 var $775=HEAP32[(($691)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $776$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($775,$774) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $776$0=$776$r;var $776$1=tempRet0;if (!__THREW__) { label=130;break; } else { label=140;break; }
 case 130: 
 var $777$0=$774;
 var $777$1=0;
 var $$etemp$88$0=1;
 var $$etemp$88$1=0;
 var $778$0=_bitshift64Shl($$etemp$88$0,$$etemp$88$1,$777$0);var $778$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $779$0=_i64Add($778$0,$778$1,$776$0,$776$1);var $779$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$744; var $780$0=HEAP32[((tempDoublePtr)>>2)];var $780$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$89$0=-1;
 var $$etemp$89$1=-1;
 var $781$0=$780$0^$$etemp$89$0;
 var $781$1=$780$1^$$etemp$89$1;
 var $782$0=($781$1>>>22)|(0<<10);
 var $782$1=(0>>>22)|(0<<10);
 var $783$0=($781$1>>31)|((((((($781$1|0)<0))|0)?-1:0))<<1);
 var $783$1=((((((($781$1|0)<0))|0)?-1:0))>>31)|((((((($781$1|0)<0))|0)?-1:0))<<1);
 var $784$0=($783$1>>>23)|(0<<9);
 var $784$1=(0>>>23)|(0<<9);
 var $785$0=$782$0^$784$0;
 var $785$1=$782$1^$784$1;
 var $786$0=_i64Add($785$0,$785$1,$779$0,$779$1);var $786$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $787$0=($786$0>>>9)|($786$1<<23);
 var $787$1=($786$1>>>9)|(0<<23);
 var $$etemp$90$0=0;
 var $$etemp$90$1=0;
 var $788$0=_i64Subtract($$etemp$90$0,$$etemp$90$1,$787$0,$787$1);var $788$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $789$0=($788$1>>>23)|(0<<9);
 var $789$1=(0>>>23)|(0<<9);
 var $790$0=$789$0^$786$0;
 var $790$1=$789$1^$786$1;
 var $791$0=(0<<22)|(0>>>10);
 var $791$1=($790$0<<22)|(0>>>10);
 var $$etemp$91$0=0;
 var $$etemp$91$1=-4194304;
 var $792$0=$791$0^$$etemp$91$0;
 var $792$1=$791$1^$$etemp$91$1;
 var $_01266_in$1=$792$1;var $_01266_in$0=$792$0;label=135;break; //@line 56 "inc/pcdecoder.inl"
 case 131: 
 var $794=($764>>>0)<10; //@line undefined "inc/pcdecoder.inl"
 if($794){label=132;break;}else{label=134;break;} //@line undefined "inc/pcdecoder.inl"
 case 132: 
 var $796=(((9)-($764))|0); //@line 59 "inc/pcdecoder.inl"
 var $797=HEAP32[(($691)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $798$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($797,$796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $798$0=$798$r;var $798$1=tempRet0;if (!__THREW__) { label=133;break; } else { label=140;break; }
 case 133: 
 var $799$0=$796;
 var $799$1=0;
 var $$etemp$92$0=1;
 var $$etemp$92$1=0;
 var $800$0=_bitshift64Shl($$etemp$92$0,$$etemp$92$1,$799$0);var $800$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $801$0=_i64Add($800$0,$800$1,$798$0,$798$1);var $801$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$744; var $802$0=HEAP32[((tempDoublePtr)>>2)];var $802$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$93$0=-1;
 var $$etemp$93$1=-1;
 var $803$0=$802$0^$$etemp$93$0;
 var $803$1=$802$1^$$etemp$93$1;
 var $804$0=($803$1>>>22)|(0<<10);
 var $804$1=(0>>>22)|(0<<10);
 var $805$0=($803$1>>31)|((((((($803$1|0)<0))|0)?-1:0))<<1);
 var $805$1=((((((($803$1|0)<0))|0)?-1:0))>>31)|((((((($803$1|0)<0))|0)?-1:0))<<1);
 var $806$0=($805$1>>>23)|(0<<9);
 var $806$1=(0>>>23)|(0<<9);
 var $807$0=$804$0^$806$0;
 var $807$1=$804$1^$806$1;
 var $808$0=_i64Subtract($807$0,$807$1,$801$0,$801$1);var $808$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $809$0=($808$0>>>9)|($808$1<<23);
 var $809$1=($808$1>>>9)|(0<<23);
 var $$etemp$94$0=0;
 var $$etemp$94$1=0;
 var $810$0=_i64Subtract($$etemp$94$0,$$etemp$94$1,$809$0,$809$1);var $810$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $811$0=($810$1>>>23)|(0<<9);
 var $811$1=(0>>>23)|(0<<9);
 var $812$0=$811$0^$808$0;
 var $812$1=$811$1^$808$1;
 var $813$0=(0<<22)|(0>>>10);
 var $813$1=($812$0<<22)|(0>>>10);
 var $$etemp$95$0=0;
 var $$etemp$95$1=-4194304;
 var $814$0=$813$0^$$etemp$95$0;
 var $814$1=$813$1^$$etemp$95$1;
 var $_01266_in$1=$814$1;var $_01266_in$0=$814$0;label=135;break; //@line 63 "inc/pcdecoder.inl"
 case 134: 
 HEAPF64[(tempDoublePtr)>>3]=$744; var $816$0=HEAP32[((tempDoublePtr)>>2)];var $816$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$96$0=0;
 var $$etemp$96$1=-4194304;
 var $817$0=$816$0&$$etemp$96$0;
 var $817$1=$816$1&$$etemp$96$1;
 var $_01266_in$1=$817$1;var $_01266_in$0=$817$0;label=135;break; //@line 66 "inc/pcdecoder.inl"
 case 135: 
 var $_01266_in$0;
 var $_01266_in$1;
 var $_01266=(HEAP32[((tempDoublePtr)>>2)]=$_01266_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01266_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $818=(($_21231+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21231)>>3)]=$_01266; //@line 65 "src/read.cpp"
 var $f_i61_sroa_55_6=$f_i61_sroa_55_5;var $_01258=1;label=136;break; //@line 22 "inc/front.h"
 case 136: 
 var $_01258;
 var $f_i61_sroa_55_6;
 var $820=((($f_i61_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $821=$f_i61_sroa_55_6&$storemerge_i_i_i66; //@line 23 "inc/front.h"
 var $822=(($683+($821<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($822)>>3)]=$_01266; //@line 23 "inc/front.h"
 var $823=((($_01258)-(1))|0); //@line 23 "inc/front.h"
 var $824=($823|0)==0; //@line 23 "inc/front.h"
 if($824){label=137;break;}else{var $f_i61_sroa_55_6=$820;var $_01258=$823;label=136;break;} //@line 23 "inc/front.h"
 case 137: 
 var $825=((($x_i62_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i62_0=$825;var $f_i61_sroa_55_5=$820;var $_21231=$818;label=124;break; //@line 49 "src/read.cpp"
 case 138: 
 var $827$0 = ___cxa_find_matching_catch(-1, -1); var $827$1 = tempRet0;
 var $828=$827$0;
 var $829=$827$1;
 var $830=($650|0)==0;
 if($830){var $_01226=$829;var $_01227=$828;label=150;break;}else{label=139;break;}
 case 139: 
 _free($650);
 var $_01226=$829;var $_01227=$828;label=150;break;
 case 140: 
 var $833$0 = ___cxa_find_matching_catch(-1, -1); var $833$1 = tempRet0;
 var $834=$833$0;
 var $835=$833$1;
 var $836=($675|0)==0; //@line 11 "inc/front.h"
 if($836){var $_01226=$835;var $_01227=$834;label=150;break;}else{label=141;break;} //@line 11 "inc/front.h"
 case 141: 
 _free($675);
 var $_01226=$835;var $_01227=$834;label=150;break; //@line 11 "inc/front.h"
 case 142: 
 var $838=((($y_i63_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i63_0=$838;var $f_i61_sroa_55_3=$f_i61_sroa_55_5;var $_11230=$_21231;label=122;break; //@line 48 "src/read.cpp"
 case 143: 
 var $840=((($z_i64_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i64_0=$840;var $f_i61_sroa_55_1=$f_i61_sroa_55_3;var $_01229=$_11230;label=120;break; //@line 47 "src/read.cpp"
 case 144: 
 var $842=($654|0)==0; //@line 69 "src/read.cpp"
 if($842){label=146;break;}else{label=145;break;} //@line 69 "src/read.cpp"
 case 145: 
 _free($654);
 label=146;break; //@line 69 "src/read.cpp"
 case 146: 
 var $844=HEAP32[(($rm_i59)>>2)]; //@line 70 "src/read.cpp"
 var $845=($844|0)==0; //@line 70 "src/read.cpp"
 if($845){label=148;break;}else{label=147;break;} //@line 70 "src/read.cpp"
 case 147: 
 var $847=$844; //@line 70 "src/read.cpp"
 var $848=HEAP32[(($847)>>2)]; //@line 70 "src/read.cpp"
 var $849=(($848+4)|0); //@line 70 "src/read.cpp"
 var $850=HEAP32[(($849)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$850]($844); //@line 70 "src/read.cpp"
 label=148;break; //@line 70 "src/read.cpp"
 case 148: 
 var $852=($675|0)==0; //@line 11 "inc/front.h"
 if($852){label=1285;break;}else{label=149;break;} //@line 11 "inc/front.h"
 case 149: 
 _free($675);
 label=1285;break; //@line 11 "inc/front.h"
 case 150: 
 var $_01227;
 var $_01226;
 var $853$0=$_01227;
 var $853$1=0;
 var $854$0=$853$0;
 var $854$1=$_01226;
 ___resumeException($854$0) //@line 71 "src/read.cpp"
 case 151: 
 var $856=HEAP32[(($3)>>2)]; //@line 171 "src/read.cpp"
 var $857=HEAP32[(($4)>>2)]; //@line 171 "src/read.cpp"
 var $858=HEAP32[(($5)>>2)]; //@line 171 "src/read.cpp"
 var $859=HEAP32[(($6)>>2)]; //@line 171 "src/read.cpp"
 var $$etemp$97$0=4;
 var $$etemp$97$1=0;

 var $860=__Znwj(48); //@line 41 "src/read.cpp"
 var $861=$860; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($861,0,25,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=152;break; } else { label=180;break; } //@line 41 "src/read.cpp"
 case 152: 
 var $863=$860; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i92)>>2)]=$863; //@line 71 "src/read.cpp"
 var $864=__Znwj(12); //@line 42 "src/read.cpp"
 var $865=(($864+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $866=$865; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($866)>>2)]=$856; //@line 34 "inc/pcdecoder.inl"
 var $867=(($864+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $868=$867; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($868)>>2)]=$rm_i92; //@line 34 "inc/pcdecoder.inl"
 var $869=((($857)+(1))|0); //@line 10 "inc/front.h"
 var $870=((($858)+(1))|0); //@line 10 "inc/front.h"
 var $871=(Math_imul($869,$870)|0); //@line 10 "inc/front.h"
 var $872=((($857)+(2))|0); //@line 9 "inc/front.h"
 var $873=((($872)+($871))|0); //@line 9 "inc/front.h"
 var $874=((($873)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i99=$874;label=153;break; //@line 45 "inc/front.h"
 case 153: 
 var $storemerge_i_i_i99;
 var $876=((($storemerge_i_i_i99)+(1))|0); //@line 45 "inc/front.h"
 var $877=$storemerge_i_i_i99&$876; //@line 45 "inc/front.h"
 var $878=($877|0)==0; //@line 45 "inc/front.h"
 if($878){label=155;break;}else{label=154;break;} //@line 45 "inc/front.h"
 case 154: 
 var $880=$storemerge_i_i_i99|$876; //@line 45 "inc/front.h"
 var $storemerge_i_i_i99=$880;label=153;break; //@line 45 "inc/front.h"
 case 155: 
 var $881$0=_llvm_umul_with_overflow_i32($876,8);
 var $881$1=tempRet0;
 var $882=$881$1;
 var $883=$881$0;
 var $884=($882?-1:$883); //@line 9 "inc/front.h"
 var $885=(function() { try { __THREW__ = 0; return __Znwj($884) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=159;break; } else { label=156;break; }
 case 156: 
 var $887$0 = ___cxa_find_matching_catch(-1, -1); var $887$1 = tempRet0;
 var $888=$887$1;
 var $889=($888|0)<0;
 if($889){label=157;break;}else{label=158;break;}
 case 157: 
 var $891=$887$0;
 ___cxa_call_unexpected($891);
 throw "Reached an unreachable!";
 case 158: 
 ___resumeException($887$0)
 case 159: 
 var $893=$885; //@line 9 "inc/front.h"
 var $f_i94_sroa_55_0=0;var $_01302=$871;label=160;break; //@line 22 "inc/front.h"
 case 160: 
 var $_01302;
 var $f_i94_sroa_55_0;
 var $895=((($f_i94_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $896=$f_i94_sroa_55_0&$storemerge_i_i_i99; //@line 23 "inc/front.h"
 var $897=(($893+($896<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($897)>>3)]=0; //@line 23 "inc/front.h"
 var $898=((($_01302)-(1))|0); //@line 23 "inc/front.h"
 var $899=($898|0)==0; //@line 23 "inc/front.h"
 if($899){label=161;break;}else{var $f_i94_sroa_55_0=$895;var $_01302=$898;label=160;break;} //@line 23 "inc/front.h"
 case 161: 
 var $900=(($864+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $901=$900; //@line 50 "inc/pcdecoder.inl"
 var $902=(($864+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $903=$902; //@line 50 "inc/pcdecoder.inl"
 var $z_i97_0=0;var $f_i94_sroa_55_1=$895;var $_01289=$_01052;label=162;break; //@line 47 "src/read.cpp"
 case 162: 
 var $_01289;
 var $f_i94_sroa_55_1;
 var $z_i97_0;
 var $905=($z_i97_0>>>0)<($859>>>0); //@line 47 "src/read.cpp"
 if($905){var $f_i94_sroa_55_2=$f_i94_sroa_55_1;var $_01303=$869;label=163;break;}else{label=186;break;} //@line 47 "src/read.cpp"
 case 163: 
 var $_01303;
 var $f_i94_sroa_55_2;
 var $907=((($f_i94_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $908=$f_i94_sroa_55_2&$storemerge_i_i_i99; //@line 23 "inc/front.h"
 var $909=(($893+($908<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($909)>>3)]=0; //@line 23 "inc/front.h"
 var $910=((($_01303)-(1))|0); //@line 23 "inc/front.h"
 var $911=($910|0)==0; //@line 23 "inc/front.h"
 if($911){var $y_i96_0=0;var $f_i94_sroa_55_3=$907;var $_11290=$_01289;label=164;break;}else{var $f_i94_sroa_55_2=$907;var $_01303=$910;label=163;break;} //@line 23 "inc/front.h"
 case 164: 
 var $_11290;
 var $f_i94_sroa_55_3;
 var $y_i96_0;
 var $912=($y_i96_0>>>0)<($858>>>0); //@line 48 "src/read.cpp"
 if($912){var $f_i94_sroa_55_4=$f_i94_sroa_55_3;var $_01308=1;label=165;break;}else{label=185;break;} //@line 48 "src/read.cpp"
 case 165: 
 var $_01308;
 var $f_i94_sroa_55_4;
 var $914=((($f_i94_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $915=$f_i94_sroa_55_4&$storemerge_i_i_i99; //@line 23 "inc/front.h"
 var $916=(($893+($915<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($916)>>3)]=0; //@line 23 "inc/front.h"
 var $917=((($_01308)-(1))|0); //@line 23 "inc/front.h"
 var $918=($917|0)==0; //@line 23 "inc/front.h"
 if($918){var $x_i95_0=0;var $f_i94_sroa_55_5=$914;var $_21291=$_11290;label=166;break;}else{var $f_i94_sroa_55_4=$914;var $_01308=$917;label=165;break;} //@line 23 "inc/front.h"
 case 166: 
 var $_21291;
 var $f_i94_sroa_55_5;
 var $x_i95_0;
 var $919=($x_i95_0>>>0)<($857>>>0); //@line 49 "src/read.cpp"
 if($919){label=167;break;}else{label=184;break;} //@line 49 "src/read.cpp"
 case 167: 
 var $921=((($f_i94_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $922=$921&$storemerge_i_i_i99; //@line 16 "inc/front.h"
 var $923=(($893+($922<<3))|0); //@line 16 "inc/front.h"
 var $924=HEAPF64[(($923)>>3)]; //@line 59 "src/read.cpp"
 var $ld$98$0=(($923)|0);
 var $924$$SHADOW$0=HEAP32[(($ld$98$0)>>2)];
 var $ld$99$1=(($923+4)|0);
 var $924$$SHADOW$1=HEAP32[(($ld$99$1)>>2)];
 var $925=((($f_i94_sroa_55_5)-($869))|0); //@line 16 "inc/front.h"
 var $926=((($925)-($871))|0); //@line 16 "inc/front.h"
 var $927=$926&$storemerge_i_i_i99; //@line 16 "inc/front.h"
 var $928=(($893+($927<<3))|0); //@line 16 "inc/front.h"
 var $929=HEAPF64[(($928)>>3)]; //@line 59 "src/read.cpp"
 var $ld$100$0=(($928)|0);
 var $929$$SHADOW$0=HEAP32[(($ld$100$0)>>2)];
 var $ld$101$1=(($928+4)|0);
 var $929$$SHADOW$1=HEAP32[(($ld$101$1)>>2)];
 var $930=$925&$storemerge_i_i_i99; //@line 16 "inc/front.h"
 var $931=(($893+($930<<3))|0); //@line 16 "inc/front.h"
 var $932=HEAPF64[(($931)>>3)]; //@line 60 "src/read.cpp"
 var $ld$102$0=(($931)|0);
 var $932$$SHADOW$0=HEAP32[(($ld$102$0)>>2)];
 var $ld$103$1=(($931+4)|0);
 var $932$$SHADOW$1=HEAP32[(($ld$103$1)>>2)];
 var $933=((($921)-($871))|0); //@line 16 "inc/front.h"
 var $934=$933&$storemerge_i_i_i99; //@line 16 "inc/front.h"
 var $935=(($893+($934<<3))|0); //@line 16 "inc/front.h"
 var $936=HEAPF64[(($935)>>3)]; //@line 60 "src/read.cpp"
 var $ld$104$0=(($935)|0);
 var $936$$SHADOW$0=HEAP32[(($ld$104$0)>>2)];
 var $ld$105$1=(($935+4)|0);
 var $936$$SHADOW$1=HEAP32[(($ld$105$1)>>2)];
 var $937=((($f_i94_sroa_55_5)-($871))|0); //@line 16 "inc/front.h"
 var $938=$937&$storemerge_i_i_i99; //@line 16 "inc/front.h"
 var $939=(($893+($938<<3))|0); //@line 16 "inc/front.h"
 var $940=HEAPF64[(($939)>>3)]; //@line 61 "src/read.cpp"
 var $ld$106$0=(($939)|0);
 var $940$$SHADOW$0=HEAP32[(($ld$106$0)>>2)];
 var $ld$107$1=(($939+4)|0);
 var $940$$SHADOW$1=HEAP32[(($ld$107$1)>>2)];
 var $941=((($921)-($869))|0); //@line 16 "inc/front.h"
 var $942=$941&$storemerge_i_i_i99; //@line 16 "inc/front.h"
 var $943=(($893+($942<<3))|0); //@line 16 "inc/front.h"
 var $944=HEAPF64[(($943)>>3)]; //@line 61 "src/read.cpp"
 var $ld$108$0=(($943)|0);
 var $944$$SHADOW$0=HEAP32[(($ld$108$0)>>2)];
 var $ld$109$1=(($943+4)|0);
 var $944$$SHADOW$1=HEAP32[(($ld$109$1)>>2)];
 var $945=((($941)-($871))|0); //@line 16 "inc/front.h"
 var $946=$945&$storemerge_i_i_i99; //@line 16 "inc/front.h"
 var $947=(($893+($946<<3))|0); //@line 16 "inc/front.h"
 var $948=($924)-($929); //@line 59 "src/read.cpp"
 var $949=($948)+($932); //@line 60 "src/read.cpp"
 var $950=($949)-($936); //@line 60 "src/read.cpp"
 var $951=($950)+($940); //@line 61 "src/read.cpp"
 var $952=($951)-($944); //@line 61 "src/read.cpp"
 var $953=HEAPF64[(($947)>>3)]; //@line 62 "src/read.cpp"
 var $ld$110$0=(($947)|0);
 var $953$$SHADOW$0=HEAP32[(($ld$110$0)>>2)];
 var $ld$111$1=(($947+4)|0);
 var $953$$SHADOW$1=HEAP32[(($ld$111$1)>>2)];
 var $954=($952)+($953); //@line 62 "src/read.cpp"
 var $955=HEAP32[(($901)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $956=HEAP32[(($903)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $957=HEAP32[(($956)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$112$0=4;
 var $$etemp$112$1=0;

 var $$etemp$113$0=4;
 var $$etemp$113$1=0;

 var $958=$957; //@line 25 "src/rcdecoder.cpp"
 var $959=HEAP32[(($958)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $960=(($959+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $961=HEAP32[(($960)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $962=(($955+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$961]($957,$962) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=168;break; } else { label=182;break; }
 case 168: 
 var $963=(($955+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $964=HEAP32[(($963)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $965=(($955+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $966=HEAP32[(($965)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $967=((($964)-($966))|0); //@line 26 "src/rcdecoder.cpp"
 var $968=HEAP32[(($962)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $969=(((($967>>>0))/(($968>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i86)>>2)]=$969; //@line 26 "src/rcdecoder.cpp"
 var $970=$957; //@line 27 "src/rcdecoder.cpp"
 var $971=HEAP32[(($970)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $972=(($971+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $973=HEAP32[(($972)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $974=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$973]($957,$l_i_i_i86,$r_i_i_i87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=169;break; } else { label=182;break; }
 case 169: 
 var $975=HEAP32[(($962)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $976=HEAP32[(($l_i_i_i86)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $977=(Math_imul($975,$976)|0); //@line 28 "src/rcdecoder.cpp"
 var $978=HEAP32[(($965)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $979=((($978)+($977))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($965)>>2)]=$979; //@line 28 "src/rcdecoder.cpp"
 var $980=HEAP32[(($r_i_i_i87)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $981=(Math_imul($975,$980)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($962)>>2)]=$981; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($955) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=170;break; } else { label=182;break; }
 case 170: 
 var $$etemp$114$0=4;
 var $$etemp$114$1=0;

 var $$etemp$115$0=4;
 var $$etemp$115$1=0;

 var $982=($974>>>0)>12; //@line 51 "inc/pcdecoder.inl"
 if($982){label=171;break;}else{label=173;break;} //@line 51 "inc/pcdecoder.inl"
 case 171: 
 var $984=((($974)-(13))|0); //@line 52 "inc/pcdecoder.inl"
 var $985=HEAP32[(($901)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $986$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($985,$984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $986$0=$986$r;var $986$1=tempRet0;if (!__THREW__) { label=172;break; } else { label=182;break; }
 case 172: 
 var $987$0=$984;
 var $987$1=0;
 var $$etemp$116$0=1;
 var $$etemp$116$1=0;
 var $988$0=_bitshift64Shl($$etemp$116$0,$$etemp$116$1,$987$0);var $988$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $989$0=_i64Add($988$0,$988$1,$986$0,$986$1);var $989$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$954; var $990$0=HEAP32[((tempDoublePtr)>>2)];var $990$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$117$0=-1;
 var $$etemp$117$1=-1;
 var $991$0=$990$0^$$etemp$117$0;
 var $991$1=$990$1^$$etemp$117$1;
 var $992$0=($991$1>>>20)|(0<<12);
 var $992$1=(0>>>20)|(0<<12);
 var $993$0=($991$1>>31)|((((((($991$1|0)<0))|0)?-1:0))<<1);
 var $993$1=((((((($991$1|0)<0))|0)?-1:0))>>31)|((((((($991$1|0)<0))|0)?-1:0))<<1);
 var $994$0=($993$1>>>21)|(0<<11);
 var $994$1=(0>>>21)|(0<<11);
 var $995$0=$992$0^$994$0;
 var $995$1=$992$1^$994$1;
 var $996$0=_i64Add($995$0,$995$1,$989$0,$989$1);var $996$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $997$0=($996$0>>>11)|($996$1<<21);
 var $997$1=($996$1>>>11)|(0<<21);
 var $$etemp$118$0=0;
 var $$etemp$118$1=0;
 var $998$0=_i64Subtract($$etemp$118$0,$$etemp$118$1,$997$0,$997$1);var $998$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $999$0=($998$1>>>21)|(0<<11);
 var $999$1=(0>>>21)|(0<<11);
 var $1000$0=$999$0^$996$0;
 var $1000$1=$999$1^$996$1;
 var $1001$0=(0<<20)|(0>>>12);
 var $1001$1=($1000$0<<20)|(0>>>12);
 var $$etemp$119$0=0;
 var $$etemp$119$1=-1048576;
 var $1002$0=$1001$0^$$etemp$119$0;
 var $1002$1=$1001$1^$$etemp$119$1;
 var $_01326_in$1=$1002$1;var $_01326_in$0=$1002$0;label=177;break; //@line 56 "inc/pcdecoder.inl"
 case 173: 
 var $1004=($974>>>0)<12; //@line undefined "inc/pcdecoder.inl"
 if($1004){label=174;break;}else{label=176;break;} //@line undefined "inc/pcdecoder.inl"
 case 174: 
 var $1006=(((11)-($974))|0); //@line 59 "inc/pcdecoder.inl"
 var $1007=HEAP32[(($901)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1008$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1007,$1006) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1008$0=$1008$r;var $1008$1=tempRet0;if (!__THREW__) { label=175;break; } else { label=182;break; }
 case 175: 
 var $1009$0=$1006;
 var $1009$1=0;
 var $$etemp$120$0=1;
 var $$etemp$120$1=0;
 var $1010$0=_bitshift64Shl($$etemp$120$0,$$etemp$120$1,$1009$0);var $1010$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $1011$0=_i64Add($1010$0,$1010$1,$1008$0,$1008$1);var $1011$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$954; var $1012$0=HEAP32[((tempDoublePtr)>>2)];var $1012$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$121$0=-1;
 var $$etemp$121$1=-1;
 var $1013$0=$1012$0^$$etemp$121$0;
 var $1013$1=$1012$1^$$etemp$121$1;
 var $1014$0=($1013$1>>>20)|(0<<12);
 var $1014$1=(0>>>20)|(0<<12);
 var $1015$0=($1013$1>>31)|((((((($1013$1|0)<0))|0)?-1:0))<<1);
 var $1015$1=((((((($1013$1|0)<0))|0)?-1:0))>>31)|((((((($1013$1|0)<0))|0)?-1:0))<<1);
 var $1016$0=($1015$1>>>21)|(0<<11);
 var $1016$1=(0>>>21)|(0<<11);
 var $1017$0=$1014$0^$1016$0;
 var $1017$1=$1014$1^$1016$1;
 var $1018$0=_i64Subtract($1017$0,$1017$1,$1011$0,$1011$1);var $1018$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $1019$0=($1018$0>>>11)|($1018$1<<21);
 var $1019$1=($1018$1>>>11)|(0<<21);
 var $$etemp$122$0=0;
 var $$etemp$122$1=0;
 var $1020$0=_i64Subtract($$etemp$122$0,$$etemp$122$1,$1019$0,$1019$1);var $1020$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1021$0=($1020$1>>>21)|(0<<11);
 var $1021$1=(0>>>21)|(0<<11);
 var $1022$0=$1021$0^$1018$0;
 var $1022$1=$1021$1^$1018$1;
 var $1023$0=(0<<20)|(0>>>12);
 var $1023$1=($1022$0<<20)|(0>>>12);
 var $$etemp$123$0=0;
 var $$etemp$123$1=-1048576;
 var $1024$0=$1023$0^$$etemp$123$0;
 var $1024$1=$1023$1^$$etemp$123$1;
 var $_01326_in$1=$1024$1;var $_01326_in$0=$1024$0;label=177;break; //@line 63 "inc/pcdecoder.inl"
 case 176: 
 HEAPF64[(tempDoublePtr)>>3]=$954; var $1026$0=HEAP32[((tempDoublePtr)>>2)];var $1026$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$124$0=0;
 var $$etemp$124$1=-1048576;
 var $1027$0=$1026$0&$$etemp$124$0;
 var $1027$1=$1026$1&$$etemp$124$1;
 var $_01326_in$1=$1027$1;var $_01326_in$0=$1027$0;label=177;break; //@line 66 "inc/pcdecoder.inl"
 case 177: 
 var $_01326_in$0;
 var $_01326_in$1;
 var $_01326=(HEAP32[((tempDoublePtr)>>2)]=$_01326_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01326_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $1028=(($_21291+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21291)>>3)]=$_01326; //@line 65 "src/read.cpp"
 var $f_i94_sroa_55_6=$f_i94_sroa_55_5;var $_01320=1;label=178;break; //@line 22 "inc/front.h"
 case 178: 
 var $_01320;
 var $f_i94_sroa_55_6;
 var $1030=((($f_i94_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1031=$f_i94_sroa_55_6&$storemerge_i_i_i99; //@line 23 "inc/front.h"
 var $1032=(($893+($1031<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1032)>>3)]=$_01326; //@line 23 "inc/front.h"
 var $1033=((($_01320)-(1))|0); //@line 23 "inc/front.h"
 var $1034=($1033|0)==0; //@line 23 "inc/front.h"
 if($1034){label=179;break;}else{var $f_i94_sroa_55_6=$1030;var $_01320=$1033;label=178;break;} //@line 23 "inc/front.h"
 case 179: 
 var $1035=((($x_i95_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i95_0=$1035;var $f_i94_sroa_55_5=$1030;var $_21291=$1028;label=166;break; //@line 49 "src/read.cpp"
 case 180: 
 var $1037$0 = ___cxa_find_matching_catch(-1, -1); var $1037$1 = tempRet0;
 var $1038=$1037$0;
 var $1039=$1037$1;
 var $1040=($860|0)==0;
 if($1040){var $_01287=$1039;var $_01288=$1038;label=192;break;}else{label=181;break;}
 case 181: 
 _free($860);
 var $_01287=$1039;var $_01288=$1038;label=192;break;
 case 182: 
 var $1043$0 = ___cxa_find_matching_catch(-1, -1); var $1043$1 = tempRet0;
 var $1044=$1043$0;
 var $1045=$1043$1;
 var $1046=($885|0)==0; //@line 11 "inc/front.h"
 if($1046){var $_01287=$1045;var $_01288=$1044;label=192;break;}else{label=183;break;} //@line 11 "inc/front.h"
 case 183: 
 _free($885);
 var $_01287=$1045;var $_01288=$1044;label=192;break; //@line 11 "inc/front.h"
 case 184: 
 var $1048=((($y_i96_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i96_0=$1048;var $f_i94_sroa_55_3=$f_i94_sroa_55_5;var $_11290=$_21291;label=164;break; //@line 48 "src/read.cpp"
 case 185: 
 var $1050=((($z_i97_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i97_0=$1050;var $f_i94_sroa_55_1=$f_i94_sroa_55_3;var $_01289=$_11290;label=162;break; //@line 47 "src/read.cpp"
 case 186: 
 var $1052=($864|0)==0; //@line 69 "src/read.cpp"
 if($1052){label=188;break;}else{label=187;break;} //@line 69 "src/read.cpp"
 case 187: 
 _free($864);
 label=188;break; //@line 69 "src/read.cpp"
 case 188: 
 var $1054=HEAP32[(($rm_i92)>>2)]; //@line 70 "src/read.cpp"
 var $1055=($1054|0)==0; //@line 70 "src/read.cpp"
 if($1055){label=190;break;}else{label=189;break;} //@line 70 "src/read.cpp"
 case 189: 
 var $1057=$1054; //@line 70 "src/read.cpp"
 var $1058=HEAP32[(($1057)>>2)]; //@line 70 "src/read.cpp"
 var $1059=(($1058+4)|0); //@line 70 "src/read.cpp"
 var $1060=HEAP32[(($1059)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1060]($1054); //@line 70 "src/read.cpp"
 label=190;break; //@line 70 "src/read.cpp"
 case 190: 
 var $1062=($885|0)==0; //@line 11 "inc/front.h"
 if($1062){label=1285;break;}else{label=191;break;} //@line 11 "inc/front.h"
 case 191: 
 _free($885);
 label=1285;break; //@line 11 "inc/front.h"
 case 192: 
 var $_01288;
 var $_01287;
 var $1063$0=$_01288;
 var $1063$1=0;
 var $1064$0=$1063$0;
 var $1064$1=$_01287;
 ___resumeException($1064$0) //@line 71 "src/read.cpp"
 case 193: 
 var $1066=HEAP32[(($3)>>2)]; //@line 172 "src/read.cpp"
 var $1067=HEAP32[(($4)>>2)]; //@line 172 "src/read.cpp"
 var $1068=HEAP32[(($5)>>2)]; //@line 172 "src/read.cpp"
 var $1069=HEAP32[(($6)>>2)]; //@line 172 "src/read.cpp"
 var $$etemp$125$0=4;
 var $$etemp$125$1=0;

 var $1070=__Znwj(48); //@line 41 "src/read.cpp"
 var $1071=$1070; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1071,0,29,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=194;break; } else { label=222;break; } //@line 41 "src/read.cpp"
 case 194: 
 var $1073=$1070; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i128)>>2)]=$1073; //@line 71 "src/read.cpp"
 var $1074=__Znwj(12); //@line 42 "src/read.cpp"
 var $1075=(($1074+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1076=$1075; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1076)>>2)]=$1066; //@line 34 "inc/pcdecoder.inl"
 var $1077=(($1074+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1078=$1077; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1078)>>2)]=$rm_i128; //@line 34 "inc/pcdecoder.inl"
 var $1079=((($1067)+(1))|0); //@line 10 "inc/front.h"
 var $1080=((($1068)+(1))|0); //@line 10 "inc/front.h"
 var $1081=(Math_imul($1079,$1080)|0); //@line 10 "inc/front.h"
 var $1082=((($1067)+(2))|0); //@line 9 "inc/front.h"
 var $1083=((($1082)+($1081))|0); //@line 9 "inc/front.h"
 var $1084=((($1083)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i135=$1084;label=195;break; //@line 45 "inc/front.h"
 case 195: 
 var $storemerge_i_i_i135;
 var $1086=((($storemerge_i_i_i135)+(1))|0); //@line 45 "inc/front.h"
 var $1087=$storemerge_i_i_i135&$1086; //@line 45 "inc/front.h"
 var $1088=($1087|0)==0; //@line 45 "inc/front.h"
 if($1088){label=197;break;}else{label=196;break;} //@line 45 "inc/front.h"
 case 196: 
 var $1090=$storemerge_i_i_i135|$1086; //@line 45 "inc/front.h"
 var $storemerge_i_i_i135=$1090;label=195;break; //@line 45 "inc/front.h"
 case 197: 
 var $1091$0=_llvm_umul_with_overflow_i32($1086,8);
 var $1091$1=tempRet0;
 var $1092=$1091$1;
 var $1093=$1091$0;
 var $1094=($1092?-1:$1093); //@line 9 "inc/front.h"
 var $1095=(function() { try { __THREW__ = 0; return __Znwj($1094) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=201;break; } else { label=198;break; }
 case 198: 
 var $1097$0 = ___cxa_find_matching_catch(-1, -1); var $1097$1 = tempRet0;
 var $1098=$1097$1;
 var $1099=($1098|0)<0;
 if($1099){label=199;break;}else{label=200;break;}
 case 199: 
 var $1101=$1097$0;
 ___cxa_call_unexpected($1101);
 throw "Reached an unreachable!";
 case 200: 
 ___resumeException($1097$0)
 case 201: 
 var $1103=$1095; //@line 9 "inc/front.h"
 var $f_i130_sroa_55_0=0;var $_01356=$1081;label=202;break; //@line 22 "inc/front.h"
 case 202: 
 var $_01356;
 var $f_i130_sroa_55_0;
 var $1105=((($f_i130_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1106=$f_i130_sroa_55_0&$storemerge_i_i_i135; //@line 23 "inc/front.h"
 var $1107=(($1103+($1106<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1107)>>3)]=0; //@line 23 "inc/front.h"
 var $1108=((($_01356)-(1))|0); //@line 23 "inc/front.h"
 var $1109=($1108|0)==0; //@line 23 "inc/front.h"
 if($1109){label=203;break;}else{var $f_i130_sroa_55_0=$1105;var $_01356=$1108;label=202;break;} //@line 23 "inc/front.h"
 case 203: 
 var $1110=(($1074+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1111=$1110; //@line 50 "inc/pcdecoder.inl"
 var $1112=(($1074+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1113=$1112; //@line 50 "inc/pcdecoder.inl"
 var $z_i133_0=0;var $f_i130_sroa_55_1=$1105;var $_01351=$_01052;label=204;break; //@line 47 "src/read.cpp"
 case 204: 
 var $_01351;
 var $f_i130_sroa_55_1;
 var $z_i133_0;
 var $1115=($z_i133_0>>>0)<($1069>>>0); //@line 47 "src/read.cpp"
 if($1115){var $f_i130_sroa_55_2=$f_i130_sroa_55_1;var $_01355=$1079;label=205;break;}else{label=228;break;} //@line 47 "src/read.cpp"
 case 205: 
 var $_01355;
 var $f_i130_sroa_55_2;
 var $1117=((($f_i130_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1118=$f_i130_sroa_55_2&$storemerge_i_i_i135; //@line 23 "inc/front.h"
 var $1119=(($1103+($1118<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1119)>>3)]=0; //@line 23 "inc/front.h"
 var $1120=((($_01355)-(1))|0); //@line 23 "inc/front.h"
 var $1121=($1120|0)==0; //@line 23 "inc/front.h"
 if($1121){var $y_i132_0=0;var $f_i130_sroa_55_3=$1117;var $_11352=$_01351;label=206;break;}else{var $f_i130_sroa_55_2=$1117;var $_01355=$1120;label=205;break;} //@line 23 "inc/front.h"
 case 206: 
 var $_11352;
 var $f_i130_sroa_55_3;
 var $y_i132_0;
 var $1122=($y_i132_0>>>0)<($1068>>>0); //@line 48 "src/read.cpp"
 if($1122){var $f_i130_sroa_55_4=$f_i130_sroa_55_3;var $_01354=1;label=207;break;}else{label=227;break;} //@line 48 "src/read.cpp"
 case 207: 
 var $_01354;
 var $f_i130_sroa_55_4;
 var $1124=((($f_i130_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1125=$f_i130_sroa_55_4&$storemerge_i_i_i135; //@line 23 "inc/front.h"
 var $1126=(($1103+($1125<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1126)>>3)]=0; //@line 23 "inc/front.h"
 var $1127=((($_01354)-(1))|0); //@line 23 "inc/front.h"
 var $1128=($1127|0)==0; //@line 23 "inc/front.h"
 if($1128){var $x_i131_0=0;var $f_i130_sroa_55_5=$1124;var $_21353=$_11352;label=208;break;}else{var $f_i130_sroa_55_4=$1124;var $_01354=$1127;label=207;break;} //@line 23 "inc/front.h"
 case 208: 
 var $_21353;
 var $f_i130_sroa_55_5;
 var $x_i131_0;
 var $1129=($x_i131_0>>>0)<($1067>>>0); //@line 49 "src/read.cpp"
 if($1129){label=209;break;}else{label=226;break;} //@line 49 "src/read.cpp"
 case 209: 
 var $1131=((($f_i130_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1132=$1131&$storemerge_i_i_i135; //@line 16 "inc/front.h"
 var $1133=(($1103+($1132<<3))|0); //@line 16 "inc/front.h"
 var $1134=HEAPF64[(($1133)>>3)]; //@line 59 "src/read.cpp"
 var $ld$126$0=(($1133)|0);
 var $1134$$SHADOW$0=HEAP32[(($ld$126$0)>>2)];
 var $ld$127$1=(($1133+4)|0);
 var $1134$$SHADOW$1=HEAP32[(($ld$127$1)>>2)];
 var $1135=((($f_i130_sroa_55_5)-($1079))|0); //@line 16 "inc/front.h"
 var $1136=((($1135)-($1081))|0); //@line 16 "inc/front.h"
 var $1137=$1136&$storemerge_i_i_i135; //@line 16 "inc/front.h"
 var $1138=(($1103+($1137<<3))|0); //@line 16 "inc/front.h"
 var $1139=HEAPF64[(($1138)>>3)]; //@line 59 "src/read.cpp"
 var $ld$128$0=(($1138)|0);
 var $1139$$SHADOW$0=HEAP32[(($ld$128$0)>>2)];
 var $ld$129$1=(($1138+4)|0);
 var $1139$$SHADOW$1=HEAP32[(($ld$129$1)>>2)];
 var $1140=$1135&$storemerge_i_i_i135; //@line 16 "inc/front.h"
 var $1141=(($1103+($1140<<3))|0); //@line 16 "inc/front.h"
 var $1142=HEAPF64[(($1141)>>3)]; //@line 60 "src/read.cpp"
 var $ld$130$0=(($1141)|0);
 var $1142$$SHADOW$0=HEAP32[(($ld$130$0)>>2)];
 var $ld$131$1=(($1141+4)|0);
 var $1142$$SHADOW$1=HEAP32[(($ld$131$1)>>2)];
 var $1143=((($1131)-($1081))|0); //@line 16 "inc/front.h"
 var $1144=$1143&$storemerge_i_i_i135; //@line 16 "inc/front.h"
 var $1145=(($1103+($1144<<3))|0); //@line 16 "inc/front.h"
 var $1146=HEAPF64[(($1145)>>3)]; //@line 60 "src/read.cpp"
 var $ld$132$0=(($1145)|0);
 var $1146$$SHADOW$0=HEAP32[(($ld$132$0)>>2)];
 var $ld$133$1=(($1145+4)|0);
 var $1146$$SHADOW$1=HEAP32[(($ld$133$1)>>2)];
 var $1147=((($f_i130_sroa_55_5)-($1081))|0); //@line 16 "inc/front.h"
 var $1148=$1147&$storemerge_i_i_i135; //@line 16 "inc/front.h"
 var $1149=(($1103+($1148<<3))|0); //@line 16 "inc/front.h"
 var $1150=HEAPF64[(($1149)>>3)]; //@line 61 "src/read.cpp"
 var $ld$134$0=(($1149)|0);
 var $1150$$SHADOW$0=HEAP32[(($ld$134$0)>>2)];
 var $ld$135$1=(($1149+4)|0);
 var $1150$$SHADOW$1=HEAP32[(($ld$135$1)>>2)];
 var $1151=((($1131)-($1079))|0); //@line 16 "inc/front.h"
 var $1152=$1151&$storemerge_i_i_i135; //@line 16 "inc/front.h"
 var $1153=(($1103+($1152<<3))|0); //@line 16 "inc/front.h"
 var $1154=HEAPF64[(($1153)>>3)]; //@line 61 "src/read.cpp"
 var $ld$136$0=(($1153)|0);
 var $1154$$SHADOW$0=HEAP32[(($ld$136$0)>>2)];
 var $ld$137$1=(($1153+4)|0);
 var $1154$$SHADOW$1=HEAP32[(($ld$137$1)>>2)];
 var $1155=((($1151)-($1081))|0); //@line 16 "inc/front.h"
 var $1156=$1155&$storemerge_i_i_i135; //@line 16 "inc/front.h"
 var $1157=(($1103+($1156<<3))|0); //@line 16 "inc/front.h"
 var $1158=($1134)-($1139); //@line 59 "src/read.cpp"
 var $1159=($1158)+($1142); //@line 60 "src/read.cpp"
 var $1160=($1159)-($1146); //@line 60 "src/read.cpp"
 var $1161=($1160)+($1150); //@line 61 "src/read.cpp"
 var $1162=($1161)-($1154); //@line 61 "src/read.cpp"
 var $1163=HEAPF64[(($1157)>>3)]; //@line 62 "src/read.cpp"
 var $ld$138$0=(($1157)|0);
 var $1163$$SHADOW$0=HEAP32[(($ld$138$0)>>2)];
 var $ld$139$1=(($1157+4)|0);
 var $1163$$SHADOW$1=HEAP32[(($ld$139$1)>>2)];
 var $1164=($1162)+($1163); //@line 62 "src/read.cpp"
 var $1165=HEAP32[(($1111)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1166=HEAP32[(($1113)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1167=HEAP32[(($1166)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$140$0=4;
 var $$etemp$140$1=0;

 var $$etemp$141$0=4;
 var $$etemp$141$1=0;

 var $1168=$1167; //@line 25 "src/rcdecoder.cpp"
 var $1169=HEAP32[(($1168)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1170=(($1169+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1171=HEAP32[(($1170)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1172=(($1165+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1171]($1167,$1172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=210;break; } else { label=224;break; }
 case 210: 
 var $1173=(($1165+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1174=HEAP32[(($1173)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1175=(($1165+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1176=HEAP32[(($1175)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1177=((($1174)-($1176))|0); //@line 26 "src/rcdecoder.cpp"
 var $1178=HEAP32[(($1172)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1179=(((($1177>>>0))/(($1178>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i122)>>2)]=$1179; //@line 26 "src/rcdecoder.cpp"
 var $1180=$1167; //@line 27 "src/rcdecoder.cpp"
 var $1181=HEAP32[(($1180)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1182=(($1181+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1183=HEAP32[(($1182)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1184=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1183]($1167,$l_i_i_i122,$r_i_i_i123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { label=224;break; }
 case 211: 
 var $1185=HEAP32[(($1172)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1186=HEAP32[(($l_i_i_i122)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1187=(Math_imul($1185,$1186)|0); //@line 28 "src/rcdecoder.cpp"
 var $1188=HEAP32[(($1175)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1189=((($1188)+($1187))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1175)>>2)]=$1189; //@line 28 "src/rcdecoder.cpp"
 var $1190=HEAP32[(($r_i_i_i123)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1191=(Math_imul($1185,$1190)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1172)>>2)]=$1191; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=212;break; } else { label=224;break; }
 case 212: 
 var $$etemp$142$0=4;
 var $$etemp$142$1=0;

 var $$etemp$143$0=4;
 var $$etemp$143$1=0;

 var $1192=($1184>>>0)>14; //@line 51 "inc/pcdecoder.inl"
 if($1192){label=213;break;}else{label=215;break;} //@line 51 "inc/pcdecoder.inl"
 case 213: 
 var $1194=((($1184)-(15))|0); //@line 52 "inc/pcdecoder.inl"
 var $1195=HEAP32[(($1111)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $1196$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1195,$1194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1196$0=$1196$r;var $1196$1=tempRet0;if (!__THREW__) { label=214;break; } else { label=224;break; }
 case 214: 
 var $1197$0=$1194;
 var $1197$1=0;
 var $$etemp$144$0=1;
 var $$etemp$144$1=0;
 var $1198$0=_bitshift64Shl($$etemp$144$0,$$etemp$144$1,$1197$0);var $1198$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $1199$0=_i64Add($1198$0,$1198$1,$1196$0,$1196$1);var $1199$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1164; var $1200$0=HEAP32[((tempDoublePtr)>>2)];var $1200$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$145$0=-1;
 var $$etemp$145$1=-1;
 var $1201$0=$1200$0^$$etemp$145$0;
 var $1201$1=$1200$1^$$etemp$145$1;
 var $1202$0=($1201$1>>>18)|(0<<14);
 var $1202$1=(0>>>18)|(0<<14);
 var $1203$0=($1201$1>>31)|((((((($1201$1|0)<0))|0)?-1:0))<<1);
 var $1203$1=((((((($1201$1|0)<0))|0)?-1:0))>>31)|((((((($1201$1|0)<0))|0)?-1:0))<<1);
 var $1204$0=($1203$1>>>19)|(0<<13);
 var $1204$1=(0>>>19)|(0<<13);
 var $1205$0=$1202$0^$1204$0;
 var $1205$1=$1202$1^$1204$1;
 var $1206$0=_i64Add($1205$0,$1205$1,$1199$0,$1199$1);var $1206$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $1207$0=($1206$0>>>13)|($1206$1<<19);
 var $1207$1=($1206$1>>>13)|(0<<19);
 var $$etemp$146$0=0;
 var $$etemp$146$1=0;
 var $1208$0=_i64Subtract($$etemp$146$0,$$etemp$146$1,$1207$0,$1207$1);var $1208$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1209$0=($1208$1>>>19)|(0<<13);
 var $1209$1=(0>>>19)|(0<<13);
 var $1210$0=$1209$0^$1206$0;
 var $1210$1=$1209$1^$1206$1;
 var $1211$0=(0<<18)|(0>>>14);
 var $1211$1=($1210$0<<18)|(0>>>14);
 var $$etemp$147$0=0;
 var $$etemp$147$1=-262144;
 var $1212$0=$1211$0^$$etemp$147$0;
 var $1212$1=$1211$1^$$etemp$147$1;
 var $_01349_in$1=$1212$1;var $_01349_in$0=$1212$0;label=219;break; //@line 56 "inc/pcdecoder.inl"
 case 215: 
 var $1214=($1184>>>0)<14; //@line undefined "inc/pcdecoder.inl"
 if($1214){label=216;break;}else{label=218;break;} //@line undefined "inc/pcdecoder.inl"
 case 216: 
 var $1216=(((13)-($1184))|0); //@line 59 "inc/pcdecoder.inl"
 var $1217=HEAP32[(($1111)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1218$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1217,$1216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1218$0=$1218$r;var $1218$1=tempRet0;if (!__THREW__) { label=217;break; } else { label=224;break; }
 case 217: 
 var $1219$0=$1216;
 var $1219$1=0;
 var $$etemp$148$0=1;
 var $$etemp$148$1=0;
 var $1220$0=_bitshift64Shl($$etemp$148$0,$$etemp$148$1,$1219$0);var $1220$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $1221$0=_i64Add($1220$0,$1220$1,$1218$0,$1218$1);var $1221$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1164; var $1222$0=HEAP32[((tempDoublePtr)>>2)];var $1222$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$149$0=-1;
 var $$etemp$149$1=-1;
 var $1223$0=$1222$0^$$etemp$149$0;
 var $1223$1=$1222$1^$$etemp$149$1;
 var $1224$0=($1223$1>>>18)|(0<<14);
 var $1224$1=(0>>>18)|(0<<14);
 var $1225$0=($1223$1>>31)|((((((($1223$1|0)<0))|0)?-1:0))<<1);
 var $1225$1=((((((($1223$1|0)<0))|0)?-1:0))>>31)|((((((($1223$1|0)<0))|0)?-1:0))<<1);
 var $1226$0=($1225$1>>>19)|(0<<13);
 var $1226$1=(0>>>19)|(0<<13);
 var $1227$0=$1224$0^$1226$0;
 var $1227$1=$1224$1^$1226$1;
 var $1228$0=_i64Subtract($1227$0,$1227$1,$1221$0,$1221$1);var $1228$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $1229$0=($1228$0>>>13)|($1228$1<<19);
 var $1229$1=($1228$1>>>13)|(0<<19);
 var $$etemp$150$0=0;
 var $$etemp$150$1=0;
 var $1230$0=_i64Subtract($$etemp$150$0,$$etemp$150$1,$1229$0,$1229$1);var $1230$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1231$0=($1230$1>>>19)|(0<<13);
 var $1231$1=(0>>>19)|(0<<13);
 var $1232$0=$1231$0^$1228$0;
 var $1232$1=$1231$1^$1228$1;
 var $1233$0=(0<<18)|(0>>>14);
 var $1233$1=($1232$0<<18)|(0>>>14);
 var $$etemp$151$0=0;
 var $$etemp$151$1=-262144;
 var $1234$0=$1233$0^$$etemp$151$0;
 var $1234$1=$1233$1^$$etemp$151$1;
 var $_01349_in$1=$1234$1;var $_01349_in$0=$1234$0;label=219;break; //@line 63 "inc/pcdecoder.inl"
 case 218: 
 HEAPF64[(tempDoublePtr)>>3]=$1164; var $1236$0=HEAP32[((tempDoublePtr)>>2)];var $1236$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$152$0=0;
 var $$etemp$152$1=-262144;
 var $1237$0=$1236$0&$$etemp$152$0;
 var $1237$1=$1236$1&$$etemp$152$1;
 var $_01349_in$1=$1237$1;var $_01349_in$0=$1237$0;label=219;break; //@line 66 "inc/pcdecoder.inl"
 case 219: 
 var $_01349_in$0;
 var $_01349_in$1;
 var $_01349=(HEAP32[((tempDoublePtr)>>2)]=$_01349_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01349_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $1238=(($_21353+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21353)>>3)]=$_01349; //@line 65 "src/read.cpp"
 var $f_i130_sroa_55_6=$f_i130_sroa_55_5;var $_01350=1;label=220;break; //@line 22 "inc/front.h"
 case 220: 
 var $_01350;
 var $f_i130_sroa_55_6;
 var $1240=((($f_i130_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1241=$f_i130_sroa_55_6&$storemerge_i_i_i135; //@line 23 "inc/front.h"
 var $1242=(($1103+($1241<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1242)>>3)]=$_01349; //@line 23 "inc/front.h"
 var $1243=((($_01350)-(1))|0); //@line 23 "inc/front.h"
 var $1244=($1243|0)==0; //@line 23 "inc/front.h"
 if($1244){label=221;break;}else{var $f_i130_sroa_55_6=$1240;var $_01350=$1243;label=220;break;} //@line 23 "inc/front.h"
 case 221: 
 var $1245=((($x_i131_0)+(1))|0); //@line 49 "src/read.cpp"
 var $x_i131_0=$1245;var $f_i130_sroa_55_5=$1240;var $_21353=$1238;label=208;break; //@line 49 "src/read.cpp"
 case 222: 
 var $1247$0 = ___cxa_find_matching_catch(-1, -1); var $1247$1 = tempRet0;
 var $1248=$1247$0;
 var $1249=$1247$1;
 var $1250=($1070|0)==0;
 if($1250){var $_01347=$1249;var $_01348=$1248;label=234;break;}else{label=223;break;}
 case 223: 
 _free($1070);
 var $_01347=$1249;var $_01348=$1248;label=234;break;
 case 224: 
 var $1253$0 = ___cxa_find_matching_catch(-1, -1); var $1253$1 = tempRet0;
 var $1254=$1253$0;
 var $1255=$1253$1;
 var $1256=($1095|0)==0; //@line 11 "inc/front.h"
 if($1256){var $_01347=$1255;var $_01348=$1254;label=234;break;}else{label=225;break;} //@line 11 "inc/front.h"
 case 225: 
 _free($1095);
 var $_01347=$1255;var $_01348=$1254;label=234;break; //@line 11 "inc/front.h"
 case 226: 
 var $1258=((($y_i132_0)+(1))|0); //@line 48 "src/read.cpp"
 var $y_i132_0=$1258;var $f_i130_sroa_55_3=$f_i130_sroa_55_5;var $_11352=$_21353;label=206;break; //@line 48 "src/read.cpp"
 case 227: 
 var $1260=((($z_i133_0)+(1))|0); //@line 47 "src/read.cpp"
 var $z_i133_0=$1260;var $f_i130_sroa_55_1=$f_i130_sroa_55_3;var $_01351=$_11352;label=204;break; //@line 47 "src/read.cpp"
 case 228: 
 var $1262=($1074|0)==0; //@line 69 "src/read.cpp"
 if($1262){label=230;break;}else{label=229;break;} //@line 69 "src/read.cpp"
 case 229: 
 _free($1074);
 label=230;break; //@line 69 "src/read.cpp"
 case 230: 
 var $1264=HEAP32[(($rm_i128)>>2)]; //@line 70 "src/read.cpp"
 var $1265=($1264|0)==0; //@line 70 "src/read.cpp"
 if($1265){label=232;break;}else{label=231;break;} //@line 70 "src/read.cpp"
 case 231: 
 var $1267=$1264; //@line 70 "src/read.cpp"
 var $1268=HEAP32[(($1267)>>2)]; //@line 70 "src/read.cpp"
 var $1269=(($1268+4)|0); //@line 70 "src/read.cpp"
 var $1270=HEAP32[(($1269)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1270]($1264); //@line 70 "src/read.cpp"
 label=232;break; //@line 70 "src/read.cpp"
 case 232: 
 var $1272=($1095|0)==0; //@line 11 "inc/front.h"
 if($1272){label=1285;break;}else{label=233;break;} //@line 11 "inc/front.h"
 case 233: 
 _free($1095);
 label=1285;break; //@line 11 "inc/front.h"
 case 234: 
 var $_01348;
 var $_01347;
 var $1273$0=$_01348;
 var $1273$1=0;
 var $1274$0=$1273$0;
 var $1274$1=$_01347;
 ___resumeException($1274$0) //@line 71 "src/read.cpp"
 case 235: 
 var $1276=HEAP32[(($3)>>2)]; //@line 173 "src/read.cpp"
 var $1277=HEAP32[(($4)>>2)]; //@line 173 "src/read.cpp"
 var $1278=HEAP32[(($5)>>2)]; //@line 173 "src/read.cpp"
 var $1279=HEAP32[(($6)>>2)]; //@line 173 "src/read.cpp"
 var $$etemp$153$0=4;
 var $$etemp$153$1=0;

 var $1280=__Znwj(48); //@line 41 "src/read.cpp"
 var $1281=$1280; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1281,0,33,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=236;break; } else { label=264;break; } //@line 41 "src/read.cpp"
 case 236: 
 var $1283=$1280; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i164)>>2)]=$1283; //@line 71 "src/read.cpp"
 var $1284=__Znwj(12); //@line 42 "src/read.cpp"
 var $1285=(($1284+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1286=$1285; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1286)>>2)]=$1276; //@line 34 "inc/pcdecoder.inl"
 var $1287=(($1284+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1288=$1287; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1288)>>2)]=$rm_i164; //@line 34 "inc/pcdecoder.inl"
 var $1289=((($1277)+(1))|0); //@line 10 "inc/front.h"
 var $1290=((($1278)+(1))|0); //@line 10 "inc/front.h"
 var $1291=(Math_imul($1289,$1290)|0); //@line 10 "inc/front.h"
 var $1292=((($1277)+(2))|0); //@line 9 "inc/front.h"
 var $1293=((($1292)+($1291))|0); //@line 9 "inc/front.h"
 var $1294=((($1293)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i171=$1294;label=237;break; //@line 45 "inc/front.h"
 case 237: 
 var $storemerge_i_i_i171;
 var $1296=((($storemerge_i_i_i171)+(1))|0); //@line 45 "inc/front.h"
 var $1297=$storemerge_i_i_i171&$1296; //@line 45 "inc/front.h"
 var $1298=($1297|0)==0; //@line 45 "inc/front.h"
 if($1298){label=239;break;}else{label=238;break;} //@line 45 "inc/front.h"
 case 238: 
 var $1300=$storemerge_i_i_i171|$1296; //@line 45 "inc/front.h"
 var $storemerge_i_i_i171=$1300;label=237;break; //@line 45 "inc/front.h"
 case 239: 
 var $1301$0=_llvm_umul_with_overflow_i32($1296,8);
 var $1301$1=tempRet0;
 var $1302=$1301$1;
 var $1303=$1301$0;
 var $1304=($1302?-1:$1303); //@line 9 "inc/front.h"
 var $1305=(function() { try { __THREW__ = 0; return __Znwj($1304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=243;break; } else { label=240;break; }
 case 240: 
 var $1307$0 = ___cxa_find_matching_catch(-1, -1); var $1307$1 = tempRet0;
 var $1308=$1307$1;
 var $1309=($1308|0)<0;
 if($1309){label=241;break;}else{label=242;break;}
 case 241: 
 var $1311=$1307$0;
 ___cxa_call_unexpected($1311);
 throw "Reached an unreachable!";
 case 242: 
 ___resumeException($1307$0)
 case 243: 
 var $1313=$1305; //@line 9 "inc/front.h"
 var $_01341=$1291;var $f_i166_sroa_55_0=0;label=244;break; //@line 22 "inc/front.h"
 case 244: 
 var $f_i166_sroa_55_0;
 var $_01341;
 var $1315=((($f_i166_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1316=$f_i166_sroa_55_0&$storemerge_i_i_i171; //@line 23 "inc/front.h"
 var $1317=(($1313+($1316<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1317)>>3)]=0; //@line 23 "inc/front.h"
 var $1318=((($_01341)-(1))|0); //@line 23 "inc/front.h"
 var $1319=($1318|0)==0; //@line 23 "inc/front.h"
 if($1319){label=245;break;}else{var $_01341=$1318;var $f_i166_sroa_55_0=$1315;label=244;break;} //@line 23 "inc/front.h"
 case 245: 
 var $1320=(($1284+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1321=$1320; //@line 50 "inc/pcdecoder.inl"
 var $1322=(($1284+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1323=$1322; //@line 50 "inc/pcdecoder.inl"
 var $_01342=$_01052;var $f_i166_sroa_55_1=$1315;var $z_i169_0=0;label=246;break; //@line 47 "src/read.cpp"
 case 246: 
 var $z_i169_0;
 var $f_i166_sroa_55_1;
 var $_01342;
 var $1325=($z_i169_0>>>0)<($1279>>>0); //@line 47 "src/read.cpp"
 if($1325){var $_01340=$1289;var $f_i166_sroa_55_2=$f_i166_sroa_55_1;label=247;break;}else{label=270;break;} //@line 47 "src/read.cpp"
 case 247: 
 var $f_i166_sroa_55_2;
 var $_01340;
 var $1327=((($f_i166_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1328=$f_i166_sroa_55_2&$storemerge_i_i_i171; //@line 23 "inc/front.h"
 var $1329=(($1313+($1328<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1329)>>3)]=0; //@line 23 "inc/front.h"
 var $1330=((($_01340)-(1))|0); //@line 23 "inc/front.h"
 var $1331=($1330|0)==0; //@line 23 "inc/front.h"
 if($1331){var $_11343=$_01342;var $f_i166_sroa_55_3=$1327;var $y_i168_0=0;label=248;break;}else{var $_01340=$1330;var $f_i166_sroa_55_2=$1327;label=247;break;} //@line 23 "inc/front.h"
 case 248: 
 var $y_i168_0;
 var $f_i166_sroa_55_3;
 var $_11343;
 var $1332=($y_i168_0>>>0)<($1278>>>0); //@line 48 "src/read.cpp"
 if($1332){var $_01339=1;var $f_i166_sroa_55_4=$f_i166_sroa_55_3;label=249;break;}else{label=269;break;} //@line 48 "src/read.cpp"
 case 249: 
 var $f_i166_sroa_55_4;
 var $_01339;
 var $1334=((($f_i166_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1335=$f_i166_sroa_55_4&$storemerge_i_i_i171; //@line 23 "inc/front.h"
 var $1336=(($1313+($1335<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1336)>>3)]=0; //@line 23 "inc/front.h"
 var $1337=((($_01339)-(1))|0); //@line 23 "inc/front.h"
 var $1338=($1337|0)==0; //@line 23 "inc/front.h"
 if($1338){var $_21344=$_11343;var $f_i166_sroa_55_5=$1334;var $x_i167_0=0;label=250;break;}else{var $_01339=$1337;var $f_i166_sroa_55_4=$1334;label=249;break;} //@line 23 "inc/front.h"
 case 250: 
 var $x_i167_0;
 var $f_i166_sroa_55_5;
 var $_21344;
 var $1339=($x_i167_0>>>0)<($1277>>>0); //@line 49 "src/read.cpp"
 if($1339){label=251;break;}else{label=268;break;} //@line 49 "src/read.cpp"
 case 251: 
 var $1341=((($f_i166_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1342=$1341&$storemerge_i_i_i171; //@line 16 "inc/front.h"
 var $1343=(($1313+($1342<<3))|0); //@line 16 "inc/front.h"
 var $1344=HEAPF64[(($1343)>>3)]; //@line 59 "src/read.cpp"
 var $ld$154$0=(($1343)|0);
 var $1344$$SHADOW$0=HEAP32[(($ld$154$0)>>2)];
 var $ld$155$1=(($1343+4)|0);
 var $1344$$SHADOW$1=HEAP32[(($ld$155$1)>>2)];
 var $1345=((($f_i166_sroa_55_5)-($1289))|0); //@line 16 "inc/front.h"
 var $1346=((($1345)-($1291))|0); //@line 16 "inc/front.h"
 var $1347=$1346&$storemerge_i_i_i171; //@line 16 "inc/front.h"
 var $1348=(($1313+($1347<<3))|0); //@line 16 "inc/front.h"
 var $1349=HEAPF64[(($1348)>>3)]; //@line 59 "src/read.cpp"
 var $ld$156$0=(($1348)|0);
 var $1349$$SHADOW$0=HEAP32[(($ld$156$0)>>2)];
 var $ld$157$1=(($1348+4)|0);
 var $1349$$SHADOW$1=HEAP32[(($ld$157$1)>>2)];
 var $1350=$1345&$storemerge_i_i_i171; //@line 16 "inc/front.h"
 var $1351=(($1313+($1350<<3))|0); //@line 16 "inc/front.h"
 var $1352=HEAPF64[(($1351)>>3)]; //@line 60 "src/read.cpp"
 var $ld$158$0=(($1351)|0);
 var $1352$$SHADOW$0=HEAP32[(($ld$158$0)>>2)];
 var $ld$159$1=(($1351+4)|0);
 var $1352$$SHADOW$1=HEAP32[(($ld$159$1)>>2)];
 var $1353=((($1341)-($1291))|0); //@line 16 "inc/front.h"
 var $1354=$1353&$storemerge_i_i_i171; //@line 16 "inc/front.h"
 var $1355=(($1313+($1354<<3))|0); //@line 16 "inc/front.h"
 var $1356=HEAPF64[(($1355)>>3)]; //@line 60 "src/read.cpp"
 var $ld$160$0=(($1355)|0);
 var $1356$$SHADOW$0=HEAP32[(($ld$160$0)>>2)];
 var $ld$161$1=(($1355+4)|0);
 var $1356$$SHADOW$1=HEAP32[(($ld$161$1)>>2)];
 var $1357=((($f_i166_sroa_55_5)-($1291))|0); //@line 16 "inc/front.h"
 var $1358=$1357&$storemerge_i_i_i171; //@line 16 "inc/front.h"
 var $1359=(($1313+($1358<<3))|0); //@line 16 "inc/front.h"
 var $1360=HEAPF64[(($1359)>>3)]; //@line 61 "src/read.cpp"
 var $ld$162$0=(($1359)|0);
 var $1360$$SHADOW$0=HEAP32[(($ld$162$0)>>2)];
 var $ld$163$1=(($1359+4)|0);
 var $1360$$SHADOW$1=HEAP32[(($ld$163$1)>>2)];
 var $1361=((($1341)-($1289))|0); //@line 16 "inc/front.h"
 var $1362=$1361&$storemerge_i_i_i171; //@line 16 "inc/front.h"
 var $1363=(($1313+($1362<<3))|0); //@line 16 "inc/front.h"
 var $1364=HEAPF64[(($1363)>>3)]; //@line 61 "src/read.cpp"
 var $ld$164$0=(($1363)|0);
 var $1364$$SHADOW$0=HEAP32[(($ld$164$0)>>2)];
 var $ld$165$1=(($1363+4)|0);
 var $1364$$SHADOW$1=HEAP32[(($ld$165$1)>>2)];
 var $1365=((($1361)-($1291))|0); //@line 16 "inc/front.h"
 var $1366=$1365&$storemerge_i_i_i171; //@line 16 "inc/front.h"
 var $1367=(($1313+($1366<<3))|0); //@line 16 "inc/front.h"
 var $1368=($1344)-($1349); //@line 59 "src/read.cpp"
 var $1369=($1368)+($1352); //@line 60 "src/read.cpp"
 var $1370=($1369)-($1356); //@line 60 "src/read.cpp"
 var $1371=($1370)+($1360); //@line 61 "src/read.cpp"
 var $1372=($1371)-($1364); //@line 61 "src/read.cpp"
 var $1373=HEAPF64[(($1367)>>3)]; //@line 62 "src/read.cpp"
 var $ld$166$0=(($1367)|0);
 var $1373$$SHADOW$0=HEAP32[(($ld$166$0)>>2)];
 var $ld$167$1=(($1367+4)|0);
 var $1373$$SHADOW$1=HEAP32[(($ld$167$1)>>2)];
 var $1374=($1372)+($1373); //@line 62 "src/read.cpp"
 var $1375=HEAP32[(($1321)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1376=HEAP32[(($1323)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1377=HEAP32[(($1376)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$168$0=4;
 var $$etemp$168$1=0;

 var $$etemp$169$0=4;
 var $$etemp$169$1=0;

 var $1378=$1377; //@line 25 "src/rcdecoder.cpp"
 var $1379=HEAP32[(($1378)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1380=(($1379+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1381=HEAP32[(($1380)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1382=(($1375+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1381]($1377,$1382) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=252;break; } else { label=266;break; }
 case 252: 
 var $1383=(($1375+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1384=HEAP32[(($1383)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1385=(($1375+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1386=HEAP32[(($1385)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1387=((($1384)-($1386))|0); //@line 26 "src/rcdecoder.cpp"
 var $1388=HEAP32[(($1382)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1389=(((($1387>>>0))/(($1388>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i158)>>2)]=$1389; //@line 26 "src/rcdecoder.cpp"
 var $1390=$1377; //@line 27 "src/rcdecoder.cpp"
 var $1391=HEAP32[(($1390)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1392=(($1391+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1393=HEAP32[(($1392)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1394=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1393]($1377,$l_i_i_i158,$r_i_i_i159) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=253;break; } else { label=266;break; }
 case 253: 
 var $1395=HEAP32[(($1382)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1396=HEAP32[(($l_i_i_i158)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1397=(Math_imul($1395,$1396)|0); //@line 28 "src/rcdecoder.cpp"
 var $1398=HEAP32[(($1385)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1399=((($1398)+($1397))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1385)>>2)]=$1399; //@line 28 "src/rcdecoder.cpp"
 var $1400=HEAP32[(($r_i_i_i159)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1401=(Math_imul($1395,$1400)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1382)>>2)]=$1401; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1375) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=254;break; } else { label=266;break; }
 case 254: 
 var $$etemp$170$0=4;
 var $$etemp$170$1=0;

 var $$etemp$171$0=4;
 var $$etemp$171$1=0;

 var $1402=($1394>>>0)>16; //@line 51 "inc/pcdecoder.inl"
 if($1402){label=255;break;}else{label=257;break;} //@line 51 "inc/pcdecoder.inl"
 case 255: 
 var $1404=((($1394)-(17))|0); //@line 52 "inc/pcdecoder.inl"
 var $1405=HEAP32[(($1321)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $1406$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1405,$1404) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1406$0=$1406$r;var $1406$1=tempRet0;if (!__THREW__) { label=256;break; } else { label=266;break; }
 case 256: 
 var $1407$0=$1404;
 var $1407$1=0;
 var $$etemp$172$0=1;
 var $$etemp$172$1=0;
 var $1408$0=_bitshift64Shl($$etemp$172$0,$$etemp$172$1,$1407$0);var $1408$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $1409$0=_i64Add($1408$0,$1408$1,$1406$0,$1406$1);var $1409$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1374; var $1410$0=HEAP32[((tempDoublePtr)>>2)];var $1410$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$173$0=-1;
 var $$etemp$173$1=-1;
 var $1411$0=$1410$0^$$etemp$173$0;
 var $1411$1=$1410$1^$$etemp$173$1;
 var $1412$0=($1411$1>>>16)|(0<<16);
 var $1412$1=(0>>>16)|(0<<16);
 var $1413$0=($1411$1>>31)|((((((($1411$1|0)<0))|0)?-1:0))<<1);
 var $1413$1=((((((($1411$1|0)<0))|0)?-1:0))>>31)|((((((($1411$1|0)<0))|0)?-1:0))<<1);
 var $1414$0=($1413$1>>>17)|(0<<15);
 var $1414$1=(0>>>17)|(0<<15);
 var $1415$0=$1412$0^$1414$0;
 var $1415$1=$1412$1^$1414$1;
 var $1416$0=_i64Add($1415$0,$1415$1,$1409$0,$1409$1);var $1416$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $1417$0=($1416$0>>>15)|($1416$1<<17);
 var $1417$1=($1416$1>>>15)|(0<<17);
 var $$etemp$174$0=0;
 var $$etemp$174$1=0;
 var $1418$0=_i64Subtract($$etemp$174$0,$$etemp$174$1,$1417$0,$1417$1);var $1418$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1419$0=($1418$1>>>17)|(0<<15);
 var $1419$1=(0>>>17)|(0<<15);
 var $1420$0=$1419$0^$1416$0;
 var $1420$1=$1419$1^$1416$1;
 var $1421$0=(0<<16)|(0>>>16);
 var $1421$1=($1420$0<<16)|(0>>>16);
 var $$etemp$175$0=0;
 var $$etemp$175$1=-65536;
 var $1422$0=$1421$0^$$etemp$175$0;
 var $1422$1=$1421$1^$$etemp$175$1;
 var $_01337_in$1=$1422$1;var $_01337_in$0=$1422$0;label=261;break; //@line 56 "inc/pcdecoder.inl"
 case 257: 
 var $1424=($1394>>>0)<16; //@line undefined "inc/pcdecoder.inl"
 if($1424){label=258;break;}else{label=260;break;} //@line undefined "inc/pcdecoder.inl"
 case 258: 
 var $1426=(((15)-($1394))|0); //@line 59 "inc/pcdecoder.inl"
 var $1427=HEAP32[(($1321)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1428$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1427,$1426) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1428$0=$1428$r;var $1428$1=tempRet0;if (!__THREW__) { label=259;break; } else { label=266;break; }
 case 259: 
 var $1429$0=$1426;
 var $1429$1=0;
 var $$etemp$176$0=1;
 var $$etemp$176$1=0;
 var $1430$0=_bitshift64Shl($$etemp$176$0,$$etemp$176$1,$1429$0);var $1430$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $1431$0=_i64Add($1430$0,$1430$1,$1428$0,$1428$1);var $1431$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1374; var $1432$0=HEAP32[((tempDoublePtr)>>2)];var $1432$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$177$0=-1;
 var $$etemp$177$1=-1;
 var $1433$0=$1432$0^$$etemp$177$0;
 var $1433$1=$1432$1^$$etemp$177$1;
 var $1434$0=($1433$1>>>16)|(0<<16);
 var $1434$1=(0>>>16)|(0<<16);
 var $1435$0=($1433$1>>31)|((((((($1433$1|0)<0))|0)?-1:0))<<1);
 var $1435$1=((((((($1433$1|0)<0))|0)?-1:0))>>31)|((((((($1433$1|0)<0))|0)?-1:0))<<1);
 var $1436$0=($1435$1>>>17)|(0<<15);
 var $1436$1=(0>>>17)|(0<<15);
 var $1437$0=$1434$0^$1436$0;
 var $1437$1=$1434$1^$1436$1;
 var $1438$0=_i64Subtract($1437$0,$1437$1,$1431$0,$1431$1);var $1438$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $1439$0=($1438$0>>>15)|($1438$1<<17);
 var $1439$1=($1438$1>>>15)|(0<<17);
 var $$etemp$178$0=0;
 var $$etemp$178$1=0;
 var $1440$0=_i64Subtract($$etemp$178$0,$$etemp$178$1,$1439$0,$1439$1);var $1440$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1441$0=($1440$1>>>17)|(0<<15);
 var $1441$1=(0>>>17)|(0<<15);
 var $1442$0=$1441$0^$1438$0;
 var $1442$1=$1441$1^$1438$1;
 var $1443$0=(0<<16)|(0>>>16);
 var $1443$1=($1442$0<<16)|(0>>>16);
 var $$etemp$179$0=0;
 var $$etemp$179$1=-65536;
 var $1444$0=$1443$0^$$etemp$179$0;
 var $1444$1=$1443$1^$$etemp$179$1;
 var $_01337_in$1=$1444$1;var $_01337_in$0=$1444$0;label=261;break; //@line 63 "inc/pcdecoder.inl"
 case 260: 
 HEAPF64[(tempDoublePtr)>>3]=$1374; var $1446$0=HEAP32[((tempDoublePtr)>>2)];var $1446$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$180$0=0;
 var $$etemp$180$1=-65536;
 var $1447$0=$1446$0&$$etemp$180$0;
 var $1447$1=$1446$1&$$etemp$180$1;
 var $_01337_in$1=$1447$1;var $_01337_in$0=$1447$0;label=261;break; //@line 66 "inc/pcdecoder.inl"
 case 261: 
 var $_01337_in$0;
 var $_01337_in$1;
 var $_01337=(HEAP32[((tempDoublePtr)>>2)]=$_01337_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01337_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $1448=(($_21344+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21344)>>3)]=$_01337; //@line 65 "src/read.cpp"
 var $_01338=1;var $f_i166_sroa_55_6=$f_i166_sroa_55_5;label=262;break; //@line 22 "inc/front.h"
 case 262: 
 var $f_i166_sroa_55_6;
 var $_01338;
 var $1450=((($f_i166_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1451=$f_i166_sroa_55_6&$storemerge_i_i_i171; //@line 23 "inc/front.h"
 var $1452=(($1313+($1451<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1452)>>3)]=$_01337; //@line 23 "inc/front.h"
 var $1453=((($_01338)-(1))|0); //@line 23 "inc/front.h"
 var $1454=($1453|0)==0; //@line 23 "inc/front.h"
 if($1454){label=263;break;}else{var $_01338=$1453;var $f_i166_sroa_55_6=$1450;label=262;break;} //@line 23 "inc/front.h"
 case 263: 
 var $1455=((($x_i167_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21344=$1448;var $f_i166_sroa_55_5=$1450;var $x_i167_0=$1455;label=250;break; //@line 49 "src/read.cpp"
 case 264: 
 var $1457$0 = ___cxa_find_matching_catch(-1, -1); var $1457$1 = tempRet0;
 var $1458=$1457$0;
 var $1459=$1457$1;
 var $1460=($1280|0)==0;
 if($1460){var $_01345=$1458;var $_01346=$1459;label=276;break;}else{label=265;break;}
 case 265: 
 _free($1280);
 var $_01345=$1458;var $_01346=$1459;label=276;break;
 case 266: 
 var $1463$0 = ___cxa_find_matching_catch(-1, -1); var $1463$1 = tempRet0;
 var $1464=$1463$0;
 var $1465=$1463$1;
 var $1466=($1305|0)==0; //@line 11 "inc/front.h"
 if($1466){var $_01345=$1464;var $_01346=$1465;label=276;break;}else{label=267;break;} //@line 11 "inc/front.h"
 case 267: 
 _free($1305);
 var $_01345=$1464;var $_01346=$1465;label=276;break; //@line 11 "inc/front.h"
 case 268: 
 var $1468=((($y_i168_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11343=$_21344;var $f_i166_sroa_55_3=$f_i166_sroa_55_5;var $y_i168_0=$1468;label=248;break; //@line 48 "src/read.cpp"
 case 269: 
 var $1470=((($z_i169_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01342=$_11343;var $f_i166_sroa_55_1=$f_i166_sroa_55_3;var $z_i169_0=$1470;label=246;break; //@line 47 "src/read.cpp"
 case 270: 
 var $1472=($1284|0)==0; //@line 69 "src/read.cpp"
 if($1472){label=272;break;}else{label=271;break;} //@line 69 "src/read.cpp"
 case 271: 
 _free($1284);
 label=272;break; //@line 69 "src/read.cpp"
 case 272: 
 var $1474=HEAP32[(($rm_i164)>>2)]; //@line 70 "src/read.cpp"
 var $1475=($1474|0)==0; //@line 70 "src/read.cpp"
 if($1475){label=274;break;}else{label=273;break;} //@line 70 "src/read.cpp"
 case 273: 
 var $1477=$1474; //@line 70 "src/read.cpp"
 var $1478=HEAP32[(($1477)>>2)]; //@line 70 "src/read.cpp"
 var $1479=(($1478+4)|0); //@line 70 "src/read.cpp"
 var $1480=HEAP32[(($1479)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1480]($1474); //@line 70 "src/read.cpp"
 label=274;break; //@line 70 "src/read.cpp"
 case 274: 
 var $1482=($1305|0)==0; //@line 11 "inc/front.h"
 if($1482){label=1285;break;}else{label=275;break;} //@line 11 "inc/front.h"
 case 275: 
 _free($1305);
 label=1285;break; //@line 11 "inc/front.h"
 case 276: 
 var $_01346;
 var $_01345;
 var $1483$0=$_01345;
 var $1483$1=0;
 var $1484$0=$1483$0;
 var $1484$1=$_01346;
 ___resumeException($1484$0) //@line 71 "src/read.cpp"
 case 277: 
 var $1486=HEAP32[(($3)>>2)]; //@line 174 "src/read.cpp"
 var $1487=HEAP32[(($4)>>2)]; //@line 174 "src/read.cpp"
 var $1488=HEAP32[(($5)>>2)]; //@line 174 "src/read.cpp"
 var $1489=HEAP32[(($6)>>2)]; //@line 174 "src/read.cpp"
 var $$etemp$181$0=4;
 var $$etemp$181$1=0;

 var $1490=__Znwj(48); //@line 41 "src/read.cpp"
 var $1491=$1490; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1491,0,37,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=306;break; } //@line 41 "src/read.cpp"
 case 278: 
 var $1493=$1490; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i200)>>2)]=$1493; //@line 71 "src/read.cpp"
 var $1494=__Znwj(12); //@line 42 "src/read.cpp"
 var $1495=(($1494+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1496=$1495; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1496)>>2)]=$1486; //@line 34 "inc/pcdecoder.inl"
 var $1497=(($1494+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1498=$1497; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1498)>>2)]=$rm_i200; //@line 34 "inc/pcdecoder.inl"
 var $1499=((($1487)+(1))|0); //@line 10 "inc/front.h"
 var $1500=((($1488)+(1))|0); //@line 10 "inc/front.h"
 var $1501=(Math_imul($1499,$1500)|0); //@line 10 "inc/front.h"
 var $1502=((($1487)+(2))|0); //@line 9 "inc/front.h"
 var $1503=((($1502)+($1501))|0); //@line 9 "inc/front.h"
 var $1504=((($1503)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i207=$1504;label=279;break; //@line 45 "inc/front.h"
 case 279: 
 var $storemerge_i_i_i207;
 var $1506=((($storemerge_i_i_i207)+(1))|0); //@line 45 "inc/front.h"
 var $1507=$storemerge_i_i_i207&$1506; //@line 45 "inc/front.h"
 var $1508=($1507|0)==0; //@line 45 "inc/front.h"
 if($1508){label=281;break;}else{label=280;break;} //@line 45 "inc/front.h"
 case 280: 
 var $1510=$storemerge_i_i_i207|$1506; //@line 45 "inc/front.h"
 var $storemerge_i_i_i207=$1510;label=279;break; //@line 45 "inc/front.h"
 case 281: 
 var $1511$0=_llvm_umul_with_overflow_i32($1506,8);
 var $1511$1=tempRet0;
 var $1512=$1511$1;
 var $1513=$1511$0;
 var $1514=($1512?-1:$1513); //@line 9 "inc/front.h"
 var $1515=(function() { try { __THREW__ = 0; return __Znwj($1514) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=285;break; } else { label=282;break; }
 case 282: 
 var $1517$0 = ___cxa_find_matching_catch(-1, -1); var $1517$1 = tempRet0;
 var $1518=$1517$1;
 var $1519=($1518|0)<0;
 if($1519){label=283;break;}else{label=284;break;}
 case 283: 
 var $1521=$1517$0;
 ___cxa_call_unexpected($1521);
 throw "Reached an unreachable!";
 case 284: 
 ___resumeException($1517$0)
 case 285: 
 var $1523=$1515; //@line 9 "inc/front.h"
 var $_01331=$1501;var $f_i202_sroa_55_0=0;label=286;break; //@line 22 "inc/front.h"
 case 286: 
 var $f_i202_sroa_55_0;
 var $_01331;
 var $1525=((($f_i202_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1526=$f_i202_sroa_55_0&$storemerge_i_i_i207; //@line 23 "inc/front.h"
 var $1527=(($1523+($1526<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1527)>>3)]=0; //@line 23 "inc/front.h"
 var $1528=((($_01331)-(1))|0); //@line 23 "inc/front.h"
 var $1529=($1528|0)==0; //@line 23 "inc/front.h"
 if($1529){label=287;break;}else{var $_01331=$1528;var $f_i202_sroa_55_0=$1525;label=286;break;} //@line 23 "inc/front.h"
 case 287: 
 var $1530=(($1494+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1531=$1530; //@line 50 "inc/pcdecoder.inl"
 var $1532=(($1494+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1533=$1532; //@line 50 "inc/pcdecoder.inl"
 var $_01332=$_01052;var $f_i202_sroa_55_1=$1525;var $z_i205_0=0;label=288;break; //@line 47 "src/read.cpp"
 case 288: 
 var $z_i205_0;
 var $f_i202_sroa_55_1;
 var $_01332;
 var $1535=($z_i205_0>>>0)<($1489>>>0); //@line 47 "src/read.cpp"
 if($1535){var $_01330=$1499;var $f_i202_sroa_55_2=$f_i202_sroa_55_1;label=289;break;}else{label=312;break;} //@line 47 "src/read.cpp"
 case 289: 
 var $f_i202_sroa_55_2;
 var $_01330;
 var $1537=((($f_i202_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1538=$f_i202_sroa_55_2&$storemerge_i_i_i207; //@line 23 "inc/front.h"
 var $1539=(($1523+($1538<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1539)>>3)]=0; //@line 23 "inc/front.h"
 var $1540=((($_01330)-(1))|0); //@line 23 "inc/front.h"
 var $1541=($1540|0)==0; //@line 23 "inc/front.h"
 if($1541){var $_11333=$_01332;var $f_i202_sroa_55_3=$1537;var $y_i204_0=0;label=290;break;}else{var $_01330=$1540;var $f_i202_sroa_55_2=$1537;label=289;break;} //@line 23 "inc/front.h"
 case 290: 
 var $y_i204_0;
 var $f_i202_sroa_55_3;
 var $_11333;
 var $1542=($y_i204_0>>>0)<($1488>>>0); //@line 48 "src/read.cpp"
 if($1542){var $_01329=1;var $f_i202_sroa_55_4=$f_i202_sroa_55_3;label=291;break;}else{label=311;break;} //@line 48 "src/read.cpp"
 case 291: 
 var $f_i202_sroa_55_4;
 var $_01329;
 var $1544=((($f_i202_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1545=$f_i202_sroa_55_4&$storemerge_i_i_i207; //@line 23 "inc/front.h"
 var $1546=(($1523+($1545<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1546)>>3)]=0; //@line 23 "inc/front.h"
 var $1547=((($_01329)-(1))|0); //@line 23 "inc/front.h"
 var $1548=($1547|0)==0; //@line 23 "inc/front.h"
 if($1548){var $_21334=$_11333;var $f_i202_sroa_55_5=$1544;var $x_i203_0=0;label=292;break;}else{var $_01329=$1547;var $f_i202_sroa_55_4=$1544;label=291;break;} //@line 23 "inc/front.h"
 case 292: 
 var $x_i203_0;
 var $f_i202_sroa_55_5;
 var $_21334;
 var $1549=($x_i203_0>>>0)<($1487>>>0); //@line 49 "src/read.cpp"
 if($1549){label=293;break;}else{label=310;break;} //@line 49 "src/read.cpp"
 case 293: 
 var $1551=((($f_i202_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1552=$1551&$storemerge_i_i_i207; //@line 16 "inc/front.h"
 var $1553=(($1523+($1552<<3))|0); //@line 16 "inc/front.h"
 var $1554=HEAPF64[(($1553)>>3)]; //@line 59 "src/read.cpp"
 var $ld$182$0=(($1553)|0);
 var $1554$$SHADOW$0=HEAP32[(($ld$182$0)>>2)];
 var $ld$183$1=(($1553+4)|0);
 var $1554$$SHADOW$1=HEAP32[(($ld$183$1)>>2)];
 var $1555=((($f_i202_sroa_55_5)-($1499))|0); //@line 16 "inc/front.h"
 var $1556=((($1555)-($1501))|0); //@line 16 "inc/front.h"
 var $1557=$1556&$storemerge_i_i_i207; //@line 16 "inc/front.h"
 var $1558=(($1523+($1557<<3))|0); //@line 16 "inc/front.h"
 var $1559=HEAPF64[(($1558)>>3)]; //@line 59 "src/read.cpp"
 var $ld$184$0=(($1558)|0);
 var $1559$$SHADOW$0=HEAP32[(($ld$184$0)>>2)];
 var $ld$185$1=(($1558+4)|0);
 var $1559$$SHADOW$1=HEAP32[(($ld$185$1)>>2)];
 var $1560=$1555&$storemerge_i_i_i207; //@line 16 "inc/front.h"
 var $1561=(($1523+($1560<<3))|0); //@line 16 "inc/front.h"
 var $1562=HEAPF64[(($1561)>>3)]; //@line 60 "src/read.cpp"
 var $ld$186$0=(($1561)|0);
 var $1562$$SHADOW$0=HEAP32[(($ld$186$0)>>2)];
 var $ld$187$1=(($1561+4)|0);
 var $1562$$SHADOW$1=HEAP32[(($ld$187$1)>>2)];
 var $1563=((($1551)-($1501))|0); //@line 16 "inc/front.h"
 var $1564=$1563&$storemerge_i_i_i207; //@line 16 "inc/front.h"
 var $1565=(($1523+($1564<<3))|0); //@line 16 "inc/front.h"
 var $1566=HEAPF64[(($1565)>>3)]; //@line 60 "src/read.cpp"
 var $ld$188$0=(($1565)|0);
 var $1566$$SHADOW$0=HEAP32[(($ld$188$0)>>2)];
 var $ld$189$1=(($1565+4)|0);
 var $1566$$SHADOW$1=HEAP32[(($ld$189$1)>>2)];
 var $1567=((($f_i202_sroa_55_5)-($1501))|0); //@line 16 "inc/front.h"
 var $1568=$1567&$storemerge_i_i_i207; //@line 16 "inc/front.h"
 var $1569=(($1523+($1568<<3))|0); //@line 16 "inc/front.h"
 var $1570=HEAPF64[(($1569)>>3)]; //@line 61 "src/read.cpp"
 var $ld$190$0=(($1569)|0);
 var $1570$$SHADOW$0=HEAP32[(($ld$190$0)>>2)];
 var $ld$191$1=(($1569+4)|0);
 var $1570$$SHADOW$1=HEAP32[(($ld$191$1)>>2)];
 var $1571=((($1551)-($1499))|0); //@line 16 "inc/front.h"
 var $1572=$1571&$storemerge_i_i_i207; //@line 16 "inc/front.h"
 var $1573=(($1523+($1572<<3))|0); //@line 16 "inc/front.h"
 var $1574=HEAPF64[(($1573)>>3)]; //@line 61 "src/read.cpp"
 var $ld$192$0=(($1573)|0);
 var $1574$$SHADOW$0=HEAP32[(($ld$192$0)>>2)];
 var $ld$193$1=(($1573+4)|0);
 var $1574$$SHADOW$1=HEAP32[(($ld$193$1)>>2)];
 var $1575=((($1571)-($1501))|0); //@line 16 "inc/front.h"
 var $1576=$1575&$storemerge_i_i_i207; //@line 16 "inc/front.h"
 var $1577=(($1523+($1576<<3))|0); //@line 16 "inc/front.h"
 var $1578=($1554)-($1559); //@line 59 "src/read.cpp"
 var $1579=($1578)+($1562); //@line 60 "src/read.cpp"
 var $1580=($1579)-($1566); //@line 60 "src/read.cpp"
 var $1581=($1580)+($1570); //@line 61 "src/read.cpp"
 var $1582=($1581)-($1574); //@line 61 "src/read.cpp"
 var $1583=HEAPF64[(($1577)>>3)]; //@line 62 "src/read.cpp"
 var $ld$194$0=(($1577)|0);
 var $1583$$SHADOW$0=HEAP32[(($ld$194$0)>>2)];
 var $ld$195$1=(($1577+4)|0);
 var $1583$$SHADOW$1=HEAP32[(($ld$195$1)>>2)];
 var $1584=($1582)+($1583); //@line 62 "src/read.cpp"
 var $1585=HEAP32[(($1531)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1586=HEAP32[(($1533)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1587=HEAP32[(($1586)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$196$0=4;
 var $$etemp$196$1=0;

 var $$etemp$197$0=4;
 var $$etemp$197$1=0;

 var $1588=$1587; //@line 25 "src/rcdecoder.cpp"
 var $1589=HEAP32[(($1588)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1590=(($1589+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1591=HEAP32[(($1590)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1592=(($1585+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1591]($1587,$1592) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=308;break; }
 case 294: 
 var $1593=(($1585+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1594=HEAP32[(($1593)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1595=(($1585+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1596=HEAP32[(($1595)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1597=((($1594)-($1596))|0); //@line 26 "src/rcdecoder.cpp"
 var $1598=HEAP32[(($1592)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1599=(((($1597>>>0))/(($1598>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i194)>>2)]=$1599; //@line 26 "src/rcdecoder.cpp"
 var $1600=$1587; //@line 27 "src/rcdecoder.cpp"
 var $1601=HEAP32[(($1600)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1602=(($1601+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1603=HEAP32[(($1602)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1604=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1603]($1587,$l_i_i_i194,$r_i_i_i195) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=295;break; } else { label=308;break; }
 case 295: 
 var $1605=HEAP32[(($1592)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1606=HEAP32[(($l_i_i_i194)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1607=(Math_imul($1605,$1606)|0); //@line 28 "src/rcdecoder.cpp"
 var $1608=HEAP32[(($1595)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1609=((($1608)+($1607))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1595)>>2)]=$1609; //@line 28 "src/rcdecoder.cpp"
 var $1610=HEAP32[(($r_i_i_i195)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1611=(Math_imul($1605,$1610)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1592)>>2)]=$1611; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1585) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=296;break; } else { label=308;break; }
 case 296: 
 var $$etemp$198$0=4;
 var $$etemp$198$1=0;

 var $$etemp$199$0=4;
 var $$etemp$199$1=0;

 var $1612=($1604>>>0)>18; //@line 51 "inc/pcdecoder.inl"
 if($1612){label=297;break;}else{label=299;break;} //@line 51 "inc/pcdecoder.inl"
 case 297: 
 var $1614=((($1604)-(19))|0); //@line 52 "inc/pcdecoder.inl"
 var $1615=HEAP32[(($1531)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $1616$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1615,$1614) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1616$0=$1616$r;var $1616$1=tempRet0;if (!__THREW__) { label=298;break; } else { label=308;break; }
 case 298: 
 var $1617$0=$1614;
 var $1617$1=0;
 var $$etemp$200$0=1;
 var $$etemp$200$1=0;
 var $1618$0=_bitshift64Shl($$etemp$200$0,$$etemp$200$1,$1617$0);var $1618$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $1619$0=_i64Add($1618$0,$1618$1,$1616$0,$1616$1);var $1619$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1584; var $1620$0=HEAP32[((tempDoublePtr)>>2)];var $1620$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$201$0=-1;
 var $$etemp$201$1=-1;
 var $1621$0=$1620$0^$$etemp$201$0;
 var $1621$1=$1620$1^$$etemp$201$1;
 var $1622$0=($1621$1>>>14)|(0<<18);
 var $1622$1=(0>>>14)|(0<<18);
 var $1623$0=($1621$1>>31)|((((((($1621$1|0)<0))|0)?-1:0))<<1);
 var $1623$1=((((((($1621$1|0)<0))|0)?-1:0))>>31)|((((((($1621$1|0)<0))|0)?-1:0))<<1);
 var $1624$0=($1623$1>>>15)|(0<<17);
 var $1624$1=(0>>>15)|(0<<17);
 var $1625$0=$1622$0^$1624$0;
 var $1625$1=$1622$1^$1624$1;
 var $1626$0=_i64Add($1625$0,$1625$1,$1619$0,$1619$1);var $1626$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $1627$0=($1626$0>>>17)|($1626$1<<15);
 var $1627$1=($1626$1>>>17)|(0<<15);
 var $$etemp$202$0=0;
 var $$etemp$202$1=0;
 var $1628$0=_i64Subtract($$etemp$202$0,$$etemp$202$1,$1627$0,$1627$1);var $1628$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1629$0=($1628$1>>>15)|(0<<17);
 var $1629$1=(0>>>15)|(0<<17);
 var $1630$0=$1629$0^$1626$0;
 var $1630$1=$1629$1^$1626$1;
 var $1631$0=(0<<14)|(0>>>18);
 var $1631$1=($1630$0<<14)|(0>>>18);
 var $$etemp$203$0=0;
 var $$etemp$203$1=-16384;
 var $1632$0=$1631$0^$$etemp$203$0;
 var $1632$1=$1631$1^$$etemp$203$1;
 var $_01327_in$1=$1632$1;var $_01327_in$0=$1632$0;label=303;break; //@line 56 "inc/pcdecoder.inl"
 case 299: 
 var $1634=($1604>>>0)<18; //@line undefined "inc/pcdecoder.inl"
 if($1634){label=300;break;}else{label=302;break;} //@line undefined "inc/pcdecoder.inl"
 case 300: 
 var $1636=(((17)-($1604))|0); //@line 59 "inc/pcdecoder.inl"
 var $1637=HEAP32[(($1531)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1638$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1637,$1636) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1638$0=$1638$r;var $1638$1=tempRet0;if (!__THREW__) { label=301;break; } else { label=308;break; }
 case 301: 
 var $1639$0=$1636;
 var $1639$1=0;
 var $$etemp$204$0=1;
 var $$etemp$204$1=0;
 var $1640$0=_bitshift64Shl($$etemp$204$0,$$etemp$204$1,$1639$0);var $1640$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $1641$0=_i64Add($1640$0,$1640$1,$1638$0,$1638$1);var $1641$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1584; var $1642$0=HEAP32[((tempDoublePtr)>>2)];var $1642$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$205$0=-1;
 var $$etemp$205$1=-1;
 var $1643$0=$1642$0^$$etemp$205$0;
 var $1643$1=$1642$1^$$etemp$205$1;
 var $1644$0=($1643$1>>>14)|(0<<18);
 var $1644$1=(0>>>14)|(0<<18);
 var $1645$0=($1643$1>>31)|((((((($1643$1|0)<0))|0)?-1:0))<<1);
 var $1645$1=((((((($1643$1|0)<0))|0)?-1:0))>>31)|((((((($1643$1|0)<0))|0)?-1:0))<<1);
 var $1646$0=($1645$1>>>15)|(0<<17);
 var $1646$1=(0>>>15)|(0<<17);
 var $1647$0=$1644$0^$1646$0;
 var $1647$1=$1644$1^$1646$1;
 var $1648$0=_i64Subtract($1647$0,$1647$1,$1641$0,$1641$1);var $1648$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $1649$0=($1648$0>>>17)|($1648$1<<15);
 var $1649$1=($1648$1>>>17)|(0<<15);
 var $$etemp$206$0=0;
 var $$etemp$206$1=0;
 var $1650$0=_i64Subtract($$etemp$206$0,$$etemp$206$1,$1649$0,$1649$1);var $1650$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1651$0=($1650$1>>>15)|(0<<17);
 var $1651$1=(0>>>15)|(0<<17);
 var $1652$0=$1651$0^$1648$0;
 var $1652$1=$1651$1^$1648$1;
 var $1653$0=(0<<14)|(0>>>18);
 var $1653$1=($1652$0<<14)|(0>>>18);
 var $$etemp$207$0=0;
 var $$etemp$207$1=-16384;
 var $1654$0=$1653$0^$$etemp$207$0;
 var $1654$1=$1653$1^$$etemp$207$1;
 var $_01327_in$1=$1654$1;var $_01327_in$0=$1654$0;label=303;break; //@line 63 "inc/pcdecoder.inl"
 case 302: 
 HEAPF64[(tempDoublePtr)>>3]=$1584; var $1656$0=HEAP32[((tempDoublePtr)>>2)];var $1656$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$208$0=0;
 var $$etemp$208$1=-16384;
 var $1657$0=$1656$0&$$etemp$208$0;
 var $1657$1=$1656$1&$$etemp$208$1;
 var $_01327_in$1=$1657$1;var $_01327_in$0=$1657$0;label=303;break; //@line 66 "inc/pcdecoder.inl"
 case 303: 
 var $_01327_in$0;
 var $_01327_in$1;
 var $_01327=(HEAP32[((tempDoublePtr)>>2)]=$_01327_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01327_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $1658=(($_21334+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21334)>>3)]=$_01327; //@line 65 "src/read.cpp"
 var $_01328=1;var $f_i202_sroa_55_6=$f_i202_sroa_55_5;label=304;break; //@line 22 "inc/front.h"
 case 304: 
 var $f_i202_sroa_55_6;
 var $_01328;
 var $1660=((($f_i202_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1661=$f_i202_sroa_55_6&$storemerge_i_i_i207; //@line 23 "inc/front.h"
 var $1662=(($1523+($1661<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1662)>>3)]=$_01327; //@line 23 "inc/front.h"
 var $1663=((($_01328)-(1))|0); //@line 23 "inc/front.h"
 var $1664=($1663|0)==0; //@line 23 "inc/front.h"
 if($1664){label=305;break;}else{var $_01328=$1663;var $f_i202_sroa_55_6=$1660;label=304;break;} //@line 23 "inc/front.h"
 case 305: 
 var $1665=((($x_i203_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21334=$1658;var $f_i202_sroa_55_5=$1660;var $x_i203_0=$1665;label=292;break; //@line 49 "src/read.cpp"
 case 306: 
 var $1667$0 = ___cxa_find_matching_catch(-1, -1); var $1667$1 = tempRet0;
 var $1668=$1667$0;
 var $1669=$1667$1;
 var $1670=($1490|0)==0;
 if($1670){var $_01335=$1668;var $_01336=$1669;label=318;break;}else{label=307;break;}
 case 307: 
 _free($1490);
 var $_01335=$1668;var $_01336=$1669;label=318;break;
 case 308: 
 var $1673$0 = ___cxa_find_matching_catch(-1, -1); var $1673$1 = tempRet0;
 var $1674=$1673$0;
 var $1675=$1673$1;
 var $1676=($1515|0)==0; //@line 11 "inc/front.h"
 if($1676){var $_01335=$1674;var $_01336=$1675;label=318;break;}else{label=309;break;} //@line 11 "inc/front.h"
 case 309: 
 _free($1515);
 var $_01335=$1674;var $_01336=$1675;label=318;break; //@line 11 "inc/front.h"
 case 310: 
 var $1678=((($y_i204_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11333=$_21334;var $f_i202_sroa_55_3=$f_i202_sroa_55_5;var $y_i204_0=$1678;label=290;break; //@line 48 "src/read.cpp"
 case 311: 
 var $1680=((($z_i205_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01332=$_11333;var $f_i202_sroa_55_1=$f_i202_sroa_55_3;var $z_i205_0=$1680;label=288;break; //@line 47 "src/read.cpp"
 case 312: 
 var $1682=($1494|0)==0; //@line 69 "src/read.cpp"
 if($1682){label=314;break;}else{label=313;break;} //@line 69 "src/read.cpp"
 case 313: 
 _free($1494);
 label=314;break; //@line 69 "src/read.cpp"
 case 314: 
 var $1684=HEAP32[(($rm_i200)>>2)]; //@line 70 "src/read.cpp"
 var $1685=($1684|0)==0; //@line 70 "src/read.cpp"
 if($1685){label=316;break;}else{label=315;break;} //@line 70 "src/read.cpp"
 case 315: 
 var $1687=$1684; //@line 70 "src/read.cpp"
 var $1688=HEAP32[(($1687)>>2)]; //@line 70 "src/read.cpp"
 var $1689=(($1688+4)|0); //@line 70 "src/read.cpp"
 var $1690=HEAP32[(($1689)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1690]($1684); //@line 70 "src/read.cpp"
 label=316;break; //@line 70 "src/read.cpp"
 case 316: 
 var $1692=($1515|0)==0; //@line 11 "inc/front.h"
 if($1692){label=1285;break;}else{label=317;break;} //@line 11 "inc/front.h"
 case 317: 
 _free($1515);
 label=1285;break; //@line 11 "inc/front.h"
 case 318: 
 var $_01336;
 var $_01335;
 var $1693$0=$_01335;
 var $1693$1=0;
 var $1694$0=$1693$0;
 var $1694$1=$_01336;
 ___resumeException($1694$0) //@line 71 "src/read.cpp"
 case 319: 
 var $1696=HEAP32[(($3)>>2)]; //@line 175 "src/read.cpp"
 var $1697=HEAP32[(($4)>>2)]; //@line 175 "src/read.cpp"
 var $1698=HEAP32[(($5)>>2)]; //@line 175 "src/read.cpp"
 var $1699=HEAP32[(($6)>>2)]; //@line 175 "src/read.cpp"
 var $$etemp$209$0=4;
 var $$etemp$209$1=0;

 var $1700=__Znwj(48); //@line 41 "src/read.cpp"
 var $1701=$1700; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1701,0,41,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=320;break; } else { label=348;break; } //@line 41 "src/read.cpp"
 case 320: 
 var $1703=$1700; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i236)>>2)]=$1703; //@line 71 "src/read.cpp"
 var $1704=__Znwj(12); //@line 42 "src/read.cpp"
 var $1705=(($1704+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1706=$1705; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1706)>>2)]=$1696; //@line 34 "inc/pcdecoder.inl"
 var $1707=(($1704+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1708=$1707; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1708)>>2)]=$rm_i236; //@line 34 "inc/pcdecoder.inl"
 var $1709=((($1697)+(1))|0); //@line 10 "inc/front.h"
 var $1710=((($1698)+(1))|0); //@line 10 "inc/front.h"
 var $1711=(Math_imul($1709,$1710)|0); //@line 10 "inc/front.h"
 var $1712=((($1697)+(2))|0); //@line 9 "inc/front.h"
 var $1713=((($1712)+($1711))|0); //@line 9 "inc/front.h"
 var $1714=((($1713)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i243=$1714;label=321;break; //@line 45 "inc/front.h"
 case 321: 
 var $storemerge_i_i_i243;
 var $1716=((($storemerge_i_i_i243)+(1))|0); //@line 45 "inc/front.h"
 var $1717=$storemerge_i_i_i243&$1716; //@line 45 "inc/front.h"
 var $1718=($1717|0)==0; //@line 45 "inc/front.h"
 if($1718){label=323;break;}else{label=322;break;} //@line 45 "inc/front.h"
 case 322: 
 var $1720=$storemerge_i_i_i243|$1716; //@line 45 "inc/front.h"
 var $storemerge_i_i_i243=$1720;label=321;break; //@line 45 "inc/front.h"
 case 323: 
 var $1721$0=_llvm_umul_with_overflow_i32($1716,8);
 var $1721$1=tempRet0;
 var $1722=$1721$1;
 var $1723=$1721$0;
 var $1724=($1722?-1:$1723); //@line 9 "inc/front.h"
 var $1725=(function() { try { __THREW__ = 0; return __Znwj($1724) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=327;break; } else { label=324;break; }
 case 324: 
 var $1727$0 = ___cxa_find_matching_catch(-1, -1); var $1727$1 = tempRet0;
 var $1728=$1727$1;
 var $1729=($1728|0)<0;
 if($1729){label=325;break;}else{label=326;break;}
 case 325: 
 var $1731=$1727$0;
 ___cxa_call_unexpected($1731);
 throw "Reached an unreachable!";
 case 326: 
 ___resumeException($1727$0)
 case 327: 
 var $1733=$1725; //@line 9 "inc/front.h"
 var $_01319=$1711;var $f_i238_sroa_55_0=0;label=328;break; //@line 22 "inc/front.h"
 case 328: 
 var $f_i238_sroa_55_0;
 var $_01319;
 var $1735=((($f_i238_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1736=$f_i238_sroa_55_0&$storemerge_i_i_i243; //@line 23 "inc/front.h"
 var $1737=(($1733+($1736<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1737)>>3)]=0; //@line 23 "inc/front.h"
 var $1738=((($_01319)-(1))|0); //@line 23 "inc/front.h"
 var $1739=($1738|0)==0; //@line 23 "inc/front.h"
 if($1739){label=329;break;}else{var $_01319=$1738;var $f_i238_sroa_55_0=$1735;label=328;break;} //@line 23 "inc/front.h"
 case 329: 
 var $1740=(($1704+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1741=$1740; //@line 50 "inc/pcdecoder.inl"
 var $1742=(($1704+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1743=$1742; //@line 50 "inc/pcdecoder.inl"
 var $_01321=$_01052;var $f_i238_sroa_55_1=$1735;var $z_i241_0=0;label=330;break; //@line 47 "src/read.cpp"
 case 330: 
 var $z_i241_0;
 var $f_i238_sroa_55_1;
 var $_01321;
 var $1745=($z_i241_0>>>0)<($1699>>>0); //@line 47 "src/read.cpp"
 if($1745){var $_01318=$1709;var $f_i238_sroa_55_2=$f_i238_sroa_55_1;label=331;break;}else{label=354;break;} //@line 47 "src/read.cpp"
 case 331: 
 var $f_i238_sroa_55_2;
 var $_01318;
 var $1747=((($f_i238_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1748=$f_i238_sroa_55_2&$storemerge_i_i_i243; //@line 23 "inc/front.h"
 var $1749=(($1733+($1748<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1749)>>3)]=0; //@line 23 "inc/front.h"
 var $1750=((($_01318)-(1))|0); //@line 23 "inc/front.h"
 var $1751=($1750|0)==0; //@line 23 "inc/front.h"
 if($1751){var $_11322=$_01321;var $f_i238_sroa_55_3=$1747;var $y_i240_0=0;label=332;break;}else{var $_01318=$1750;var $f_i238_sroa_55_2=$1747;label=331;break;} //@line 23 "inc/front.h"
 case 332: 
 var $y_i240_0;
 var $f_i238_sroa_55_3;
 var $_11322;
 var $1752=($y_i240_0>>>0)<($1698>>>0); //@line 48 "src/read.cpp"
 if($1752){var $_01317=1;var $f_i238_sroa_55_4=$f_i238_sroa_55_3;label=333;break;}else{label=353;break;} //@line 48 "src/read.cpp"
 case 333: 
 var $f_i238_sroa_55_4;
 var $_01317;
 var $1754=((($f_i238_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1755=$f_i238_sroa_55_4&$storemerge_i_i_i243; //@line 23 "inc/front.h"
 var $1756=(($1733+($1755<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1756)>>3)]=0; //@line 23 "inc/front.h"
 var $1757=((($_01317)-(1))|0); //@line 23 "inc/front.h"
 var $1758=($1757|0)==0; //@line 23 "inc/front.h"
 if($1758){var $_21323=$_11322;var $f_i238_sroa_55_5=$1754;var $x_i239_0=0;label=334;break;}else{var $_01317=$1757;var $f_i238_sroa_55_4=$1754;label=333;break;} //@line 23 "inc/front.h"
 case 334: 
 var $x_i239_0;
 var $f_i238_sroa_55_5;
 var $_21323;
 var $1759=($x_i239_0>>>0)<($1697>>>0); //@line 49 "src/read.cpp"
 if($1759){label=335;break;}else{label=352;break;} //@line 49 "src/read.cpp"
 case 335: 
 var $1761=((($f_i238_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1762=$1761&$storemerge_i_i_i243; //@line 16 "inc/front.h"
 var $1763=(($1733+($1762<<3))|0); //@line 16 "inc/front.h"
 var $1764=HEAPF64[(($1763)>>3)]; //@line 59 "src/read.cpp"
 var $ld$210$0=(($1763)|0);
 var $1764$$SHADOW$0=HEAP32[(($ld$210$0)>>2)];
 var $ld$211$1=(($1763+4)|0);
 var $1764$$SHADOW$1=HEAP32[(($ld$211$1)>>2)];
 var $1765=((($f_i238_sroa_55_5)-($1709))|0); //@line 16 "inc/front.h"
 var $1766=((($1765)-($1711))|0); //@line 16 "inc/front.h"
 var $1767=$1766&$storemerge_i_i_i243; //@line 16 "inc/front.h"
 var $1768=(($1733+($1767<<3))|0); //@line 16 "inc/front.h"
 var $1769=HEAPF64[(($1768)>>3)]; //@line 59 "src/read.cpp"
 var $ld$212$0=(($1768)|0);
 var $1769$$SHADOW$0=HEAP32[(($ld$212$0)>>2)];
 var $ld$213$1=(($1768+4)|0);
 var $1769$$SHADOW$1=HEAP32[(($ld$213$1)>>2)];
 var $1770=$1765&$storemerge_i_i_i243; //@line 16 "inc/front.h"
 var $1771=(($1733+($1770<<3))|0); //@line 16 "inc/front.h"
 var $1772=HEAPF64[(($1771)>>3)]; //@line 60 "src/read.cpp"
 var $ld$214$0=(($1771)|0);
 var $1772$$SHADOW$0=HEAP32[(($ld$214$0)>>2)];
 var $ld$215$1=(($1771+4)|0);
 var $1772$$SHADOW$1=HEAP32[(($ld$215$1)>>2)];
 var $1773=((($1761)-($1711))|0); //@line 16 "inc/front.h"
 var $1774=$1773&$storemerge_i_i_i243; //@line 16 "inc/front.h"
 var $1775=(($1733+($1774<<3))|0); //@line 16 "inc/front.h"
 var $1776=HEAPF64[(($1775)>>3)]; //@line 60 "src/read.cpp"
 var $ld$216$0=(($1775)|0);
 var $1776$$SHADOW$0=HEAP32[(($ld$216$0)>>2)];
 var $ld$217$1=(($1775+4)|0);
 var $1776$$SHADOW$1=HEAP32[(($ld$217$1)>>2)];
 var $1777=((($f_i238_sroa_55_5)-($1711))|0); //@line 16 "inc/front.h"
 var $1778=$1777&$storemerge_i_i_i243; //@line 16 "inc/front.h"
 var $1779=(($1733+($1778<<3))|0); //@line 16 "inc/front.h"
 var $1780=HEAPF64[(($1779)>>3)]; //@line 61 "src/read.cpp"
 var $ld$218$0=(($1779)|0);
 var $1780$$SHADOW$0=HEAP32[(($ld$218$0)>>2)];
 var $ld$219$1=(($1779+4)|0);
 var $1780$$SHADOW$1=HEAP32[(($ld$219$1)>>2)];
 var $1781=((($1761)-($1709))|0); //@line 16 "inc/front.h"
 var $1782=$1781&$storemerge_i_i_i243; //@line 16 "inc/front.h"
 var $1783=(($1733+($1782<<3))|0); //@line 16 "inc/front.h"
 var $1784=HEAPF64[(($1783)>>3)]; //@line 61 "src/read.cpp"
 var $ld$220$0=(($1783)|0);
 var $1784$$SHADOW$0=HEAP32[(($ld$220$0)>>2)];
 var $ld$221$1=(($1783+4)|0);
 var $1784$$SHADOW$1=HEAP32[(($ld$221$1)>>2)];
 var $1785=((($1781)-($1711))|0); //@line 16 "inc/front.h"
 var $1786=$1785&$storemerge_i_i_i243; //@line 16 "inc/front.h"
 var $1787=(($1733+($1786<<3))|0); //@line 16 "inc/front.h"
 var $1788=($1764)-($1769); //@line 59 "src/read.cpp"
 var $1789=($1788)+($1772); //@line 60 "src/read.cpp"
 var $1790=($1789)-($1776); //@line 60 "src/read.cpp"
 var $1791=($1790)+($1780); //@line 61 "src/read.cpp"
 var $1792=($1791)-($1784); //@line 61 "src/read.cpp"
 var $1793=HEAPF64[(($1787)>>3)]; //@line 62 "src/read.cpp"
 var $ld$222$0=(($1787)|0);
 var $1793$$SHADOW$0=HEAP32[(($ld$222$0)>>2)];
 var $ld$223$1=(($1787+4)|0);
 var $1793$$SHADOW$1=HEAP32[(($ld$223$1)>>2)];
 var $1794=($1792)+($1793); //@line 62 "src/read.cpp"
 var $1795=HEAP32[(($1741)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1796=HEAP32[(($1743)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $1797=HEAP32[(($1796)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$224$0=4;
 var $$etemp$224$1=0;

 var $$etemp$225$0=4;
 var $$etemp$225$1=0;

 var $1798=$1797; //@line 25 "src/rcdecoder.cpp"
 var $1799=HEAP32[(($1798)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1800=(($1799+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $1801=HEAP32[(($1800)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $1802=(($1795+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1801]($1797,$1802) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=336;break; } else { label=350;break; }
 case 336: 
 var $1803=(($1795+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $1804=HEAP32[(($1803)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1805=(($1795+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $1806=HEAP32[(($1805)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1807=((($1804)-($1806))|0); //@line 26 "src/rcdecoder.cpp"
 var $1808=HEAP32[(($1802)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $1809=(((($1807>>>0))/(($1808>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i230)>>2)]=$1809; //@line 26 "src/rcdecoder.cpp"
 var $1810=$1797; //@line 27 "src/rcdecoder.cpp"
 var $1811=HEAP32[(($1810)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1812=(($1811+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $1813=HEAP32[(($1812)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $1814=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1813]($1797,$l_i_i_i230,$r_i_i_i231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=337;break; } else { label=350;break; }
 case 337: 
 var $1815=HEAP32[(($1802)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1816=HEAP32[(($l_i_i_i230)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1817=(Math_imul($1815,$1816)|0); //@line 28 "src/rcdecoder.cpp"
 var $1818=HEAP32[(($1805)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $1819=((($1818)+($1817))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($1805)>>2)]=$1819; //@line 28 "src/rcdecoder.cpp"
 var $1820=HEAP32[(($r_i_i_i231)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $1821=(Math_imul($1815,$1820)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($1802)>>2)]=$1821; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($1795) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=338;break; } else { label=350;break; }
 case 338: 
 var $$etemp$226$0=4;
 var $$etemp$226$1=0;

 var $$etemp$227$0=4;
 var $$etemp$227$1=0;

 var $1822=($1814>>>0)>20; //@line 51 "inc/pcdecoder.inl"
 if($1822){label=339;break;}else{label=341;break;} //@line 51 "inc/pcdecoder.inl"
 case 339: 
 var $1824=((($1814)-(21))|0); //@line 52 "inc/pcdecoder.inl"
 var $1825=HEAP32[(($1741)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $1826$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1825,$1824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1826$0=$1826$r;var $1826$1=tempRet0;if (!__THREW__) { label=340;break; } else { label=350;break; }
 case 340: 
 var $1827$0=$1824;
 var $1827$1=0;
 var $$etemp$228$0=1;
 var $$etemp$228$1=0;
 var $1828$0=_bitshift64Shl($$etemp$228$0,$$etemp$228$1,$1827$0);var $1828$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $1829$0=_i64Add($1828$0,$1828$1,$1826$0,$1826$1);var $1829$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1794; var $1830$0=HEAP32[((tempDoublePtr)>>2)];var $1830$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$229$0=-1;
 var $$etemp$229$1=-1;
 var $1831$0=$1830$0^$$etemp$229$0;
 var $1831$1=$1830$1^$$etemp$229$1;
 var $1832$0=($1831$1>>>12)|(0<<20);
 var $1832$1=(0>>>12)|(0<<20);
 var $1833$0=($1831$1>>31)|((((((($1831$1|0)<0))|0)?-1:0))<<1);
 var $1833$1=((((((($1831$1|0)<0))|0)?-1:0))>>31)|((((((($1831$1|0)<0))|0)?-1:0))<<1);
 var $1834$0=($1833$1>>>13)|(0<<19);
 var $1834$1=(0>>>13)|(0<<19);
 var $1835$0=$1832$0^$1834$0;
 var $1835$1=$1832$1^$1834$1;
 var $1836$0=_i64Add($1835$0,$1835$1,$1829$0,$1829$1);var $1836$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $1837$0=($1836$0>>>19)|($1836$1<<13);
 var $1837$1=($1836$1>>>19)|(0<<13);
 var $$etemp$230$0=0;
 var $$etemp$230$1=0;
 var $1838$0=_i64Subtract($$etemp$230$0,$$etemp$230$1,$1837$0,$1837$1);var $1838$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1839$0=($1838$1>>>13)|(0<<19);
 var $1839$1=(0>>>13)|(0<<19);
 var $1840$0=$1839$0^$1836$0;
 var $1840$1=$1839$1^$1836$1;
 var $1841$0=(0<<12)|(0>>>20);
 var $1841$1=($1840$0<<12)|(0>>>20);
 var $$etemp$231$0=0;
 var $$etemp$231$1=-4096;
 var $1842$0=$1841$0^$$etemp$231$0;
 var $1842$1=$1841$1^$$etemp$231$1;
 var $_01315_in$1=$1842$1;var $_01315_in$0=$1842$0;label=345;break; //@line 56 "inc/pcdecoder.inl"
 case 341: 
 var $1844=($1814>>>0)<20; //@line undefined "inc/pcdecoder.inl"
 if($1844){label=342;break;}else{label=344;break;} //@line undefined "inc/pcdecoder.inl"
 case 342: 
 var $1846=(((19)-($1814))|0); //@line 59 "inc/pcdecoder.inl"
 var $1847=HEAP32[(($1741)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $1848$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($1847,$1846) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $1848$0=$1848$r;var $1848$1=tempRet0;if (!__THREW__) { label=343;break; } else { label=350;break; }
 case 343: 
 var $1849$0=$1846;
 var $1849$1=0;
 var $$etemp$232$0=1;
 var $$etemp$232$1=0;
 var $1850$0=_bitshift64Shl($$etemp$232$0,$$etemp$232$1,$1849$0);var $1850$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $1851$0=_i64Add($1850$0,$1850$1,$1848$0,$1848$1);var $1851$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$1794; var $1852$0=HEAP32[((tempDoublePtr)>>2)];var $1852$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$233$0=-1;
 var $$etemp$233$1=-1;
 var $1853$0=$1852$0^$$etemp$233$0;
 var $1853$1=$1852$1^$$etemp$233$1;
 var $1854$0=($1853$1>>>12)|(0<<20);
 var $1854$1=(0>>>12)|(0<<20);
 var $1855$0=($1853$1>>31)|((((((($1853$1|0)<0))|0)?-1:0))<<1);
 var $1855$1=((((((($1853$1|0)<0))|0)?-1:0))>>31)|((((((($1853$1|0)<0))|0)?-1:0))<<1);
 var $1856$0=($1855$1>>>13)|(0<<19);
 var $1856$1=(0>>>13)|(0<<19);
 var $1857$0=$1854$0^$1856$0;
 var $1857$1=$1854$1^$1856$1;
 var $1858$0=_i64Subtract($1857$0,$1857$1,$1851$0,$1851$1);var $1858$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $1859$0=($1858$0>>>19)|($1858$1<<13);
 var $1859$1=($1858$1>>>19)|(0<<13);
 var $$etemp$234$0=0;
 var $$etemp$234$1=0;
 var $1860$0=_i64Subtract($$etemp$234$0,$$etemp$234$1,$1859$0,$1859$1);var $1860$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $1861$0=($1860$1>>>13)|(0<<19);
 var $1861$1=(0>>>13)|(0<<19);
 var $1862$0=$1861$0^$1858$0;
 var $1862$1=$1861$1^$1858$1;
 var $1863$0=(0<<12)|(0>>>20);
 var $1863$1=($1862$0<<12)|(0>>>20);
 var $$etemp$235$0=0;
 var $$etemp$235$1=-4096;
 var $1864$0=$1863$0^$$etemp$235$0;
 var $1864$1=$1863$1^$$etemp$235$1;
 var $_01315_in$1=$1864$1;var $_01315_in$0=$1864$0;label=345;break; //@line 63 "inc/pcdecoder.inl"
 case 344: 
 HEAPF64[(tempDoublePtr)>>3]=$1794; var $1866$0=HEAP32[((tempDoublePtr)>>2)];var $1866$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$236$0=0;
 var $$etemp$236$1=-4096;
 var $1867$0=$1866$0&$$etemp$236$0;
 var $1867$1=$1866$1&$$etemp$236$1;
 var $_01315_in$1=$1867$1;var $_01315_in$0=$1867$0;label=345;break; //@line 66 "inc/pcdecoder.inl"
 case 345: 
 var $_01315_in$0;
 var $_01315_in$1;
 var $_01315=(HEAP32[((tempDoublePtr)>>2)]=$_01315_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01315_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $1868=(($_21323+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21323)>>3)]=$_01315; //@line 65 "src/read.cpp"
 var $_01316=1;var $f_i238_sroa_55_6=$f_i238_sroa_55_5;label=346;break; //@line 22 "inc/front.h"
 case 346: 
 var $f_i238_sroa_55_6;
 var $_01316;
 var $1870=((($f_i238_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $1871=$f_i238_sroa_55_6&$storemerge_i_i_i243; //@line 23 "inc/front.h"
 var $1872=(($1733+($1871<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1872)>>3)]=$_01315; //@line 23 "inc/front.h"
 var $1873=((($_01316)-(1))|0); //@line 23 "inc/front.h"
 var $1874=($1873|0)==0; //@line 23 "inc/front.h"
 if($1874){label=347;break;}else{var $_01316=$1873;var $f_i238_sroa_55_6=$1870;label=346;break;} //@line 23 "inc/front.h"
 case 347: 
 var $1875=((($x_i239_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21323=$1868;var $f_i238_sroa_55_5=$1870;var $x_i239_0=$1875;label=334;break; //@line 49 "src/read.cpp"
 case 348: 
 var $1877$0 = ___cxa_find_matching_catch(-1, -1); var $1877$1 = tempRet0;
 var $1878=$1877$0;
 var $1879=$1877$1;
 var $1880=($1700|0)==0;
 if($1880){var $_01324=$1878;var $_01325=$1879;label=360;break;}else{label=349;break;}
 case 349: 
 _free($1700);
 var $_01324=$1878;var $_01325=$1879;label=360;break;
 case 350: 
 var $1883$0 = ___cxa_find_matching_catch(-1, -1); var $1883$1 = tempRet0;
 var $1884=$1883$0;
 var $1885=$1883$1;
 var $1886=($1725|0)==0; //@line 11 "inc/front.h"
 if($1886){var $_01324=$1884;var $_01325=$1885;label=360;break;}else{label=351;break;} //@line 11 "inc/front.h"
 case 351: 
 _free($1725);
 var $_01324=$1884;var $_01325=$1885;label=360;break; //@line 11 "inc/front.h"
 case 352: 
 var $1888=((($y_i240_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11322=$_21323;var $f_i238_sroa_55_3=$f_i238_sroa_55_5;var $y_i240_0=$1888;label=332;break; //@line 48 "src/read.cpp"
 case 353: 
 var $1890=((($z_i241_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01321=$_11322;var $f_i238_sroa_55_1=$f_i238_sroa_55_3;var $z_i241_0=$1890;label=330;break; //@line 47 "src/read.cpp"
 case 354: 
 var $1892=($1704|0)==0; //@line 69 "src/read.cpp"
 if($1892){label=356;break;}else{label=355;break;} //@line 69 "src/read.cpp"
 case 355: 
 _free($1704);
 label=356;break; //@line 69 "src/read.cpp"
 case 356: 
 var $1894=HEAP32[(($rm_i236)>>2)]; //@line 70 "src/read.cpp"
 var $1895=($1894|0)==0; //@line 70 "src/read.cpp"
 if($1895){label=358;break;}else{label=357;break;} //@line 70 "src/read.cpp"
 case 357: 
 var $1897=$1894; //@line 70 "src/read.cpp"
 var $1898=HEAP32[(($1897)>>2)]; //@line 70 "src/read.cpp"
 var $1899=(($1898+4)|0); //@line 70 "src/read.cpp"
 var $1900=HEAP32[(($1899)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$1900]($1894); //@line 70 "src/read.cpp"
 label=358;break; //@line 70 "src/read.cpp"
 case 358: 
 var $1902=($1725|0)==0; //@line 11 "inc/front.h"
 if($1902){label=1285;break;}else{label=359;break;} //@line 11 "inc/front.h"
 case 359: 
 _free($1725);
 label=1285;break; //@line 11 "inc/front.h"
 case 360: 
 var $_01325;
 var $_01324;
 var $1903$0=$_01324;
 var $1903$1=0;
 var $1904$0=$1903$0;
 var $1904$1=$_01325;
 ___resumeException($1904$0) //@line 71 "src/read.cpp"
 case 361: 
 var $1906=HEAP32[(($3)>>2)]; //@line 176 "src/read.cpp"
 var $1907=HEAP32[(($4)>>2)]; //@line 176 "src/read.cpp"
 var $1908=HEAP32[(($5)>>2)]; //@line 176 "src/read.cpp"
 var $1909=HEAP32[(($6)>>2)]; //@line 176 "src/read.cpp"
 var $$etemp$237$0=4;
 var $$etemp$237$1=0;

 var $1910=__Znwj(48); //@line 41 "src/read.cpp"
 var $1911=$1910; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($1911,0,45,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=362;break; } else { label=390;break; } //@line 41 "src/read.cpp"
 case 362: 
 var $1913=$1910; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i272)>>2)]=$1913; //@line 71 "src/read.cpp"
 var $1914=__Znwj(12); //@line 42 "src/read.cpp"
 var $1915=(($1914+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $1916=$1915; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1916)>>2)]=$1906; //@line 34 "inc/pcdecoder.inl"
 var $1917=(($1914+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $1918=$1917; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($1918)>>2)]=$rm_i272; //@line 34 "inc/pcdecoder.inl"
 var $1919=((($1907)+(1))|0); //@line 10 "inc/front.h"
 var $1920=((($1908)+(1))|0); //@line 10 "inc/front.h"
 var $1921=(Math_imul($1919,$1920)|0); //@line 10 "inc/front.h"
 var $1922=((($1907)+(2))|0); //@line 9 "inc/front.h"
 var $1923=((($1922)+($1921))|0); //@line 9 "inc/front.h"
 var $1924=((($1923)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i279=$1924;label=363;break; //@line 45 "inc/front.h"
 case 363: 
 var $storemerge_i_i_i279;
 var $1926=((($storemerge_i_i_i279)+(1))|0); //@line 45 "inc/front.h"
 var $1927=$storemerge_i_i_i279&$1926; //@line 45 "inc/front.h"
 var $1928=($1927|0)==0; //@line 45 "inc/front.h"
 if($1928){label=365;break;}else{label=364;break;} //@line 45 "inc/front.h"
 case 364: 
 var $1930=$storemerge_i_i_i279|$1926; //@line 45 "inc/front.h"
 var $storemerge_i_i_i279=$1930;label=363;break; //@line 45 "inc/front.h"
 case 365: 
 var $1931$0=_llvm_umul_with_overflow_i32($1926,8);
 var $1931$1=tempRet0;
 var $1932=$1931$1;
 var $1933=$1931$0;
 var $1934=($1932?-1:$1933); //@line 9 "inc/front.h"
 var $1935=(function() { try { __THREW__ = 0; return __Znwj($1934) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=369;break; } else { label=366;break; }
 case 366: 
 var $1937$0 = ___cxa_find_matching_catch(-1, -1); var $1937$1 = tempRet0;
 var $1938=$1937$1;
 var $1939=($1938|0)<0;
 if($1939){label=367;break;}else{label=368;break;}
 case 367: 
 var $1941=$1937$0;
 ___cxa_call_unexpected($1941);
 throw "Reached an unreachable!";
 case 368: 
 ___resumeException($1937$0)
 case 369: 
 var $1943=$1935; //@line 9 "inc/front.h"
 var $_01309=$1921;var $f_i274_sroa_55_0=0;label=370;break; //@line 22 "inc/front.h"
 case 370: 
 var $f_i274_sroa_55_0;
 var $_01309;
 var $1945=((($f_i274_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $1946=$f_i274_sroa_55_0&$storemerge_i_i_i279; //@line 23 "inc/front.h"
 var $1947=(($1943+($1946<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1947)>>3)]=0; //@line 23 "inc/front.h"
 var $1948=((($_01309)-(1))|0); //@line 23 "inc/front.h"
 var $1949=($1948|0)==0; //@line 23 "inc/front.h"
 if($1949){label=371;break;}else{var $_01309=$1948;var $f_i274_sroa_55_0=$1945;label=370;break;} //@line 23 "inc/front.h"
 case 371: 
 var $1950=(($1914+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $1951=$1950; //@line 50 "inc/pcdecoder.inl"
 var $1952=(($1914+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $1953=$1952; //@line 50 "inc/pcdecoder.inl"
 var $_01310=$_01052;var $f_i274_sroa_55_1=$1945;var $z_i277_0=0;label=372;break; //@line 47 "src/read.cpp"
 case 372: 
 var $z_i277_0;
 var $f_i274_sroa_55_1;
 var $_01310;
 var $1955=($z_i277_0>>>0)<($1909>>>0); //@line 47 "src/read.cpp"
 if($1955){var $_01307=$1919;var $f_i274_sroa_55_2=$f_i274_sroa_55_1;label=373;break;}else{label=396;break;} //@line 47 "src/read.cpp"
 case 373: 
 var $f_i274_sroa_55_2;
 var $_01307;
 var $1957=((($f_i274_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $1958=$f_i274_sroa_55_2&$storemerge_i_i_i279; //@line 23 "inc/front.h"
 var $1959=(($1943+($1958<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1959)>>3)]=0; //@line 23 "inc/front.h"
 var $1960=((($_01307)-(1))|0); //@line 23 "inc/front.h"
 var $1961=($1960|0)==0; //@line 23 "inc/front.h"
 if($1961){var $_11311=$_01310;var $f_i274_sroa_55_3=$1957;var $y_i276_0=0;label=374;break;}else{var $_01307=$1960;var $f_i274_sroa_55_2=$1957;label=373;break;} //@line 23 "inc/front.h"
 case 374: 
 var $y_i276_0;
 var $f_i274_sroa_55_3;
 var $_11311;
 var $1962=($y_i276_0>>>0)<($1908>>>0); //@line 48 "src/read.cpp"
 if($1962){var $_01306=1;var $f_i274_sroa_55_4=$f_i274_sroa_55_3;label=375;break;}else{label=395;break;} //@line 48 "src/read.cpp"
 case 375: 
 var $f_i274_sroa_55_4;
 var $_01306;
 var $1964=((($f_i274_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $1965=$f_i274_sroa_55_4&$storemerge_i_i_i279; //@line 23 "inc/front.h"
 var $1966=(($1943+($1965<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($1966)>>3)]=0; //@line 23 "inc/front.h"
 var $1967=((($_01306)-(1))|0); //@line 23 "inc/front.h"
 var $1968=($1967|0)==0; //@line 23 "inc/front.h"
 if($1968){var $_21312=$_11311;var $f_i274_sroa_55_5=$1964;var $x_i275_0=0;label=376;break;}else{var $_01306=$1967;var $f_i274_sroa_55_4=$1964;label=375;break;} //@line 23 "inc/front.h"
 case 376: 
 var $x_i275_0;
 var $f_i274_sroa_55_5;
 var $_21312;
 var $1969=($x_i275_0>>>0)<($1907>>>0); //@line 49 "src/read.cpp"
 if($1969){label=377;break;}else{label=394;break;} //@line 49 "src/read.cpp"
 case 377: 
 var $1971=((($f_i274_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $1972=$1971&$storemerge_i_i_i279; //@line 16 "inc/front.h"
 var $1973=(($1943+($1972<<3))|0); //@line 16 "inc/front.h"
 var $1974=HEAPF64[(($1973)>>3)]; //@line 59 "src/read.cpp"
 var $ld$238$0=(($1973)|0);
 var $1974$$SHADOW$0=HEAP32[(($ld$238$0)>>2)];
 var $ld$239$1=(($1973+4)|0);
 var $1974$$SHADOW$1=HEAP32[(($ld$239$1)>>2)];
 var $1975=((($f_i274_sroa_55_5)-($1919))|0); //@line 16 "inc/front.h"
 var $1976=((($1975)-($1921))|0); //@line 16 "inc/front.h"
 var $1977=$1976&$storemerge_i_i_i279; //@line 16 "inc/front.h"
 var $1978=(($1943+($1977<<3))|0); //@line 16 "inc/front.h"
 var $1979=HEAPF64[(($1978)>>3)]; //@line 59 "src/read.cpp"
 var $ld$240$0=(($1978)|0);
 var $1979$$SHADOW$0=HEAP32[(($ld$240$0)>>2)];
 var $ld$241$1=(($1978+4)|0);
 var $1979$$SHADOW$1=HEAP32[(($ld$241$1)>>2)];
 var $1980=$1975&$storemerge_i_i_i279; //@line 16 "inc/front.h"
 var $1981=(($1943+($1980<<3))|0); //@line 16 "inc/front.h"
 var $1982=HEAPF64[(($1981)>>3)]; //@line 60 "src/read.cpp"
 var $ld$242$0=(($1981)|0);
 var $1982$$SHADOW$0=HEAP32[(($ld$242$0)>>2)];
 var $ld$243$1=(($1981+4)|0);
 var $1982$$SHADOW$1=HEAP32[(($ld$243$1)>>2)];
 var $1983=((($1971)-($1921))|0); //@line 16 "inc/front.h"
 var $1984=$1983&$storemerge_i_i_i279; //@line 16 "inc/front.h"
 var $1985=(($1943+($1984<<3))|0); //@line 16 "inc/front.h"
 var $1986=HEAPF64[(($1985)>>3)]; //@line 60 "src/read.cpp"
 var $ld$244$0=(($1985)|0);
 var $1986$$SHADOW$0=HEAP32[(($ld$244$0)>>2)];
 var $ld$245$1=(($1985+4)|0);
 var $1986$$SHADOW$1=HEAP32[(($ld$245$1)>>2)];
 var $1987=((($f_i274_sroa_55_5)-($1921))|0); //@line 16 "inc/front.h"
 var $1988=$1987&$storemerge_i_i_i279; //@line 16 "inc/front.h"
 var $1989=(($1943+($1988<<3))|0); //@line 16 "inc/front.h"
 var $1990=HEAPF64[(($1989)>>3)]; //@line 61 "src/read.cpp"
 var $ld$246$0=(($1989)|0);
 var $1990$$SHADOW$0=HEAP32[(($ld$246$0)>>2)];
 var $ld$247$1=(($1989+4)|0);
 var $1990$$SHADOW$1=HEAP32[(($ld$247$1)>>2)];
 var $1991=((($1971)-($1919))|0); //@line 16 "inc/front.h"
 var $1992=$1991&$storemerge_i_i_i279; //@line 16 "inc/front.h"
 var $1993=(($1943+($1992<<3))|0); //@line 16 "inc/front.h"
 var $1994=HEAPF64[(($1993)>>3)]; //@line 61 "src/read.cpp"
 var $ld$248$0=(($1993)|0);
 var $1994$$SHADOW$0=HEAP32[(($ld$248$0)>>2)];
 var $ld$249$1=(($1993+4)|0);
 var $1994$$SHADOW$1=HEAP32[(($ld$249$1)>>2)];
 var $1995=((($1991)-($1921))|0); //@line 16 "inc/front.h"
 var $1996=$1995&$storemerge_i_i_i279; //@line 16 "inc/front.h"
 var $1997=(($1943+($1996<<3))|0); //@line 16 "inc/front.h"
 var $1998=($1974)-($1979); //@line 59 "src/read.cpp"
 var $1999=($1998)+($1982); //@line 60 "src/read.cpp"
 var $2000=($1999)-($1986); //@line 60 "src/read.cpp"
 var $2001=($2000)+($1990); //@line 61 "src/read.cpp"
 var $2002=($2001)-($1994); //@line 61 "src/read.cpp"
 var $2003=HEAPF64[(($1997)>>3)]; //@line 62 "src/read.cpp"
 var $ld$250$0=(($1997)|0);
 var $2003$$SHADOW$0=HEAP32[(($ld$250$0)>>2)];
 var $ld$251$1=(($1997+4)|0);
 var $2003$$SHADOW$1=HEAP32[(($ld$251$1)>>2)];
 var $2004=($2002)+($2003); //@line 62 "src/read.cpp"
 var $2005=HEAP32[(($1951)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2006=HEAP32[(($1953)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2007=HEAP32[(($2006)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$252$0=4;
 var $$etemp$252$1=0;

 var $$etemp$253$0=4;
 var $$etemp$253$1=0;

 var $2008=$2007; //@line 25 "src/rcdecoder.cpp"
 var $2009=HEAP32[(($2008)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2010=(($2009+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2011=HEAP32[(($2010)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2012=(($2005+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2011]($2007,$2012) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=378;break; } else { label=392;break; }
 case 378: 
 var $2013=(($2005+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2014=HEAP32[(($2013)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2015=(($2005+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2016=HEAP32[(($2015)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2017=((($2014)-($2016))|0); //@line 26 "src/rcdecoder.cpp"
 var $2018=HEAP32[(($2012)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2019=(((($2017>>>0))/(($2018>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i266)>>2)]=$2019; //@line 26 "src/rcdecoder.cpp"
 var $2020=$2007; //@line 27 "src/rcdecoder.cpp"
 var $2021=HEAP32[(($2020)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2022=(($2021+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2023=HEAP32[(($2022)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2024=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2023]($2007,$l_i_i_i266,$r_i_i_i267) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=379;break; } else { label=392;break; }
 case 379: 
 var $2025=HEAP32[(($2012)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2026=HEAP32[(($l_i_i_i266)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2027=(Math_imul($2025,$2026)|0); //@line 28 "src/rcdecoder.cpp"
 var $2028=HEAP32[(($2015)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2029=((($2028)+($2027))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2015)>>2)]=$2029; //@line 28 "src/rcdecoder.cpp"
 var $2030=HEAP32[(($r_i_i_i267)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2031=(Math_imul($2025,$2030)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2012)>>2)]=$2031; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2005) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=380;break; } else { label=392;break; }
 case 380: 
 var $$etemp$254$0=4;
 var $$etemp$254$1=0;

 var $$etemp$255$0=4;
 var $$etemp$255$1=0;

 var $2032=($2024>>>0)>22; //@line 51 "inc/pcdecoder.inl"
 if($2032){label=381;break;}else{label=383;break;} //@line 51 "inc/pcdecoder.inl"
 case 381: 
 var $2034=((($2024)-(23))|0); //@line 52 "inc/pcdecoder.inl"
 var $2035=HEAP32[(($1951)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2036$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2035,$2034) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2036$0=$2036$r;var $2036$1=tempRet0;if (!__THREW__) { label=382;break; } else { label=392;break; }
 case 382: 
 var $2037$0=$2034;
 var $2037$1=0;
 var $$etemp$256$0=1;
 var $$etemp$256$1=0;
 var $2038$0=_bitshift64Shl($$etemp$256$0,$$etemp$256$1,$2037$0);var $2038$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $2039$0=_i64Add($2038$0,$2038$1,$2036$0,$2036$1);var $2039$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2004; var $2040$0=HEAP32[((tempDoublePtr)>>2)];var $2040$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$257$0=-1;
 var $$etemp$257$1=-1;
 var $2041$0=$2040$0^$$etemp$257$0;
 var $2041$1=$2040$1^$$etemp$257$1;
 var $2042$0=($2041$1>>>10)|(0<<22);
 var $2042$1=(0>>>10)|(0<<22);
 var $2043$0=($2041$1>>31)|((((((($2041$1|0)<0))|0)?-1:0))<<1);
 var $2043$1=((((((($2041$1|0)<0))|0)?-1:0))>>31)|((((((($2041$1|0)<0))|0)?-1:0))<<1);
 var $2044$0=($2043$1>>>11)|(0<<21);
 var $2044$1=(0>>>11)|(0<<21);
 var $2045$0=$2042$0^$2044$0;
 var $2045$1=$2042$1^$2044$1;
 var $2046$0=_i64Add($2045$0,$2045$1,$2039$0,$2039$1);var $2046$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $2047$0=($2046$0>>>21)|($2046$1<<11);
 var $2047$1=($2046$1>>>21)|(0<<11);
 var $$etemp$258$0=0;
 var $$etemp$258$1=0;
 var $2048$0=_i64Subtract($$etemp$258$0,$$etemp$258$1,$2047$0,$2047$1);var $2048$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2049$0=($2048$1>>>11)|(0<<21);
 var $2049$1=(0>>>11)|(0<<21);
 var $2050$0=$2049$0^$2046$0;
 var $2050$1=$2049$1^$2046$1;
 var $2051$0=(0<<10)|(0>>>22);
 var $2051$1=($2050$0<<10)|(0>>>22);
 var $$etemp$259$0=0;
 var $$etemp$259$1=-1024;
 var $2052$0=$2051$0^$$etemp$259$0;
 var $2052$1=$2051$1^$$etemp$259$1;
 var $_01304_in$1=$2052$1;var $_01304_in$0=$2052$0;label=387;break; //@line 56 "inc/pcdecoder.inl"
 case 383: 
 var $2054=($2024>>>0)<22; //@line undefined "inc/pcdecoder.inl"
 if($2054){label=384;break;}else{label=386;break;} //@line undefined "inc/pcdecoder.inl"
 case 384: 
 var $2056=(((21)-($2024))|0); //@line 59 "inc/pcdecoder.inl"
 var $2057=HEAP32[(($1951)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2058$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2057,$2056) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2058$0=$2058$r;var $2058$1=tempRet0;if (!__THREW__) { label=385;break; } else { label=392;break; }
 case 385: 
 var $2059$0=$2056;
 var $2059$1=0;
 var $$etemp$260$0=1;
 var $$etemp$260$1=0;
 var $2060$0=_bitshift64Shl($$etemp$260$0,$$etemp$260$1,$2059$0);var $2060$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $2061$0=_i64Add($2060$0,$2060$1,$2058$0,$2058$1);var $2061$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2004; var $2062$0=HEAP32[((tempDoublePtr)>>2)];var $2062$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$261$0=-1;
 var $$etemp$261$1=-1;
 var $2063$0=$2062$0^$$etemp$261$0;
 var $2063$1=$2062$1^$$etemp$261$1;
 var $2064$0=($2063$1>>>10)|(0<<22);
 var $2064$1=(0>>>10)|(0<<22);
 var $2065$0=($2063$1>>31)|((((((($2063$1|0)<0))|0)?-1:0))<<1);
 var $2065$1=((((((($2063$1|0)<0))|0)?-1:0))>>31)|((((((($2063$1|0)<0))|0)?-1:0))<<1);
 var $2066$0=($2065$1>>>11)|(0<<21);
 var $2066$1=(0>>>11)|(0<<21);
 var $2067$0=$2064$0^$2066$0;
 var $2067$1=$2064$1^$2066$1;
 var $2068$0=_i64Subtract($2067$0,$2067$1,$2061$0,$2061$1);var $2068$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $2069$0=($2068$0>>>21)|($2068$1<<11);
 var $2069$1=($2068$1>>>21)|(0<<11);
 var $$etemp$262$0=0;
 var $$etemp$262$1=0;
 var $2070$0=_i64Subtract($$etemp$262$0,$$etemp$262$1,$2069$0,$2069$1);var $2070$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2071$0=($2070$1>>>11)|(0<<21);
 var $2071$1=(0>>>11)|(0<<21);
 var $2072$0=$2071$0^$2068$0;
 var $2072$1=$2071$1^$2068$1;
 var $2073$0=(0<<10)|(0>>>22);
 var $2073$1=($2072$0<<10)|(0>>>22);
 var $$etemp$263$0=0;
 var $$etemp$263$1=-1024;
 var $2074$0=$2073$0^$$etemp$263$0;
 var $2074$1=$2073$1^$$etemp$263$1;
 var $_01304_in$1=$2074$1;var $_01304_in$0=$2074$0;label=387;break; //@line 63 "inc/pcdecoder.inl"
 case 386: 
 HEAPF64[(tempDoublePtr)>>3]=$2004; var $2076$0=HEAP32[((tempDoublePtr)>>2)];var $2076$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$264$0=0;
 var $$etemp$264$1=-1024;
 var $2077$0=$2076$0&$$etemp$264$0;
 var $2077$1=$2076$1&$$etemp$264$1;
 var $_01304_in$1=$2077$1;var $_01304_in$0=$2077$0;label=387;break; //@line 66 "inc/pcdecoder.inl"
 case 387: 
 var $_01304_in$0;
 var $_01304_in$1;
 var $_01304=(HEAP32[((tempDoublePtr)>>2)]=$_01304_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01304_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $2078=(($_21312+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21312)>>3)]=$_01304; //@line 65 "src/read.cpp"
 var $_01305=1;var $f_i274_sroa_55_6=$f_i274_sroa_55_5;label=388;break; //@line 22 "inc/front.h"
 case 388: 
 var $f_i274_sroa_55_6;
 var $_01305;
 var $2080=((($f_i274_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2081=$f_i274_sroa_55_6&$storemerge_i_i_i279; //@line 23 "inc/front.h"
 var $2082=(($1943+($2081<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2082)>>3)]=$_01304; //@line 23 "inc/front.h"
 var $2083=((($_01305)-(1))|0); //@line 23 "inc/front.h"
 var $2084=($2083|0)==0; //@line 23 "inc/front.h"
 if($2084){label=389;break;}else{var $_01305=$2083;var $f_i274_sroa_55_6=$2080;label=388;break;} //@line 23 "inc/front.h"
 case 389: 
 var $2085=((($x_i275_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21312=$2078;var $f_i274_sroa_55_5=$2080;var $x_i275_0=$2085;label=376;break; //@line 49 "src/read.cpp"
 case 390: 
 var $2087$0 = ___cxa_find_matching_catch(-1, -1); var $2087$1 = tempRet0;
 var $2088=$2087$0;
 var $2089=$2087$1;
 var $2090=($1910|0)==0;
 if($2090){var $_01313=$2088;var $_01314=$2089;label=402;break;}else{label=391;break;}
 case 391: 
 _free($1910);
 var $_01313=$2088;var $_01314=$2089;label=402;break;
 case 392: 
 var $2093$0 = ___cxa_find_matching_catch(-1, -1); var $2093$1 = tempRet0;
 var $2094=$2093$0;
 var $2095=$2093$1;
 var $2096=($1935|0)==0; //@line 11 "inc/front.h"
 if($2096){var $_01313=$2094;var $_01314=$2095;label=402;break;}else{label=393;break;} //@line 11 "inc/front.h"
 case 393: 
 _free($1935);
 var $_01313=$2094;var $_01314=$2095;label=402;break; //@line 11 "inc/front.h"
 case 394: 
 var $2098=((($y_i276_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11311=$_21312;var $f_i274_sroa_55_3=$f_i274_sroa_55_5;var $y_i276_0=$2098;label=374;break; //@line 48 "src/read.cpp"
 case 395: 
 var $2100=((($z_i277_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01310=$_11311;var $f_i274_sroa_55_1=$f_i274_sroa_55_3;var $z_i277_0=$2100;label=372;break; //@line 47 "src/read.cpp"
 case 396: 
 var $2102=($1914|0)==0; //@line 69 "src/read.cpp"
 if($2102){label=398;break;}else{label=397;break;} //@line 69 "src/read.cpp"
 case 397: 
 _free($1914);
 label=398;break; //@line 69 "src/read.cpp"
 case 398: 
 var $2104=HEAP32[(($rm_i272)>>2)]; //@line 70 "src/read.cpp"
 var $2105=($2104|0)==0; //@line 70 "src/read.cpp"
 if($2105){label=400;break;}else{label=399;break;} //@line 70 "src/read.cpp"
 case 399: 
 var $2107=$2104; //@line 70 "src/read.cpp"
 var $2108=HEAP32[(($2107)>>2)]; //@line 70 "src/read.cpp"
 var $2109=(($2108+4)|0); //@line 70 "src/read.cpp"
 var $2110=HEAP32[(($2109)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2110]($2104); //@line 70 "src/read.cpp"
 label=400;break; //@line 70 "src/read.cpp"
 case 400: 
 var $2112=($1935|0)==0; //@line 11 "inc/front.h"
 if($2112){label=1285;break;}else{label=401;break;} //@line 11 "inc/front.h"
 case 401: 
 _free($1935);
 label=1285;break; //@line 11 "inc/front.h"
 case 402: 
 var $_01314;
 var $_01313;
 var $2113$0=$_01313;
 var $2113$1=0;
 var $2114$0=$2113$0;
 var $2114$1=$_01314;
 ___resumeException($2114$0) //@line 71 "src/read.cpp"
 case 403: 
 var $2116=HEAP32[(($3)>>2)]; //@line 177 "src/read.cpp"
 var $2117=HEAP32[(($4)>>2)]; //@line 177 "src/read.cpp"
 var $2118=HEAP32[(($5)>>2)]; //@line 177 "src/read.cpp"
 var $2119=HEAP32[(($6)>>2)]; //@line 177 "src/read.cpp"
 var $$etemp$265$0=4;
 var $$etemp$265$1=0;

 var $2120=__Znwj(48); //@line 41 "src/read.cpp"
 var $2121=$2120; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2121,0,49,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=404;break; } else { label=432;break; } //@line 41 "src/read.cpp"
 case 404: 
 var $2123=$2120; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i308)>>2)]=$2123; //@line 71 "src/read.cpp"
 var $2124=__Znwj(12); //@line 42 "src/read.cpp"
 var $2125=(($2124+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2126=$2125; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2126)>>2)]=$2116; //@line 34 "inc/pcdecoder.inl"
 var $2127=(($2124+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2128=$2127; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2128)>>2)]=$rm_i308; //@line 34 "inc/pcdecoder.inl"
 var $2129=((($2117)+(1))|0); //@line 10 "inc/front.h"
 var $2130=((($2118)+(1))|0); //@line 10 "inc/front.h"
 var $2131=(Math_imul($2129,$2130)|0); //@line 10 "inc/front.h"
 var $2132=((($2117)+(2))|0); //@line 9 "inc/front.h"
 var $2133=((($2132)+($2131))|0); //@line 9 "inc/front.h"
 var $2134=((($2133)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i315=$2134;label=405;break; //@line 45 "inc/front.h"
 case 405: 
 var $storemerge_i_i_i315;
 var $2136=((($storemerge_i_i_i315)+(1))|0); //@line 45 "inc/front.h"
 var $2137=$storemerge_i_i_i315&$2136; //@line 45 "inc/front.h"
 var $2138=($2137|0)==0; //@line 45 "inc/front.h"
 if($2138){label=407;break;}else{label=406;break;} //@line 45 "inc/front.h"
 case 406: 
 var $2140=$storemerge_i_i_i315|$2136; //@line 45 "inc/front.h"
 var $storemerge_i_i_i315=$2140;label=405;break; //@line 45 "inc/front.h"
 case 407: 
 var $2141$0=_llvm_umul_with_overflow_i32($2136,8);
 var $2141$1=tempRet0;
 var $2142=$2141$1;
 var $2143=$2141$0;
 var $2144=($2142?-1:$2143); //@line 9 "inc/front.h"
 var $2145=(function() { try { __THREW__ = 0; return __Znwj($2144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=411;break; } else { label=408;break; }
 case 408: 
 var $2147$0 = ___cxa_find_matching_catch(-1, -1); var $2147$1 = tempRet0;
 var $2148=$2147$1;
 var $2149=($2148|0)<0;
 if($2149){label=409;break;}else{label=410;break;}
 case 409: 
 var $2151=$2147$0;
 ___cxa_call_unexpected($2151);
 throw "Reached an unreachable!";
 case 410: 
 ___resumeException($2147$0)
 case 411: 
 var $2153=$2145; //@line 9 "inc/front.h"
 var $_01296=$2131;var $f_i310_sroa_55_0=0;label=412;break; //@line 22 "inc/front.h"
 case 412: 
 var $f_i310_sroa_55_0;
 var $_01296;
 var $2155=((($f_i310_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2156=$f_i310_sroa_55_0&$storemerge_i_i_i315; //@line 23 "inc/front.h"
 var $2157=(($2153+($2156<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2157)>>3)]=0; //@line 23 "inc/front.h"
 var $2158=((($_01296)-(1))|0); //@line 23 "inc/front.h"
 var $2159=($2158|0)==0; //@line 23 "inc/front.h"
 if($2159){label=413;break;}else{var $_01296=$2158;var $f_i310_sroa_55_0=$2155;label=412;break;} //@line 23 "inc/front.h"
 case 413: 
 var $2160=(($2124+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2161=$2160; //@line 50 "inc/pcdecoder.inl"
 var $2162=(($2124+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2163=$2162; //@line 50 "inc/pcdecoder.inl"
 var $_01297=$_01052;var $f_i310_sroa_55_1=$2155;var $z_i313_0=0;label=414;break; //@line 47 "src/read.cpp"
 case 414: 
 var $z_i313_0;
 var $f_i310_sroa_55_1;
 var $_01297;
 var $2165=($z_i313_0>>>0)<($2119>>>0); //@line 47 "src/read.cpp"
 if($2165){var $_01295=$2129;var $f_i310_sroa_55_2=$f_i310_sroa_55_1;label=415;break;}else{label=438;break;} //@line 47 "src/read.cpp"
 case 415: 
 var $f_i310_sroa_55_2;
 var $_01295;
 var $2167=((($f_i310_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2168=$f_i310_sroa_55_2&$storemerge_i_i_i315; //@line 23 "inc/front.h"
 var $2169=(($2153+($2168<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2169)>>3)]=0; //@line 23 "inc/front.h"
 var $2170=((($_01295)-(1))|0); //@line 23 "inc/front.h"
 var $2171=($2170|0)==0; //@line 23 "inc/front.h"
 if($2171){var $_11298=$_01297;var $f_i310_sroa_55_3=$2167;var $y_i312_0=0;label=416;break;}else{var $_01295=$2170;var $f_i310_sroa_55_2=$2167;label=415;break;} //@line 23 "inc/front.h"
 case 416: 
 var $y_i312_0;
 var $f_i310_sroa_55_3;
 var $_11298;
 var $2172=($y_i312_0>>>0)<($2118>>>0); //@line 48 "src/read.cpp"
 if($2172){var $_01294=1;var $f_i310_sroa_55_4=$f_i310_sroa_55_3;label=417;break;}else{label=437;break;} //@line 48 "src/read.cpp"
 case 417: 
 var $f_i310_sroa_55_4;
 var $_01294;
 var $2174=((($f_i310_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2175=$f_i310_sroa_55_4&$storemerge_i_i_i315; //@line 23 "inc/front.h"
 var $2176=(($2153+($2175<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2176)>>3)]=0; //@line 23 "inc/front.h"
 var $2177=((($_01294)-(1))|0); //@line 23 "inc/front.h"
 var $2178=($2177|0)==0; //@line 23 "inc/front.h"
 if($2178){var $_21299=$_11298;var $f_i310_sroa_55_5=$2174;var $x_i311_0=0;label=418;break;}else{var $_01294=$2177;var $f_i310_sroa_55_4=$2174;label=417;break;} //@line 23 "inc/front.h"
 case 418: 
 var $x_i311_0;
 var $f_i310_sroa_55_5;
 var $_21299;
 var $2179=($x_i311_0>>>0)<($2117>>>0); //@line 49 "src/read.cpp"
 if($2179){label=419;break;}else{label=436;break;} //@line 49 "src/read.cpp"
 case 419: 
 var $2181=((($f_i310_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2182=$2181&$storemerge_i_i_i315; //@line 16 "inc/front.h"
 var $2183=(($2153+($2182<<3))|0); //@line 16 "inc/front.h"
 var $2184=HEAPF64[(($2183)>>3)]; //@line 59 "src/read.cpp"
 var $ld$266$0=(($2183)|0);
 var $2184$$SHADOW$0=HEAP32[(($ld$266$0)>>2)];
 var $ld$267$1=(($2183+4)|0);
 var $2184$$SHADOW$1=HEAP32[(($ld$267$1)>>2)];
 var $2185=((($f_i310_sroa_55_5)-($2129))|0); //@line 16 "inc/front.h"
 var $2186=((($2185)-($2131))|0); //@line 16 "inc/front.h"
 var $2187=$2186&$storemerge_i_i_i315; //@line 16 "inc/front.h"
 var $2188=(($2153+($2187<<3))|0); //@line 16 "inc/front.h"
 var $2189=HEAPF64[(($2188)>>3)]; //@line 59 "src/read.cpp"
 var $ld$268$0=(($2188)|0);
 var $2189$$SHADOW$0=HEAP32[(($ld$268$0)>>2)];
 var $ld$269$1=(($2188+4)|0);
 var $2189$$SHADOW$1=HEAP32[(($ld$269$1)>>2)];
 var $2190=$2185&$storemerge_i_i_i315; //@line 16 "inc/front.h"
 var $2191=(($2153+($2190<<3))|0); //@line 16 "inc/front.h"
 var $2192=HEAPF64[(($2191)>>3)]; //@line 60 "src/read.cpp"
 var $ld$270$0=(($2191)|0);
 var $2192$$SHADOW$0=HEAP32[(($ld$270$0)>>2)];
 var $ld$271$1=(($2191+4)|0);
 var $2192$$SHADOW$1=HEAP32[(($ld$271$1)>>2)];
 var $2193=((($2181)-($2131))|0); //@line 16 "inc/front.h"
 var $2194=$2193&$storemerge_i_i_i315; //@line 16 "inc/front.h"
 var $2195=(($2153+($2194<<3))|0); //@line 16 "inc/front.h"
 var $2196=HEAPF64[(($2195)>>3)]; //@line 60 "src/read.cpp"
 var $ld$272$0=(($2195)|0);
 var $2196$$SHADOW$0=HEAP32[(($ld$272$0)>>2)];
 var $ld$273$1=(($2195+4)|0);
 var $2196$$SHADOW$1=HEAP32[(($ld$273$1)>>2)];
 var $2197=((($f_i310_sroa_55_5)-($2131))|0); //@line 16 "inc/front.h"
 var $2198=$2197&$storemerge_i_i_i315; //@line 16 "inc/front.h"
 var $2199=(($2153+($2198<<3))|0); //@line 16 "inc/front.h"
 var $2200=HEAPF64[(($2199)>>3)]; //@line 61 "src/read.cpp"
 var $ld$274$0=(($2199)|0);
 var $2200$$SHADOW$0=HEAP32[(($ld$274$0)>>2)];
 var $ld$275$1=(($2199+4)|0);
 var $2200$$SHADOW$1=HEAP32[(($ld$275$1)>>2)];
 var $2201=((($2181)-($2129))|0); //@line 16 "inc/front.h"
 var $2202=$2201&$storemerge_i_i_i315; //@line 16 "inc/front.h"
 var $2203=(($2153+($2202<<3))|0); //@line 16 "inc/front.h"
 var $2204=HEAPF64[(($2203)>>3)]; //@line 61 "src/read.cpp"
 var $ld$276$0=(($2203)|0);
 var $2204$$SHADOW$0=HEAP32[(($ld$276$0)>>2)];
 var $ld$277$1=(($2203+4)|0);
 var $2204$$SHADOW$1=HEAP32[(($ld$277$1)>>2)];
 var $2205=((($2201)-($2131))|0); //@line 16 "inc/front.h"
 var $2206=$2205&$storemerge_i_i_i315; //@line 16 "inc/front.h"
 var $2207=(($2153+($2206<<3))|0); //@line 16 "inc/front.h"
 var $2208=($2184)-($2189); //@line 59 "src/read.cpp"
 var $2209=($2208)+($2192); //@line 60 "src/read.cpp"
 var $2210=($2209)-($2196); //@line 60 "src/read.cpp"
 var $2211=($2210)+($2200); //@line 61 "src/read.cpp"
 var $2212=($2211)-($2204); //@line 61 "src/read.cpp"
 var $2213=HEAPF64[(($2207)>>3)]; //@line 62 "src/read.cpp"
 var $ld$278$0=(($2207)|0);
 var $2213$$SHADOW$0=HEAP32[(($ld$278$0)>>2)];
 var $ld$279$1=(($2207+4)|0);
 var $2213$$SHADOW$1=HEAP32[(($ld$279$1)>>2)];
 var $2214=($2212)+($2213); //@line 62 "src/read.cpp"
 var $2215=HEAP32[(($2161)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2216=HEAP32[(($2163)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2217=HEAP32[(($2216)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$280$0=4;
 var $$etemp$280$1=0;

 var $$etemp$281$0=4;
 var $$etemp$281$1=0;

 var $2218=$2217; //@line 25 "src/rcdecoder.cpp"
 var $2219=HEAP32[(($2218)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2220=(($2219+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2221=HEAP32[(($2220)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2222=(($2215+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2221]($2217,$2222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=420;break; } else { label=434;break; }
 case 420: 
 var $2223=(($2215+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2224=HEAP32[(($2223)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2225=(($2215+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2226=HEAP32[(($2225)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2227=((($2224)-($2226))|0); //@line 26 "src/rcdecoder.cpp"
 var $2228=HEAP32[(($2222)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2229=(((($2227>>>0))/(($2228>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i302)>>2)]=$2229; //@line 26 "src/rcdecoder.cpp"
 var $2230=$2217; //@line 27 "src/rcdecoder.cpp"
 var $2231=HEAP32[(($2230)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2232=(($2231+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2233=HEAP32[(($2232)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2234=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2233]($2217,$l_i_i_i302,$r_i_i_i303) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=421;break; } else { label=434;break; }
 case 421: 
 var $2235=HEAP32[(($2222)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2236=HEAP32[(($l_i_i_i302)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2237=(Math_imul($2235,$2236)|0); //@line 28 "src/rcdecoder.cpp"
 var $2238=HEAP32[(($2225)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2239=((($2238)+($2237))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2225)>>2)]=$2239; //@line 28 "src/rcdecoder.cpp"
 var $2240=HEAP32[(($r_i_i_i303)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2241=(Math_imul($2235,$2240)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2222)>>2)]=$2241; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2215) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=422;break; } else { label=434;break; }
 case 422: 
 var $$etemp$282$0=4;
 var $$etemp$282$1=0;

 var $$etemp$283$0=4;
 var $$etemp$283$1=0;

 var $2242=($2234>>>0)>24; //@line 51 "inc/pcdecoder.inl"
 if($2242){label=423;break;}else{label=425;break;} //@line 51 "inc/pcdecoder.inl"
 case 423: 
 var $2244=((($2234)-(25))|0); //@line 52 "inc/pcdecoder.inl"
 var $2245=HEAP32[(($2161)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2246$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2245,$2244) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2246$0=$2246$r;var $2246$1=tempRet0;if (!__THREW__) { label=424;break; } else { label=434;break; }
 case 424: 
 var $2247$0=$2244;
 var $2247$1=0;
 var $$etemp$284$0=1;
 var $$etemp$284$1=0;
 var $2248$0=_bitshift64Shl($$etemp$284$0,$$etemp$284$1,$2247$0);var $2248$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $2249$0=_i64Add($2248$0,$2248$1,$2246$0,$2246$1);var $2249$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2214; var $2250$0=HEAP32[((tempDoublePtr)>>2)];var $2250$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$285$0=-1;
 var $$etemp$285$1=-1;
 var $2251$0=$2250$0^$$etemp$285$0;
 var $2251$1=$2250$1^$$etemp$285$1;
 var $2252$0=($2251$1>>>8)|(0<<24);
 var $2252$1=(0>>>8)|(0<<24);
 var $2253$0=($2251$1>>31)|((((((($2251$1|0)<0))|0)?-1:0))<<1);
 var $2253$1=((((((($2251$1|0)<0))|0)?-1:0))>>31)|((((((($2251$1|0)<0))|0)?-1:0))<<1);
 var $2254$0=($2253$1>>>9)|(0<<23);
 var $2254$1=(0>>>9)|(0<<23);
 var $2255$0=$2252$0^$2254$0;
 var $2255$1=$2252$1^$2254$1;
 var $2256$0=_i64Add($2255$0,$2255$1,$2249$0,$2249$1);var $2256$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $2257$0=($2256$0>>>23)|($2256$1<<9);
 var $2257$1=($2256$1>>>23)|(0<<9);
 var $$etemp$286$0=0;
 var $$etemp$286$1=0;
 var $2258$0=_i64Subtract($$etemp$286$0,$$etemp$286$1,$2257$0,$2257$1);var $2258$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2259$0=($2258$1>>>9)|(0<<23);
 var $2259$1=(0>>>9)|(0<<23);
 var $2260$0=$2259$0^$2256$0;
 var $2260$1=$2259$1^$2256$1;
 var $2261$0=(0<<8)|(0>>>24);
 var $2261$1=($2260$0<<8)|(0>>>24);
 var $$etemp$287$0=0;
 var $$etemp$287$1=-256;
 var $2262$0=$2261$0^$$etemp$287$0;
 var $2262$1=$2261$1^$$etemp$287$1;
 var $_01292_in$1=$2262$1;var $_01292_in$0=$2262$0;label=429;break; //@line 56 "inc/pcdecoder.inl"
 case 425: 
 var $2264=($2234>>>0)<24; //@line undefined "inc/pcdecoder.inl"
 if($2264){label=426;break;}else{label=428;break;} //@line undefined "inc/pcdecoder.inl"
 case 426: 
 var $2266=(((23)-($2234))|0); //@line 59 "inc/pcdecoder.inl"
 var $2267=HEAP32[(($2161)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2268$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2267,$2266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2268$0=$2268$r;var $2268$1=tempRet0;if (!__THREW__) { label=427;break; } else { label=434;break; }
 case 427: 
 var $2269$0=$2266;
 var $2269$1=0;
 var $$etemp$288$0=1;
 var $$etemp$288$1=0;
 var $2270$0=_bitshift64Shl($$etemp$288$0,$$etemp$288$1,$2269$0);var $2270$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $2271$0=_i64Add($2270$0,$2270$1,$2268$0,$2268$1);var $2271$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2214; var $2272$0=HEAP32[((tempDoublePtr)>>2)];var $2272$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$289$0=-1;
 var $$etemp$289$1=-1;
 var $2273$0=$2272$0^$$etemp$289$0;
 var $2273$1=$2272$1^$$etemp$289$1;
 var $2274$0=($2273$1>>>8)|(0<<24);
 var $2274$1=(0>>>8)|(0<<24);
 var $2275$0=($2273$1>>31)|((((((($2273$1|0)<0))|0)?-1:0))<<1);
 var $2275$1=((((((($2273$1|0)<0))|0)?-1:0))>>31)|((((((($2273$1|0)<0))|0)?-1:0))<<1);
 var $2276$0=($2275$1>>>9)|(0<<23);
 var $2276$1=(0>>>9)|(0<<23);
 var $2277$0=$2274$0^$2276$0;
 var $2277$1=$2274$1^$2276$1;
 var $2278$0=_i64Subtract($2277$0,$2277$1,$2271$0,$2271$1);var $2278$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $2279$0=($2278$0>>>23)|($2278$1<<9);
 var $2279$1=($2278$1>>>23)|(0<<9);
 var $$etemp$290$0=0;
 var $$etemp$290$1=0;
 var $2280$0=_i64Subtract($$etemp$290$0,$$etemp$290$1,$2279$0,$2279$1);var $2280$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2281$0=($2280$1>>>9)|(0<<23);
 var $2281$1=(0>>>9)|(0<<23);
 var $2282$0=$2281$0^$2278$0;
 var $2282$1=$2281$1^$2278$1;
 var $2283$0=(0<<8)|(0>>>24);
 var $2283$1=($2282$0<<8)|(0>>>24);
 var $$etemp$291$0=0;
 var $$etemp$291$1=-256;
 var $2284$0=$2283$0^$$etemp$291$0;
 var $2284$1=$2283$1^$$etemp$291$1;
 var $_01292_in$1=$2284$1;var $_01292_in$0=$2284$0;label=429;break; //@line 63 "inc/pcdecoder.inl"
 case 428: 
 HEAPF64[(tempDoublePtr)>>3]=$2214; var $2286$0=HEAP32[((tempDoublePtr)>>2)];var $2286$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$292$0=0;
 var $$etemp$292$1=-256;
 var $2287$0=$2286$0&$$etemp$292$0;
 var $2287$1=$2286$1&$$etemp$292$1;
 var $_01292_in$1=$2287$1;var $_01292_in$0=$2287$0;label=429;break; //@line 66 "inc/pcdecoder.inl"
 case 429: 
 var $_01292_in$0;
 var $_01292_in$1;
 var $_01292=(HEAP32[((tempDoublePtr)>>2)]=$_01292_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01292_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $2288=(($_21299+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21299)>>3)]=$_01292; //@line 65 "src/read.cpp"
 var $_01293=1;var $f_i310_sroa_55_6=$f_i310_sroa_55_5;label=430;break; //@line 22 "inc/front.h"
 case 430: 
 var $f_i310_sroa_55_6;
 var $_01293;
 var $2290=((($f_i310_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2291=$f_i310_sroa_55_6&$storemerge_i_i_i315; //@line 23 "inc/front.h"
 var $2292=(($2153+($2291<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2292)>>3)]=$_01292; //@line 23 "inc/front.h"
 var $2293=((($_01293)-(1))|0); //@line 23 "inc/front.h"
 var $2294=($2293|0)==0; //@line 23 "inc/front.h"
 if($2294){label=431;break;}else{var $_01293=$2293;var $f_i310_sroa_55_6=$2290;label=430;break;} //@line 23 "inc/front.h"
 case 431: 
 var $2295=((($x_i311_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21299=$2288;var $f_i310_sroa_55_5=$2290;var $x_i311_0=$2295;label=418;break; //@line 49 "src/read.cpp"
 case 432: 
 var $2297$0 = ___cxa_find_matching_catch(-1, -1); var $2297$1 = tempRet0;
 var $2298=$2297$0;
 var $2299=$2297$1;
 var $2300=($2120|0)==0;
 if($2300){var $_01300=$2298;var $_01301=$2299;label=444;break;}else{label=433;break;}
 case 433: 
 _free($2120);
 var $_01300=$2298;var $_01301=$2299;label=444;break;
 case 434: 
 var $2303$0 = ___cxa_find_matching_catch(-1, -1); var $2303$1 = tempRet0;
 var $2304=$2303$0;
 var $2305=$2303$1;
 var $2306=($2145|0)==0; //@line 11 "inc/front.h"
 if($2306){var $_01300=$2304;var $_01301=$2305;label=444;break;}else{label=435;break;} //@line 11 "inc/front.h"
 case 435: 
 _free($2145);
 var $_01300=$2304;var $_01301=$2305;label=444;break; //@line 11 "inc/front.h"
 case 436: 
 var $2308=((($y_i312_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11298=$_21299;var $f_i310_sroa_55_3=$f_i310_sroa_55_5;var $y_i312_0=$2308;label=416;break; //@line 48 "src/read.cpp"
 case 437: 
 var $2310=((($z_i313_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01297=$_11298;var $f_i310_sroa_55_1=$f_i310_sroa_55_3;var $z_i313_0=$2310;label=414;break; //@line 47 "src/read.cpp"
 case 438: 
 var $2312=($2124|0)==0; //@line 69 "src/read.cpp"
 if($2312){label=440;break;}else{label=439;break;} //@line 69 "src/read.cpp"
 case 439: 
 _free($2124);
 label=440;break; //@line 69 "src/read.cpp"
 case 440: 
 var $2314=HEAP32[(($rm_i308)>>2)]; //@line 70 "src/read.cpp"
 var $2315=($2314|0)==0; //@line 70 "src/read.cpp"
 if($2315){label=442;break;}else{label=441;break;} //@line 70 "src/read.cpp"
 case 441: 
 var $2317=$2314; //@line 70 "src/read.cpp"
 var $2318=HEAP32[(($2317)>>2)]; //@line 70 "src/read.cpp"
 var $2319=(($2318+4)|0); //@line 70 "src/read.cpp"
 var $2320=HEAP32[(($2319)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2320]($2314); //@line 70 "src/read.cpp"
 label=442;break; //@line 70 "src/read.cpp"
 case 442: 
 var $2322=($2145|0)==0; //@line 11 "inc/front.h"
 if($2322){label=1285;break;}else{label=443;break;} //@line 11 "inc/front.h"
 case 443: 
 _free($2145);
 label=1285;break; //@line 11 "inc/front.h"
 case 444: 
 var $_01301;
 var $_01300;
 var $2323$0=$_01300;
 var $2323$1=0;
 var $2324$0=$2323$0;
 var $2324$1=$_01301;
 ___resumeException($2324$0) //@line 71 "src/read.cpp"
 case 445: 
 var $2326=HEAP32[(($3)>>2)]; //@line 178 "src/read.cpp"
 var $2327=HEAP32[(($4)>>2)]; //@line 178 "src/read.cpp"
 var $2328=HEAP32[(($5)>>2)]; //@line 178 "src/read.cpp"
 var $2329=HEAP32[(($6)>>2)]; //@line 178 "src/read.cpp"
 var $$etemp$293$0=4;
 var $$etemp$293$1=0;

 var $2330=__Znwj(48); //@line 41 "src/read.cpp"
 var $2331=$2330; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2331,0,53,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=446;break; } else { label=474;break; } //@line 41 "src/read.cpp"
 case 446: 
 var $2333=$2330; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i344)>>2)]=$2333; //@line 71 "src/read.cpp"
 var $2334=__Znwj(12); //@line 42 "src/read.cpp"
 var $2335=(($2334+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2336=$2335; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2336)>>2)]=$2326; //@line 34 "inc/pcdecoder.inl"
 var $2337=(($2334+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2338=$2337; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2338)>>2)]=$rm_i344; //@line 34 "inc/pcdecoder.inl"
 var $2339=((($2327)+(1))|0); //@line 10 "inc/front.h"
 var $2340=((($2328)+(1))|0); //@line 10 "inc/front.h"
 var $2341=(Math_imul($2339,$2340)|0); //@line 10 "inc/front.h"
 var $2342=((($2327)+(2))|0); //@line 9 "inc/front.h"
 var $2343=((($2342)+($2341))|0); //@line 9 "inc/front.h"
 var $2344=((($2343)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i351=$2344;label=447;break; //@line 45 "inc/front.h"
 case 447: 
 var $storemerge_i_i_i351;
 var $2346=((($storemerge_i_i_i351)+(1))|0); //@line 45 "inc/front.h"
 var $2347=$storemerge_i_i_i351&$2346; //@line 45 "inc/front.h"
 var $2348=($2347|0)==0; //@line 45 "inc/front.h"
 if($2348){label=449;break;}else{label=448;break;} //@line 45 "inc/front.h"
 case 448: 
 var $2350=$storemerge_i_i_i351|$2346; //@line 45 "inc/front.h"
 var $storemerge_i_i_i351=$2350;label=447;break; //@line 45 "inc/front.h"
 case 449: 
 var $2351$0=_llvm_umul_with_overflow_i32($2346,8);
 var $2351$1=tempRet0;
 var $2352=$2351$1;
 var $2353=$2351$0;
 var $2354=($2352?-1:$2353); //@line 9 "inc/front.h"
 var $2355=(function() { try { __THREW__ = 0; return __Znwj($2354) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=453;break; } else { label=450;break; }
 case 450: 
 var $2357$0 = ___cxa_find_matching_catch(-1, -1); var $2357$1 = tempRet0;
 var $2358=$2357$1;
 var $2359=($2358|0)<0;
 if($2359){label=451;break;}else{label=452;break;}
 case 451: 
 var $2361=$2357$0;
 ___cxa_call_unexpected($2361);
 throw "Reached an unreachable!";
 case 452: 
 ___resumeException($2357$0)
 case 453: 
 var $2363=$2355; //@line 9 "inc/front.h"
 var $_01281=$2341;var $f_i346_sroa_55_0=0;label=454;break; //@line 22 "inc/front.h"
 case 454: 
 var $f_i346_sroa_55_0;
 var $_01281;
 var $2365=((($f_i346_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2366=$f_i346_sroa_55_0&$storemerge_i_i_i351; //@line 23 "inc/front.h"
 var $2367=(($2363+($2366<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2367)>>3)]=0; //@line 23 "inc/front.h"
 var $2368=((($_01281)-(1))|0); //@line 23 "inc/front.h"
 var $2369=($2368|0)==0; //@line 23 "inc/front.h"
 if($2369){label=455;break;}else{var $_01281=$2368;var $f_i346_sroa_55_0=$2365;label=454;break;} //@line 23 "inc/front.h"
 case 455: 
 var $2370=(($2334+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2371=$2370; //@line 50 "inc/pcdecoder.inl"
 var $2372=(($2334+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2373=$2372; //@line 50 "inc/pcdecoder.inl"
 var $_01282=$_01052;var $f_i346_sroa_55_1=$2365;var $z_i349_0=0;label=456;break; //@line 47 "src/read.cpp"
 case 456: 
 var $z_i349_0;
 var $f_i346_sroa_55_1;
 var $_01282;
 var $2375=($z_i349_0>>>0)<($2329>>>0); //@line 47 "src/read.cpp"
 if($2375){var $_01280=$2339;var $f_i346_sroa_55_2=$f_i346_sroa_55_1;label=457;break;}else{label=480;break;} //@line 47 "src/read.cpp"
 case 457: 
 var $f_i346_sroa_55_2;
 var $_01280;
 var $2377=((($f_i346_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2378=$f_i346_sroa_55_2&$storemerge_i_i_i351; //@line 23 "inc/front.h"
 var $2379=(($2363+($2378<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2379)>>3)]=0; //@line 23 "inc/front.h"
 var $2380=((($_01280)-(1))|0); //@line 23 "inc/front.h"
 var $2381=($2380|0)==0; //@line 23 "inc/front.h"
 if($2381){var $_11283=$_01282;var $f_i346_sroa_55_3=$2377;var $y_i348_0=0;label=458;break;}else{var $_01280=$2380;var $f_i346_sroa_55_2=$2377;label=457;break;} //@line 23 "inc/front.h"
 case 458: 
 var $y_i348_0;
 var $f_i346_sroa_55_3;
 var $_11283;
 var $2382=($y_i348_0>>>0)<($2328>>>0); //@line 48 "src/read.cpp"
 if($2382){var $_01279=1;var $f_i346_sroa_55_4=$f_i346_sroa_55_3;label=459;break;}else{label=479;break;} //@line 48 "src/read.cpp"
 case 459: 
 var $f_i346_sroa_55_4;
 var $_01279;
 var $2384=((($f_i346_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2385=$f_i346_sroa_55_4&$storemerge_i_i_i351; //@line 23 "inc/front.h"
 var $2386=(($2363+($2385<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2386)>>3)]=0; //@line 23 "inc/front.h"
 var $2387=((($_01279)-(1))|0); //@line 23 "inc/front.h"
 var $2388=($2387|0)==0; //@line 23 "inc/front.h"
 if($2388){var $_21284=$_11283;var $f_i346_sroa_55_5=$2384;var $x_i347_0=0;label=460;break;}else{var $_01279=$2387;var $f_i346_sroa_55_4=$2384;label=459;break;} //@line 23 "inc/front.h"
 case 460: 
 var $x_i347_0;
 var $f_i346_sroa_55_5;
 var $_21284;
 var $2389=($x_i347_0>>>0)<($2327>>>0); //@line 49 "src/read.cpp"
 if($2389){label=461;break;}else{label=478;break;} //@line 49 "src/read.cpp"
 case 461: 
 var $2391=((($f_i346_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2392=$2391&$storemerge_i_i_i351; //@line 16 "inc/front.h"
 var $2393=(($2363+($2392<<3))|0); //@line 16 "inc/front.h"
 var $2394=HEAPF64[(($2393)>>3)]; //@line 59 "src/read.cpp"
 var $ld$294$0=(($2393)|0);
 var $2394$$SHADOW$0=HEAP32[(($ld$294$0)>>2)];
 var $ld$295$1=(($2393+4)|0);
 var $2394$$SHADOW$1=HEAP32[(($ld$295$1)>>2)];
 var $2395=((($f_i346_sroa_55_5)-($2339))|0); //@line 16 "inc/front.h"
 var $2396=((($2395)-($2341))|0); //@line 16 "inc/front.h"
 var $2397=$2396&$storemerge_i_i_i351; //@line 16 "inc/front.h"
 var $2398=(($2363+($2397<<3))|0); //@line 16 "inc/front.h"
 var $2399=HEAPF64[(($2398)>>3)]; //@line 59 "src/read.cpp"
 var $ld$296$0=(($2398)|0);
 var $2399$$SHADOW$0=HEAP32[(($ld$296$0)>>2)];
 var $ld$297$1=(($2398+4)|0);
 var $2399$$SHADOW$1=HEAP32[(($ld$297$1)>>2)];
 var $2400=$2395&$storemerge_i_i_i351; //@line 16 "inc/front.h"
 var $2401=(($2363+($2400<<3))|0); //@line 16 "inc/front.h"
 var $2402=HEAPF64[(($2401)>>3)]; //@line 60 "src/read.cpp"
 var $ld$298$0=(($2401)|0);
 var $2402$$SHADOW$0=HEAP32[(($ld$298$0)>>2)];
 var $ld$299$1=(($2401+4)|0);
 var $2402$$SHADOW$1=HEAP32[(($ld$299$1)>>2)];
 var $2403=((($2391)-($2341))|0); //@line 16 "inc/front.h"
 var $2404=$2403&$storemerge_i_i_i351; //@line 16 "inc/front.h"
 var $2405=(($2363+($2404<<3))|0); //@line 16 "inc/front.h"
 var $2406=HEAPF64[(($2405)>>3)]; //@line 60 "src/read.cpp"
 var $ld$300$0=(($2405)|0);
 var $2406$$SHADOW$0=HEAP32[(($ld$300$0)>>2)];
 var $ld$301$1=(($2405+4)|0);
 var $2406$$SHADOW$1=HEAP32[(($ld$301$1)>>2)];
 var $2407=((($f_i346_sroa_55_5)-($2341))|0); //@line 16 "inc/front.h"
 var $2408=$2407&$storemerge_i_i_i351; //@line 16 "inc/front.h"
 var $2409=(($2363+($2408<<3))|0); //@line 16 "inc/front.h"
 var $2410=HEAPF64[(($2409)>>3)]; //@line 61 "src/read.cpp"
 var $ld$302$0=(($2409)|0);
 var $2410$$SHADOW$0=HEAP32[(($ld$302$0)>>2)];
 var $ld$303$1=(($2409+4)|0);
 var $2410$$SHADOW$1=HEAP32[(($ld$303$1)>>2)];
 var $2411=((($2391)-($2339))|0); //@line 16 "inc/front.h"
 var $2412=$2411&$storemerge_i_i_i351; //@line 16 "inc/front.h"
 var $2413=(($2363+($2412<<3))|0); //@line 16 "inc/front.h"
 var $2414=HEAPF64[(($2413)>>3)]; //@line 61 "src/read.cpp"
 var $ld$304$0=(($2413)|0);
 var $2414$$SHADOW$0=HEAP32[(($ld$304$0)>>2)];
 var $ld$305$1=(($2413+4)|0);
 var $2414$$SHADOW$1=HEAP32[(($ld$305$1)>>2)];
 var $2415=((($2411)-($2341))|0); //@line 16 "inc/front.h"
 var $2416=$2415&$storemerge_i_i_i351; //@line 16 "inc/front.h"
 var $2417=(($2363+($2416<<3))|0); //@line 16 "inc/front.h"
 var $2418=($2394)-($2399); //@line 59 "src/read.cpp"
 var $2419=($2418)+($2402); //@line 60 "src/read.cpp"
 var $2420=($2419)-($2406); //@line 60 "src/read.cpp"
 var $2421=($2420)+($2410); //@line 61 "src/read.cpp"
 var $2422=($2421)-($2414); //@line 61 "src/read.cpp"
 var $2423=HEAPF64[(($2417)>>3)]; //@line 62 "src/read.cpp"
 var $ld$306$0=(($2417)|0);
 var $2423$$SHADOW$0=HEAP32[(($ld$306$0)>>2)];
 var $ld$307$1=(($2417+4)|0);
 var $2423$$SHADOW$1=HEAP32[(($ld$307$1)>>2)];
 var $2424=($2422)+($2423); //@line 62 "src/read.cpp"
 var $2425=HEAP32[(($2371)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2426=HEAP32[(($2373)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2427=HEAP32[(($2426)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$308$0=4;
 var $$etemp$308$1=0;

 var $$etemp$309$0=4;
 var $$etemp$309$1=0;

 var $2428=$2427; //@line 25 "src/rcdecoder.cpp"
 var $2429=HEAP32[(($2428)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2430=(($2429+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2431=HEAP32[(($2430)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2432=(($2425+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2431]($2427,$2432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=462;break; } else { label=476;break; }
 case 462: 
 var $2433=(($2425+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2434=HEAP32[(($2433)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2435=(($2425+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2436=HEAP32[(($2435)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2437=((($2434)-($2436))|0); //@line 26 "src/rcdecoder.cpp"
 var $2438=HEAP32[(($2432)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2439=(((($2437>>>0))/(($2438>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i338)>>2)]=$2439; //@line 26 "src/rcdecoder.cpp"
 var $2440=$2427; //@line 27 "src/rcdecoder.cpp"
 var $2441=HEAP32[(($2440)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2442=(($2441+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2443=HEAP32[(($2442)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2444=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2443]($2427,$l_i_i_i338,$r_i_i_i339) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=463;break; } else { label=476;break; }
 case 463: 
 var $2445=HEAP32[(($2432)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2446=HEAP32[(($l_i_i_i338)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2447=(Math_imul($2445,$2446)|0); //@line 28 "src/rcdecoder.cpp"
 var $2448=HEAP32[(($2435)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2449=((($2448)+($2447))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2435)>>2)]=$2449; //@line 28 "src/rcdecoder.cpp"
 var $2450=HEAP32[(($r_i_i_i339)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2451=(Math_imul($2445,$2450)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2432)>>2)]=$2451; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2425) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=464;break; } else { label=476;break; }
 case 464: 
 var $$etemp$310$0=4;
 var $$etemp$310$1=0;

 var $$etemp$311$0=4;
 var $$etemp$311$1=0;

 var $2452=($2444>>>0)>26; //@line 51 "inc/pcdecoder.inl"
 if($2452){label=465;break;}else{label=467;break;} //@line 51 "inc/pcdecoder.inl"
 case 465: 
 var $2454=((($2444)-(27))|0); //@line 52 "inc/pcdecoder.inl"
 var $2455=HEAP32[(($2371)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2456$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2455,$2454) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2456$0=$2456$r;var $2456$1=tempRet0;if (!__THREW__) { label=466;break; } else { label=476;break; }
 case 466: 
 var $2457$0=$2454;
 var $2457$1=0;
 var $$etemp$312$0=1;
 var $$etemp$312$1=0;
 var $2458$0=_bitshift64Shl($$etemp$312$0,$$etemp$312$1,$2457$0);var $2458$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $2459$0=_i64Add($2458$0,$2458$1,$2456$0,$2456$1);var $2459$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2424; var $2460$0=HEAP32[((tempDoublePtr)>>2)];var $2460$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$313$0=-1;
 var $$etemp$313$1=-1;
 var $2461$0=$2460$0^$$etemp$313$0;
 var $2461$1=$2460$1^$$etemp$313$1;
 var $2462$0=($2461$1>>>6)|(0<<26);
 var $2462$1=(0>>>6)|(0<<26);
 var $2463$0=($2461$1>>31)|((((((($2461$1|0)<0))|0)?-1:0))<<1);
 var $2463$1=((((((($2461$1|0)<0))|0)?-1:0))>>31)|((((((($2461$1|0)<0))|0)?-1:0))<<1);
 var $2464$0=($2463$1>>>7)|(0<<25);
 var $2464$1=(0>>>7)|(0<<25);
 var $2465$0=$2462$0^$2464$0;
 var $2465$1=$2462$1^$2464$1;
 var $2466$0=_i64Add($2465$0,$2465$1,$2459$0,$2459$1);var $2466$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $2467$0=($2466$0>>>25)|($2466$1<<7);
 var $2467$1=($2466$1>>>25)|(0<<7);
 var $$etemp$314$0=0;
 var $$etemp$314$1=0;
 var $2468$0=_i64Subtract($$etemp$314$0,$$etemp$314$1,$2467$0,$2467$1);var $2468$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2469$0=($2468$1>>>7)|(0<<25);
 var $2469$1=(0>>>7)|(0<<25);
 var $2470$0=$2469$0^$2466$0;
 var $2470$1=$2469$1^$2466$1;
 var $2471$0=(0<<6)|(0>>>26);
 var $2471$1=($2470$0<<6)|(0>>>26);
 var $$etemp$315$0=0;
 var $$etemp$315$1=-64;
 var $2472$0=$2471$0^$$etemp$315$0;
 var $2472$1=$2471$1^$$etemp$315$1;
 var $_01277_in$1=$2472$1;var $_01277_in$0=$2472$0;label=471;break; //@line 56 "inc/pcdecoder.inl"
 case 467: 
 var $2474=($2444>>>0)<26; //@line undefined "inc/pcdecoder.inl"
 if($2474){label=468;break;}else{label=470;break;} //@line undefined "inc/pcdecoder.inl"
 case 468: 
 var $2476=(((25)-($2444))|0); //@line 59 "inc/pcdecoder.inl"
 var $2477=HEAP32[(($2371)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2478$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2477,$2476) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2478$0=$2478$r;var $2478$1=tempRet0;if (!__THREW__) { label=469;break; } else { label=476;break; }
 case 469: 
 var $2479$0=$2476;
 var $2479$1=0;
 var $$etemp$316$0=1;
 var $$etemp$316$1=0;
 var $2480$0=_bitshift64Shl($$etemp$316$0,$$etemp$316$1,$2479$0);var $2480$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $2481$0=_i64Add($2480$0,$2480$1,$2478$0,$2478$1);var $2481$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2424; var $2482$0=HEAP32[((tempDoublePtr)>>2)];var $2482$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$317$0=-1;
 var $$etemp$317$1=-1;
 var $2483$0=$2482$0^$$etemp$317$0;
 var $2483$1=$2482$1^$$etemp$317$1;
 var $2484$0=($2483$1>>>6)|(0<<26);
 var $2484$1=(0>>>6)|(0<<26);
 var $2485$0=($2483$1>>31)|((((((($2483$1|0)<0))|0)?-1:0))<<1);
 var $2485$1=((((((($2483$1|0)<0))|0)?-1:0))>>31)|((((((($2483$1|0)<0))|0)?-1:0))<<1);
 var $2486$0=($2485$1>>>7)|(0<<25);
 var $2486$1=(0>>>7)|(0<<25);
 var $2487$0=$2484$0^$2486$0;
 var $2487$1=$2484$1^$2486$1;
 var $2488$0=_i64Subtract($2487$0,$2487$1,$2481$0,$2481$1);var $2488$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $2489$0=($2488$0>>>25)|($2488$1<<7);
 var $2489$1=($2488$1>>>25)|(0<<7);
 var $$etemp$318$0=0;
 var $$etemp$318$1=0;
 var $2490$0=_i64Subtract($$etemp$318$0,$$etemp$318$1,$2489$0,$2489$1);var $2490$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2491$0=($2490$1>>>7)|(0<<25);
 var $2491$1=(0>>>7)|(0<<25);
 var $2492$0=$2491$0^$2488$0;
 var $2492$1=$2491$1^$2488$1;
 var $2493$0=(0<<6)|(0>>>26);
 var $2493$1=($2492$0<<6)|(0>>>26);
 var $$etemp$319$0=0;
 var $$etemp$319$1=-64;
 var $2494$0=$2493$0^$$etemp$319$0;
 var $2494$1=$2493$1^$$etemp$319$1;
 var $_01277_in$1=$2494$1;var $_01277_in$0=$2494$0;label=471;break; //@line 63 "inc/pcdecoder.inl"
 case 470: 
 HEAPF64[(tempDoublePtr)>>3]=$2424; var $2496$0=HEAP32[((tempDoublePtr)>>2)];var $2496$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$320$0=0;
 var $$etemp$320$1=-64;
 var $2497$0=$2496$0&$$etemp$320$0;
 var $2497$1=$2496$1&$$etemp$320$1;
 var $_01277_in$1=$2497$1;var $_01277_in$0=$2497$0;label=471;break; //@line 66 "inc/pcdecoder.inl"
 case 471: 
 var $_01277_in$0;
 var $_01277_in$1;
 var $_01277=(HEAP32[((tempDoublePtr)>>2)]=$_01277_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01277_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $2498=(($_21284+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21284)>>3)]=$_01277; //@line 65 "src/read.cpp"
 var $_01278=1;var $f_i346_sroa_55_6=$f_i346_sroa_55_5;label=472;break; //@line 22 "inc/front.h"
 case 472: 
 var $f_i346_sroa_55_6;
 var $_01278;
 var $2500=((($f_i346_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2501=$f_i346_sroa_55_6&$storemerge_i_i_i351; //@line 23 "inc/front.h"
 var $2502=(($2363+($2501<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2502)>>3)]=$_01277; //@line 23 "inc/front.h"
 var $2503=((($_01278)-(1))|0); //@line 23 "inc/front.h"
 var $2504=($2503|0)==0; //@line 23 "inc/front.h"
 if($2504){label=473;break;}else{var $_01278=$2503;var $f_i346_sroa_55_6=$2500;label=472;break;} //@line 23 "inc/front.h"
 case 473: 
 var $2505=((($x_i347_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21284=$2498;var $f_i346_sroa_55_5=$2500;var $x_i347_0=$2505;label=460;break; //@line 49 "src/read.cpp"
 case 474: 
 var $2507$0 = ___cxa_find_matching_catch(-1, -1); var $2507$1 = tempRet0;
 var $2508=$2507$0;
 var $2509=$2507$1;
 var $2510=($2330|0)==0;
 if($2510){var $_01285=$2508;var $_01286=$2509;label=486;break;}else{label=475;break;}
 case 475: 
 _free($2330);
 var $_01285=$2508;var $_01286=$2509;label=486;break;
 case 476: 
 var $2513$0 = ___cxa_find_matching_catch(-1, -1); var $2513$1 = tempRet0;
 var $2514=$2513$0;
 var $2515=$2513$1;
 var $2516=($2355|0)==0; //@line 11 "inc/front.h"
 if($2516){var $_01285=$2514;var $_01286=$2515;label=486;break;}else{label=477;break;} //@line 11 "inc/front.h"
 case 477: 
 _free($2355);
 var $_01285=$2514;var $_01286=$2515;label=486;break; //@line 11 "inc/front.h"
 case 478: 
 var $2518=((($y_i348_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11283=$_21284;var $f_i346_sroa_55_3=$f_i346_sroa_55_5;var $y_i348_0=$2518;label=458;break; //@line 48 "src/read.cpp"
 case 479: 
 var $2520=((($z_i349_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01282=$_11283;var $f_i346_sroa_55_1=$f_i346_sroa_55_3;var $z_i349_0=$2520;label=456;break; //@line 47 "src/read.cpp"
 case 480: 
 var $2522=($2334|0)==0; //@line 69 "src/read.cpp"
 if($2522){label=482;break;}else{label=481;break;} //@line 69 "src/read.cpp"
 case 481: 
 _free($2334);
 label=482;break; //@line 69 "src/read.cpp"
 case 482: 
 var $2524=HEAP32[(($rm_i344)>>2)]; //@line 70 "src/read.cpp"
 var $2525=($2524|0)==0; //@line 70 "src/read.cpp"
 if($2525){label=484;break;}else{label=483;break;} //@line 70 "src/read.cpp"
 case 483: 
 var $2527=$2524; //@line 70 "src/read.cpp"
 var $2528=HEAP32[(($2527)>>2)]; //@line 70 "src/read.cpp"
 var $2529=(($2528+4)|0); //@line 70 "src/read.cpp"
 var $2530=HEAP32[(($2529)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2530]($2524); //@line 70 "src/read.cpp"
 label=484;break; //@line 70 "src/read.cpp"
 case 484: 
 var $2532=($2355|0)==0; //@line 11 "inc/front.h"
 if($2532){label=1285;break;}else{label=485;break;} //@line 11 "inc/front.h"
 case 485: 
 _free($2355);
 label=1285;break; //@line 11 "inc/front.h"
 case 486: 
 var $_01286;
 var $_01285;
 var $2533$0=$_01285;
 var $2533$1=0;
 var $2534$0=$2533$0;
 var $2534$1=$_01286;
 ___resumeException($2534$0) //@line 71 "src/read.cpp"
 case 487: 
 var $2536=HEAP32[(($3)>>2)]; //@line 179 "src/read.cpp"
 var $2537=HEAP32[(($4)>>2)]; //@line 179 "src/read.cpp"
 var $2538=HEAP32[(($5)>>2)]; //@line 179 "src/read.cpp"
 var $2539=HEAP32[(($6)>>2)]; //@line 179 "src/read.cpp"
 var $$etemp$321$0=4;
 var $$etemp$321$1=0;

 var $2540=__Znwj(48); //@line 41 "src/read.cpp"
 var $2541=$2540; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2541,0,57,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=488;break; } else { label=516;break; } //@line 41 "src/read.cpp"
 case 488: 
 var $2543=$2540; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i380)>>2)]=$2543; //@line 71 "src/read.cpp"
 var $2544=__Znwj(12); //@line 42 "src/read.cpp"
 var $2545=(($2544+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2546=$2545; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2546)>>2)]=$2536; //@line 34 "inc/pcdecoder.inl"
 var $2547=(($2544+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2548=$2547; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2548)>>2)]=$rm_i380; //@line 34 "inc/pcdecoder.inl"
 var $2549=((($2537)+(1))|0); //@line 10 "inc/front.h"
 var $2550=((($2538)+(1))|0); //@line 10 "inc/front.h"
 var $2551=(Math_imul($2549,$2550)|0); //@line 10 "inc/front.h"
 var $2552=((($2537)+(2))|0); //@line 9 "inc/front.h"
 var $2553=((($2552)+($2551))|0); //@line 9 "inc/front.h"
 var $2554=((($2553)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i387=$2554;label=489;break; //@line 45 "inc/front.h"
 case 489: 
 var $storemerge_i_i_i387;
 var $2556=((($storemerge_i_i_i387)+(1))|0); //@line 45 "inc/front.h"
 var $2557=$storemerge_i_i_i387&$2556; //@line 45 "inc/front.h"
 var $2558=($2557|0)==0; //@line 45 "inc/front.h"
 if($2558){label=491;break;}else{label=490;break;} //@line 45 "inc/front.h"
 case 490: 
 var $2560=$storemerge_i_i_i387|$2556; //@line 45 "inc/front.h"
 var $storemerge_i_i_i387=$2560;label=489;break; //@line 45 "inc/front.h"
 case 491: 
 var $2561$0=_llvm_umul_with_overflow_i32($2556,8);
 var $2561$1=tempRet0;
 var $2562=$2561$1;
 var $2563=$2561$0;
 var $2564=($2562?-1:$2563); //@line 9 "inc/front.h"
 var $2565=(function() { try { __THREW__ = 0; return __Znwj($2564) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=495;break; } else { label=492;break; }
 case 492: 
 var $2567$0 = ___cxa_find_matching_catch(-1, -1); var $2567$1 = tempRet0;
 var $2568=$2567$1;
 var $2569=($2568|0)<0;
 if($2569){label=493;break;}else{label=494;break;}
 case 493: 
 var $2571=$2567$0;
 ___cxa_call_unexpected($2571);
 throw "Reached an unreachable!";
 case 494: 
 ___resumeException($2567$0)
 case 495: 
 var $2573=$2565; //@line 9 "inc/front.h"
 var $_01271=$2551;var $f_i382_sroa_55_0=0;label=496;break; //@line 22 "inc/front.h"
 case 496: 
 var $f_i382_sroa_55_0;
 var $_01271;
 var $2575=((($f_i382_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2576=$f_i382_sroa_55_0&$storemerge_i_i_i387; //@line 23 "inc/front.h"
 var $2577=(($2573+($2576<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2577)>>3)]=0; //@line 23 "inc/front.h"
 var $2578=((($_01271)-(1))|0); //@line 23 "inc/front.h"
 var $2579=($2578|0)==0; //@line 23 "inc/front.h"
 if($2579){label=497;break;}else{var $_01271=$2578;var $f_i382_sroa_55_0=$2575;label=496;break;} //@line 23 "inc/front.h"
 case 497: 
 var $2580=(($2544+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2581=$2580; //@line 50 "inc/pcdecoder.inl"
 var $2582=(($2544+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2583=$2582; //@line 50 "inc/pcdecoder.inl"
 var $_01272=$_01052;var $f_i382_sroa_55_1=$2575;var $z_i385_0=0;label=498;break; //@line 47 "src/read.cpp"
 case 498: 
 var $z_i385_0;
 var $f_i382_sroa_55_1;
 var $_01272;
 var $2585=($z_i385_0>>>0)<($2539>>>0); //@line 47 "src/read.cpp"
 if($2585){var $_01270=$2549;var $f_i382_sroa_55_2=$f_i382_sroa_55_1;label=499;break;}else{label=522;break;} //@line 47 "src/read.cpp"
 case 499: 
 var $f_i382_sroa_55_2;
 var $_01270;
 var $2587=((($f_i382_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2588=$f_i382_sroa_55_2&$storemerge_i_i_i387; //@line 23 "inc/front.h"
 var $2589=(($2573+($2588<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2589)>>3)]=0; //@line 23 "inc/front.h"
 var $2590=((($_01270)-(1))|0); //@line 23 "inc/front.h"
 var $2591=($2590|0)==0; //@line 23 "inc/front.h"
 if($2591){var $_11273=$_01272;var $f_i382_sroa_55_3=$2587;var $y_i384_0=0;label=500;break;}else{var $_01270=$2590;var $f_i382_sroa_55_2=$2587;label=499;break;} //@line 23 "inc/front.h"
 case 500: 
 var $y_i384_0;
 var $f_i382_sroa_55_3;
 var $_11273;
 var $2592=($y_i384_0>>>0)<($2538>>>0); //@line 48 "src/read.cpp"
 if($2592){var $_01269=1;var $f_i382_sroa_55_4=$f_i382_sroa_55_3;label=501;break;}else{label=521;break;} //@line 48 "src/read.cpp"
 case 501: 
 var $f_i382_sroa_55_4;
 var $_01269;
 var $2594=((($f_i382_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2595=$f_i382_sroa_55_4&$storemerge_i_i_i387; //@line 23 "inc/front.h"
 var $2596=(($2573+($2595<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2596)>>3)]=0; //@line 23 "inc/front.h"
 var $2597=((($_01269)-(1))|0); //@line 23 "inc/front.h"
 var $2598=($2597|0)==0; //@line 23 "inc/front.h"
 if($2598){var $_21274=$_11273;var $f_i382_sroa_55_5=$2594;var $x_i383_0=0;label=502;break;}else{var $_01269=$2597;var $f_i382_sroa_55_4=$2594;label=501;break;} //@line 23 "inc/front.h"
 case 502: 
 var $x_i383_0;
 var $f_i382_sroa_55_5;
 var $_21274;
 var $2599=($x_i383_0>>>0)<($2537>>>0); //@line 49 "src/read.cpp"
 if($2599){label=503;break;}else{label=520;break;} //@line 49 "src/read.cpp"
 case 503: 
 var $2601=((($f_i382_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2602=$2601&$storemerge_i_i_i387; //@line 16 "inc/front.h"
 var $2603=(($2573+($2602<<3))|0); //@line 16 "inc/front.h"
 var $2604=HEAPF64[(($2603)>>3)]; //@line 59 "src/read.cpp"
 var $ld$322$0=(($2603)|0);
 var $2604$$SHADOW$0=HEAP32[(($ld$322$0)>>2)];
 var $ld$323$1=(($2603+4)|0);
 var $2604$$SHADOW$1=HEAP32[(($ld$323$1)>>2)];
 var $2605=((($f_i382_sroa_55_5)-($2549))|0); //@line 16 "inc/front.h"
 var $2606=((($2605)-($2551))|0); //@line 16 "inc/front.h"
 var $2607=$2606&$storemerge_i_i_i387; //@line 16 "inc/front.h"
 var $2608=(($2573+($2607<<3))|0); //@line 16 "inc/front.h"
 var $2609=HEAPF64[(($2608)>>3)]; //@line 59 "src/read.cpp"
 var $ld$324$0=(($2608)|0);
 var $2609$$SHADOW$0=HEAP32[(($ld$324$0)>>2)];
 var $ld$325$1=(($2608+4)|0);
 var $2609$$SHADOW$1=HEAP32[(($ld$325$1)>>2)];
 var $2610=$2605&$storemerge_i_i_i387; //@line 16 "inc/front.h"
 var $2611=(($2573+($2610<<3))|0); //@line 16 "inc/front.h"
 var $2612=HEAPF64[(($2611)>>3)]; //@line 60 "src/read.cpp"
 var $ld$326$0=(($2611)|0);
 var $2612$$SHADOW$0=HEAP32[(($ld$326$0)>>2)];
 var $ld$327$1=(($2611+4)|0);
 var $2612$$SHADOW$1=HEAP32[(($ld$327$1)>>2)];
 var $2613=((($2601)-($2551))|0); //@line 16 "inc/front.h"
 var $2614=$2613&$storemerge_i_i_i387; //@line 16 "inc/front.h"
 var $2615=(($2573+($2614<<3))|0); //@line 16 "inc/front.h"
 var $2616=HEAPF64[(($2615)>>3)]; //@line 60 "src/read.cpp"
 var $ld$328$0=(($2615)|0);
 var $2616$$SHADOW$0=HEAP32[(($ld$328$0)>>2)];
 var $ld$329$1=(($2615+4)|0);
 var $2616$$SHADOW$1=HEAP32[(($ld$329$1)>>2)];
 var $2617=((($f_i382_sroa_55_5)-($2551))|0); //@line 16 "inc/front.h"
 var $2618=$2617&$storemerge_i_i_i387; //@line 16 "inc/front.h"
 var $2619=(($2573+($2618<<3))|0); //@line 16 "inc/front.h"
 var $2620=HEAPF64[(($2619)>>3)]; //@line 61 "src/read.cpp"
 var $ld$330$0=(($2619)|0);
 var $2620$$SHADOW$0=HEAP32[(($ld$330$0)>>2)];
 var $ld$331$1=(($2619+4)|0);
 var $2620$$SHADOW$1=HEAP32[(($ld$331$1)>>2)];
 var $2621=((($2601)-($2549))|0); //@line 16 "inc/front.h"
 var $2622=$2621&$storemerge_i_i_i387; //@line 16 "inc/front.h"
 var $2623=(($2573+($2622<<3))|0); //@line 16 "inc/front.h"
 var $2624=HEAPF64[(($2623)>>3)]; //@line 61 "src/read.cpp"
 var $ld$332$0=(($2623)|0);
 var $2624$$SHADOW$0=HEAP32[(($ld$332$0)>>2)];
 var $ld$333$1=(($2623+4)|0);
 var $2624$$SHADOW$1=HEAP32[(($ld$333$1)>>2)];
 var $2625=((($2621)-($2551))|0); //@line 16 "inc/front.h"
 var $2626=$2625&$storemerge_i_i_i387; //@line 16 "inc/front.h"
 var $2627=(($2573+($2626<<3))|0); //@line 16 "inc/front.h"
 var $2628=($2604)-($2609); //@line 59 "src/read.cpp"
 var $2629=($2628)+($2612); //@line 60 "src/read.cpp"
 var $2630=($2629)-($2616); //@line 60 "src/read.cpp"
 var $2631=($2630)+($2620); //@line 61 "src/read.cpp"
 var $2632=($2631)-($2624); //@line 61 "src/read.cpp"
 var $2633=HEAPF64[(($2627)>>3)]; //@line 62 "src/read.cpp"
 var $ld$334$0=(($2627)|0);
 var $2633$$SHADOW$0=HEAP32[(($ld$334$0)>>2)];
 var $ld$335$1=(($2627+4)|0);
 var $2633$$SHADOW$1=HEAP32[(($ld$335$1)>>2)];
 var $2634=($2632)+($2633); //@line 62 "src/read.cpp"
 var $2635=HEAP32[(($2581)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2636=HEAP32[(($2583)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2637=HEAP32[(($2636)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$336$0=4;
 var $$etemp$336$1=0;

 var $$etemp$337$0=4;
 var $$etemp$337$1=0;

 var $2638=$2637; //@line 25 "src/rcdecoder.cpp"
 var $2639=HEAP32[(($2638)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2640=(($2639+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2641=HEAP32[(($2640)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2642=(($2635+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2641]($2637,$2642) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=504;break; } else { label=518;break; }
 case 504: 
 var $2643=(($2635+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2644=HEAP32[(($2643)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2645=(($2635+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2646=HEAP32[(($2645)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2647=((($2644)-($2646))|0); //@line 26 "src/rcdecoder.cpp"
 var $2648=HEAP32[(($2642)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2649=(((($2647>>>0))/(($2648>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i374)>>2)]=$2649; //@line 26 "src/rcdecoder.cpp"
 var $2650=$2637; //@line 27 "src/rcdecoder.cpp"
 var $2651=HEAP32[(($2650)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2652=(($2651+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2653=HEAP32[(($2652)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2654=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2653]($2637,$l_i_i_i374,$r_i_i_i375) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=505;break; } else { label=518;break; }
 case 505: 
 var $2655=HEAP32[(($2642)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2656=HEAP32[(($l_i_i_i374)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2657=(Math_imul($2655,$2656)|0); //@line 28 "src/rcdecoder.cpp"
 var $2658=HEAP32[(($2645)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2659=((($2658)+($2657))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2645)>>2)]=$2659; //@line 28 "src/rcdecoder.cpp"
 var $2660=HEAP32[(($r_i_i_i375)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2661=(Math_imul($2655,$2660)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2642)>>2)]=$2661; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2635) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=506;break; } else { label=518;break; }
 case 506: 
 var $$etemp$338$0=4;
 var $$etemp$338$1=0;

 var $$etemp$339$0=4;
 var $$etemp$339$1=0;

 var $2662=($2654>>>0)>28; //@line 51 "inc/pcdecoder.inl"
 if($2662){label=507;break;}else{label=509;break;} //@line 51 "inc/pcdecoder.inl"
 case 507: 
 var $2664=((($2654)-(29))|0); //@line 52 "inc/pcdecoder.inl"
 var $2665=HEAP32[(($2581)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2666$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2665,$2664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2666$0=$2666$r;var $2666$1=tempRet0;if (!__THREW__) { label=508;break; } else { label=518;break; }
 case 508: 
 var $2667$0=$2664;
 var $2667$1=0;
 var $$etemp$340$0=1;
 var $$etemp$340$1=0;
 var $2668$0=_bitshift64Shl($$etemp$340$0,$$etemp$340$1,$2667$0);var $2668$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $2669$0=_i64Add($2668$0,$2668$1,$2666$0,$2666$1);var $2669$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2634; var $2670$0=HEAP32[((tempDoublePtr)>>2)];var $2670$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$341$0=-1;
 var $$etemp$341$1=-1;
 var $2671$0=$2670$0^$$etemp$341$0;
 var $2671$1=$2670$1^$$etemp$341$1;
 var $2672$0=($2671$1>>>4)|(0<<28);
 var $2672$1=(0>>>4)|(0<<28);
 var $2673$0=($2671$1>>31)|((((((($2671$1|0)<0))|0)?-1:0))<<1);
 var $2673$1=((((((($2671$1|0)<0))|0)?-1:0))>>31)|((((((($2671$1|0)<0))|0)?-1:0))<<1);
 var $2674$0=($2673$1>>>5)|(0<<27);
 var $2674$1=(0>>>5)|(0<<27);
 var $2675$0=$2672$0^$2674$0;
 var $2675$1=$2672$1^$2674$1;
 var $2676$0=_i64Add($2675$0,$2675$1,$2669$0,$2669$1);var $2676$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $2677$0=($2676$0>>>27)|($2676$1<<5);
 var $2677$1=($2676$1>>>27)|(0<<5);
 var $$etemp$342$0=0;
 var $$etemp$342$1=0;
 var $2678$0=_i64Subtract($$etemp$342$0,$$etemp$342$1,$2677$0,$2677$1);var $2678$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2679$0=($2678$1>>>5)|(0<<27);
 var $2679$1=(0>>>5)|(0<<27);
 var $2680$0=$2679$0^$2676$0;
 var $2680$1=$2679$1^$2676$1;
 var $2681$0=(0<<4)|(0>>>28);
 var $2681$1=($2680$0<<4)|(0>>>28);
 var $$etemp$343$0=0;
 var $$etemp$343$1=-16;
 var $2682$0=$2681$0^$$etemp$343$0;
 var $2682$1=$2681$1^$$etemp$343$1;
 var $_01267_in$1=$2682$1;var $_01267_in$0=$2682$0;label=513;break; //@line 56 "inc/pcdecoder.inl"
 case 509: 
 var $2684=($2654>>>0)<28; //@line undefined "inc/pcdecoder.inl"
 if($2684){label=510;break;}else{label=512;break;} //@line undefined "inc/pcdecoder.inl"
 case 510: 
 var $2686=(((27)-($2654))|0); //@line 59 "inc/pcdecoder.inl"
 var $2687=HEAP32[(($2581)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2688$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2687,$2686) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2688$0=$2688$r;var $2688$1=tempRet0;if (!__THREW__) { label=511;break; } else { label=518;break; }
 case 511: 
 var $2689$0=$2686;
 var $2689$1=0;
 var $$etemp$344$0=1;
 var $$etemp$344$1=0;
 var $2690$0=_bitshift64Shl($$etemp$344$0,$$etemp$344$1,$2689$0);var $2690$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $2691$0=_i64Add($2690$0,$2690$1,$2688$0,$2688$1);var $2691$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2634; var $2692$0=HEAP32[((tempDoublePtr)>>2)];var $2692$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$345$0=-1;
 var $$etemp$345$1=-1;
 var $2693$0=$2692$0^$$etemp$345$0;
 var $2693$1=$2692$1^$$etemp$345$1;
 var $2694$0=($2693$1>>>4)|(0<<28);
 var $2694$1=(0>>>4)|(0<<28);
 var $2695$0=($2693$1>>31)|((((((($2693$1|0)<0))|0)?-1:0))<<1);
 var $2695$1=((((((($2693$1|0)<0))|0)?-1:0))>>31)|((((((($2693$1|0)<0))|0)?-1:0))<<1);
 var $2696$0=($2695$1>>>5)|(0<<27);
 var $2696$1=(0>>>5)|(0<<27);
 var $2697$0=$2694$0^$2696$0;
 var $2697$1=$2694$1^$2696$1;
 var $2698$0=_i64Subtract($2697$0,$2697$1,$2691$0,$2691$1);var $2698$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $2699$0=($2698$0>>>27)|($2698$1<<5);
 var $2699$1=($2698$1>>>27)|(0<<5);
 var $$etemp$346$0=0;
 var $$etemp$346$1=0;
 var $2700$0=_i64Subtract($$etemp$346$0,$$etemp$346$1,$2699$0,$2699$1);var $2700$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2701$0=($2700$1>>>5)|(0<<27);
 var $2701$1=(0>>>5)|(0<<27);
 var $2702$0=$2701$0^$2698$0;
 var $2702$1=$2701$1^$2698$1;
 var $2703$0=(0<<4)|(0>>>28);
 var $2703$1=($2702$0<<4)|(0>>>28);
 var $$etemp$347$0=0;
 var $$etemp$347$1=-16;
 var $2704$0=$2703$0^$$etemp$347$0;
 var $2704$1=$2703$1^$$etemp$347$1;
 var $_01267_in$1=$2704$1;var $_01267_in$0=$2704$0;label=513;break; //@line 63 "inc/pcdecoder.inl"
 case 512: 
 HEAPF64[(tempDoublePtr)>>3]=$2634; var $2706$0=HEAP32[((tempDoublePtr)>>2)];var $2706$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$348$0=0;
 var $$etemp$348$1=-16;
 var $2707$0=$2706$0&$$etemp$348$0;
 var $2707$1=$2706$1&$$etemp$348$1;
 var $_01267_in$1=$2707$1;var $_01267_in$0=$2707$0;label=513;break; //@line 66 "inc/pcdecoder.inl"
 case 513: 
 var $_01267_in$0;
 var $_01267_in$1;
 var $_01267=(HEAP32[((tempDoublePtr)>>2)]=$_01267_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01267_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $2708=(($_21274+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21274)>>3)]=$_01267; //@line 65 "src/read.cpp"
 var $_01268=1;var $f_i382_sroa_55_6=$f_i382_sroa_55_5;label=514;break; //@line 22 "inc/front.h"
 case 514: 
 var $f_i382_sroa_55_6;
 var $_01268;
 var $2710=((($f_i382_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2711=$f_i382_sroa_55_6&$storemerge_i_i_i387; //@line 23 "inc/front.h"
 var $2712=(($2573+($2711<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2712)>>3)]=$_01267; //@line 23 "inc/front.h"
 var $2713=((($_01268)-(1))|0); //@line 23 "inc/front.h"
 var $2714=($2713|0)==0; //@line 23 "inc/front.h"
 if($2714){label=515;break;}else{var $_01268=$2713;var $f_i382_sroa_55_6=$2710;label=514;break;} //@line 23 "inc/front.h"
 case 515: 
 var $2715=((($x_i383_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21274=$2708;var $f_i382_sroa_55_5=$2710;var $x_i383_0=$2715;label=502;break; //@line 49 "src/read.cpp"
 case 516: 
 var $2717$0 = ___cxa_find_matching_catch(-1, -1); var $2717$1 = tempRet0;
 var $2718=$2717$0;
 var $2719=$2717$1;
 var $2720=($2540|0)==0;
 if($2720){var $_01275=$2718;var $_01276=$2719;label=528;break;}else{label=517;break;}
 case 517: 
 _free($2540);
 var $_01275=$2718;var $_01276=$2719;label=528;break;
 case 518: 
 var $2723$0 = ___cxa_find_matching_catch(-1, -1); var $2723$1 = tempRet0;
 var $2724=$2723$0;
 var $2725=$2723$1;
 var $2726=($2565|0)==0; //@line 11 "inc/front.h"
 if($2726){var $_01275=$2724;var $_01276=$2725;label=528;break;}else{label=519;break;} //@line 11 "inc/front.h"
 case 519: 
 _free($2565);
 var $_01275=$2724;var $_01276=$2725;label=528;break; //@line 11 "inc/front.h"
 case 520: 
 var $2728=((($y_i384_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11273=$_21274;var $f_i382_sroa_55_3=$f_i382_sroa_55_5;var $y_i384_0=$2728;label=500;break; //@line 48 "src/read.cpp"
 case 521: 
 var $2730=((($z_i385_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01272=$_11273;var $f_i382_sroa_55_1=$f_i382_sroa_55_3;var $z_i385_0=$2730;label=498;break; //@line 47 "src/read.cpp"
 case 522: 
 var $2732=($2544|0)==0; //@line 69 "src/read.cpp"
 if($2732){label=524;break;}else{label=523;break;} //@line 69 "src/read.cpp"
 case 523: 
 _free($2544);
 label=524;break; //@line 69 "src/read.cpp"
 case 524: 
 var $2734=HEAP32[(($rm_i380)>>2)]; //@line 70 "src/read.cpp"
 var $2735=($2734|0)==0; //@line 70 "src/read.cpp"
 if($2735){label=526;break;}else{label=525;break;} //@line 70 "src/read.cpp"
 case 525: 
 var $2737=$2734; //@line 70 "src/read.cpp"
 var $2738=HEAP32[(($2737)>>2)]; //@line 70 "src/read.cpp"
 var $2739=(($2738+4)|0); //@line 70 "src/read.cpp"
 var $2740=HEAP32[(($2739)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2740]($2734); //@line 70 "src/read.cpp"
 label=526;break; //@line 70 "src/read.cpp"
 case 526: 
 var $2742=($2565|0)==0; //@line 11 "inc/front.h"
 if($2742){label=1285;break;}else{label=527;break;} //@line 11 "inc/front.h"
 case 527: 
 _free($2565);
 label=1285;break; //@line 11 "inc/front.h"
 case 528: 
 var $_01276;
 var $_01275;
 var $2743$0=$_01275;
 var $2743$1=0;
 var $2744$0=$2743$0;
 var $2744$1=$_01276;
 ___resumeException($2744$0) //@line 71 "src/read.cpp"
 case 529: 
 var $2746=HEAP32[(($3)>>2)]; //@line 180 "src/read.cpp"
 var $2747=HEAP32[(($4)>>2)]; //@line 180 "src/read.cpp"
 var $2748=HEAP32[(($5)>>2)]; //@line 180 "src/read.cpp"
 var $2749=HEAP32[(($6)>>2)]; //@line 180 "src/read.cpp"
 var $$etemp$349$0=4;
 var $$etemp$349$1=0;

 var $2750=__Znwj(48); //@line 41 "src/read.cpp"
 var $2751=$2750; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2751,0,61,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=530;break; } else { label=558;break; } //@line 41 "src/read.cpp"
 case 530: 
 var $2753=$2750; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i416)>>2)]=$2753; //@line 71 "src/read.cpp"
 var $2754=__Znwj(12); //@line 42 "src/read.cpp"
 var $2755=(($2754+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2756=$2755; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2756)>>2)]=$2746; //@line 34 "inc/pcdecoder.inl"
 var $2757=(($2754+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2758=$2757; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2758)>>2)]=$rm_i416; //@line 34 "inc/pcdecoder.inl"
 var $2759=((($2747)+(1))|0); //@line 10 "inc/front.h"
 var $2760=((($2748)+(1))|0); //@line 10 "inc/front.h"
 var $2761=(Math_imul($2759,$2760)|0); //@line 10 "inc/front.h"
 var $2762=((($2747)+(2))|0); //@line 9 "inc/front.h"
 var $2763=((($2762)+($2761))|0); //@line 9 "inc/front.h"
 var $2764=((($2763)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i423=$2764;label=531;break; //@line 45 "inc/front.h"
 case 531: 
 var $storemerge_i_i_i423;
 var $2766=((($storemerge_i_i_i423)+(1))|0); //@line 45 "inc/front.h"
 var $2767=$storemerge_i_i_i423&$2766; //@line 45 "inc/front.h"
 var $2768=($2767|0)==0; //@line 45 "inc/front.h"
 if($2768){label=533;break;}else{label=532;break;} //@line 45 "inc/front.h"
 case 532: 
 var $2770=$storemerge_i_i_i423|$2766; //@line 45 "inc/front.h"
 var $storemerge_i_i_i423=$2770;label=531;break; //@line 45 "inc/front.h"
 case 533: 
 var $2771$0=_llvm_umul_with_overflow_i32($2766,8);
 var $2771$1=tempRet0;
 var $2772=$2771$1;
 var $2773=$2771$0;
 var $2774=($2772?-1:$2773); //@line 9 "inc/front.h"
 var $2775=(function() { try { __THREW__ = 0; return __Znwj($2774) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=537;break; } else { label=534;break; }
 case 534: 
 var $2777$0 = ___cxa_find_matching_catch(-1, -1); var $2777$1 = tempRet0;
 var $2778=$2777$1;
 var $2779=($2778|0)<0;
 if($2779){label=535;break;}else{label=536;break;}
 case 535: 
 var $2781=$2777$0;
 ___cxa_call_unexpected($2781);
 throw "Reached an unreachable!";
 case 536: 
 ___resumeException($2777$0)
 case 537: 
 var $2783=$2775; //@line 9 "inc/front.h"
 var $_01260=$2761;var $f_i418_sroa_55_0=0;label=538;break; //@line 22 "inc/front.h"
 case 538: 
 var $f_i418_sroa_55_0;
 var $_01260;
 var $2785=((($f_i418_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2786=$f_i418_sroa_55_0&$storemerge_i_i_i423; //@line 23 "inc/front.h"
 var $2787=(($2783+($2786<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2787)>>3)]=0; //@line 23 "inc/front.h"
 var $2788=((($_01260)-(1))|0); //@line 23 "inc/front.h"
 var $2789=($2788|0)==0; //@line 23 "inc/front.h"
 if($2789){label=539;break;}else{var $_01260=$2788;var $f_i418_sroa_55_0=$2785;label=538;break;} //@line 23 "inc/front.h"
 case 539: 
 var $2790=(($2754+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $2791=$2790; //@line 50 "inc/pcdecoder.inl"
 var $2792=(($2754+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $2793=$2792; //@line 50 "inc/pcdecoder.inl"
 var $_01261=$_01052;var $f_i418_sroa_55_1=$2785;var $z_i421_0=0;label=540;break; //@line 47 "src/read.cpp"
 case 540: 
 var $z_i421_0;
 var $f_i418_sroa_55_1;
 var $_01261;
 var $2795=($z_i421_0>>>0)<($2749>>>0); //@line 47 "src/read.cpp"
 if($2795){var $_01259=$2759;var $f_i418_sroa_55_2=$f_i418_sroa_55_1;label=541;break;}else{label=564;break;} //@line 47 "src/read.cpp"
 case 541: 
 var $f_i418_sroa_55_2;
 var $_01259;
 var $2797=((($f_i418_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $2798=$f_i418_sroa_55_2&$storemerge_i_i_i423; //@line 23 "inc/front.h"
 var $2799=(($2783+($2798<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2799)>>3)]=0; //@line 23 "inc/front.h"
 var $2800=((($_01259)-(1))|0); //@line 23 "inc/front.h"
 var $2801=($2800|0)==0; //@line 23 "inc/front.h"
 if($2801){var $_11262=$_01261;var $f_i418_sroa_55_3=$2797;var $y_i420_0=0;label=542;break;}else{var $_01259=$2800;var $f_i418_sroa_55_2=$2797;label=541;break;} //@line 23 "inc/front.h"
 case 542: 
 var $y_i420_0;
 var $f_i418_sroa_55_3;
 var $_11262;
 var $2802=($y_i420_0>>>0)<($2748>>>0); //@line 48 "src/read.cpp"
 if($2802){var $_01257=1;var $f_i418_sroa_55_4=$f_i418_sroa_55_3;label=543;break;}else{label=563;break;} //@line 48 "src/read.cpp"
 case 543: 
 var $f_i418_sroa_55_4;
 var $_01257;
 var $2804=((($f_i418_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $2805=$f_i418_sroa_55_4&$storemerge_i_i_i423; //@line 23 "inc/front.h"
 var $2806=(($2783+($2805<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2806)>>3)]=0; //@line 23 "inc/front.h"
 var $2807=((($_01257)-(1))|0); //@line 23 "inc/front.h"
 var $2808=($2807|0)==0; //@line 23 "inc/front.h"
 if($2808){var $_21263=$_11262;var $f_i418_sroa_55_5=$2804;var $x_i419_0=0;label=544;break;}else{var $_01257=$2807;var $f_i418_sroa_55_4=$2804;label=543;break;} //@line 23 "inc/front.h"
 case 544: 
 var $x_i419_0;
 var $f_i418_sroa_55_5;
 var $_21263;
 var $2809=($x_i419_0>>>0)<($2747>>>0); //@line 49 "src/read.cpp"
 if($2809){label=545;break;}else{label=562;break;} //@line 49 "src/read.cpp"
 case 545: 
 var $2811=((($f_i418_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $2812=$2811&$storemerge_i_i_i423; //@line 16 "inc/front.h"
 var $2813=(($2783+($2812<<3))|0); //@line 16 "inc/front.h"
 var $2814=HEAPF64[(($2813)>>3)]; //@line 59 "src/read.cpp"
 var $ld$350$0=(($2813)|0);
 var $2814$$SHADOW$0=HEAP32[(($ld$350$0)>>2)];
 var $ld$351$1=(($2813+4)|0);
 var $2814$$SHADOW$1=HEAP32[(($ld$351$1)>>2)];
 var $2815=((($f_i418_sroa_55_5)-($2759))|0); //@line 16 "inc/front.h"
 var $2816=((($2815)-($2761))|0); //@line 16 "inc/front.h"
 var $2817=$2816&$storemerge_i_i_i423; //@line 16 "inc/front.h"
 var $2818=(($2783+($2817<<3))|0); //@line 16 "inc/front.h"
 var $2819=HEAPF64[(($2818)>>3)]; //@line 59 "src/read.cpp"
 var $ld$352$0=(($2818)|0);
 var $2819$$SHADOW$0=HEAP32[(($ld$352$0)>>2)];
 var $ld$353$1=(($2818+4)|0);
 var $2819$$SHADOW$1=HEAP32[(($ld$353$1)>>2)];
 var $2820=$2815&$storemerge_i_i_i423; //@line 16 "inc/front.h"
 var $2821=(($2783+($2820<<3))|0); //@line 16 "inc/front.h"
 var $2822=HEAPF64[(($2821)>>3)]; //@line 60 "src/read.cpp"
 var $ld$354$0=(($2821)|0);
 var $2822$$SHADOW$0=HEAP32[(($ld$354$0)>>2)];
 var $ld$355$1=(($2821+4)|0);
 var $2822$$SHADOW$1=HEAP32[(($ld$355$1)>>2)];
 var $2823=((($2811)-($2761))|0); //@line 16 "inc/front.h"
 var $2824=$2823&$storemerge_i_i_i423; //@line 16 "inc/front.h"
 var $2825=(($2783+($2824<<3))|0); //@line 16 "inc/front.h"
 var $2826=HEAPF64[(($2825)>>3)]; //@line 60 "src/read.cpp"
 var $ld$356$0=(($2825)|0);
 var $2826$$SHADOW$0=HEAP32[(($ld$356$0)>>2)];
 var $ld$357$1=(($2825+4)|0);
 var $2826$$SHADOW$1=HEAP32[(($ld$357$1)>>2)];
 var $2827=((($f_i418_sroa_55_5)-($2761))|0); //@line 16 "inc/front.h"
 var $2828=$2827&$storemerge_i_i_i423; //@line 16 "inc/front.h"
 var $2829=(($2783+($2828<<3))|0); //@line 16 "inc/front.h"
 var $2830=HEAPF64[(($2829)>>3)]; //@line 61 "src/read.cpp"
 var $ld$358$0=(($2829)|0);
 var $2830$$SHADOW$0=HEAP32[(($ld$358$0)>>2)];
 var $ld$359$1=(($2829+4)|0);
 var $2830$$SHADOW$1=HEAP32[(($ld$359$1)>>2)];
 var $2831=((($2811)-($2759))|0); //@line 16 "inc/front.h"
 var $2832=$2831&$storemerge_i_i_i423; //@line 16 "inc/front.h"
 var $2833=(($2783+($2832<<3))|0); //@line 16 "inc/front.h"
 var $2834=HEAPF64[(($2833)>>3)]; //@line 61 "src/read.cpp"
 var $ld$360$0=(($2833)|0);
 var $2834$$SHADOW$0=HEAP32[(($ld$360$0)>>2)];
 var $ld$361$1=(($2833+4)|0);
 var $2834$$SHADOW$1=HEAP32[(($ld$361$1)>>2)];
 var $2835=((($2831)-($2761))|0); //@line 16 "inc/front.h"
 var $2836=$2835&$storemerge_i_i_i423; //@line 16 "inc/front.h"
 var $2837=(($2783+($2836<<3))|0); //@line 16 "inc/front.h"
 var $2838=($2814)-($2819); //@line 59 "src/read.cpp"
 var $2839=($2838)+($2822); //@line 60 "src/read.cpp"
 var $2840=($2839)-($2826); //@line 60 "src/read.cpp"
 var $2841=($2840)+($2830); //@line 61 "src/read.cpp"
 var $2842=($2841)-($2834); //@line 61 "src/read.cpp"
 var $2843=HEAPF64[(($2837)>>3)]; //@line 62 "src/read.cpp"
 var $ld$362$0=(($2837)|0);
 var $2843$$SHADOW$0=HEAP32[(($ld$362$0)>>2)];
 var $ld$363$1=(($2837+4)|0);
 var $2843$$SHADOW$1=HEAP32[(($ld$363$1)>>2)];
 var $2844=($2842)+($2843); //@line 62 "src/read.cpp"
 var $2845=HEAP32[(($2791)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2846=HEAP32[(($2793)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $2847=HEAP32[(($2846)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$364$0=4;
 var $$etemp$364$1=0;

 var $$etemp$365$0=4;
 var $$etemp$365$1=0;

 var $2848=$2847; //@line 25 "src/rcdecoder.cpp"
 var $2849=HEAP32[(($2848)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2850=(($2849+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $2851=HEAP32[(($2850)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $2852=(($2845+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2851]($2847,$2852) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=546;break; } else { label=560;break; }
 case 546: 
 var $2853=(($2845+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $2854=HEAP32[(($2853)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2855=(($2845+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $2856=HEAP32[(($2855)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2857=((($2854)-($2856))|0); //@line 26 "src/rcdecoder.cpp"
 var $2858=HEAP32[(($2852)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $2859=(((($2857>>>0))/(($2858>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i410)>>2)]=$2859; //@line 26 "src/rcdecoder.cpp"
 var $2860=$2847; //@line 27 "src/rcdecoder.cpp"
 var $2861=HEAP32[(($2860)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2862=(($2861+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $2863=HEAP32[(($2862)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $2864=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$2863]($2847,$l_i_i_i410,$r_i_i_i411) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=547;break; } else { label=560;break; }
 case 547: 
 var $2865=HEAP32[(($2852)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2866=HEAP32[(($l_i_i_i410)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2867=(Math_imul($2865,$2866)|0); //@line 28 "src/rcdecoder.cpp"
 var $2868=HEAP32[(($2855)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $2869=((($2868)+($2867))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($2855)>>2)]=$2869; //@line 28 "src/rcdecoder.cpp"
 var $2870=HEAP32[(($r_i_i_i411)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $2871=(Math_imul($2865,$2870)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($2852)>>2)]=$2871; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($2845) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=548;break; } else { label=560;break; }
 case 548: 
 var $$etemp$366$0=4;
 var $$etemp$366$1=0;

 var $$etemp$367$0=4;
 var $$etemp$367$1=0;

 var $2872=($2864>>>0)>30; //@line 51 "inc/pcdecoder.inl"
 if($2872){label=549;break;}else{label=551;break;} //@line 51 "inc/pcdecoder.inl"
 case 549: 
 var $2874=((($2864)-(31))|0); //@line 52 "inc/pcdecoder.inl"
 var $2875=HEAP32[(($2791)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $2876$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2875,$2874) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2876$0=$2876$r;var $2876$1=tempRet0;if (!__THREW__) { label=550;break; } else { label=560;break; }
 case 550: 
 var $2877$0=$2874;
 var $2877$1=0;
 var $$etemp$368$0=1;
 var $$etemp$368$1=0;
 var $2878$0=_bitshift64Shl($$etemp$368$0,$$etemp$368$1,$2877$0);var $2878$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $2879$0=_i64Add($2878$0,$2878$1,$2876$0,$2876$1);var $2879$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2844; var $2880$0=HEAP32[((tempDoublePtr)>>2)];var $2880$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$369$0=-1;
 var $$etemp$369$1=-1;
 var $2881$0=$2880$0^$$etemp$369$0;
 var $2881$1=$2880$1^$$etemp$369$1;
 var $2882$0=($2881$1>>>2)|(0<<30);
 var $2882$1=(0>>>2)|(0<<30);
 var $2883$0=($2881$1>>31)|((((((($2881$1|0)<0))|0)?-1:0))<<1);
 var $2883$1=((((((($2881$1|0)<0))|0)?-1:0))>>31)|((((((($2881$1|0)<0))|0)?-1:0))<<1);
 var $2884$0=($2883$1>>>3)|(0<<29);
 var $2884$1=(0>>>3)|(0<<29);
 var $2885$0=$2882$0^$2884$0;
 var $2885$1=$2882$1^$2884$1;
 var $2886$0=_i64Add($2885$0,$2885$1,$2879$0,$2879$1);var $2886$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $2887$0=($2886$0>>>29)|($2886$1<<3);
 var $2887$1=($2886$1>>>29)|(0<<3);
 var $$etemp$370$0=0;
 var $$etemp$370$1=0;
 var $2888$0=_i64Subtract($$etemp$370$0,$$etemp$370$1,$2887$0,$2887$1);var $2888$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2889$0=($2888$1>>>3)|(0<<29);
 var $2889$1=(0>>>3)|(0<<29);
 var $2890$0=$2889$0^$2886$0;
 var $2890$1=$2889$1^$2886$1;
 var $2891$0=(0<<2)|(0>>>30);
 var $2891$1=($2890$0<<2)|(0>>>30);
 var $$etemp$371$0=0;
 var $$etemp$371$1=-4;
 var $2892$0=$2891$0^$$etemp$371$0;
 var $2892$1=$2891$1^$$etemp$371$1;
 var $_01255_in$1=$2892$1;var $_01255_in$0=$2892$0;label=555;break; //@line 56 "inc/pcdecoder.inl"
 case 551: 
 var $2894=($2864>>>0)<30; //@line undefined "inc/pcdecoder.inl"
 if($2894){label=552;break;}else{label=554;break;} //@line undefined "inc/pcdecoder.inl"
 case 552: 
 var $2896=(((29)-($2864))|0); //@line 59 "inc/pcdecoder.inl"
 var $2897=HEAP32[(($2791)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $2898$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($2897,$2896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $2898$0=$2898$r;var $2898$1=tempRet0;if (!__THREW__) { label=553;break; } else { label=560;break; }
 case 553: 
 var $2899$0=$2896;
 var $2899$1=0;
 var $$etemp$372$0=1;
 var $$etemp$372$1=0;
 var $2900$0=_bitshift64Shl($$etemp$372$0,$$etemp$372$1,$2899$0);var $2900$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $2901$0=_i64Add($2900$0,$2900$1,$2898$0,$2898$1);var $2901$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$2844; var $2902$0=HEAP32[((tempDoublePtr)>>2)];var $2902$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$373$0=-1;
 var $$etemp$373$1=-1;
 var $2903$0=$2902$0^$$etemp$373$0;
 var $2903$1=$2902$1^$$etemp$373$1;
 var $2904$0=($2903$1>>>2)|(0<<30);
 var $2904$1=(0>>>2)|(0<<30);
 var $2905$0=($2903$1>>31)|((((((($2903$1|0)<0))|0)?-1:0))<<1);
 var $2905$1=((((((($2903$1|0)<0))|0)?-1:0))>>31)|((((((($2903$1|0)<0))|0)?-1:0))<<1);
 var $2906$0=($2905$1>>>3)|(0<<29);
 var $2906$1=(0>>>3)|(0<<29);
 var $2907$0=$2904$0^$2906$0;
 var $2907$1=$2904$1^$2906$1;
 var $2908$0=_i64Subtract($2907$0,$2907$1,$2901$0,$2901$1);var $2908$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $2909$0=($2908$0>>>29)|($2908$1<<3);
 var $2909$1=($2908$1>>>29)|(0<<3);
 var $$etemp$374$0=0;
 var $$etemp$374$1=0;
 var $2910$0=_i64Subtract($$etemp$374$0,$$etemp$374$1,$2909$0,$2909$1);var $2910$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $2911$0=($2910$1>>>3)|(0<<29);
 var $2911$1=(0>>>3)|(0<<29);
 var $2912$0=$2911$0^$2908$0;
 var $2912$1=$2911$1^$2908$1;
 var $2913$0=(0<<2)|(0>>>30);
 var $2913$1=($2912$0<<2)|(0>>>30);
 var $$etemp$375$0=0;
 var $$etemp$375$1=-4;
 var $2914$0=$2913$0^$$etemp$375$0;
 var $2914$1=$2913$1^$$etemp$375$1;
 var $_01255_in$1=$2914$1;var $_01255_in$0=$2914$0;label=555;break; //@line 63 "inc/pcdecoder.inl"
 case 554: 
 HEAPF64[(tempDoublePtr)>>3]=$2844; var $2916$0=HEAP32[((tempDoublePtr)>>2)];var $2916$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$376$0=0;
 var $$etemp$376$1=-4;
 var $2917$0=$2916$0&$$etemp$376$0;
 var $2917$1=$2916$1&$$etemp$376$1;
 var $_01255_in$1=$2917$1;var $_01255_in$0=$2917$0;label=555;break; //@line 66 "inc/pcdecoder.inl"
 case 555: 
 var $_01255_in$0;
 var $_01255_in$1;
 var $_01255=(HEAP32[((tempDoublePtr)>>2)]=$_01255_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01255_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $2918=(($_21263+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21263)>>3)]=$_01255; //@line 65 "src/read.cpp"
 var $_01256=1;var $f_i418_sroa_55_6=$f_i418_sroa_55_5;label=556;break; //@line 22 "inc/front.h"
 case 556: 
 var $f_i418_sroa_55_6;
 var $_01256;
 var $2920=((($f_i418_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $2921=$f_i418_sroa_55_6&$storemerge_i_i_i423; //@line 23 "inc/front.h"
 var $2922=(($2783+($2921<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2922)>>3)]=$_01255; //@line 23 "inc/front.h"
 var $2923=((($_01256)-(1))|0); //@line 23 "inc/front.h"
 var $2924=($2923|0)==0; //@line 23 "inc/front.h"
 if($2924){label=557;break;}else{var $_01256=$2923;var $f_i418_sroa_55_6=$2920;label=556;break;} //@line 23 "inc/front.h"
 case 557: 
 var $2925=((($x_i419_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21263=$2918;var $f_i418_sroa_55_5=$2920;var $x_i419_0=$2925;label=544;break; //@line 49 "src/read.cpp"
 case 558: 
 var $2927$0 = ___cxa_find_matching_catch(-1, -1); var $2927$1 = tempRet0;
 var $2928=$2927$0;
 var $2929=$2927$1;
 var $2930=($2750|0)==0;
 if($2930){var $_01264=$2928;var $_01265=$2929;label=570;break;}else{label=559;break;}
 case 559: 
 _free($2750);
 var $_01264=$2928;var $_01265=$2929;label=570;break;
 case 560: 
 var $2933$0 = ___cxa_find_matching_catch(-1, -1); var $2933$1 = tempRet0;
 var $2934=$2933$0;
 var $2935=$2933$1;
 var $2936=($2775|0)==0; //@line 11 "inc/front.h"
 if($2936){var $_01264=$2934;var $_01265=$2935;label=570;break;}else{label=561;break;} //@line 11 "inc/front.h"
 case 561: 
 _free($2775);
 var $_01264=$2934;var $_01265=$2935;label=570;break; //@line 11 "inc/front.h"
 case 562: 
 var $2938=((($y_i420_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11262=$_21263;var $f_i418_sroa_55_3=$f_i418_sroa_55_5;var $y_i420_0=$2938;label=542;break; //@line 48 "src/read.cpp"
 case 563: 
 var $2940=((($z_i421_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01261=$_11262;var $f_i418_sroa_55_1=$f_i418_sroa_55_3;var $z_i421_0=$2940;label=540;break; //@line 47 "src/read.cpp"
 case 564: 
 var $2942=($2754|0)==0; //@line 69 "src/read.cpp"
 if($2942){label=566;break;}else{label=565;break;} //@line 69 "src/read.cpp"
 case 565: 
 _free($2754);
 label=566;break; //@line 69 "src/read.cpp"
 case 566: 
 var $2944=HEAP32[(($rm_i416)>>2)]; //@line 70 "src/read.cpp"
 var $2945=($2944|0)==0; //@line 70 "src/read.cpp"
 if($2945){label=568;break;}else{label=567;break;} //@line 70 "src/read.cpp"
 case 567: 
 var $2947=$2944; //@line 70 "src/read.cpp"
 var $2948=HEAP32[(($2947)>>2)]; //@line 70 "src/read.cpp"
 var $2949=(($2948+4)|0); //@line 70 "src/read.cpp"
 var $2950=HEAP32[(($2949)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$2950]($2944); //@line 70 "src/read.cpp"
 label=568;break; //@line 70 "src/read.cpp"
 case 568: 
 var $2952=($2775|0)==0; //@line 11 "inc/front.h"
 if($2952){label=1285;break;}else{label=569;break;} //@line 11 "inc/front.h"
 case 569: 
 _free($2775);
 label=1285;break; //@line 11 "inc/front.h"
 case 570: 
 var $_01265;
 var $_01264;
 var $2953$0=$_01264;
 var $2953$1=0;
 var $2954$0=$2953$0;
 var $2954$1=$_01265;
 ___resumeException($2954$0) //@line 71 "src/read.cpp"
 case 571: 
 var $2956=HEAP32[(($3)>>2)]; //@line 181 "src/read.cpp"
 var $2957=HEAP32[(($4)>>2)]; //@line 181 "src/read.cpp"
 var $2958=HEAP32[(($5)>>2)]; //@line 181 "src/read.cpp"
 var $2959=HEAP32[(($6)>>2)]; //@line 181 "src/read.cpp"
 var $$etemp$377$0=4;
 var $$etemp$377$1=0;

 var $2960=__Znwj(48); //@line 41 "src/read.cpp"
 var $2961=$2960; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($2961,0,65,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=572;break; } else { label=600;break; } //@line 41 "src/read.cpp"
 case 572: 
 var $2963=$2960; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i452)>>2)]=$2963; //@line 71 "src/read.cpp"
 var $2964=__Znwj(12); //@line 42 "src/read.cpp"
 var $2965=(($2964+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $2966=$2965; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2966)>>2)]=$2956; //@line 34 "inc/pcdecoder.inl"
 var $2967=(($2964+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $2968=$2967; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($2968)>>2)]=$rm_i452; //@line 34 "inc/pcdecoder.inl"
 var $2969=((($2957)+(1))|0); //@line 10 "inc/front.h"
 var $2970=((($2958)+(1))|0); //@line 10 "inc/front.h"
 var $2971=(Math_imul($2969,$2970)|0); //@line 10 "inc/front.h"
 var $2972=((($2957)+(2))|0); //@line 9 "inc/front.h"
 var $2973=((($2972)+($2971))|0); //@line 9 "inc/front.h"
 var $2974=((($2973)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i459=$2974;label=573;break; //@line 45 "inc/front.h"
 case 573: 
 var $storemerge_i_i_i459;
 var $2976=((($storemerge_i_i_i459)+(1))|0); //@line 45 "inc/front.h"
 var $2977=$storemerge_i_i_i459&$2976; //@line 45 "inc/front.h"
 var $2978=($2977|0)==0; //@line 45 "inc/front.h"
 if($2978){label=575;break;}else{label=574;break;} //@line 45 "inc/front.h"
 case 574: 
 var $2980=$storemerge_i_i_i459|$2976; //@line 45 "inc/front.h"
 var $storemerge_i_i_i459=$2980;label=573;break; //@line 45 "inc/front.h"
 case 575: 
 var $2981$0=_llvm_umul_with_overflow_i32($2976,8);
 var $2981$1=tempRet0;
 var $2982=$2981$1;
 var $2983=$2981$0;
 var $2984=($2982?-1:$2983); //@line 9 "inc/front.h"
 var $2985=(function() { try { __THREW__ = 0; return __Znwj($2984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=579;break; } else { label=576;break; }
 case 576: 
 var $2987$0 = ___cxa_find_matching_catch(-1, -1); var $2987$1 = tempRet0;
 var $2988=$2987$1;
 var $2989=($2988|0)<0;
 if($2989){label=577;break;}else{label=578;break;}
 case 577: 
 var $2991=$2987$0;
 ___cxa_call_unexpected($2991);
 throw "Reached an unreachable!";
 case 578: 
 ___resumeException($2987$0)
 case 579: 
 var $2993=$2985; //@line 9 "inc/front.h"
 var $_01249=$2971;var $f_i454_sroa_55_0=0;label=580;break; //@line 22 "inc/front.h"
 case 580: 
 var $f_i454_sroa_55_0;
 var $_01249;
 var $2995=((($f_i454_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $2996=$f_i454_sroa_55_0&$storemerge_i_i_i459; //@line 23 "inc/front.h"
 var $2997=(($2993+($2996<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($2997)>>3)]=0; //@line 23 "inc/front.h"
 var $2998=((($_01249)-(1))|0); //@line 23 "inc/front.h"
 var $2999=($2998|0)==0; //@line 23 "inc/front.h"
 if($2999){label=581;break;}else{var $_01249=$2998;var $f_i454_sroa_55_0=$2995;label=580;break;} //@line 23 "inc/front.h"
 case 581: 
 var $3000=(($2964+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3001=$3000; //@line 50 "inc/pcdecoder.inl"
 var $3002=(($2964+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3003=$3002; //@line 50 "inc/pcdecoder.inl"
 var $_01250=$_01052;var $f_i454_sroa_55_1=$2995;var $z_i457_0=0;label=582;break; //@line 47 "src/read.cpp"
 case 582: 
 var $z_i457_0;
 var $f_i454_sroa_55_1;
 var $_01250;
 var $3005=($z_i457_0>>>0)<($2959>>>0); //@line 47 "src/read.cpp"
 if($3005){var $_01248=$2969;var $f_i454_sroa_55_2=$f_i454_sroa_55_1;label=583;break;}else{label=606;break;} //@line 47 "src/read.cpp"
 case 583: 
 var $f_i454_sroa_55_2;
 var $_01248;
 var $3007=((($f_i454_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3008=$f_i454_sroa_55_2&$storemerge_i_i_i459; //@line 23 "inc/front.h"
 var $3009=(($2993+($3008<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3009)>>3)]=0; //@line 23 "inc/front.h"
 var $3010=((($_01248)-(1))|0); //@line 23 "inc/front.h"
 var $3011=($3010|0)==0; //@line 23 "inc/front.h"
 if($3011){var $_11251=$_01250;var $f_i454_sroa_55_3=$3007;var $y_i456_0=0;label=584;break;}else{var $_01248=$3010;var $f_i454_sroa_55_2=$3007;label=583;break;} //@line 23 "inc/front.h"
 case 584: 
 var $y_i456_0;
 var $f_i454_sroa_55_3;
 var $_11251;
 var $3012=($y_i456_0>>>0)<($2958>>>0); //@line 48 "src/read.cpp"
 if($3012){var $_01247=1;var $f_i454_sroa_55_4=$f_i454_sroa_55_3;label=585;break;}else{label=605;break;} //@line 48 "src/read.cpp"
 case 585: 
 var $f_i454_sroa_55_4;
 var $_01247;
 var $3014=((($f_i454_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3015=$f_i454_sroa_55_4&$storemerge_i_i_i459; //@line 23 "inc/front.h"
 var $3016=(($2993+($3015<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3016)>>3)]=0; //@line 23 "inc/front.h"
 var $3017=((($_01247)-(1))|0); //@line 23 "inc/front.h"
 var $3018=($3017|0)==0; //@line 23 "inc/front.h"
 if($3018){var $_21252=$_11251;var $f_i454_sroa_55_5=$3014;var $x_i455_0=0;label=586;break;}else{var $_01247=$3017;var $f_i454_sroa_55_4=$3014;label=585;break;} //@line 23 "inc/front.h"
 case 586: 
 var $x_i455_0;
 var $f_i454_sroa_55_5;
 var $_21252;
 var $3019=($x_i455_0>>>0)<($2957>>>0); //@line 49 "src/read.cpp"
 if($3019){label=587;break;}else{label=604;break;} //@line 49 "src/read.cpp"
 case 587: 
 var $3021=((($f_i454_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3022=$3021&$storemerge_i_i_i459; //@line 16 "inc/front.h"
 var $3023=(($2993+($3022<<3))|0); //@line 16 "inc/front.h"
 var $3024=HEAPF64[(($3023)>>3)]; //@line 59 "src/read.cpp"
 var $ld$378$0=(($3023)|0);
 var $3024$$SHADOW$0=HEAP32[(($ld$378$0)>>2)];
 var $ld$379$1=(($3023+4)|0);
 var $3024$$SHADOW$1=HEAP32[(($ld$379$1)>>2)];
 var $3025=((($f_i454_sroa_55_5)-($2969))|0); //@line 16 "inc/front.h"
 var $3026=((($3025)-($2971))|0); //@line 16 "inc/front.h"
 var $3027=$3026&$storemerge_i_i_i459; //@line 16 "inc/front.h"
 var $3028=(($2993+($3027<<3))|0); //@line 16 "inc/front.h"
 var $3029=HEAPF64[(($3028)>>3)]; //@line 59 "src/read.cpp"
 var $ld$380$0=(($3028)|0);
 var $3029$$SHADOW$0=HEAP32[(($ld$380$0)>>2)];
 var $ld$381$1=(($3028+4)|0);
 var $3029$$SHADOW$1=HEAP32[(($ld$381$1)>>2)];
 var $3030=$3025&$storemerge_i_i_i459; //@line 16 "inc/front.h"
 var $3031=(($2993+($3030<<3))|0); //@line 16 "inc/front.h"
 var $3032=HEAPF64[(($3031)>>3)]; //@line 60 "src/read.cpp"
 var $ld$382$0=(($3031)|0);
 var $3032$$SHADOW$0=HEAP32[(($ld$382$0)>>2)];
 var $ld$383$1=(($3031+4)|0);
 var $3032$$SHADOW$1=HEAP32[(($ld$383$1)>>2)];
 var $3033=((($3021)-($2971))|0); //@line 16 "inc/front.h"
 var $3034=$3033&$storemerge_i_i_i459; //@line 16 "inc/front.h"
 var $3035=(($2993+($3034<<3))|0); //@line 16 "inc/front.h"
 var $3036=HEAPF64[(($3035)>>3)]; //@line 60 "src/read.cpp"
 var $ld$384$0=(($3035)|0);
 var $3036$$SHADOW$0=HEAP32[(($ld$384$0)>>2)];
 var $ld$385$1=(($3035+4)|0);
 var $3036$$SHADOW$1=HEAP32[(($ld$385$1)>>2)];
 var $3037=((($f_i454_sroa_55_5)-($2971))|0); //@line 16 "inc/front.h"
 var $3038=$3037&$storemerge_i_i_i459; //@line 16 "inc/front.h"
 var $3039=(($2993+($3038<<3))|0); //@line 16 "inc/front.h"
 var $3040=HEAPF64[(($3039)>>3)]; //@line 61 "src/read.cpp"
 var $ld$386$0=(($3039)|0);
 var $3040$$SHADOW$0=HEAP32[(($ld$386$0)>>2)];
 var $ld$387$1=(($3039+4)|0);
 var $3040$$SHADOW$1=HEAP32[(($ld$387$1)>>2)];
 var $3041=((($3021)-($2969))|0); //@line 16 "inc/front.h"
 var $3042=$3041&$storemerge_i_i_i459; //@line 16 "inc/front.h"
 var $3043=(($2993+($3042<<3))|0); //@line 16 "inc/front.h"
 var $3044=HEAPF64[(($3043)>>3)]; //@line 61 "src/read.cpp"
 var $ld$388$0=(($3043)|0);
 var $3044$$SHADOW$0=HEAP32[(($ld$388$0)>>2)];
 var $ld$389$1=(($3043+4)|0);
 var $3044$$SHADOW$1=HEAP32[(($ld$389$1)>>2)];
 var $3045=((($3041)-($2971))|0); //@line 16 "inc/front.h"
 var $3046=$3045&$storemerge_i_i_i459; //@line 16 "inc/front.h"
 var $3047=(($2993+($3046<<3))|0); //@line 16 "inc/front.h"
 var $3048=($3024)-($3029); //@line 59 "src/read.cpp"
 var $3049=($3048)+($3032); //@line 60 "src/read.cpp"
 var $3050=($3049)-($3036); //@line 60 "src/read.cpp"
 var $3051=($3050)+($3040); //@line 61 "src/read.cpp"
 var $3052=($3051)-($3044); //@line 61 "src/read.cpp"
 var $3053=HEAPF64[(($3047)>>3)]; //@line 62 "src/read.cpp"
 var $ld$390$0=(($3047)|0);
 var $3053$$SHADOW$0=HEAP32[(($ld$390$0)>>2)];
 var $ld$391$1=(($3047+4)|0);
 var $3053$$SHADOW$1=HEAP32[(($ld$391$1)>>2)];
 var $3054=($3052)+($3053); //@line 62 "src/read.cpp"
 var $3055=HEAP32[(($3001)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3056=HEAP32[(($3003)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3057=HEAP32[(($3056)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$392$0=4;
 var $$etemp$392$1=0;

 var $$etemp$393$0=4;
 var $$etemp$393$1=0;

 var $3058=$3057; //@line 25 "src/rcdecoder.cpp"
 var $3059=HEAP32[(($3058)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3060=(($3059+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3061=HEAP32[(($3060)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3062=(($3055+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3061]($3057,$3062) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=588;break; } else { label=602;break; }
 case 588: 
 var $3063=(($3055+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3064=HEAP32[(($3063)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3065=(($3055+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3066=HEAP32[(($3065)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3067=((($3064)-($3066))|0); //@line 26 "src/rcdecoder.cpp"
 var $3068=HEAP32[(($3062)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3069=(((($3067>>>0))/(($3068>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i446)>>2)]=$3069; //@line 26 "src/rcdecoder.cpp"
 var $3070=$3057; //@line 27 "src/rcdecoder.cpp"
 var $3071=HEAP32[(($3070)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3072=(($3071+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3073=HEAP32[(($3072)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3074=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3073]($3057,$l_i_i_i446,$r_i_i_i447) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=589;break; } else { label=602;break; }
 case 589: 
 var $3075=HEAP32[(($3062)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3076=HEAP32[(($l_i_i_i446)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3077=(Math_imul($3075,$3076)|0); //@line 28 "src/rcdecoder.cpp"
 var $3078=HEAP32[(($3065)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3079=((($3078)+($3077))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3065)>>2)]=$3079; //@line 28 "src/rcdecoder.cpp"
 var $3080=HEAP32[(($r_i_i_i447)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3081=(Math_imul($3075,$3080)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3062)>>2)]=$3081; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3055) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=590;break; } else { label=602;break; }
 case 590: 
 var $$etemp$394$0=4;
 var $$etemp$394$1=0;

 var $$etemp$395$0=4;
 var $$etemp$395$1=0;

 var $3082=($3074>>>0)>32; //@line 51 "inc/pcdecoder.inl"
 if($3082){label=591;break;}else{label=593;break;} //@line 51 "inc/pcdecoder.inl"
 case 591: 
 var $3084=((($3074)-(33))|0); //@line 52 "inc/pcdecoder.inl"
 var $3085=HEAP32[(($3001)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3086$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3085,$3084) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3086$0=$3086$r;var $3086$1=tempRet0;if (!__THREW__) { label=592;break; } else { label=602;break; }
 case 592: 
 var $3087$0=$3084;
 var $3087$1=0;
 var $$etemp$396$0=1;
 var $$etemp$396$1=0;
 var $3088$0=_bitshift64Shl($$etemp$396$0,$$etemp$396$1,$3087$0);var $3088$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $3089$0=_i64Add($3088$0,$3088$1,$3086$0,$3086$1);var $3089$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3054; var $3090$0=HEAP32[((tempDoublePtr)>>2)];var $3090$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$397$0=-1;
 var $$etemp$397$1=-1;
 var $3091$0=$3090$0^$$etemp$397$0;
 var $3091$1=$3090$1^$$etemp$397$1;
 var $3092$0=$3091$1;
 var $3092$1=0;
 var $3093$0=($3091$1>>31)|((((((($3091$1|0)<0))|0)?-1:0))<<1);
 var $3093$1=((((((($3091$1|0)<0))|0)?-1:0))>>31)|((((((($3091$1|0)<0))|0)?-1:0))<<1);
 var $3094$0=($3093$1>>>1)|(0<<31);
 var $3094$1=(0>>>1)|(0<<31);
 var $3095$0=$3092$0^$3094$0;
 var $3095$1=$3092$1^$3094$1;
 var $3096$0=_i64Add($3095$0,$3095$1,$3089$0,$3089$1);var $3096$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $3097$0=($3096$0>>>31)|($3096$1<<1);
 var $3097$1=($3096$1>>>31)|(0<<1);
 var $$etemp$398$0=0;
 var $$etemp$398$1=0;
 var $3098$0=_i64Subtract($$etemp$398$0,$$etemp$398$1,$3097$0,$3097$1);var $3098$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3099$0=($3098$1>>>1)|(0<<31);
 var $3099$1=(0>>>1)|(0<<31);
 var $3100$0=$3099$0^$3096$0;
 var $3100$1=$3099$1^$3096$1;
 var $3101$0=0;
 var $3101$1=$3100$0;
 var $$etemp$399$0=0;
 var $$etemp$399$1=-1;
 var $3102$0=$3101$0^$$etemp$399$0;
 var $3102$1=$3101$1^$$etemp$399$1;
 var $_01244_in$1=$3102$1;var $_01244_in$0=$3102$0;label=597;break; //@line 56 "inc/pcdecoder.inl"
 case 593: 
 var $3104=($3074>>>0)<32; //@line undefined "inc/pcdecoder.inl"
 if($3104){label=594;break;}else{label=596;break;} //@line undefined "inc/pcdecoder.inl"
 case 594: 
 var $3106=(((31)-($3074))|0); //@line 59 "inc/pcdecoder.inl"
 var $3107=HEAP32[(($3001)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3108$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3107,$3106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3108$0=$3108$r;var $3108$1=tempRet0;if (!__THREW__) { label=595;break; } else { label=602;break; }
 case 595: 
 var $3109$0=$3106;
 var $3109$1=0;
 var $$etemp$400$0=1;
 var $$etemp$400$1=0;
 var $3110$0=_bitshift64Shl($$etemp$400$0,$$etemp$400$1,$3109$0);var $3110$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $3111$0=_i64Add($3110$0,$3110$1,$3108$0,$3108$1);var $3111$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3054; var $3112$0=HEAP32[((tempDoublePtr)>>2)];var $3112$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$401$0=-1;
 var $$etemp$401$1=-1;
 var $3113$0=$3112$0^$$etemp$401$0;
 var $3113$1=$3112$1^$$etemp$401$1;
 var $3114$0=$3113$1;
 var $3114$1=0;
 var $3115$0=($3113$1>>31)|((((((($3113$1|0)<0))|0)?-1:0))<<1);
 var $3115$1=((((((($3113$1|0)<0))|0)?-1:0))>>31)|((((((($3113$1|0)<0))|0)?-1:0))<<1);
 var $3116$0=($3115$1>>>1)|(0<<31);
 var $3116$1=(0>>>1)|(0<<31);
 var $3117$0=$3114$0^$3116$0;
 var $3117$1=$3114$1^$3116$1;
 var $3118$0=_i64Subtract($3117$0,$3117$1,$3111$0,$3111$1);var $3118$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $3119$0=($3118$0>>>31)|($3118$1<<1);
 var $3119$1=($3118$1>>>31)|(0<<1);
 var $$etemp$402$0=0;
 var $$etemp$402$1=0;
 var $3120$0=_i64Subtract($$etemp$402$0,$$etemp$402$1,$3119$0,$3119$1);var $3120$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3121$0=($3120$1>>>1)|(0<<31);
 var $3121$1=(0>>>1)|(0<<31);
 var $3122$0=$3121$0^$3118$0;
 var $3122$1=$3121$1^$3118$1;
 var $3123$0=0;
 var $3123$1=$3122$0;
 var $$etemp$403$0=0;
 var $$etemp$403$1=-1;
 var $3124$0=$3123$0^$$etemp$403$0;
 var $3124$1=$3123$1^$$etemp$403$1;
 var $_01244_in$1=$3124$1;var $_01244_in$0=$3124$0;label=597;break; //@line 63 "inc/pcdecoder.inl"
 case 596: 
 HEAPF64[(tempDoublePtr)>>3]=$3054; var $3126$0=HEAP32[((tempDoublePtr)>>2)];var $3126$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$404$0=0;
 var $$etemp$404$1=-1;
 var $3127$0=$3126$0&$$etemp$404$0;
 var $3127$1=$3126$1&$$etemp$404$1;
 var $_01244_in$1=$3127$1;var $_01244_in$0=$3127$0;label=597;break; //@line 66 "inc/pcdecoder.inl"
 case 597: 
 var $_01244_in$0;
 var $_01244_in$1;
 var $_01244=(HEAP32[((tempDoublePtr)>>2)]=$_01244_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01244_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $3128=(($_21252+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21252)>>3)]=$_01244; //@line 65 "src/read.cpp"
 var $_01245=1;var $f_i454_sroa_55_6=$f_i454_sroa_55_5;label=598;break; //@line 22 "inc/front.h"
 case 598: 
 var $f_i454_sroa_55_6;
 var $_01245;
 var $3130=((($f_i454_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3131=$f_i454_sroa_55_6&$storemerge_i_i_i459; //@line 23 "inc/front.h"
 var $3132=(($2993+($3131<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3132)>>3)]=$_01244; //@line 23 "inc/front.h"
 var $3133=((($_01245)-(1))|0); //@line 23 "inc/front.h"
 var $3134=($3133|0)==0; //@line 23 "inc/front.h"
 if($3134){label=599;break;}else{var $_01245=$3133;var $f_i454_sroa_55_6=$3130;label=598;break;} //@line 23 "inc/front.h"
 case 599: 
 var $3135=((($x_i455_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21252=$3128;var $f_i454_sroa_55_5=$3130;var $x_i455_0=$3135;label=586;break; //@line 49 "src/read.cpp"
 case 600: 
 var $3137$0 = ___cxa_find_matching_catch(-1, -1); var $3137$1 = tempRet0;
 var $3138=$3137$0;
 var $3139=$3137$1;
 var $3140=($2960|0)==0;
 if($3140){var $_01253=$3138;var $_01254=$3139;label=612;break;}else{label=601;break;}
 case 601: 
 _free($2960);
 var $_01253=$3138;var $_01254=$3139;label=612;break;
 case 602: 
 var $3143$0 = ___cxa_find_matching_catch(-1, -1); var $3143$1 = tempRet0;
 var $3144=$3143$0;
 var $3145=$3143$1;
 var $3146=($2985|0)==0; //@line 11 "inc/front.h"
 if($3146){var $_01253=$3144;var $_01254=$3145;label=612;break;}else{label=603;break;} //@line 11 "inc/front.h"
 case 603: 
 _free($2985);
 var $_01253=$3144;var $_01254=$3145;label=612;break; //@line 11 "inc/front.h"
 case 604: 
 var $3148=((($y_i456_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11251=$_21252;var $f_i454_sroa_55_3=$f_i454_sroa_55_5;var $y_i456_0=$3148;label=584;break; //@line 48 "src/read.cpp"
 case 605: 
 var $3150=((($z_i457_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01250=$_11251;var $f_i454_sroa_55_1=$f_i454_sroa_55_3;var $z_i457_0=$3150;label=582;break; //@line 47 "src/read.cpp"
 case 606: 
 var $3152=($2964|0)==0; //@line 69 "src/read.cpp"
 if($3152){label=608;break;}else{label=607;break;} //@line 69 "src/read.cpp"
 case 607: 
 _free($2964);
 label=608;break; //@line 69 "src/read.cpp"
 case 608: 
 var $3154=HEAP32[(($rm_i452)>>2)]; //@line 70 "src/read.cpp"
 var $3155=($3154|0)==0; //@line 70 "src/read.cpp"
 if($3155){label=610;break;}else{label=609;break;} //@line 70 "src/read.cpp"
 case 609: 
 var $3157=$3154; //@line 70 "src/read.cpp"
 var $3158=HEAP32[(($3157)>>2)]; //@line 70 "src/read.cpp"
 var $3159=(($3158+4)|0); //@line 70 "src/read.cpp"
 var $3160=HEAP32[(($3159)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3160]($3154); //@line 70 "src/read.cpp"
 label=610;break; //@line 70 "src/read.cpp"
 case 610: 
 var $3162=($2985|0)==0; //@line 11 "inc/front.h"
 if($3162){label=1285;break;}else{label=611;break;} //@line 11 "inc/front.h"
 case 611: 
 _free($2985);
 label=1285;break; //@line 11 "inc/front.h"
 case 612: 
 var $_01254;
 var $_01253;
 var $3163$0=$_01253;
 var $3163$1=0;
 var $3164$0=$3163$0;
 var $3164$1=$_01254;
 ___resumeException($3164$0) //@line 71 "src/read.cpp"
 case 613: 
 var $3166=HEAP32[(($3)>>2)]; //@line 182 "src/read.cpp"
 var $3167=HEAP32[(($4)>>2)]; //@line 182 "src/read.cpp"
 var $3168=HEAP32[(($5)>>2)]; //@line 182 "src/read.cpp"
 var $3169=HEAP32[(($6)>>2)]; //@line 182 "src/read.cpp"
 var $$etemp$405$0=4;
 var $$etemp$405$1=0;

 var $3170=__Znwj(48); //@line 41 "src/read.cpp"
 var $3171=$3170; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3171,0,69,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=614;break; } else { label=642;break; } //@line 41 "src/read.cpp"
 case 614: 
 var $3173=$3170; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i488)>>2)]=$3173; //@line 71 "src/read.cpp"
 var $3174=__Znwj(12); //@line 42 "src/read.cpp"
 var $3175=(($3174+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3176=$3175; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3176)>>2)]=$3166; //@line 34 "inc/pcdecoder.inl"
 var $3177=(($3174+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3178=$3177; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3178)>>2)]=$rm_i488; //@line 34 "inc/pcdecoder.inl"
 var $3179=((($3167)+(1))|0); //@line 10 "inc/front.h"
 var $3180=((($3168)+(1))|0); //@line 10 "inc/front.h"
 var $3181=(Math_imul($3179,$3180)|0); //@line 10 "inc/front.h"
 var $3182=((($3167)+(2))|0); //@line 9 "inc/front.h"
 var $3183=((($3182)+($3181))|0); //@line 9 "inc/front.h"
 var $3184=((($3183)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i495=$3184;label=615;break; //@line 45 "inc/front.h"
 case 615: 
 var $storemerge_i_i_i495;
 var $3186=((($storemerge_i_i_i495)+(1))|0); //@line 45 "inc/front.h"
 var $3187=$storemerge_i_i_i495&$3186; //@line 45 "inc/front.h"
 var $3188=($3187|0)==0; //@line 45 "inc/front.h"
 if($3188){label=617;break;}else{label=616;break;} //@line 45 "inc/front.h"
 case 616: 
 var $3190=$storemerge_i_i_i495|$3186; //@line 45 "inc/front.h"
 var $storemerge_i_i_i495=$3190;label=615;break; //@line 45 "inc/front.h"
 case 617: 
 var $3191$0=_llvm_umul_with_overflow_i32($3186,8);
 var $3191$1=tempRet0;
 var $3192=$3191$1;
 var $3193=$3191$0;
 var $3194=($3192?-1:$3193); //@line 9 "inc/front.h"
 var $3195=(function() { try { __THREW__ = 0; return __Znwj($3194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=621;break; } else { label=618;break; }
 case 618: 
 var $3197$0 = ___cxa_find_matching_catch(-1, -1); var $3197$1 = tempRet0;
 var $3198=$3197$1;
 var $3199=($3198|0)<0;
 if($3199){label=619;break;}else{label=620;break;}
 case 619: 
 var $3201=$3197$0;
 ___cxa_call_unexpected($3201);
 throw "Reached an unreachable!";
 case 620: 
 ___resumeException($3197$0)
 case 621: 
 var $3203=$3195; //@line 9 "inc/front.h"
 var $_01236=$3181;var $f_i490_sroa_55_0=0;label=622;break; //@line 22 "inc/front.h"
 case 622: 
 var $f_i490_sroa_55_0;
 var $_01236;
 var $3205=((($f_i490_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3206=$f_i490_sroa_55_0&$storemerge_i_i_i495; //@line 23 "inc/front.h"
 var $3207=(($3203+($3206<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3207)>>3)]=0; //@line 23 "inc/front.h"
 var $3208=((($_01236)-(1))|0); //@line 23 "inc/front.h"
 var $3209=($3208|0)==0; //@line 23 "inc/front.h"
 if($3209){label=623;break;}else{var $_01236=$3208;var $f_i490_sroa_55_0=$3205;label=622;break;} //@line 23 "inc/front.h"
 case 623: 
 var $3210=(($3174+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3211=$3210; //@line 50 "inc/pcdecoder.inl"
 var $3212=(($3174+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3213=$3212; //@line 50 "inc/pcdecoder.inl"
 var $_01237=$_01052;var $f_i490_sroa_55_1=$3205;var $z_i493_0=0;label=624;break; //@line 47 "src/read.cpp"
 case 624: 
 var $z_i493_0;
 var $f_i490_sroa_55_1;
 var $_01237;
 var $3215=($z_i493_0>>>0)<($3169>>>0); //@line 47 "src/read.cpp"
 if($3215){var $_01235=$3179;var $f_i490_sroa_55_2=$f_i490_sroa_55_1;label=625;break;}else{label=648;break;} //@line 47 "src/read.cpp"
 case 625: 
 var $f_i490_sroa_55_2;
 var $_01235;
 var $3217=((($f_i490_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3218=$f_i490_sroa_55_2&$storemerge_i_i_i495; //@line 23 "inc/front.h"
 var $3219=(($3203+($3218<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3219)>>3)]=0; //@line 23 "inc/front.h"
 var $3220=((($_01235)-(1))|0); //@line 23 "inc/front.h"
 var $3221=($3220|0)==0; //@line 23 "inc/front.h"
 if($3221){var $_11238=$_01237;var $f_i490_sroa_55_3=$3217;var $y_i492_0=0;label=626;break;}else{var $_01235=$3220;var $f_i490_sroa_55_2=$3217;label=625;break;} //@line 23 "inc/front.h"
 case 626: 
 var $y_i492_0;
 var $f_i490_sroa_55_3;
 var $_11238;
 var $3222=($y_i492_0>>>0)<($3168>>>0); //@line 48 "src/read.cpp"
 if($3222){var $_01234=1;var $f_i490_sroa_55_4=$f_i490_sroa_55_3;label=627;break;}else{label=647;break;} //@line 48 "src/read.cpp"
 case 627: 
 var $f_i490_sroa_55_4;
 var $_01234;
 var $3224=((($f_i490_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3225=$f_i490_sroa_55_4&$storemerge_i_i_i495; //@line 23 "inc/front.h"
 var $3226=(($3203+($3225<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3226)>>3)]=0; //@line 23 "inc/front.h"
 var $3227=((($_01234)-(1))|0); //@line 23 "inc/front.h"
 var $3228=($3227|0)==0; //@line 23 "inc/front.h"
 if($3228){var $_21239=$_11238;var $f_i490_sroa_55_5=$3224;var $x_i491_0=0;label=628;break;}else{var $_01234=$3227;var $f_i490_sroa_55_4=$3224;label=627;break;} //@line 23 "inc/front.h"
 case 628: 
 var $x_i491_0;
 var $f_i490_sroa_55_5;
 var $_21239;
 var $3229=($x_i491_0>>>0)<($3167>>>0); //@line 49 "src/read.cpp"
 if($3229){label=629;break;}else{label=646;break;} //@line 49 "src/read.cpp"
 case 629: 
 var $3231=((($f_i490_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3232=$3231&$storemerge_i_i_i495; //@line 16 "inc/front.h"
 var $3233=(($3203+($3232<<3))|0); //@line 16 "inc/front.h"
 var $3234=HEAPF64[(($3233)>>3)]; //@line 59 "src/read.cpp"
 var $ld$406$0=(($3233)|0);
 var $3234$$SHADOW$0=HEAP32[(($ld$406$0)>>2)];
 var $ld$407$1=(($3233+4)|0);
 var $3234$$SHADOW$1=HEAP32[(($ld$407$1)>>2)];
 var $3235=((($f_i490_sroa_55_5)-($3179))|0); //@line 16 "inc/front.h"
 var $3236=((($3235)-($3181))|0); //@line 16 "inc/front.h"
 var $3237=$3236&$storemerge_i_i_i495; //@line 16 "inc/front.h"
 var $3238=(($3203+($3237<<3))|0); //@line 16 "inc/front.h"
 var $3239=HEAPF64[(($3238)>>3)]; //@line 59 "src/read.cpp"
 var $ld$408$0=(($3238)|0);
 var $3239$$SHADOW$0=HEAP32[(($ld$408$0)>>2)];
 var $ld$409$1=(($3238+4)|0);
 var $3239$$SHADOW$1=HEAP32[(($ld$409$1)>>2)];
 var $3240=$3235&$storemerge_i_i_i495; //@line 16 "inc/front.h"
 var $3241=(($3203+($3240<<3))|0); //@line 16 "inc/front.h"
 var $3242=HEAPF64[(($3241)>>3)]; //@line 60 "src/read.cpp"
 var $ld$410$0=(($3241)|0);
 var $3242$$SHADOW$0=HEAP32[(($ld$410$0)>>2)];
 var $ld$411$1=(($3241+4)|0);
 var $3242$$SHADOW$1=HEAP32[(($ld$411$1)>>2)];
 var $3243=((($3231)-($3181))|0); //@line 16 "inc/front.h"
 var $3244=$3243&$storemerge_i_i_i495; //@line 16 "inc/front.h"
 var $3245=(($3203+($3244<<3))|0); //@line 16 "inc/front.h"
 var $3246=HEAPF64[(($3245)>>3)]; //@line 60 "src/read.cpp"
 var $ld$412$0=(($3245)|0);
 var $3246$$SHADOW$0=HEAP32[(($ld$412$0)>>2)];
 var $ld$413$1=(($3245+4)|0);
 var $3246$$SHADOW$1=HEAP32[(($ld$413$1)>>2)];
 var $3247=((($f_i490_sroa_55_5)-($3181))|0); //@line 16 "inc/front.h"
 var $3248=$3247&$storemerge_i_i_i495; //@line 16 "inc/front.h"
 var $3249=(($3203+($3248<<3))|0); //@line 16 "inc/front.h"
 var $3250=HEAPF64[(($3249)>>3)]; //@line 61 "src/read.cpp"
 var $ld$414$0=(($3249)|0);
 var $3250$$SHADOW$0=HEAP32[(($ld$414$0)>>2)];
 var $ld$415$1=(($3249+4)|0);
 var $3250$$SHADOW$1=HEAP32[(($ld$415$1)>>2)];
 var $3251=((($3231)-($3179))|0); //@line 16 "inc/front.h"
 var $3252=$3251&$storemerge_i_i_i495; //@line 16 "inc/front.h"
 var $3253=(($3203+($3252<<3))|0); //@line 16 "inc/front.h"
 var $3254=HEAPF64[(($3253)>>3)]; //@line 61 "src/read.cpp"
 var $ld$416$0=(($3253)|0);
 var $3254$$SHADOW$0=HEAP32[(($ld$416$0)>>2)];
 var $ld$417$1=(($3253+4)|0);
 var $3254$$SHADOW$1=HEAP32[(($ld$417$1)>>2)];
 var $3255=((($3251)-($3181))|0); //@line 16 "inc/front.h"
 var $3256=$3255&$storemerge_i_i_i495; //@line 16 "inc/front.h"
 var $3257=(($3203+($3256<<3))|0); //@line 16 "inc/front.h"
 var $3258=($3234)-($3239); //@line 59 "src/read.cpp"
 var $3259=($3258)+($3242); //@line 60 "src/read.cpp"
 var $3260=($3259)-($3246); //@line 60 "src/read.cpp"
 var $3261=($3260)+($3250); //@line 61 "src/read.cpp"
 var $3262=($3261)-($3254); //@line 61 "src/read.cpp"
 var $3263=HEAPF64[(($3257)>>3)]; //@line 62 "src/read.cpp"
 var $ld$418$0=(($3257)|0);
 var $3263$$SHADOW$0=HEAP32[(($ld$418$0)>>2)];
 var $ld$419$1=(($3257+4)|0);
 var $3263$$SHADOW$1=HEAP32[(($ld$419$1)>>2)];
 var $3264=($3262)+($3263); //@line 62 "src/read.cpp"
 var $3265=HEAP32[(($3211)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3266=HEAP32[(($3213)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3267=HEAP32[(($3266)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$420$0=4;
 var $$etemp$420$1=0;

 var $$etemp$421$0=4;
 var $$etemp$421$1=0;

 var $3268=$3267; //@line 25 "src/rcdecoder.cpp"
 var $3269=HEAP32[(($3268)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3270=(($3269+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3271=HEAP32[(($3270)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3272=(($3265+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3271]($3267,$3272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=630;break; } else { label=644;break; }
 case 630: 
 var $3273=(($3265+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3274=HEAP32[(($3273)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3275=(($3265+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3276=HEAP32[(($3275)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3277=((($3274)-($3276))|0); //@line 26 "src/rcdecoder.cpp"
 var $3278=HEAP32[(($3272)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3279=(((($3277>>>0))/(($3278>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i482)>>2)]=$3279; //@line 26 "src/rcdecoder.cpp"
 var $3280=$3267; //@line 27 "src/rcdecoder.cpp"
 var $3281=HEAP32[(($3280)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3282=(($3281+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3283=HEAP32[(($3282)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3284=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3283]($3267,$l_i_i_i482,$r_i_i_i483) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=631;break; } else { label=644;break; }
 case 631: 
 var $3285=HEAP32[(($3272)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3286=HEAP32[(($l_i_i_i482)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3287=(Math_imul($3285,$3286)|0); //@line 28 "src/rcdecoder.cpp"
 var $3288=HEAP32[(($3275)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3289=((($3288)+($3287))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3275)>>2)]=$3289; //@line 28 "src/rcdecoder.cpp"
 var $3290=HEAP32[(($r_i_i_i483)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3291=(Math_imul($3285,$3290)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3272)>>2)]=$3291; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3265) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=632;break; } else { label=644;break; }
 case 632: 
 var $$etemp$422$0=4;
 var $$etemp$422$1=0;

 var $$etemp$423$0=4;
 var $$etemp$423$1=0;

 var $3292=($3284>>>0)>34; //@line 51 "inc/pcdecoder.inl"
 if($3292){label=633;break;}else{label=635;break;} //@line 51 "inc/pcdecoder.inl"
 case 633: 
 var $3294=((($3284)-(35))|0); //@line 52 "inc/pcdecoder.inl"
 var $3295=HEAP32[(($3211)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3296$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3295,$3294) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3296$0=$3296$r;var $3296$1=tempRet0;if (!__THREW__) { label=634;break; } else { label=644;break; }
 case 634: 
 var $3297$0=$3294;
 var $3297$1=0;
 var $$etemp$424$0=1;
 var $$etemp$424$1=0;
 var $3298$0=_bitshift64Shl($$etemp$424$0,$$etemp$424$1,$3297$0);var $3298$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $3299$0=_i64Add($3298$0,$3298$1,$3296$0,$3296$1);var $3299$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3264; var $3300$0=HEAP32[((tempDoublePtr)>>2)];var $3300$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$425$0=-1;
 var $$etemp$425$1=-1;
 var $3301$0=$3300$0^$$etemp$425$0;
 var $3301$1=$3300$1^$$etemp$425$1;
 var $3302$0=($3301$0>>>30)|($3301$1<<2);
 var $3302$1=($3301$1>>>30)|(0<<2);
 var $3303$0=($3301$1>>31)|((((((($3301$1|0)<0))|0)?-1:0))<<1);
 var $3303$1=((((((($3301$1|0)<0))|0)?-1:0))>>31)|((((((($3301$1|0)<0))|0)?-1:0))<<1);
 var $3304$0=($3303$0>>>31)|($3303$1<<1);
 var $3304$1=($3303$1>>>31)|(0<<1);
 var $3305$0=$3302$0^$3304$0;
 var $3305$1=$3302$1^$3304$1;
 var $3306$0=_i64Add($3305$0,$3305$1,$3299$0,$3299$1);var $3306$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $3307$0=($3306$1>>>1)|(0<<31);
 var $3307$1=(0>>>1)|(0<<31);
 var $$etemp$426$0=0;
 var $$etemp$426$1=0;
 var $3308$0=_i64Subtract($$etemp$426$0,$$etemp$426$1,$3307$0,$3307$1);var $3308$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3309$0=($3308$0>>>31)|($3308$1<<1);
 var $3309$1=($3308$1>>>31)|(0<<1);
 var $3310$0=$3309$0^$3306$0;
 var $3310$1=$3309$1^$3306$1;
 var $3311$0=($3310$0<<30)|(0>>>2);
 var $3311$1=($3310$1<<30)|($3310$0>>>2);
 var $$etemp$427$0=-1073741824;
 var $$etemp$427$1=-1;
 var $3312$0=$3311$0^$$etemp$427$0;
 var $3312$1=$3311$1^$$etemp$427$1;
 var $_01232_in$1=$3312$1;var $_01232_in$0=$3312$0;label=639;break; //@line 56 "inc/pcdecoder.inl"
 case 635: 
 var $3314=($3284>>>0)<34; //@line undefined "inc/pcdecoder.inl"
 if($3314){label=636;break;}else{label=638;break;} //@line undefined "inc/pcdecoder.inl"
 case 636: 
 var $3316=(((33)-($3284))|0); //@line 59 "inc/pcdecoder.inl"
 var $3317=HEAP32[(($3211)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3318$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3317,$3316) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3318$0=$3318$r;var $3318$1=tempRet0;if (!__THREW__) { label=637;break; } else { label=644;break; }
 case 637: 
 var $3319$0=$3316;
 var $3319$1=0;
 var $$etemp$428$0=1;
 var $$etemp$428$1=0;
 var $3320$0=_bitshift64Shl($$etemp$428$0,$$etemp$428$1,$3319$0);var $3320$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $3321$0=_i64Add($3320$0,$3320$1,$3318$0,$3318$1);var $3321$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3264; var $3322$0=HEAP32[((tempDoublePtr)>>2)];var $3322$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$429$0=-1;
 var $$etemp$429$1=-1;
 var $3323$0=$3322$0^$$etemp$429$0;
 var $3323$1=$3322$1^$$etemp$429$1;
 var $3324$0=($3323$0>>>30)|($3323$1<<2);
 var $3324$1=($3323$1>>>30)|(0<<2);
 var $3325$0=($3323$1>>31)|((((((($3323$1|0)<0))|0)?-1:0))<<1);
 var $3325$1=((((((($3323$1|0)<0))|0)?-1:0))>>31)|((((((($3323$1|0)<0))|0)?-1:0))<<1);
 var $3326$0=($3325$0>>>31)|($3325$1<<1);
 var $3326$1=($3325$1>>>31)|(0<<1);
 var $3327$0=$3324$0^$3326$0;
 var $3327$1=$3324$1^$3326$1;
 var $3328$0=_i64Subtract($3327$0,$3327$1,$3321$0,$3321$1);var $3328$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $3329$0=($3328$1>>>1)|(0<<31);
 var $3329$1=(0>>>1)|(0<<31);
 var $$etemp$430$0=0;
 var $$etemp$430$1=0;
 var $3330$0=_i64Subtract($$etemp$430$0,$$etemp$430$1,$3329$0,$3329$1);var $3330$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3331$0=($3330$0>>>31)|($3330$1<<1);
 var $3331$1=($3330$1>>>31)|(0<<1);
 var $3332$0=$3331$0^$3328$0;
 var $3332$1=$3331$1^$3328$1;
 var $3333$0=($3332$0<<30)|(0>>>2);
 var $3333$1=($3332$1<<30)|($3332$0>>>2);
 var $$etemp$431$0=-1073741824;
 var $$etemp$431$1=-1;
 var $3334$0=$3333$0^$$etemp$431$0;
 var $3334$1=$3333$1^$$etemp$431$1;
 var $_01232_in$1=$3334$1;var $_01232_in$0=$3334$0;label=639;break; //@line 63 "inc/pcdecoder.inl"
 case 638: 
 HEAPF64[(tempDoublePtr)>>3]=$3264; var $3336$0=HEAP32[((tempDoublePtr)>>2)];var $3336$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$432$0=-1073741824;
 var $$etemp$432$1=-1;
 var $3337$0=$3336$0&$$etemp$432$0;
 var $3337$1=$3336$1&$$etemp$432$1;
 var $_01232_in$1=$3337$1;var $_01232_in$0=$3337$0;label=639;break; //@line 66 "inc/pcdecoder.inl"
 case 639: 
 var $_01232_in$0;
 var $_01232_in$1;
 var $_01232=(HEAP32[((tempDoublePtr)>>2)]=$_01232_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01232_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $3338=(($_21239+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21239)>>3)]=$_01232; //@line 65 "src/read.cpp"
 var $_01233=1;var $f_i490_sroa_55_6=$f_i490_sroa_55_5;label=640;break; //@line 22 "inc/front.h"
 case 640: 
 var $f_i490_sroa_55_6;
 var $_01233;
 var $3340=((($f_i490_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3341=$f_i490_sroa_55_6&$storemerge_i_i_i495; //@line 23 "inc/front.h"
 var $3342=(($3203+($3341<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3342)>>3)]=$_01232; //@line 23 "inc/front.h"
 var $3343=((($_01233)-(1))|0); //@line 23 "inc/front.h"
 var $3344=($3343|0)==0; //@line 23 "inc/front.h"
 if($3344){label=641;break;}else{var $_01233=$3343;var $f_i490_sroa_55_6=$3340;label=640;break;} //@line 23 "inc/front.h"
 case 641: 
 var $3345=((($x_i491_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21239=$3338;var $f_i490_sroa_55_5=$3340;var $x_i491_0=$3345;label=628;break; //@line 49 "src/read.cpp"
 case 642: 
 var $3347$0 = ___cxa_find_matching_catch(-1, -1); var $3347$1 = tempRet0;
 var $3348=$3347$0;
 var $3349=$3347$1;
 var $3350=($3170|0)==0;
 if($3350){var $_01241=$3348;var $_01242=$3349;label=654;break;}else{label=643;break;}
 case 643: 
 _free($3170);
 var $_01241=$3348;var $_01242=$3349;label=654;break;
 case 644: 
 var $3353$0 = ___cxa_find_matching_catch(-1, -1); var $3353$1 = tempRet0;
 var $3354=$3353$0;
 var $3355=$3353$1;
 var $3356=($3195|0)==0; //@line 11 "inc/front.h"
 if($3356){var $_01241=$3354;var $_01242=$3355;label=654;break;}else{label=645;break;} //@line 11 "inc/front.h"
 case 645: 
 _free($3195);
 var $_01241=$3354;var $_01242=$3355;label=654;break; //@line 11 "inc/front.h"
 case 646: 
 var $3358=((($y_i492_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11238=$_21239;var $f_i490_sroa_55_3=$f_i490_sroa_55_5;var $y_i492_0=$3358;label=626;break; //@line 48 "src/read.cpp"
 case 647: 
 var $3360=((($z_i493_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01237=$_11238;var $f_i490_sroa_55_1=$f_i490_sroa_55_3;var $z_i493_0=$3360;label=624;break; //@line 47 "src/read.cpp"
 case 648: 
 var $3362=($3174|0)==0; //@line 69 "src/read.cpp"
 if($3362){label=650;break;}else{label=649;break;} //@line 69 "src/read.cpp"
 case 649: 
 _free($3174);
 label=650;break; //@line 69 "src/read.cpp"
 case 650: 
 var $3364=HEAP32[(($rm_i488)>>2)]; //@line 70 "src/read.cpp"
 var $3365=($3364|0)==0; //@line 70 "src/read.cpp"
 if($3365){label=652;break;}else{label=651;break;} //@line 70 "src/read.cpp"
 case 651: 
 var $3367=$3364; //@line 70 "src/read.cpp"
 var $3368=HEAP32[(($3367)>>2)]; //@line 70 "src/read.cpp"
 var $3369=(($3368+4)|0); //@line 70 "src/read.cpp"
 var $3370=HEAP32[(($3369)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3370]($3364); //@line 70 "src/read.cpp"
 label=652;break; //@line 70 "src/read.cpp"
 case 652: 
 var $3372=($3195|0)==0; //@line 11 "inc/front.h"
 if($3372){label=1285;break;}else{label=653;break;} //@line 11 "inc/front.h"
 case 653: 
 _free($3195);
 label=1285;break; //@line 11 "inc/front.h"
 case 654: 
 var $_01242;
 var $_01241;
 var $3373$0=$_01241;
 var $3373$1=0;
 var $3374$0=$3373$0;
 var $3374$1=$_01242;
 ___resumeException($3374$0) //@line 71 "src/read.cpp"
 case 655: 
 var $3376=HEAP32[(($3)>>2)]; //@line 183 "src/read.cpp"
 var $3377=HEAP32[(($4)>>2)]; //@line 183 "src/read.cpp"
 var $3378=HEAP32[(($5)>>2)]; //@line 183 "src/read.cpp"
 var $3379=HEAP32[(($6)>>2)]; //@line 183 "src/read.cpp"
 var $$etemp$433$0=4;
 var $$etemp$433$1=0;

 var $3380=__Znwj(48); //@line 41 "src/read.cpp"
 var $3381=$3380; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3381,0,73,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=656;break; } else { label=684;break; } //@line 41 "src/read.cpp"
 case 656: 
 var $3383=$3380; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i524)>>2)]=$3383; //@line 71 "src/read.cpp"
 var $3384=__Znwj(12); //@line 42 "src/read.cpp"
 var $3385=(($3384+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3386=$3385; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3386)>>2)]=$3376; //@line 34 "inc/pcdecoder.inl"
 var $3387=(($3384+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3388=$3387; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3388)>>2)]=$rm_i524; //@line 34 "inc/pcdecoder.inl"
 var $3389=((($3377)+(1))|0); //@line 10 "inc/front.h"
 var $3390=((($3378)+(1))|0); //@line 10 "inc/front.h"
 var $3391=(Math_imul($3389,$3390)|0); //@line 10 "inc/front.h"
 var $3392=((($3377)+(2))|0); //@line 9 "inc/front.h"
 var $3393=((($3392)+($3391))|0); //@line 9 "inc/front.h"
 var $3394=((($3393)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i531=$3394;label=657;break; //@line 45 "inc/front.h"
 case 657: 
 var $storemerge_i_i_i531;
 var $3396=((($storemerge_i_i_i531)+(1))|0); //@line 45 "inc/front.h"
 var $3397=$storemerge_i_i_i531&$3396; //@line 45 "inc/front.h"
 var $3398=($3397|0)==0; //@line 45 "inc/front.h"
 if($3398){label=659;break;}else{label=658;break;} //@line 45 "inc/front.h"
 case 658: 
 var $3400=$storemerge_i_i_i531|$3396; //@line 45 "inc/front.h"
 var $storemerge_i_i_i531=$3400;label=657;break; //@line 45 "inc/front.h"
 case 659: 
 var $3401$0=_llvm_umul_with_overflow_i32($3396,8);
 var $3401$1=tempRet0;
 var $3402=$3401$1;
 var $3403=$3401$0;
 var $3404=($3402?-1:$3403); //@line 9 "inc/front.h"
 var $3405=(function() { try { __THREW__ = 0; return __Znwj($3404) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=663;break; } else { label=660;break; }
 case 660: 
 var $3407$0 = ___cxa_find_matching_catch(-1, -1); var $3407$1 = tempRet0;
 var $3408=$3407$1;
 var $3409=($3408|0)<0;
 if($3409){label=661;break;}else{label=662;break;}
 case 661: 
 var $3411=$3407$0;
 ___cxa_call_unexpected($3411);
 throw "Reached an unreachable!";
 case 662: 
 ___resumeException($3407$0)
 case 663: 
 var $3413=$3405; //@line 9 "inc/front.h"
 var $_01221=$3391;var $f_i526_sroa_55_0=0;label=664;break; //@line 22 "inc/front.h"
 case 664: 
 var $f_i526_sroa_55_0;
 var $_01221;
 var $3415=((($f_i526_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3416=$f_i526_sroa_55_0&$storemerge_i_i_i531; //@line 23 "inc/front.h"
 var $3417=(($3413+($3416<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3417)>>3)]=0; //@line 23 "inc/front.h"
 var $3418=((($_01221)-(1))|0); //@line 23 "inc/front.h"
 var $3419=($3418|0)==0; //@line 23 "inc/front.h"
 if($3419){label=665;break;}else{var $_01221=$3418;var $f_i526_sroa_55_0=$3415;label=664;break;} //@line 23 "inc/front.h"
 case 665: 
 var $3420=(($3384+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3421=$3420; //@line 50 "inc/pcdecoder.inl"
 var $3422=(($3384+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3423=$3422; //@line 50 "inc/pcdecoder.inl"
 var $_01222=$_01052;var $f_i526_sroa_55_1=$3415;var $z_i529_0=0;label=666;break; //@line 47 "src/read.cpp"
 case 666: 
 var $z_i529_0;
 var $f_i526_sroa_55_1;
 var $_01222;
 var $3425=($z_i529_0>>>0)<($3379>>>0); //@line 47 "src/read.cpp"
 if($3425){var $_01220=$3389;var $f_i526_sroa_55_2=$f_i526_sroa_55_1;label=667;break;}else{label=690;break;} //@line 47 "src/read.cpp"
 case 667: 
 var $f_i526_sroa_55_2;
 var $_01220;
 var $3427=((($f_i526_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3428=$f_i526_sroa_55_2&$storemerge_i_i_i531; //@line 23 "inc/front.h"
 var $3429=(($3413+($3428<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3429)>>3)]=0; //@line 23 "inc/front.h"
 var $3430=((($_01220)-(1))|0); //@line 23 "inc/front.h"
 var $3431=($3430|0)==0; //@line 23 "inc/front.h"
 if($3431){var $_11223=$_01222;var $f_i526_sroa_55_3=$3427;var $y_i528_0=0;label=668;break;}else{var $_01220=$3430;var $f_i526_sroa_55_2=$3427;label=667;break;} //@line 23 "inc/front.h"
 case 668: 
 var $y_i528_0;
 var $f_i526_sroa_55_3;
 var $_11223;
 var $3432=($y_i528_0>>>0)<($3378>>>0); //@line 48 "src/read.cpp"
 if($3432){var $_01219=1;var $f_i526_sroa_55_4=$f_i526_sroa_55_3;label=669;break;}else{label=689;break;} //@line 48 "src/read.cpp"
 case 669: 
 var $f_i526_sroa_55_4;
 var $_01219;
 var $3434=((($f_i526_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3435=$f_i526_sroa_55_4&$storemerge_i_i_i531; //@line 23 "inc/front.h"
 var $3436=(($3413+($3435<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3436)>>3)]=0; //@line 23 "inc/front.h"
 var $3437=((($_01219)-(1))|0); //@line 23 "inc/front.h"
 var $3438=($3437|0)==0; //@line 23 "inc/front.h"
 if($3438){var $_21224=$_11223;var $f_i526_sroa_55_5=$3434;var $x_i527_0=0;label=670;break;}else{var $_01219=$3437;var $f_i526_sroa_55_4=$3434;label=669;break;} //@line 23 "inc/front.h"
 case 670: 
 var $x_i527_0;
 var $f_i526_sroa_55_5;
 var $_21224;
 var $3439=($x_i527_0>>>0)<($3377>>>0); //@line 49 "src/read.cpp"
 if($3439){label=671;break;}else{label=688;break;} //@line 49 "src/read.cpp"
 case 671: 
 var $3441=((($f_i526_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3442=$3441&$storemerge_i_i_i531; //@line 16 "inc/front.h"
 var $3443=(($3413+($3442<<3))|0); //@line 16 "inc/front.h"
 var $3444=HEAPF64[(($3443)>>3)]; //@line 59 "src/read.cpp"
 var $ld$434$0=(($3443)|0);
 var $3444$$SHADOW$0=HEAP32[(($ld$434$0)>>2)];
 var $ld$435$1=(($3443+4)|0);
 var $3444$$SHADOW$1=HEAP32[(($ld$435$1)>>2)];
 var $3445=((($f_i526_sroa_55_5)-($3389))|0); //@line 16 "inc/front.h"
 var $3446=((($3445)-($3391))|0); //@line 16 "inc/front.h"
 var $3447=$3446&$storemerge_i_i_i531; //@line 16 "inc/front.h"
 var $3448=(($3413+($3447<<3))|0); //@line 16 "inc/front.h"
 var $3449=HEAPF64[(($3448)>>3)]; //@line 59 "src/read.cpp"
 var $ld$436$0=(($3448)|0);
 var $3449$$SHADOW$0=HEAP32[(($ld$436$0)>>2)];
 var $ld$437$1=(($3448+4)|0);
 var $3449$$SHADOW$1=HEAP32[(($ld$437$1)>>2)];
 var $3450=$3445&$storemerge_i_i_i531; //@line 16 "inc/front.h"
 var $3451=(($3413+($3450<<3))|0); //@line 16 "inc/front.h"
 var $3452=HEAPF64[(($3451)>>3)]; //@line 60 "src/read.cpp"
 var $ld$438$0=(($3451)|0);
 var $3452$$SHADOW$0=HEAP32[(($ld$438$0)>>2)];
 var $ld$439$1=(($3451+4)|0);
 var $3452$$SHADOW$1=HEAP32[(($ld$439$1)>>2)];
 var $3453=((($3441)-($3391))|0); //@line 16 "inc/front.h"
 var $3454=$3453&$storemerge_i_i_i531; //@line 16 "inc/front.h"
 var $3455=(($3413+($3454<<3))|0); //@line 16 "inc/front.h"
 var $3456=HEAPF64[(($3455)>>3)]; //@line 60 "src/read.cpp"
 var $ld$440$0=(($3455)|0);
 var $3456$$SHADOW$0=HEAP32[(($ld$440$0)>>2)];
 var $ld$441$1=(($3455+4)|0);
 var $3456$$SHADOW$1=HEAP32[(($ld$441$1)>>2)];
 var $3457=((($f_i526_sroa_55_5)-($3391))|0); //@line 16 "inc/front.h"
 var $3458=$3457&$storemerge_i_i_i531; //@line 16 "inc/front.h"
 var $3459=(($3413+($3458<<3))|0); //@line 16 "inc/front.h"
 var $3460=HEAPF64[(($3459)>>3)]; //@line 61 "src/read.cpp"
 var $ld$442$0=(($3459)|0);
 var $3460$$SHADOW$0=HEAP32[(($ld$442$0)>>2)];
 var $ld$443$1=(($3459+4)|0);
 var $3460$$SHADOW$1=HEAP32[(($ld$443$1)>>2)];
 var $3461=((($3441)-($3389))|0); //@line 16 "inc/front.h"
 var $3462=$3461&$storemerge_i_i_i531; //@line 16 "inc/front.h"
 var $3463=(($3413+($3462<<3))|0); //@line 16 "inc/front.h"
 var $3464=HEAPF64[(($3463)>>3)]; //@line 61 "src/read.cpp"
 var $ld$444$0=(($3463)|0);
 var $3464$$SHADOW$0=HEAP32[(($ld$444$0)>>2)];
 var $ld$445$1=(($3463+4)|0);
 var $3464$$SHADOW$1=HEAP32[(($ld$445$1)>>2)];
 var $3465=((($3461)-($3391))|0); //@line 16 "inc/front.h"
 var $3466=$3465&$storemerge_i_i_i531; //@line 16 "inc/front.h"
 var $3467=(($3413+($3466<<3))|0); //@line 16 "inc/front.h"
 var $3468=($3444)-($3449); //@line 59 "src/read.cpp"
 var $3469=($3468)+($3452); //@line 60 "src/read.cpp"
 var $3470=($3469)-($3456); //@line 60 "src/read.cpp"
 var $3471=($3470)+($3460); //@line 61 "src/read.cpp"
 var $3472=($3471)-($3464); //@line 61 "src/read.cpp"
 var $3473=HEAPF64[(($3467)>>3)]; //@line 62 "src/read.cpp"
 var $ld$446$0=(($3467)|0);
 var $3473$$SHADOW$0=HEAP32[(($ld$446$0)>>2)];
 var $ld$447$1=(($3467+4)|0);
 var $3473$$SHADOW$1=HEAP32[(($ld$447$1)>>2)];
 var $3474=($3472)+($3473); //@line 62 "src/read.cpp"
 var $3475=HEAP32[(($3421)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3476=HEAP32[(($3423)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3477=HEAP32[(($3476)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$448$0=4;
 var $$etemp$448$1=0;

 var $$etemp$449$0=4;
 var $$etemp$449$1=0;

 var $3478=$3477; //@line 25 "src/rcdecoder.cpp"
 var $3479=HEAP32[(($3478)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3480=(($3479+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3481=HEAP32[(($3480)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3482=(($3475+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3481]($3477,$3482) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=672;break; } else { label=686;break; }
 case 672: 
 var $3483=(($3475+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3484=HEAP32[(($3483)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3485=(($3475+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3486=HEAP32[(($3485)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3487=((($3484)-($3486))|0); //@line 26 "src/rcdecoder.cpp"
 var $3488=HEAP32[(($3482)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3489=(((($3487>>>0))/(($3488>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i518)>>2)]=$3489; //@line 26 "src/rcdecoder.cpp"
 var $3490=$3477; //@line 27 "src/rcdecoder.cpp"
 var $3491=HEAP32[(($3490)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3492=(($3491+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3493=HEAP32[(($3492)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3494=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3493]($3477,$l_i_i_i518,$r_i_i_i519) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=673;break; } else { label=686;break; }
 case 673: 
 var $3495=HEAP32[(($3482)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3496=HEAP32[(($l_i_i_i518)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3497=(Math_imul($3495,$3496)|0); //@line 28 "src/rcdecoder.cpp"
 var $3498=HEAP32[(($3485)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3499=((($3498)+($3497))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3485)>>2)]=$3499; //@line 28 "src/rcdecoder.cpp"
 var $3500=HEAP32[(($r_i_i_i519)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3501=(Math_imul($3495,$3500)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3482)>>2)]=$3501; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3475) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=674;break; } else { label=686;break; }
 case 674: 
 var $$etemp$450$0=4;
 var $$etemp$450$1=0;

 var $$etemp$451$0=4;
 var $$etemp$451$1=0;

 var $3502=($3494>>>0)>36; //@line 51 "inc/pcdecoder.inl"
 if($3502){label=675;break;}else{label=677;break;} //@line 51 "inc/pcdecoder.inl"
 case 675: 
 var $3504=((($3494)-(37))|0); //@line 52 "inc/pcdecoder.inl"
 var $3505=HEAP32[(($3421)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3506$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3505,$3504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3506$0=$3506$r;var $3506$1=tempRet0;if (!__THREW__) { label=676;break; } else { label=686;break; }
 case 676: 
 var $3507$0=$3504;
 var $3507$1=0;
 var $$etemp$452$0=1;
 var $$etemp$452$1=0;
 var $3508$0=_bitshift64Shl($$etemp$452$0,$$etemp$452$1,$3507$0);var $3508$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $3509$0=_i64Add($3508$0,$3508$1,$3506$0,$3506$1);var $3509$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3474; var $3510$0=HEAP32[((tempDoublePtr)>>2)];var $3510$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$453$0=-1;
 var $$etemp$453$1=-1;
 var $3511$0=$3510$0^$$etemp$453$0;
 var $3511$1=$3510$1^$$etemp$453$1;
 var $3512$0=($3511$0>>>28)|($3511$1<<4);
 var $3512$1=($3511$1>>>28)|(0<<4);
 var $3513$0=($3511$1>>31)|((((((($3511$1|0)<0))|0)?-1:0))<<1);
 var $3513$1=((((((($3511$1|0)<0))|0)?-1:0))>>31)|((((((($3511$1|0)<0))|0)?-1:0))<<1);
 var $3514$0=($3513$0>>>29)|($3513$1<<3);
 var $3514$1=($3513$1>>>29)|(0<<3);
 var $3515$0=$3512$0^$3514$0;
 var $3515$1=$3512$1^$3514$1;
 var $3516$0=_i64Add($3515$0,$3515$1,$3509$0,$3509$1);var $3516$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $3517$0=($3516$1>>>3)|(0<<29);
 var $3517$1=(0>>>3)|(0<<29);
 var $$etemp$454$0=0;
 var $$etemp$454$1=0;
 var $3518$0=_i64Subtract($$etemp$454$0,$$etemp$454$1,$3517$0,$3517$1);var $3518$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3519$0=($3518$0>>>29)|($3518$1<<3);
 var $3519$1=($3518$1>>>29)|(0<<3);
 var $3520$0=$3519$0^$3516$0;
 var $3520$1=$3519$1^$3516$1;
 var $3521$0=($3520$0<<28)|(0>>>4);
 var $3521$1=($3520$1<<28)|($3520$0>>>4);
 var $$etemp$455$0=-268435456;
 var $$etemp$455$1=-1;
 var $3522$0=$3521$0^$$etemp$455$0;
 var $3522$1=$3521$1^$$etemp$455$1;
 var $_01217_in$1=$3522$1;var $_01217_in$0=$3522$0;label=681;break; //@line 56 "inc/pcdecoder.inl"
 case 677: 
 var $3524=($3494>>>0)<36; //@line undefined "inc/pcdecoder.inl"
 if($3524){label=678;break;}else{label=680;break;} //@line undefined "inc/pcdecoder.inl"
 case 678: 
 var $3526=(((35)-($3494))|0); //@line 59 "inc/pcdecoder.inl"
 var $3527=HEAP32[(($3421)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3528$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3527,$3526) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3528$0=$3528$r;var $3528$1=tempRet0;if (!__THREW__) { label=679;break; } else { label=686;break; }
 case 679: 
 var $3529$0=$3526;
 var $3529$1=0;
 var $$etemp$456$0=1;
 var $$etemp$456$1=0;
 var $3530$0=_bitshift64Shl($$etemp$456$0,$$etemp$456$1,$3529$0);var $3530$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $3531$0=_i64Add($3530$0,$3530$1,$3528$0,$3528$1);var $3531$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3474; var $3532$0=HEAP32[((tempDoublePtr)>>2)];var $3532$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$457$0=-1;
 var $$etemp$457$1=-1;
 var $3533$0=$3532$0^$$etemp$457$0;
 var $3533$1=$3532$1^$$etemp$457$1;
 var $3534$0=($3533$0>>>28)|($3533$1<<4);
 var $3534$1=($3533$1>>>28)|(0<<4);
 var $3535$0=($3533$1>>31)|((((((($3533$1|0)<0))|0)?-1:0))<<1);
 var $3535$1=((((((($3533$1|0)<0))|0)?-1:0))>>31)|((((((($3533$1|0)<0))|0)?-1:0))<<1);
 var $3536$0=($3535$0>>>29)|($3535$1<<3);
 var $3536$1=($3535$1>>>29)|(0<<3);
 var $3537$0=$3534$0^$3536$0;
 var $3537$1=$3534$1^$3536$1;
 var $3538$0=_i64Subtract($3537$0,$3537$1,$3531$0,$3531$1);var $3538$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $3539$0=($3538$1>>>3)|(0<<29);
 var $3539$1=(0>>>3)|(0<<29);
 var $$etemp$458$0=0;
 var $$etemp$458$1=0;
 var $3540$0=_i64Subtract($$etemp$458$0,$$etemp$458$1,$3539$0,$3539$1);var $3540$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3541$0=($3540$0>>>29)|($3540$1<<3);
 var $3541$1=($3540$1>>>29)|(0<<3);
 var $3542$0=$3541$0^$3538$0;
 var $3542$1=$3541$1^$3538$1;
 var $3543$0=($3542$0<<28)|(0>>>4);
 var $3543$1=($3542$1<<28)|($3542$0>>>4);
 var $$etemp$459$0=-268435456;
 var $$etemp$459$1=-1;
 var $3544$0=$3543$0^$$etemp$459$0;
 var $3544$1=$3543$1^$$etemp$459$1;
 var $_01217_in$1=$3544$1;var $_01217_in$0=$3544$0;label=681;break; //@line 63 "inc/pcdecoder.inl"
 case 680: 
 HEAPF64[(tempDoublePtr)>>3]=$3474; var $3546$0=HEAP32[((tempDoublePtr)>>2)];var $3546$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$460$0=-268435456;
 var $$etemp$460$1=-1;
 var $3547$0=$3546$0&$$etemp$460$0;
 var $3547$1=$3546$1&$$etemp$460$1;
 var $_01217_in$1=$3547$1;var $_01217_in$0=$3547$0;label=681;break; //@line 66 "inc/pcdecoder.inl"
 case 681: 
 var $_01217_in$0;
 var $_01217_in$1;
 var $_01217=(HEAP32[((tempDoublePtr)>>2)]=$_01217_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01217_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $3548=(($_21224+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21224)>>3)]=$_01217; //@line 65 "src/read.cpp"
 var $_01218=1;var $f_i526_sroa_55_6=$f_i526_sroa_55_5;label=682;break; //@line 22 "inc/front.h"
 case 682: 
 var $f_i526_sroa_55_6;
 var $_01218;
 var $3550=((($f_i526_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3551=$f_i526_sroa_55_6&$storemerge_i_i_i531; //@line 23 "inc/front.h"
 var $3552=(($3413+($3551<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3552)>>3)]=$_01217; //@line 23 "inc/front.h"
 var $3553=((($_01218)-(1))|0); //@line 23 "inc/front.h"
 var $3554=($3553|0)==0; //@line 23 "inc/front.h"
 if($3554){label=683;break;}else{var $_01218=$3553;var $f_i526_sroa_55_6=$3550;label=682;break;} //@line 23 "inc/front.h"
 case 683: 
 var $3555=((($x_i527_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21224=$3548;var $f_i526_sroa_55_5=$3550;var $x_i527_0=$3555;label=670;break; //@line 49 "src/read.cpp"
 case 684: 
 var $3557$0 = ___cxa_find_matching_catch(-1, -1); var $3557$1 = tempRet0;
 var $3558=$3557$0;
 var $3559=$3557$1;
 var $3560=($3380|0)==0;
 if($3560){var $_01225=$3558;var $_01228=$3559;label=696;break;}else{label=685;break;}
 case 685: 
 _free($3380);
 var $_01225=$3558;var $_01228=$3559;label=696;break;
 case 686: 
 var $3563$0 = ___cxa_find_matching_catch(-1, -1); var $3563$1 = tempRet0;
 var $3564=$3563$0;
 var $3565=$3563$1;
 var $3566=($3405|0)==0; //@line 11 "inc/front.h"
 if($3566){var $_01225=$3564;var $_01228=$3565;label=696;break;}else{label=687;break;} //@line 11 "inc/front.h"
 case 687: 
 _free($3405);
 var $_01225=$3564;var $_01228=$3565;label=696;break; //@line 11 "inc/front.h"
 case 688: 
 var $3568=((($y_i528_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11223=$_21224;var $f_i526_sroa_55_3=$f_i526_sroa_55_5;var $y_i528_0=$3568;label=668;break; //@line 48 "src/read.cpp"
 case 689: 
 var $3570=((($z_i529_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01222=$_11223;var $f_i526_sroa_55_1=$f_i526_sroa_55_3;var $z_i529_0=$3570;label=666;break; //@line 47 "src/read.cpp"
 case 690: 
 var $3572=($3384|0)==0; //@line 69 "src/read.cpp"
 if($3572){label=692;break;}else{label=691;break;} //@line 69 "src/read.cpp"
 case 691: 
 _free($3384);
 label=692;break; //@line 69 "src/read.cpp"
 case 692: 
 var $3574=HEAP32[(($rm_i524)>>2)]; //@line 70 "src/read.cpp"
 var $3575=($3574|0)==0; //@line 70 "src/read.cpp"
 if($3575){label=694;break;}else{label=693;break;} //@line 70 "src/read.cpp"
 case 693: 
 var $3577=$3574; //@line 70 "src/read.cpp"
 var $3578=HEAP32[(($3577)>>2)]; //@line 70 "src/read.cpp"
 var $3579=(($3578+4)|0); //@line 70 "src/read.cpp"
 var $3580=HEAP32[(($3579)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3580]($3574); //@line 70 "src/read.cpp"
 label=694;break; //@line 70 "src/read.cpp"
 case 694: 
 var $3582=($3405|0)==0; //@line 11 "inc/front.h"
 if($3582){label=1285;break;}else{label=695;break;} //@line 11 "inc/front.h"
 case 695: 
 _free($3405);
 label=1285;break; //@line 11 "inc/front.h"
 case 696: 
 var $_01228;
 var $_01225;
 var $3583$0=$_01225;
 var $3583$1=0;
 var $3584$0=$3583$0;
 var $3584$1=$_01228;
 ___resumeException($3584$0) //@line 71 "src/read.cpp"
 case 697: 
 var $3586=HEAP32[(($3)>>2)]; //@line 184 "src/read.cpp"
 var $3587=HEAP32[(($4)>>2)]; //@line 184 "src/read.cpp"
 var $3588=HEAP32[(($5)>>2)]; //@line 184 "src/read.cpp"
 var $3589=HEAP32[(($6)>>2)]; //@line 184 "src/read.cpp"
 var $$etemp$461$0=4;
 var $$etemp$461$1=0;

 var $3590=__Znwj(48); //@line 41 "src/read.cpp"
 var $3591=$3590; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3591,0,77,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=698;break; } else { label=726;break; } //@line 41 "src/read.cpp"
 case 698: 
 var $3593=$3590; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i560)>>2)]=$3593; //@line 71 "src/read.cpp"
 var $3594=__Znwj(12); //@line 42 "src/read.cpp"
 var $3595=(($3594+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3596=$3595; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3596)>>2)]=$3586; //@line 34 "inc/pcdecoder.inl"
 var $3597=(($3594+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3598=$3597; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3598)>>2)]=$rm_i560; //@line 34 "inc/pcdecoder.inl"
 var $3599=((($3587)+(1))|0); //@line 10 "inc/front.h"
 var $3600=((($3588)+(1))|0); //@line 10 "inc/front.h"
 var $3601=(Math_imul($3599,$3600)|0); //@line 10 "inc/front.h"
 var $3602=((($3587)+(2))|0); //@line 9 "inc/front.h"
 var $3603=((($3602)+($3601))|0); //@line 9 "inc/front.h"
 var $3604=((($3603)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i567=$3604;label=699;break; //@line 45 "inc/front.h"
 case 699: 
 var $storemerge_i_i_i567;
 var $3606=((($storemerge_i_i_i567)+(1))|0); //@line 45 "inc/front.h"
 var $3607=$storemerge_i_i_i567&$3606; //@line 45 "inc/front.h"
 var $3608=($3607|0)==0; //@line 45 "inc/front.h"
 if($3608){label=701;break;}else{label=700;break;} //@line 45 "inc/front.h"
 case 700: 
 var $3610=$storemerge_i_i_i567|$3606; //@line 45 "inc/front.h"
 var $storemerge_i_i_i567=$3610;label=699;break; //@line 45 "inc/front.h"
 case 701: 
 var $3611$0=_llvm_umul_with_overflow_i32($3606,8);
 var $3611$1=tempRet0;
 var $3612=$3611$1;
 var $3613=$3611$0;
 var $3614=($3612?-1:$3613); //@line 9 "inc/front.h"
 var $3615=(function() { try { __THREW__ = 0; return __Znwj($3614) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=705;break; } else { label=702;break; }
 case 702: 
 var $3617$0 = ___cxa_find_matching_catch(-1, -1); var $3617$1 = tempRet0;
 var $3618=$3617$1;
 var $3619=($3618|0)<0;
 if($3619){label=703;break;}else{label=704;break;}
 case 703: 
 var $3621=$3617$0;
 ___cxa_call_unexpected($3621);
 throw "Reached an unreachable!";
 case 704: 
 ___resumeException($3617$0)
 case 705: 
 var $3623=$3615; //@line 9 "inc/front.h"
 var $_01211=$3601;var $f_i562_sroa_55_0=0;label=706;break; //@line 22 "inc/front.h"
 case 706: 
 var $f_i562_sroa_55_0;
 var $_01211;
 var $3625=((($f_i562_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3626=$f_i562_sroa_55_0&$storemerge_i_i_i567; //@line 23 "inc/front.h"
 var $3627=(($3623+($3626<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3627)>>3)]=0; //@line 23 "inc/front.h"
 var $3628=((($_01211)-(1))|0); //@line 23 "inc/front.h"
 var $3629=($3628|0)==0; //@line 23 "inc/front.h"
 if($3629){label=707;break;}else{var $_01211=$3628;var $f_i562_sroa_55_0=$3625;label=706;break;} //@line 23 "inc/front.h"
 case 707: 
 var $3630=(($3594+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3631=$3630; //@line 50 "inc/pcdecoder.inl"
 var $3632=(($3594+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3633=$3632; //@line 50 "inc/pcdecoder.inl"
 var $_01212=$_01052;var $f_i562_sroa_55_1=$3625;var $z_i565_0=0;label=708;break; //@line 47 "src/read.cpp"
 case 708: 
 var $z_i565_0;
 var $f_i562_sroa_55_1;
 var $_01212;
 var $3635=($z_i565_0>>>0)<($3589>>>0); //@line 47 "src/read.cpp"
 if($3635){var $_01210=$3599;var $f_i562_sroa_55_2=$f_i562_sroa_55_1;label=709;break;}else{label=732;break;} //@line 47 "src/read.cpp"
 case 709: 
 var $f_i562_sroa_55_2;
 var $_01210;
 var $3637=((($f_i562_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3638=$f_i562_sroa_55_2&$storemerge_i_i_i567; //@line 23 "inc/front.h"
 var $3639=(($3623+($3638<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3639)>>3)]=0; //@line 23 "inc/front.h"
 var $3640=((($_01210)-(1))|0); //@line 23 "inc/front.h"
 var $3641=($3640|0)==0; //@line 23 "inc/front.h"
 if($3641){var $_11213=$_01212;var $f_i562_sroa_55_3=$3637;var $y_i564_0=0;label=710;break;}else{var $_01210=$3640;var $f_i562_sroa_55_2=$3637;label=709;break;} //@line 23 "inc/front.h"
 case 710: 
 var $y_i564_0;
 var $f_i562_sroa_55_3;
 var $_11213;
 var $3642=($y_i564_0>>>0)<($3588>>>0); //@line 48 "src/read.cpp"
 if($3642){var $_01209=1;var $f_i562_sroa_55_4=$f_i562_sroa_55_3;label=711;break;}else{label=731;break;} //@line 48 "src/read.cpp"
 case 711: 
 var $f_i562_sroa_55_4;
 var $_01209;
 var $3644=((($f_i562_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3645=$f_i562_sroa_55_4&$storemerge_i_i_i567; //@line 23 "inc/front.h"
 var $3646=(($3623+($3645<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3646)>>3)]=0; //@line 23 "inc/front.h"
 var $3647=((($_01209)-(1))|0); //@line 23 "inc/front.h"
 var $3648=($3647|0)==0; //@line 23 "inc/front.h"
 if($3648){var $_21214=$_11213;var $f_i562_sroa_55_5=$3644;var $x_i563_0=0;label=712;break;}else{var $_01209=$3647;var $f_i562_sroa_55_4=$3644;label=711;break;} //@line 23 "inc/front.h"
 case 712: 
 var $x_i563_0;
 var $f_i562_sroa_55_5;
 var $_21214;
 var $3649=($x_i563_0>>>0)<($3587>>>0); //@line 49 "src/read.cpp"
 if($3649){label=713;break;}else{label=730;break;} //@line 49 "src/read.cpp"
 case 713: 
 var $3651=((($f_i562_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3652=$3651&$storemerge_i_i_i567; //@line 16 "inc/front.h"
 var $3653=(($3623+($3652<<3))|0); //@line 16 "inc/front.h"
 var $3654=HEAPF64[(($3653)>>3)]; //@line 59 "src/read.cpp"
 var $ld$462$0=(($3653)|0);
 var $3654$$SHADOW$0=HEAP32[(($ld$462$0)>>2)];
 var $ld$463$1=(($3653+4)|0);
 var $3654$$SHADOW$1=HEAP32[(($ld$463$1)>>2)];
 var $3655=((($f_i562_sroa_55_5)-($3599))|0); //@line 16 "inc/front.h"
 var $3656=((($3655)-($3601))|0); //@line 16 "inc/front.h"
 var $3657=$3656&$storemerge_i_i_i567; //@line 16 "inc/front.h"
 var $3658=(($3623+($3657<<3))|0); //@line 16 "inc/front.h"
 var $3659=HEAPF64[(($3658)>>3)]; //@line 59 "src/read.cpp"
 var $ld$464$0=(($3658)|0);
 var $3659$$SHADOW$0=HEAP32[(($ld$464$0)>>2)];
 var $ld$465$1=(($3658+4)|0);
 var $3659$$SHADOW$1=HEAP32[(($ld$465$1)>>2)];
 var $3660=$3655&$storemerge_i_i_i567; //@line 16 "inc/front.h"
 var $3661=(($3623+($3660<<3))|0); //@line 16 "inc/front.h"
 var $3662=HEAPF64[(($3661)>>3)]; //@line 60 "src/read.cpp"
 var $ld$466$0=(($3661)|0);
 var $3662$$SHADOW$0=HEAP32[(($ld$466$0)>>2)];
 var $ld$467$1=(($3661+4)|0);
 var $3662$$SHADOW$1=HEAP32[(($ld$467$1)>>2)];
 var $3663=((($3651)-($3601))|0); //@line 16 "inc/front.h"
 var $3664=$3663&$storemerge_i_i_i567; //@line 16 "inc/front.h"
 var $3665=(($3623+($3664<<3))|0); //@line 16 "inc/front.h"
 var $3666=HEAPF64[(($3665)>>3)]; //@line 60 "src/read.cpp"
 var $ld$468$0=(($3665)|0);
 var $3666$$SHADOW$0=HEAP32[(($ld$468$0)>>2)];
 var $ld$469$1=(($3665+4)|0);
 var $3666$$SHADOW$1=HEAP32[(($ld$469$1)>>2)];
 var $3667=((($f_i562_sroa_55_5)-($3601))|0); //@line 16 "inc/front.h"
 var $3668=$3667&$storemerge_i_i_i567; //@line 16 "inc/front.h"
 var $3669=(($3623+($3668<<3))|0); //@line 16 "inc/front.h"
 var $3670=HEAPF64[(($3669)>>3)]; //@line 61 "src/read.cpp"
 var $ld$470$0=(($3669)|0);
 var $3670$$SHADOW$0=HEAP32[(($ld$470$0)>>2)];
 var $ld$471$1=(($3669+4)|0);
 var $3670$$SHADOW$1=HEAP32[(($ld$471$1)>>2)];
 var $3671=((($3651)-($3599))|0); //@line 16 "inc/front.h"
 var $3672=$3671&$storemerge_i_i_i567; //@line 16 "inc/front.h"
 var $3673=(($3623+($3672<<3))|0); //@line 16 "inc/front.h"
 var $3674=HEAPF64[(($3673)>>3)]; //@line 61 "src/read.cpp"
 var $ld$472$0=(($3673)|0);
 var $3674$$SHADOW$0=HEAP32[(($ld$472$0)>>2)];
 var $ld$473$1=(($3673+4)|0);
 var $3674$$SHADOW$1=HEAP32[(($ld$473$1)>>2)];
 var $3675=((($3671)-($3601))|0); //@line 16 "inc/front.h"
 var $3676=$3675&$storemerge_i_i_i567; //@line 16 "inc/front.h"
 var $3677=(($3623+($3676<<3))|0); //@line 16 "inc/front.h"
 var $3678=($3654)-($3659); //@line 59 "src/read.cpp"
 var $3679=($3678)+($3662); //@line 60 "src/read.cpp"
 var $3680=($3679)-($3666); //@line 60 "src/read.cpp"
 var $3681=($3680)+($3670); //@line 61 "src/read.cpp"
 var $3682=($3681)-($3674); //@line 61 "src/read.cpp"
 var $3683=HEAPF64[(($3677)>>3)]; //@line 62 "src/read.cpp"
 var $ld$474$0=(($3677)|0);
 var $3683$$SHADOW$0=HEAP32[(($ld$474$0)>>2)];
 var $ld$475$1=(($3677+4)|0);
 var $3683$$SHADOW$1=HEAP32[(($ld$475$1)>>2)];
 var $3684=($3682)+($3683); //@line 62 "src/read.cpp"
 var $3685=HEAP32[(($3631)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3686=HEAP32[(($3633)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3687=HEAP32[(($3686)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$476$0=4;
 var $$etemp$476$1=0;

 var $$etemp$477$0=4;
 var $$etemp$477$1=0;

 var $3688=$3687; //@line 25 "src/rcdecoder.cpp"
 var $3689=HEAP32[(($3688)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3690=(($3689+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3691=HEAP32[(($3690)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3692=(($3685+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3691]($3687,$3692) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=714;break; } else { label=728;break; }
 case 714: 
 var $3693=(($3685+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3694=HEAP32[(($3693)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3695=(($3685+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3696=HEAP32[(($3695)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3697=((($3694)-($3696))|0); //@line 26 "src/rcdecoder.cpp"
 var $3698=HEAP32[(($3692)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3699=(((($3697>>>0))/(($3698>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i554)>>2)]=$3699; //@line 26 "src/rcdecoder.cpp"
 var $3700=$3687; //@line 27 "src/rcdecoder.cpp"
 var $3701=HEAP32[(($3700)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3702=(($3701+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3703=HEAP32[(($3702)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3704=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3703]($3687,$l_i_i_i554,$r_i_i_i555) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=715;break; } else { label=728;break; }
 case 715: 
 var $3705=HEAP32[(($3692)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3706=HEAP32[(($l_i_i_i554)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3707=(Math_imul($3705,$3706)|0); //@line 28 "src/rcdecoder.cpp"
 var $3708=HEAP32[(($3695)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3709=((($3708)+($3707))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3695)>>2)]=$3709; //@line 28 "src/rcdecoder.cpp"
 var $3710=HEAP32[(($r_i_i_i555)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3711=(Math_imul($3705,$3710)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3692)>>2)]=$3711; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3685) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=716;break; } else { label=728;break; }
 case 716: 
 var $$etemp$478$0=4;
 var $$etemp$478$1=0;

 var $$etemp$479$0=4;
 var $$etemp$479$1=0;

 var $3712=($3704>>>0)>38; //@line 51 "inc/pcdecoder.inl"
 if($3712){label=717;break;}else{label=719;break;} //@line 51 "inc/pcdecoder.inl"
 case 717: 
 var $3714=((($3704)-(39))|0); //@line 52 "inc/pcdecoder.inl"
 var $3715=HEAP32[(($3631)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3716$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3715,$3714) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3716$0=$3716$r;var $3716$1=tempRet0;if (!__THREW__) { label=718;break; } else { label=728;break; }
 case 718: 
 var $3717$0=$3714;
 var $3717$1=0;
 var $$etemp$480$0=1;
 var $$etemp$480$1=0;
 var $3718$0=_bitshift64Shl($$etemp$480$0,$$etemp$480$1,$3717$0);var $3718$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $3719$0=_i64Add($3718$0,$3718$1,$3716$0,$3716$1);var $3719$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3684; var $3720$0=HEAP32[((tempDoublePtr)>>2)];var $3720$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$481$0=-1;
 var $$etemp$481$1=-1;
 var $3721$0=$3720$0^$$etemp$481$0;
 var $3721$1=$3720$1^$$etemp$481$1;
 var $3722$0=($3721$0>>>26)|($3721$1<<6);
 var $3722$1=($3721$1>>>26)|(0<<6);
 var $3723$0=($3721$1>>31)|((((((($3721$1|0)<0))|0)?-1:0))<<1);
 var $3723$1=((((((($3721$1|0)<0))|0)?-1:0))>>31)|((((((($3721$1|0)<0))|0)?-1:0))<<1);
 var $3724$0=($3723$0>>>27)|($3723$1<<5);
 var $3724$1=($3723$1>>>27)|(0<<5);
 var $3725$0=$3722$0^$3724$0;
 var $3725$1=$3722$1^$3724$1;
 var $3726$0=_i64Add($3725$0,$3725$1,$3719$0,$3719$1);var $3726$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $3727$0=($3726$1>>>5)|(0<<27);
 var $3727$1=(0>>>5)|(0<<27);
 var $$etemp$482$0=0;
 var $$etemp$482$1=0;
 var $3728$0=_i64Subtract($$etemp$482$0,$$etemp$482$1,$3727$0,$3727$1);var $3728$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3729$0=($3728$0>>>27)|($3728$1<<5);
 var $3729$1=($3728$1>>>27)|(0<<5);
 var $3730$0=$3729$0^$3726$0;
 var $3730$1=$3729$1^$3726$1;
 var $3731$0=($3730$0<<26)|(0>>>6);
 var $3731$1=($3730$1<<26)|($3730$0>>>6);
 var $$etemp$483$0=-67108864;
 var $$etemp$483$1=-1;
 var $3732$0=$3731$0^$$etemp$483$0;
 var $3732$1=$3731$1^$$etemp$483$1;
 var $_01207_in$1=$3732$1;var $_01207_in$0=$3732$0;label=723;break; //@line 56 "inc/pcdecoder.inl"
 case 719: 
 var $3734=($3704>>>0)<38; //@line undefined "inc/pcdecoder.inl"
 if($3734){label=720;break;}else{label=722;break;} //@line undefined "inc/pcdecoder.inl"
 case 720: 
 var $3736=(((37)-($3704))|0); //@line 59 "inc/pcdecoder.inl"
 var $3737=HEAP32[(($3631)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3738$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3737,$3736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3738$0=$3738$r;var $3738$1=tempRet0;if (!__THREW__) { label=721;break; } else { label=728;break; }
 case 721: 
 var $3739$0=$3736;
 var $3739$1=0;
 var $$etemp$484$0=1;
 var $$etemp$484$1=0;
 var $3740$0=_bitshift64Shl($$etemp$484$0,$$etemp$484$1,$3739$0);var $3740$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $3741$0=_i64Add($3740$0,$3740$1,$3738$0,$3738$1);var $3741$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3684; var $3742$0=HEAP32[((tempDoublePtr)>>2)];var $3742$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$485$0=-1;
 var $$etemp$485$1=-1;
 var $3743$0=$3742$0^$$etemp$485$0;
 var $3743$1=$3742$1^$$etemp$485$1;
 var $3744$0=($3743$0>>>26)|($3743$1<<6);
 var $3744$1=($3743$1>>>26)|(0<<6);
 var $3745$0=($3743$1>>31)|((((((($3743$1|0)<0))|0)?-1:0))<<1);
 var $3745$1=((((((($3743$1|0)<0))|0)?-1:0))>>31)|((((((($3743$1|0)<0))|0)?-1:0))<<1);
 var $3746$0=($3745$0>>>27)|($3745$1<<5);
 var $3746$1=($3745$1>>>27)|(0<<5);
 var $3747$0=$3744$0^$3746$0;
 var $3747$1=$3744$1^$3746$1;
 var $3748$0=_i64Subtract($3747$0,$3747$1,$3741$0,$3741$1);var $3748$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $3749$0=($3748$1>>>5)|(0<<27);
 var $3749$1=(0>>>5)|(0<<27);
 var $$etemp$486$0=0;
 var $$etemp$486$1=0;
 var $3750$0=_i64Subtract($$etemp$486$0,$$etemp$486$1,$3749$0,$3749$1);var $3750$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3751$0=($3750$0>>>27)|($3750$1<<5);
 var $3751$1=($3750$1>>>27)|(0<<5);
 var $3752$0=$3751$0^$3748$0;
 var $3752$1=$3751$1^$3748$1;
 var $3753$0=($3752$0<<26)|(0>>>6);
 var $3753$1=($3752$1<<26)|($3752$0>>>6);
 var $$etemp$487$0=-67108864;
 var $$etemp$487$1=-1;
 var $3754$0=$3753$0^$$etemp$487$0;
 var $3754$1=$3753$1^$$etemp$487$1;
 var $_01207_in$1=$3754$1;var $_01207_in$0=$3754$0;label=723;break; //@line 63 "inc/pcdecoder.inl"
 case 722: 
 HEAPF64[(tempDoublePtr)>>3]=$3684; var $3756$0=HEAP32[((tempDoublePtr)>>2)];var $3756$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$488$0=-67108864;
 var $$etemp$488$1=-1;
 var $3757$0=$3756$0&$$etemp$488$0;
 var $3757$1=$3756$1&$$etemp$488$1;
 var $_01207_in$1=$3757$1;var $_01207_in$0=$3757$0;label=723;break; //@line 66 "inc/pcdecoder.inl"
 case 723: 
 var $_01207_in$0;
 var $_01207_in$1;
 var $_01207=(HEAP32[((tempDoublePtr)>>2)]=$_01207_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01207_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $3758=(($_21214+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21214)>>3)]=$_01207; //@line 65 "src/read.cpp"
 var $_01208=1;var $f_i562_sroa_55_6=$f_i562_sroa_55_5;label=724;break; //@line 22 "inc/front.h"
 case 724: 
 var $f_i562_sroa_55_6;
 var $_01208;
 var $3760=((($f_i562_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3761=$f_i562_sroa_55_6&$storemerge_i_i_i567; //@line 23 "inc/front.h"
 var $3762=(($3623+($3761<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3762)>>3)]=$_01207; //@line 23 "inc/front.h"
 var $3763=((($_01208)-(1))|0); //@line 23 "inc/front.h"
 var $3764=($3763|0)==0; //@line 23 "inc/front.h"
 if($3764){label=725;break;}else{var $_01208=$3763;var $f_i562_sroa_55_6=$3760;label=724;break;} //@line 23 "inc/front.h"
 case 725: 
 var $3765=((($x_i563_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21214=$3758;var $f_i562_sroa_55_5=$3760;var $x_i563_0=$3765;label=712;break; //@line 49 "src/read.cpp"
 case 726: 
 var $3767$0 = ___cxa_find_matching_catch(-1, -1); var $3767$1 = tempRet0;
 var $3768=$3767$0;
 var $3769=$3767$1;
 var $3770=($3590|0)==0;
 if($3770){var $_01215=$3768;var $_01216=$3769;label=738;break;}else{label=727;break;}
 case 727: 
 _free($3590);
 var $_01215=$3768;var $_01216=$3769;label=738;break;
 case 728: 
 var $3773$0 = ___cxa_find_matching_catch(-1, -1); var $3773$1 = tempRet0;
 var $3774=$3773$0;
 var $3775=$3773$1;
 var $3776=($3615|0)==0; //@line 11 "inc/front.h"
 if($3776){var $_01215=$3774;var $_01216=$3775;label=738;break;}else{label=729;break;} //@line 11 "inc/front.h"
 case 729: 
 _free($3615);
 var $_01215=$3774;var $_01216=$3775;label=738;break; //@line 11 "inc/front.h"
 case 730: 
 var $3778=((($y_i564_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11213=$_21214;var $f_i562_sroa_55_3=$f_i562_sroa_55_5;var $y_i564_0=$3778;label=710;break; //@line 48 "src/read.cpp"
 case 731: 
 var $3780=((($z_i565_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01212=$_11213;var $f_i562_sroa_55_1=$f_i562_sroa_55_3;var $z_i565_0=$3780;label=708;break; //@line 47 "src/read.cpp"
 case 732: 
 var $3782=($3594|0)==0; //@line 69 "src/read.cpp"
 if($3782){label=734;break;}else{label=733;break;} //@line 69 "src/read.cpp"
 case 733: 
 _free($3594);
 label=734;break; //@line 69 "src/read.cpp"
 case 734: 
 var $3784=HEAP32[(($rm_i560)>>2)]; //@line 70 "src/read.cpp"
 var $3785=($3784|0)==0; //@line 70 "src/read.cpp"
 if($3785){label=736;break;}else{label=735;break;} //@line 70 "src/read.cpp"
 case 735: 
 var $3787=$3784; //@line 70 "src/read.cpp"
 var $3788=HEAP32[(($3787)>>2)]; //@line 70 "src/read.cpp"
 var $3789=(($3788+4)|0); //@line 70 "src/read.cpp"
 var $3790=HEAP32[(($3789)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$3790]($3784); //@line 70 "src/read.cpp"
 label=736;break; //@line 70 "src/read.cpp"
 case 736: 
 var $3792=($3615|0)==0; //@line 11 "inc/front.h"
 if($3792){label=1285;break;}else{label=737;break;} //@line 11 "inc/front.h"
 case 737: 
 _free($3615);
 label=1285;break; //@line 11 "inc/front.h"
 case 738: 
 var $_01216;
 var $_01215;
 var $3793$0=$_01215;
 var $3793$1=0;
 var $3794$0=$3793$0;
 var $3794$1=$_01216;
 ___resumeException($3794$0) //@line 71 "src/read.cpp"
 case 739: 
 var $3796=HEAP32[(($3)>>2)]; //@line 185 "src/read.cpp"
 var $3797=HEAP32[(($4)>>2)]; //@line 185 "src/read.cpp"
 var $3798=HEAP32[(($5)>>2)]; //@line 185 "src/read.cpp"
 var $3799=HEAP32[(($6)>>2)]; //@line 185 "src/read.cpp"
 var $$etemp$489$0=4;
 var $$etemp$489$1=0;

 var $3800=__Znwj(48); //@line 41 "src/read.cpp"
 var $3801=$3800; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($3801,0,81,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=740;break; } else { label=768;break; } //@line 41 "src/read.cpp"
 case 740: 
 var $3803=$3800; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i596)>>2)]=$3803; //@line 71 "src/read.cpp"
 var $3804=__Znwj(12); //@line 42 "src/read.cpp"
 var $3805=(($3804+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $3806=$3805; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3806)>>2)]=$3796; //@line 34 "inc/pcdecoder.inl"
 var $3807=(($3804+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $3808=$3807; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($3808)>>2)]=$rm_i596; //@line 34 "inc/pcdecoder.inl"
 var $3809=((($3797)+(1))|0); //@line 10 "inc/front.h"
 var $3810=((($3798)+(1))|0); //@line 10 "inc/front.h"
 var $3811=(Math_imul($3809,$3810)|0); //@line 10 "inc/front.h"
 var $3812=((($3797)+(2))|0); //@line 9 "inc/front.h"
 var $3813=((($3812)+($3811))|0); //@line 9 "inc/front.h"
 var $3814=((($3813)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i603=$3814;label=741;break; //@line 45 "inc/front.h"
 case 741: 
 var $storemerge_i_i_i603;
 var $3816=((($storemerge_i_i_i603)+(1))|0); //@line 45 "inc/front.h"
 var $3817=$storemerge_i_i_i603&$3816; //@line 45 "inc/front.h"
 var $3818=($3817|0)==0; //@line 45 "inc/front.h"
 if($3818){label=743;break;}else{label=742;break;} //@line 45 "inc/front.h"
 case 742: 
 var $3820=$storemerge_i_i_i603|$3816; //@line 45 "inc/front.h"
 var $storemerge_i_i_i603=$3820;label=741;break; //@line 45 "inc/front.h"
 case 743: 
 var $3821$0=_llvm_umul_with_overflow_i32($3816,8);
 var $3821$1=tempRet0;
 var $3822=$3821$1;
 var $3823=$3821$0;
 var $3824=($3822?-1:$3823); //@line 9 "inc/front.h"
 var $3825=(function() { try { __THREW__ = 0; return __Znwj($3824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=747;break; } else { label=744;break; }
 case 744: 
 var $3827$0 = ___cxa_find_matching_catch(-1, -1); var $3827$1 = tempRet0;
 var $3828=$3827$1;
 var $3829=($3828|0)<0;
 if($3829){label=745;break;}else{label=746;break;}
 case 745: 
 var $3831=$3827$0;
 ___cxa_call_unexpected($3831);
 throw "Reached an unreachable!";
 case 746: 
 ___resumeException($3827$0)
 case 747: 
 var $3833=$3825; //@line 9 "inc/front.h"
 var $_01200=$3811;var $f_i598_sroa_55_0=0;label=748;break; //@line 22 "inc/front.h"
 case 748: 
 var $f_i598_sroa_55_0;
 var $_01200;
 var $3835=((($f_i598_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $3836=$f_i598_sroa_55_0&$storemerge_i_i_i603; //@line 23 "inc/front.h"
 var $3837=(($3833+($3836<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3837)>>3)]=0; //@line 23 "inc/front.h"
 var $3838=((($_01200)-(1))|0); //@line 23 "inc/front.h"
 var $3839=($3838|0)==0; //@line 23 "inc/front.h"
 if($3839){label=749;break;}else{var $_01200=$3838;var $f_i598_sroa_55_0=$3835;label=748;break;} //@line 23 "inc/front.h"
 case 749: 
 var $3840=(($3804+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $3841=$3840; //@line 50 "inc/pcdecoder.inl"
 var $3842=(($3804+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $3843=$3842; //@line 50 "inc/pcdecoder.inl"
 var $_01201=$_01052;var $f_i598_sroa_55_1=$3835;var $z_i601_0=0;label=750;break; //@line 47 "src/read.cpp"
 case 750: 
 var $z_i601_0;
 var $f_i598_sroa_55_1;
 var $_01201;
 var $3845=($z_i601_0>>>0)<($3799>>>0); //@line 47 "src/read.cpp"
 if($3845){var $_01199=$3809;var $f_i598_sroa_55_2=$f_i598_sroa_55_1;label=751;break;}else{label=774;break;} //@line 47 "src/read.cpp"
 case 751: 
 var $f_i598_sroa_55_2;
 var $_01199;
 var $3847=((($f_i598_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $3848=$f_i598_sroa_55_2&$storemerge_i_i_i603; //@line 23 "inc/front.h"
 var $3849=(($3833+($3848<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3849)>>3)]=0; //@line 23 "inc/front.h"
 var $3850=((($_01199)-(1))|0); //@line 23 "inc/front.h"
 var $3851=($3850|0)==0; //@line 23 "inc/front.h"
 if($3851){var $_11202=$_01201;var $f_i598_sroa_55_3=$3847;var $y_i600_0=0;label=752;break;}else{var $_01199=$3850;var $f_i598_sroa_55_2=$3847;label=751;break;} //@line 23 "inc/front.h"
 case 752: 
 var $y_i600_0;
 var $f_i598_sroa_55_3;
 var $_11202;
 var $3852=($y_i600_0>>>0)<($3798>>>0); //@line 48 "src/read.cpp"
 if($3852){var $_01198=1;var $f_i598_sroa_55_4=$f_i598_sroa_55_3;label=753;break;}else{label=773;break;} //@line 48 "src/read.cpp"
 case 753: 
 var $f_i598_sroa_55_4;
 var $_01198;
 var $3854=((($f_i598_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $3855=$f_i598_sroa_55_4&$storemerge_i_i_i603; //@line 23 "inc/front.h"
 var $3856=(($3833+($3855<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3856)>>3)]=0; //@line 23 "inc/front.h"
 var $3857=((($_01198)-(1))|0); //@line 23 "inc/front.h"
 var $3858=($3857|0)==0; //@line 23 "inc/front.h"
 if($3858){var $_21203=$_11202;var $f_i598_sroa_55_5=$3854;var $x_i599_0=0;label=754;break;}else{var $_01198=$3857;var $f_i598_sroa_55_4=$3854;label=753;break;} //@line 23 "inc/front.h"
 case 754: 
 var $x_i599_0;
 var $f_i598_sroa_55_5;
 var $_21203;
 var $3859=($x_i599_0>>>0)<($3797>>>0); //@line 49 "src/read.cpp"
 if($3859){label=755;break;}else{label=772;break;} //@line 49 "src/read.cpp"
 case 755: 
 var $3861=((($f_i598_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $3862=$3861&$storemerge_i_i_i603; //@line 16 "inc/front.h"
 var $3863=(($3833+($3862<<3))|0); //@line 16 "inc/front.h"
 var $3864=HEAPF64[(($3863)>>3)]; //@line 59 "src/read.cpp"
 var $ld$490$0=(($3863)|0);
 var $3864$$SHADOW$0=HEAP32[(($ld$490$0)>>2)];
 var $ld$491$1=(($3863+4)|0);
 var $3864$$SHADOW$1=HEAP32[(($ld$491$1)>>2)];
 var $3865=((($f_i598_sroa_55_5)-($3809))|0); //@line 16 "inc/front.h"
 var $3866=((($3865)-($3811))|0); //@line 16 "inc/front.h"
 var $3867=$3866&$storemerge_i_i_i603; //@line 16 "inc/front.h"
 var $3868=(($3833+($3867<<3))|0); //@line 16 "inc/front.h"
 var $3869=HEAPF64[(($3868)>>3)]; //@line 59 "src/read.cpp"
 var $ld$492$0=(($3868)|0);
 var $3869$$SHADOW$0=HEAP32[(($ld$492$0)>>2)];
 var $ld$493$1=(($3868+4)|0);
 var $3869$$SHADOW$1=HEAP32[(($ld$493$1)>>2)];
 var $3870=$3865&$storemerge_i_i_i603; //@line 16 "inc/front.h"
 var $3871=(($3833+($3870<<3))|0); //@line 16 "inc/front.h"
 var $3872=HEAPF64[(($3871)>>3)]; //@line 60 "src/read.cpp"
 var $ld$494$0=(($3871)|0);
 var $3872$$SHADOW$0=HEAP32[(($ld$494$0)>>2)];
 var $ld$495$1=(($3871+4)|0);
 var $3872$$SHADOW$1=HEAP32[(($ld$495$1)>>2)];
 var $3873=((($3861)-($3811))|0); //@line 16 "inc/front.h"
 var $3874=$3873&$storemerge_i_i_i603; //@line 16 "inc/front.h"
 var $3875=(($3833+($3874<<3))|0); //@line 16 "inc/front.h"
 var $3876=HEAPF64[(($3875)>>3)]; //@line 60 "src/read.cpp"
 var $ld$496$0=(($3875)|0);
 var $3876$$SHADOW$0=HEAP32[(($ld$496$0)>>2)];
 var $ld$497$1=(($3875+4)|0);
 var $3876$$SHADOW$1=HEAP32[(($ld$497$1)>>2)];
 var $3877=((($f_i598_sroa_55_5)-($3811))|0); //@line 16 "inc/front.h"
 var $3878=$3877&$storemerge_i_i_i603; //@line 16 "inc/front.h"
 var $3879=(($3833+($3878<<3))|0); //@line 16 "inc/front.h"
 var $3880=HEAPF64[(($3879)>>3)]; //@line 61 "src/read.cpp"
 var $ld$498$0=(($3879)|0);
 var $3880$$SHADOW$0=HEAP32[(($ld$498$0)>>2)];
 var $ld$499$1=(($3879+4)|0);
 var $3880$$SHADOW$1=HEAP32[(($ld$499$1)>>2)];
 var $3881=((($3861)-($3809))|0); //@line 16 "inc/front.h"
 var $3882=$3881&$storemerge_i_i_i603; //@line 16 "inc/front.h"
 var $3883=(($3833+($3882<<3))|0); //@line 16 "inc/front.h"
 var $3884=HEAPF64[(($3883)>>3)]; //@line 61 "src/read.cpp"
 var $ld$500$0=(($3883)|0);
 var $3884$$SHADOW$0=HEAP32[(($ld$500$0)>>2)];
 var $ld$501$1=(($3883+4)|0);
 var $3884$$SHADOW$1=HEAP32[(($ld$501$1)>>2)];
 var $3885=((($3881)-($3811))|0); //@line 16 "inc/front.h"
 var $3886=$3885&$storemerge_i_i_i603; //@line 16 "inc/front.h"
 var $3887=(($3833+($3886<<3))|0); //@line 16 "inc/front.h"
 var $3888=($3864)-($3869); //@line 59 "src/read.cpp"
 var $3889=($3888)+($3872); //@line 60 "src/read.cpp"
 var $3890=($3889)-($3876); //@line 60 "src/read.cpp"
 var $3891=($3890)+($3880); //@line 61 "src/read.cpp"
 var $3892=($3891)-($3884); //@line 61 "src/read.cpp"
 var $3893=HEAPF64[(($3887)>>3)]; //@line 62 "src/read.cpp"
 var $ld$502$0=(($3887)|0);
 var $3893$$SHADOW$0=HEAP32[(($ld$502$0)>>2)];
 var $ld$503$1=(($3887+4)|0);
 var $3893$$SHADOW$1=HEAP32[(($ld$503$1)>>2)];
 var $3894=($3892)+($3893); //@line 62 "src/read.cpp"
 var $3895=HEAP32[(($3841)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3896=HEAP32[(($3843)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $3897=HEAP32[(($3896)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$504$0=4;
 var $$etemp$504$1=0;

 var $$etemp$505$0=4;
 var $$etemp$505$1=0;

 var $3898=$3897; //@line 25 "src/rcdecoder.cpp"
 var $3899=HEAP32[(($3898)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3900=(($3899+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $3901=HEAP32[(($3900)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $3902=(($3895+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3901]($3897,$3902) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=756;break; } else { label=770;break; }
 case 756: 
 var $3903=(($3895+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $3904=HEAP32[(($3903)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3905=(($3895+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $3906=HEAP32[(($3905)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3907=((($3904)-($3906))|0); //@line 26 "src/rcdecoder.cpp"
 var $3908=HEAP32[(($3902)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $3909=(((($3907>>>0))/(($3908>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i590)>>2)]=$3909; //@line 26 "src/rcdecoder.cpp"
 var $3910=$3897; //@line 27 "src/rcdecoder.cpp"
 var $3911=HEAP32[(($3910)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3912=(($3911+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $3913=HEAP32[(($3912)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $3914=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$3913]($3897,$l_i_i_i590,$r_i_i_i591) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=757;break; } else { label=770;break; }
 case 757: 
 var $3915=HEAP32[(($3902)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3916=HEAP32[(($l_i_i_i590)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3917=(Math_imul($3915,$3916)|0); //@line 28 "src/rcdecoder.cpp"
 var $3918=HEAP32[(($3905)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $3919=((($3918)+($3917))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($3905)>>2)]=$3919; //@line 28 "src/rcdecoder.cpp"
 var $3920=HEAP32[(($r_i_i_i591)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $3921=(Math_imul($3915,$3920)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($3902)>>2)]=$3921; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($3895) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=758;break; } else { label=770;break; }
 case 758: 
 var $$etemp$506$0=4;
 var $$etemp$506$1=0;

 var $$etemp$507$0=4;
 var $$etemp$507$1=0;

 var $3922=($3914>>>0)>40; //@line 51 "inc/pcdecoder.inl"
 if($3922){label=759;break;}else{label=761;break;} //@line 51 "inc/pcdecoder.inl"
 case 759: 
 var $3924=((($3914)-(41))|0); //@line 52 "inc/pcdecoder.inl"
 var $3925=HEAP32[(($3841)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $3926$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3925,$3924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3926$0=$3926$r;var $3926$1=tempRet0;if (!__THREW__) { label=760;break; } else { label=770;break; }
 case 760: 
 var $3927$0=$3924;
 var $3927$1=0;
 var $$etemp$508$0=1;
 var $$etemp$508$1=0;
 var $3928$0=_bitshift64Shl($$etemp$508$0,$$etemp$508$1,$3927$0);var $3928$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $3929$0=_i64Add($3928$0,$3928$1,$3926$0,$3926$1);var $3929$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3894; var $3930$0=HEAP32[((tempDoublePtr)>>2)];var $3930$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$509$0=-1;
 var $$etemp$509$1=-1;
 var $3931$0=$3930$0^$$etemp$509$0;
 var $3931$1=$3930$1^$$etemp$509$1;
 var $3932$0=($3931$0>>>24)|($3931$1<<8);
 var $3932$1=($3931$1>>>24)|(0<<8);
 var $3933$0=($3931$1>>31)|((((((($3931$1|0)<0))|0)?-1:0))<<1);
 var $3933$1=((((((($3931$1|0)<0))|0)?-1:0))>>31)|((((((($3931$1|0)<0))|0)?-1:0))<<1);
 var $3934$0=($3933$0>>>25)|($3933$1<<7);
 var $3934$1=($3933$1>>>25)|(0<<7);
 var $3935$0=$3932$0^$3934$0;
 var $3935$1=$3932$1^$3934$1;
 var $3936$0=_i64Add($3935$0,$3935$1,$3929$0,$3929$1);var $3936$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $3937$0=($3936$1>>>7)|(0<<25);
 var $3937$1=(0>>>7)|(0<<25);
 var $$etemp$510$0=0;
 var $$etemp$510$1=0;
 var $3938$0=_i64Subtract($$etemp$510$0,$$etemp$510$1,$3937$0,$3937$1);var $3938$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3939$0=($3938$0>>>25)|($3938$1<<7);
 var $3939$1=($3938$1>>>25)|(0<<7);
 var $3940$0=$3939$0^$3936$0;
 var $3940$1=$3939$1^$3936$1;
 var $3941$0=($3940$0<<24)|(0>>>8);
 var $3941$1=($3940$1<<24)|($3940$0>>>8);
 var $$etemp$511$0=-16777216;
 var $$etemp$511$1=-1;
 var $3942$0=$3941$0^$$etemp$511$0;
 var $3942$1=$3941$1^$$etemp$511$1;
 var $_01196_in$1=$3942$1;var $_01196_in$0=$3942$0;label=765;break; //@line 56 "inc/pcdecoder.inl"
 case 761: 
 var $3944=($3914>>>0)<40; //@line undefined "inc/pcdecoder.inl"
 if($3944){label=762;break;}else{label=764;break;} //@line undefined "inc/pcdecoder.inl"
 case 762: 
 var $3946=(((39)-($3914))|0); //@line 59 "inc/pcdecoder.inl"
 var $3947=HEAP32[(($3841)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $3948$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($3947,$3946) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $3948$0=$3948$r;var $3948$1=tempRet0;if (!__THREW__) { label=763;break; } else { label=770;break; }
 case 763: 
 var $3949$0=$3946;
 var $3949$1=0;
 var $$etemp$512$0=1;
 var $$etemp$512$1=0;
 var $3950$0=_bitshift64Shl($$etemp$512$0,$$etemp$512$1,$3949$0);var $3950$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $3951$0=_i64Add($3950$0,$3950$1,$3948$0,$3948$1);var $3951$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$3894; var $3952$0=HEAP32[((tempDoublePtr)>>2)];var $3952$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$513$0=-1;
 var $$etemp$513$1=-1;
 var $3953$0=$3952$0^$$etemp$513$0;
 var $3953$1=$3952$1^$$etemp$513$1;
 var $3954$0=($3953$0>>>24)|($3953$1<<8);
 var $3954$1=($3953$1>>>24)|(0<<8);
 var $3955$0=($3953$1>>31)|((((((($3953$1|0)<0))|0)?-1:0))<<1);
 var $3955$1=((((((($3953$1|0)<0))|0)?-1:0))>>31)|((((((($3953$1|0)<0))|0)?-1:0))<<1);
 var $3956$0=($3955$0>>>25)|($3955$1<<7);
 var $3956$1=($3955$1>>>25)|(0<<7);
 var $3957$0=$3954$0^$3956$0;
 var $3957$1=$3954$1^$3956$1;
 var $3958$0=_i64Subtract($3957$0,$3957$1,$3951$0,$3951$1);var $3958$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $3959$0=($3958$1>>>7)|(0<<25);
 var $3959$1=(0>>>7)|(0<<25);
 var $$etemp$514$0=0;
 var $$etemp$514$1=0;
 var $3960$0=_i64Subtract($$etemp$514$0,$$etemp$514$1,$3959$0,$3959$1);var $3960$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $3961$0=($3960$0>>>25)|($3960$1<<7);
 var $3961$1=($3960$1>>>25)|(0<<7);
 var $3962$0=$3961$0^$3958$0;
 var $3962$1=$3961$1^$3958$1;
 var $3963$0=($3962$0<<24)|(0>>>8);
 var $3963$1=($3962$1<<24)|($3962$0>>>8);
 var $$etemp$515$0=-16777216;
 var $$etemp$515$1=-1;
 var $3964$0=$3963$0^$$etemp$515$0;
 var $3964$1=$3963$1^$$etemp$515$1;
 var $_01196_in$1=$3964$1;var $_01196_in$0=$3964$0;label=765;break; //@line 63 "inc/pcdecoder.inl"
 case 764: 
 HEAPF64[(tempDoublePtr)>>3]=$3894; var $3966$0=HEAP32[((tempDoublePtr)>>2)];var $3966$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$516$0=-16777216;
 var $$etemp$516$1=-1;
 var $3967$0=$3966$0&$$etemp$516$0;
 var $3967$1=$3966$1&$$etemp$516$1;
 var $_01196_in$1=$3967$1;var $_01196_in$0=$3967$0;label=765;break; //@line 66 "inc/pcdecoder.inl"
 case 765: 
 var $_01196_in$0;
 var $_01196_in$1;
 var $_01196=(HEAP32[((tempDoublePtr)>>2)]=$_01196_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01196_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $3968=(($_21203+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21203)>>3)]=$_01196; //@line 65 "src/read.cpp"
 var $_01197=1;var $f_i598_sroa_55_6=$f_i598_sroa_55_5;label=766;break; //@line 22 "inc/front.h"
 case 766: 
 var $f_i598_sroa_55_6;
 var $_01197;
 var $3970=((($f_i598_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $3971=$f_i598_sroa_55_6&$storemerge_i_i_i603; //@line 23 "inc/front.h"
 var $3972=(($3833+($3971<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($3972)>>3)]=$_01196; //@line 23 "inc/front.h"
 var $3973=((($_01197)-(1))|0); //@line 23 "inc/front.h"
 var $3974=($3973|0)==0; //@line 23 "inc/front.h"
 if($3974){label=767;break;}else{var $_01197=$3973;var $f_i598_sroa_55_6=$3970;label=766;break;} //@line 23 "inc/front.h"
 case 767: 
 var $3975=((($x_i599_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21203=$3968;var $f_i598_sroa_55_5=$3970;var $x_i599_0=$3975;label=754;break; //@line 49 "src/read.cpp"
 case 768: 
 var $3977$0 = ___cxa_find_matching_catch(-1, -1); var $3977$1 = tempRet0;
 var $3978=$3977$0;
 var $3979=$3977$1;
 var $3980=($3800|0)==0;
 if($3980){var $_01204=$3978;var $_01205=$3979;label=780;break;}else{label=769;break;}
 case 769: 
 _free($3800);
 var $_01204=$3978;var $_01205=$3979;label=780;break;
 case 770: 
 var $3983$0 = ___cxa_find_matching_catch(-1, -1); var $3983$1 = tempRet0;
 var $3984=$3983$0;
 var $3985=$3983$1;
 var $3986=($3825|0)==0; //@line 11 "inc/front.h"
 if($3986){var $_01204=$3984;var $_01205=$3985;label=780;break;}else{label=771;break;} //@line 11 "inc/front.h"
 case 771: 
 _free($3825);
 var $_01204=$3984;var $_01205=$3985;label=780;break; //@line 11 "inc/front.h"
 case 772: 
 var $3988=((($y_i600_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11202=$_21203;var $f_i598_sroa_55_3=$f_i598_sroa_55_5;var $y_i600_0=$3988;label=752;break; //@line 48 "src/read.cpp"
 case 773: 
 var $3990=((($z_i601_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01201=$_11202;var $f_i598_sroa_55_1=$f_i598_sroa_55_3;var $z_i601_0=$3990;label=750;break; //@line 47 "src/read.cpp"
 case 774: 
 var $3992=($3804|0)==0; //@line 69 "src/read.cpp"
 if($3992){label=776;break;}else{label=775;break;} //@line 69 "src/read.cpp"
 case 775: 
 _free($3804);
 label=776;break; //@line 69 "src/read.cpp"
 case 776: 
 var $3994=HEAP32[(($rm_i596)>>2)]; //@line 70 "src/read.cpp"
 var $3995=($3994|0)==0; //@line 70 "src/read.cpp"
 if($3995){label=778;break;}else{label=777;break;} //@line 70 "src/read.cpp"
 case 777: 
 var $3997=$3994; //@line 70 "src/read.cpp"
 var $3998=HEAP32[(($3997)>>2)]; //@line 70 "src/read.cpp"
 var $3999=(($3998+4)|0); //@line 70 "src/read.cpp"
 var $4000=HEAP32[(($3999)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4000]($3994); //@line 70 "src/read.cpp"
 label=778;break; //@line 70 "src/read.cpp"
 case 778: 
 var $4002=($3825|0)==0; //@line 11 "inc/front.h"
 if($4002){label=1285;break;}else{label=779;break;} //@line 11 "inc/front.h"
 case 779: 
 _free($3825);
 label=1285;break; //@line 11 "inc/front.h"
 case 780: 
 var $_01205;
 var $_01204;
 var $4003$0=$_01204;
 var $4003$1=0;
 var $4004$0=$4003$0;
 var $4004$1=$_01205;
 ___resumeException($4004$0) //@line 71 "src/read.cpp"
 case 781: 
 var $4006=HEAP32[(($3)>>2)]; //@line 186 "src/read.cpp"
 var $4007=HEAP32[(($4)>>2)]; //@line 186 "src/read.cpp"
 var $4008=HEAP32[(($5)>>2)]; //@line 186 "src/read.cpp"
 var $4009=HEAP32[(($6)>>2)]; //@line 186 "src/read.cpp"
 var $$etemp$517$0=4;
 var $$etemp$517$1=0;

 var $4010=__Znwj(48); //@line 41 "src/read.cpp"
 var $4011=$4010; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4011,0,85,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=782;break; } else { label=810;break; } //@line 41 "src/read.cpp"
 case 782: 
 var $4013=$4010; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i632)>>2)]=$4013; //@line 71 "src/read.cpp"
 var $4014=__Znwj(12); //@line 42 "src/read.cpp"
 var $4015=(($4014+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4016=$4015; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4016)>>2)]=$4006; //@line 34 "inc/pcdecoder.inl"
 var $4017=(($4014+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4018=$4017; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4018)>>2)]=$rm_i632; //@line 34 "inc/pcdecoder.inl"
 var $4019=((($4007)+(1))|0); //@line 10 "inc/front.h"
 var $4020=((($4008)+(1))|0); //@line 10 "inc/front.h"
 var $4021=(Math_imul($4019,$4020)|0); //@line 10 "inc/front.h"
 var $4022=((($4007)+(2))|0); //@line 9 "inc/front.h"
 var $4023=((($4022)+($4021))|0); //@line 9 "inc/front.h"
 var $4024=((($4023)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i639=$4024;label=783;break; //@line 45 "inc/front.h"
 case 783: 
 var $storemerge_i_i_i639;
 var $4026=((($storemerge_i_i_i639)+(1))|0); //@line 45 "inc/front.h"
 var $4027=$storemerge_i_i_i639&$4026; //@line 45 "inc/front.h"
 var $4028=($4027|0)==0; //@line 45 "inc/front.h"
 if($4028){label=785;break;}else{label=784;break;} //@line 45 "inc/front.h"
 case 784: 
 var $4030=$storemerge_i_i_i639|$4026; //@line 45 "inc/front.h"
 var $storemerge_i_i_i639=$4030;label=783;break; //@line 45 "inc/front.h"
 case 785: 
 var $4031$0=_llvm_umul_with_overflow_i32($4026,8);
 var $4031$1=tempRet0;
 var $4032=$4031$1;
 var $4033=$4031$0;
 var $4034=($4032?-1:$4033); //@line 9 "inc/front.h"
 var $4035=(function() { try { __THREW__ = 0; return __Znwj($4034) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=789;break; } else { label=786;break; }
 case 786: 
 var $4037$0 = ___cxa_find_matching_catch(-1, -1); var $4037$1 = tempRet0;
 var $4038=$4037$1;
 var $4039=($4038|0)<0;
 if($4039){label=787;break;}else{label=788;break;}
 case 787: 
 var $4041=$4037$0;
 ___cxa_call_unexpected($4041);
 throw "Reached an unreachable!";
 case 788: 
 ___resumeException($4037$0)
 case 789: 
 var $4043=$4035; //@line 9 "inc/front.h"
 var $_01189=$4021;var $f_i634_sroa_55_0=0;label=790;break; //@line 22 "inc/front.h"
 case 790: 
 var $f_i634_sroa_55_0;
 var $_01189;
 var $4045=((($f_i634_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4046=$f_i634_sroa_55_0&$storemerge_i_i_i639; //@line 23 "inc/front.h"
 var $4047=(($4043+($4046<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4047)>>3)]=0; //@line 23 "inc/front.h"
 var $4048=((($_01189)-(1))|0); //@line 23 "inc/front.h"
 var $4049=($4048|0)==0; //@line 23 "inc/front.h"
 if($4049){label=791;break;}else{var $_01189=$4048;var $f_i634_sroa_55_0=$4045;label=790;break;} //@line 23 "inc/front.h"
 case 791: 
 var $4050=(($4014+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4051=$4050; //@line 50 "inc/pcdecoder.inl"
 var $4052=(($4014+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4053=$4052; //@line 50 "inc/pcdecoder.inl"
 var $_01190=$_01052;var $f_i634_sroa_55_1=$4045;var $z_i637_0=0;label=792;break; //@line 47 "src/read.cpp"
 case 792: 
 var $z_i637_0;
 var $f_i634_sroa_55_1;
 var $_01190;
 var $4055=($z_i637_0>>>0)<($4009>>>0); //@line 47 "src/read.cpp"
 if($4055){var $_01188=$4019;var $f_i634_sroa_55_2=$f_i634_sroa_55_1;label=793;break;}else{label=816;break;} //@line 47 "src/read.cpp"
 case 793: 
 var $f_i634_sroa_55_2;
 var $_01188;
 var $4057=((($f_i634_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4058=$f_i634_sroa_55_2&$storemerge_i_i_i639; //@line 23 "inc/front.h"
 var $4059=(($4043+($4058<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4059)>>3)]=0; //@line 23 "inc/front.h"
 var $4060=((($_01188)-(1))|0); //@line 23 "inc/front.h"
 var $4061=($4060|0)==0; //@line 23 "inc/front.h"
 if($4061){var $_11191=$_01190;var $f_i634_sroa_55_3=$4057;var $y_i636_0=0;label=794;break;}else{var $_01188=$4060;var $f_i634_sroa_55_2=$4057;label=793;break;} //@line 23 "inc/front.h"
 case 794: 
 var $y_i636_0;
 var $f_i634_sroa_55_3;
 var $_11191;
 var $4062=($y_i636_0>>>0)<($4008>>>0); //@line 48 "src/read.cpp"
 if($4062){var $_01186=1;var $f_i634_sroa_55_4=$f_i634_sroa_55_3;label=795;break;}else{label=815;break;} //@line 48 "src/read.cpp"
 case 795: 
 var $f_i634_sroa_55_4;
 var $_01186;
 var $4064=((($f_i634_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4065=$f_i634_sroa_55_4&$storemerge_i_i_i639; //@line 23 "inc/front.h"
 var $4066=(($4043+($4065<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4066)>>3)]=0; //@line 23 "inc/front.h"
 var $4067=((($_01186)-(1))|0); //@line 23 "inc/front.h"
 var $4068=($4067|0)==0; //@line 23 "inc/front.h"
 if($4068){var $_21192=$_11191;var $f_i634_sroa_55_5=$4064;var $x_i635_0=0;label=796;break;}else{var $_01186=$4067;var $f_i634_sroa_55_4=$4064;label=795;break;} //@line 23 "inc/front.h"
 case 796: 
 var $x_i635_0;
 var $f_i634_sroa_55_5;
 var $_21192;
 var $4069=($x_i635_0>>>0)<($4007>>>0); //@line 49 "src/read.cpp"
 if($4069){label=797;break;}else{label=814;break;} //@line 49 "src/read.cpp"
 case 797: 
 var $4071=((($f_i634_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4072=$4071&$storemerge_i_i_i639; //@line 16 "inc/front.h"
 var $4073=(($4043+($4072<<3))|0); //@line 16 "inc/front.h"
 var $4074=HEAPF64[(($4073)>>3)]; //@line 59 "src/read.cpp"
 var $ld$518$0=(($4073)|0);
 var $4074$$SHADOW$0=HEAP32[(($ld$518$0)>>2)];
 var $ld$519$1=(($4073+4)|0);
 var $4074$$SHADOW$1=HEAP32[(($ld$519$1)>>2)];
 var $4075=((($f_i634_sroa_55_5)-($4019))|0); //@line 16 "inc/front.h"
 var $4076=((($4075)-($4021))|0); //@line 16 "inc/front.h"
 var $4077=$4076&$storemerge_i_i_i639; //@line 16 "inc/front.h"
 var $4078=(($4043+($4077<<3))|0); //@line 16 "inc/front.h"
 var $4079=HEAPF64[(($4078)>>3)]; //@line 59 "src/read.cpp"
 var $ld$520$0=(($4078)|0);
 var $4079$$SHADOW$0=HEAP32[(($ld$520$0)>>2)];
 var $ld$521$1=(($4078+4)|0);
 var $4079$$SHADOW$1=HEAP32[(($ld$521$1)>>2)];
 var $4080=$4075&$storemerge_i_i_i639; //@line 16 "inc/front.h"
 var $4081=(($4043+($4080<<3))|0); //@line 16 "inc/front.h"
 var $4082=HEAPF64[(($4081)>>3)]; //@line 60 "src/read.cpp"
 var $ld$522$0=(($4081)|0);
 var $4082$$SHADOW$0=HEAP32[(($ld$522$0)>>2)];
 var $ld$523$1=(($4081+4)|0);
 var $4082$$SHADOW$1=HEAP32[(($ld$523$1)>>2)];
 var $4083=((($4071)-($4021))|0); //@line 16 "inc/front.h"
 var $4084=$4083&$storemerge_i_i_i639; //@line 16 "inc/front.h"
 var $4085=(($4043+($4084<<3))|0); //@line 16 "inc/front.h"
 var $4086=HEAPF64[(($4085)>>3)]; //@line 60 "src/read.cpp"
 var $ld$524$0=(($4085)|0);
 var $4086$$SHADOW$0=HEAP32[(($ld$524$0)>>2)];
 var $ld$525$1=(($4085+4)|0);
 var $4086$$SHADOW$1=HEAP32[(($ld$525$1)>>2)];
 var $4087=((($f_i634_sroa_55_5)-($4021))|0); //@line 16 "inc/front.h"
 var $4088=$4087&$storemerge_i_i_i639; //@line 16 "inc/front.h"
 var $4089=(($4043+($4088<<3))|0); //@line 16 "inc/front.h"
 var $4090=HEAPF64[(($4089)>>3)]; //@line 61 "src/read.cpp"
 var $ld$526$0=(($4089)|0);
 var $4090$$SHADOW$0=HEAP32[(($ld$526$0)>>2)];
 var $ld$527$1=(($4089+4)|0);
 var $4090$$SHADOW$1=HEAP32[(($ld$527$1)>>2)];
 var $4091=((($4071)-($4019))|0); //@line 16 "inc/front.h"
 var $4092=$4091&$storemerge_i_i_i639; //@line 16 "inc/front.h"
 var $4093=(($4043+($4092<<3))|0); //@line 16 "inc/front.h"
 var $4094=HEAPF64[(($4093)>>3)]; //@line 61 "src/read.cpp"
 var $ld$528$0=(($4093)|0);
 var $4094$$SHADOW$0=HEAP32[(($ld$528$0)>>2)];
 var $ld$529$1=(($4093+4)|0);
 var $4094$$SHADOW$1=HEAP32[(($ld$529$1)>>2)];
 var $4095=((($4091)-($4021))|0); //@line 16 "inc/front.h"
 var $4096=$4095&$storemerge_i_i_i639; //@line 16 "inc/front.h"
 var $4097=(($4043+($4096<<3))|0); //@line 16 "inc/front.h"
 var $4098=($4074)-($4079); //@line 59 "src/read.cpp"
 var $4099=($4098)+($4082); //@line 60 "src/read.cpp"
 var $4100=($4099)-($4086); //@line 60 "src/read.cpp"
 var $4101=($4100)+($4090); //@line 61 "src/read.cpp"
 var $4102=($4101)-($4094); //@line 61 "src/read.cpp"
 var $4103=HEAPF64[(($4097)>>3)]; //@line 62 "src/read.cpp"
 var $ld$530$0=(($4097)|0);
 var $4103$$SHADOW$0=HEAP32[(($ld$530$0)>>2)];
 var $ld$531$1=(($4097+4)|0);
 var $4103$$SHADOW$1=HEAP32[(($ld$531$1)>>2)];
 var $4104=($4102)+($4103); //@line 62 "src/read.cpp"
 var $4105=HEAP32[(($4051)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4106=HEAP32[(($4053)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4107=HEAP32[(($4106)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$532$0=4;
 var $$etemp$532$1=0;

 var $$etemp$533$0=4;
 var $$etemp$533$1=0;

 var $4108=$4107; //@line 25 "src/rcdecoder.cpp"
 var $4109=HEAP32[(($4108)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4110=(($4109+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4111=HEAP32[(($4110)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4112=(($4105+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4111]($4107,$4112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=798;break; } else { label=812;break; }
 case 798: 
 var $4113=(($4105+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4114=HEAP32[(($4113)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4115=(($4105+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4116=HEAP32[(($4115)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4117=((($4114)-($4116))|0); //@line 26 "src/rcdecoder.cpp"
 var $4118=HEAP32[(($4112)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4119=(((($4117>>>0))/(($4118>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i626)>>2)]=$4119; //@line 26 "src/rcdecoder.cpp"
 var $4120=$4107; //@line 27 "src/rcdecoder.cpp"
 var $4121=HEAP32[(($4120)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4122=(($4121+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4123=HEAP32[(($4122)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4123]($4107,$l_i_i_i626,$r_i_i_i627) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=799;break; } else { label=812;break; }
 case 799: 
 var $4125=HEAP32[(($4112)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4126=HEAP32[(($l_i_i_i626)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4127=(Math_imul($4125,$4126)|0); //@line 28 "src/rcdecoder.cpp"
 var $4128=HEAP32[(($4115)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4129=((($4128)+($4127))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4115)>>2)]=$4129; //@line 28 "src/rcdecoder.cpp"
 var $4130=HEAP32[(($r_i_i_i627)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4131=(Math_imul($4125,$4130)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4112)>>2)]=$4131; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=800;break; } else { label=812;break; }
 case 800: 
 var $$etemp$534$0=4;
 var $$etemp$534$1=0;

 var $$etemp$535$0=4;
 var $$etemp$535$1=0;

 var $4132=($4124>>>0)>42; //@line 51 "inc/pcdecoder.inl"
 if($4132){label=801;break;}else{label=803;break;} //@line 51 "inc/pcdecoder.inl"
 case 801: 
 var $4134=((($4124)-(43))|0); //@line 52 "inc/pcdecoder.inl"
 var $4135=HEAP32[(($4051)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4136$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4135,$4134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4136$0=$4136$r;var $4136$1=tempRet0;if (!__THREW__) { label=802;break; } else { label=812;break; }
 case 802: 
 var $4137$0=$4134;
 var $4137$1=0;
 var $$etemp$536$0=1;
 var $$etemp$536$1=0;
 var $4138$0=_bitshift64Shl($$etemp$536$0,$$etemp$536$1,$4137$0);var $4138$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $4139$0=_i64Add($4138$0,$4138$1,$4136$0,$4136$1);var $4139$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4104; var $4140$0=HEAP32[((tempDoublePtr)>>2)];var $4140$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$537$0=-1;
 var $$etemp$537$1=-1;
 var $4141$0=$4140$0^$$etemp$537$0;
 var $4141$1=$4140$1^$$etemp$537$1;
 var $4142$0=($4141$0>>>22)|($4141$1<<10);
 var $4142$1=($4141$1>>>22)|(0<<10);
 var $4143$0=($4141$1>>31)|((((((($4141$1|0)<0))|0)?-1:0))<<1);
 var $4143$1=((((((($4141$1|0)<0))|0)?-1:0))>>31)|((((((($4141$1|0)<0))|0)?-1:0))<<1);
 var $4144$0=($4143$0>>>23)|($4143$1<<9);
 var $4144$1=($4143$1>>>23)|(0<<9);
 var $4145$0=$4142$0^$4144$0;
 var $4145$1=$4142$1^$4144$1;
 var $4146$0=_i64Add($4145$0,$4145$1,$4139$0,$4139$1);var $4146$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $4147$0=($4146$1>>>9)|(0<<23);
 var $4147$1=(0>>>9)|(0<<23);
 var $$etemp$538$0=0;
 var $$etemp$538$1=0;
 var $4148$0=_i64Subtract($$etemp$538$0,$$etemp$538$1,$4147$0,$4147$1);var $4148$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4149$0=($4148$0>>>23)|($4148$1<<9);
 var $4149$1=($4148$1>>>23)|(0<<9);
 var $4150$0=$4149$0^$4146$0;
 var $4150$1=$4149$1^$4146$1;
 var $4151$0=($4150$0<<22)|(0>>>10);
 var $4151$1=($4150$1<<22)|($4150$0>>>10);
 var $$etemp$539$0=-4194304;
 var $$etemp$539$1=-1;
 var $4152$0=$4151$0^$$etemp$539$0;
 var $4152$1=$4151$1^$$etemp$539$1;
 var $_01184_in$1=$4152$1;var $_01184_in$0=$4152$0;label=807;break; //@line 56 "inc/pcdecoder.inl"
 case 803: 
 var $4154=($4124>>>0)<42; //@line undefined "inc/pcdecoder.inl"
 if($4154){label=804;break;}else{label=806;break;} //@line undefined "inc/pcdecoder.inl"
 case 804: 
 var $4156=(((41)-($4124))|0); //@line 59 "inc/pcdecoder.inl"
 var $4157=HEAP32[(($4051)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4158$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4157,$4156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4158$0=$4158$r;var $4158$1=tempRet0;if (!__THREW__) { label=805;break; } else { label=812;break; }
 case 805: 
 var $4159$0=$4156;
 var $4159$1=0;
 var $$etemp$540$0=1;
 var $$etemp$540$1=0;
 var $4160$0=_bitshift64Shl($$etemp$540$0,$$etemp$540$1,$4159$0);var $4160$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $4161$0=_i64Add($4160$0,$4160$1,$4158$0,$4158$1);var $4161$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4104; var $4162$0=HEAP32[((tempDoublePtr)>>2)];var $4162$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$541$0=-1;
 var $$etemp$541$1=-1;
 var $4163$0=$4162$0^$$etemp$541$0;
 var $4163$1=$4162$1^$$etemp$541$1;
 var $4164$0=($4163$0>>>22)|($4163$1<<10);
 var $4164$1=($4163$1>>>22)|(0<<10);
 var $4165$0=($4163$1>>31)|((((((($4163$1|0)<0))|0)?-1:0))<<1);
 var $4165$1=((((((($4163$1|0)<0))|0)?-1:0))>>31)|((((((($4163$1|0)<0))|0)?-1:0))<<1);
 var $4166$0=($4165$0>>>23)|($4165$1<<9);
 var $4166$1=($4165$1>>>23)|(0<<9);
 var $4167$0=$4164$0^$4166$0;
 var $4167$1=$4164$1^$4166$1;
 var $4168$0=_i64Subtract($4167$0,$4167$1,$4161$0,$4161$1);var $4168$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $4169$0=($4168$1>>>9)|(0<<23);
 var $4169$1=(0>>>9)|(0<<23);
 var $$etemp$542$0=0;
 var $$etemp$542$1=0;
 var $4170$0=_i64Subtract($$etemp$542$0,$$etemp$542$1,$4169$0,$4169$1);var $4170$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4171$0=($4170$0>>>23)|($4170$1<<9);
 var $4171$1=($4170$1>>>23)|(0<<9);
 var $4172$0=$4171$0^$4168$0;
 var $4172$1=$4171$1^$4168$1;
 var $4173$0=($4172$0<<22)|(0>>>10);
 var $4173$1=($4172$1<<22)|($4172$0>>>10);
 var $$etemp$543$0=-4194304;
 var $$etemp$543$1=-1;
 var $4174$0=$4173$0^$$etemp$543$0;
 var $4174$1=$4173$1^$$etemp$543$1;
 var $_01184_in$1=$4174$1;var $_01184_in$0=$4174$0;label=807;break; //@line 63 "inc/pcdecoder.inl"
 case 806: 
 HEAPF64[(tempDoublePtr)>>3]=$4104; var $4176$0=HEAP32[((tempDoublePtr)>>2)];var $4176$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$544$0=-4194304;
 var $$etemp$544$1=-1;
 var $4177$0=$4176$0&$$etemp$544$0;
 var $4177$1=$4176$1&$$etemp$544$1;
 var $_01184_in$1=$4177$1;var $_01184_in$0=$4177$0;label=807;break; //@line 66 "inc/pcdecoder.inl"
 case 807: 
 var $_01184_in$0;
 var $_01184_in$1;
 var $_01184=(HEAP32[((tempDoublePtr)>>2)]=$_01184_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01184_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $4178=(($_21192+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21192)>>3)]=$_01184; //@line 65 "src/read.cpp"
 var $_01185=1;var $f_i634_sroa_55_6=$f_i634_sroa_55_5;label=808;break; //@line 22 "inc/front.h"
 case 808: 
 var $f_i634_sroa_55_6;
 var $_01185;
 var $4180=((($f_i634_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4181=$f_i634_sroa_55_6&$storemerge_i_i_i639; //@line 23 "inc/front.h"
 var $4182=(($4043+($4181<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4182)>>3)]=$_01184; //@line 23 "inc/front.h"
 var $4183=((($_01185)-(1))|0); //@line 23 "inc/front.h"
 var $4184=($4183|0)==0; //@line 23 "inc/front.h"
 if($4184){label=809;break;}else{var $_01185=$4183;var $f_i634_sroa_55_6=$4180;label=808;break;} //@line 23 "inc/front.h"
 case 809: 
 var $4185=((($x_i635_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21192=$4178;var $f_i634_sroa_55_5=$4180;var $x_i635_0=$4185;label=796;break; //@line 49 "src/read.cpp"
 case 810: 
 var $4187$0 = ___cxa_find_matching_catch(-1, -1); var $4187$1 = tempRet0;
 var $4188=$4187$0;
 var $4189=$4187$1;
 var $4190=($4010|0)==0;
 if($4190){var $_01193=$4188;var $_01195=$4189;label=822;break;}else{label=811;break;}
 case 811: 
 _free($4010);
 var $_01193=$4188;var $_01195=$4189;label=822;break;
 case 812: 
 var $4193$0 = ___cxa_find_matching_catch(-1, -1); var $4193$1 = tempRet0;
 var $4194=$4193$0;
 var $4195=$4193$1;
 var $4196=($4035|0)==0; //@line 11 "inc/front.h"
 if($4196){var $_01193=$4194;var $_01195=$4195;label=822;break;}else{label=813;break;} //@line 11 "inc/front.h"
 case 813: 
 _free($4035);
 var $_01193=$4194;var $_01195=$4195;label=822;break; //@line 11 "inc/front.h"
 case 814: 
 var $4198=((($y_i636_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11191=$_21192;var $f_i634_sroa_55_3=$f_i634_sroa_55_5;var $y_i636_0=$4198;label=794;break; //@line 48 "src/read.cpp"
 case 815: 
 var $4200=((($z_i637_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01190=$_11191;var $f_i634_sroa_55_1=$f_i634_sroa_55_3;var $z_i637_0=$4200;label=792;break; //@line 47 "src/read.cpp"
 case 816: 
 var $4202=($4014|0)==0; //@line 69 "src/read.cpp"
 if($4202){label=818;break;}else{label=817;break;} //@line 69 "src/read.cpp"
 case 817: 
 _free($4014);
 label=818;break; //@line 69 "src/read.cpp"
 case 818: 
 var $4204=HEAP32[(($rm_i632)>>2)]; //@line 70 "src/read.cpp"
 var $4205=($4204|0)==0; //@line 70 "src/read.cpp"
 if($4205){label=820;break;}else{label=819;break;} //@line 70 "src/read.cpp"
 case 819: 
 var $4207=$4204; //@line 70 "src/read.cpp"
 var $4208=HEAP32[(($4207)>>2)]; //@line 70 "src/read.cpp"
 var $4209=(($4208+4)|0); //@line 70 "src/read.cpp"
 var $4210=HEAP32[(($4209)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4210]($4204); //@line 70 "src/read.cpp"
 label=820;break; //@line 70 "src/read.cpp"
 case 820: 
 var $4212=($4035|0)==0; //@line 11 "inc/front.h"
 if($4212){label=1285;break;}else{label=821;break;} //@line 11 "inc/front.h"
 case 821: 
 _free($4035);
 label=1285;break; //@line 11 "inc/front.h"
 case 822: 
 var $_01195;
 var $_01193;
 var $4213$0=$_01193;
 var $4213$1=0;
 var $4214$0=$4213$0;
 var $4214$1=$_01195;
 ___resumeException($4214$0) //@line 71 "src/read.cpp"
 case 823: 
 var $4216=HEAP32[(($3)>>2)]; //@line 187 "src/read.cpp"
 var $4217=HEAP32[(($4)>>2)]; //@line 187 "src/read.cpp"
 var $4218=HEAP32[(($5)>>2)]; //@line 187 "src/read.cpp"
 var $4219=HEAP32[(($6)>>2)]; //@line 187 "src/read.cpp"
 var $$etemp$545$0=4;
 var $$etemp$545$1=0;

 var $4220=__Znwj(48); //@line 41 "src/read.cpp"
 var $4221=$4220; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4221,0,89,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=824;break; } else { label=852;break; } //@line 41 "src/read.cpp"
 case 824: 
 var $4223=$4220; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i668)>>2)]=$4223; //@line 71 "src/read.cpp"
 var $4224=__Znwj(12); //@line 42 "src/read.cpp"
 var $4225=(($4224+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4226=$4225; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4226)>>2)]=$4216; //@line 34 "inc/pcdecoder.inl"
 var $4227=(($4224+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4228=$4227; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4228)>>2)]=$rm_i668; //@line 34 "inc/pcdecoder.inl"
 var $4229=((($4217)+(1))|0); //@line 10 "inc/front.h"
 var $4230=((($4218)+(1))|0); //@line 10 "inc/front.h"
 var $4231=(Math_imul($4229,$4230)|0); //@line 10 "inc/front.h"
 var $4232=((($4217)+(2))|0); //@line 9 "inc/front.h"
 var $4233=((($4232)+($4231))|0); //@line 9 "inc/front.h"
 var $4234=((($4233)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i675=$4234;label=825;break; //@line 45 "inc/front.h"
 case 825: 
 var $storemerge_i_i_i675;
 var $4236=((($storemerge_i_i_i675)+(1))|0); //@line 45 "inc/front.h"
 var $4237=$storemerge_i_i_i675&$4236; //@line 45 "inc/front.h"
 var $4238=($4237|0)==0; //@line 45 "inc/front.h"
 if($4238){label=827;break;}else{label=826;break;} //@line 45 "inc/front.h"
 case 826: 
 var $4240=$storemerge_i_i_i675|$4236; //@line 45 "inc/front.h"
 var $storemerge_i_i_i675=$4240;label=825;break; //@line 45 "inc/front.h"
 case 827: 
 var $4241$0=_llvm_umul_with_overflow_i32($4236,8);
 var $4241$1=tempRet0;
 var $4242=$4241$1;
 var $4243=$4241$0;
 var $4244=($4242?-1:$4243); //@line 9 "inc/front.h"
 var $4245=(function() { try { __THREW__ = 0; return __Znwj($4244) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=831;break; } else { label=828;break; }
 case 828: 
 var $4247$0 = ___cxa_find_matching_catch(-1, -1); var $4247$1 = tempRet0;
 var $4248=$4247$1;
 var $4249=($4248|0)<0;
 if($4249){label=829;break;}else{label=830;break;}
 case 829: 
 var $4251=$4247$0;
 ___cxa_call_unexpected($4251);
 throw "Reached an unreachable!";
 case 830: 
 ___resumeException($4247$0)
 case 831: 
 var $4253=$4245; //@line 9 "inc/front.h"
 var $_01177=$4231;var $f_i670_sroa_55_0=0;label=832;break; //@line 22 "inc/front.h"
 case 832: 
 var $f_i670_sroa_55_0;
 var $_01177;
 var $4255=((($f_i670_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4256=$f_i670_sroa_55_0&$storemerge_i_i_i675; //@line 23 "inc/front.h"
 var $4257=(($4253+($4256<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4257)>>3)]=0; //@line 23 "inc/front.h"
 var $4258=((($_01177)-(1))|0); //@line 23 "inc/front.h"
 var $4259=($4258|0)==0; //@line 23 "inc/front.h"
 if($4259){label=833;break;}else{var $_01177=$4258;var $f_i670_sroa_55_0=$4255;label=832;break;} //@line 23 "inc/front.h"
 case 833: 
 var $4260=(($4224+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4261=$4260; //@line 50 "inc/pcdecoder.inl"
 var $4262=(($4224+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4263=$4262; //@line 50 "inc/pcdecoder.inl"
 var $_01178=$_01052;var $f_i670_sroa_55_1=$4255;var $z_i673_0=0;label=834;break; //@line 47 "src/read.cpp"
 case 834: 
 var $z_i673_0;
 var $f_i670_sroa_55_1;
 var $_01178;
 var $4265=($z_i673_0>>>0)<($4219>>>0); //@line 47 "src/read.cpp"
 if($4265){var $_01176=$4229;var $f_i670_sroa_55_2=$f_i670_sroa_55_1;label=835;break;}else{label=858;break;} //@line 47 "src/read.cpp"
 case 835: 
 var $f_i670_sroa_55_2;
 var $_01176;
 var $4267=((($f_i670_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4268=$f_i670_sroa_55_2&$storemerge_i_i_i675; //@line 23 "inc/front.h"
 var $4269=(($4253+($4268<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4269)>>3)]=0; //@line 23 "inc/front.h"
 var $4270=((($_01176)-(1))|0); //@line 23 "inc/front.h"
 var $4271=($4270|0)==0; //@line 23 "inc/front.h"
 if($4271){var $_11179=$_01178;var $f_i670_sroa_55_3=$4267;var $y_i672_0=0;label=836;break;}else{var $_01176=$4270;var $f_i670_sroa_55_2=$4267;label=835;break;} //@line 23 "inc/front.h"
 case 836: 
 var $y_i672_0;
 var $f_i670_sroa_55_3;
 var $_11179;
 var $4272=($y_i672_0>>>0)<($4218>>>0); //@line 48 "src/read.cpp"
 if($4272){var $_01172=1;var $f_i670_sroa_55_4=$f_i670_sroa_55_3;label=837;break;}else{label=857;break;} //@line 48 "src/read.cpp"
 case 837: 
 var $f_i670_sroa_55_4;
 var $_01172;
 var $4274=((($f_i670_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4275=$f_i670_sroa_55_4&$storemerge_i_i_i675; //@line 23 "inc/front.h"
 var $4276=(($4253+($4275<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4276)>>3)]=0; //@line 23 "inc/front.h"
 var $4277=((($_01172)-(1))|0); //@line 23 "inc/front.h"
 var $4278=($4277|0)==0; //@line 23 "inc/front.h"
 if($4278){var $_21180=$_11179;var $f_i670_sroa_55_5=$4274;var $x_i671_0=0;label=838;break;}else{var $_01172=$4277;var $f_i670_sroa_55_4=$4274;label=837;break;} //@line 23 "inc/front.h"
 case 838: 
 var $x_i671_0;
 var $f_i670_sroa_55_5;
 var $_21180;
 var $4279=($x_i671_0>>>0)<($4217>>>0); //@line 49 "src/read.cpp"
 if($4279){label=839;break;}else{label=856;break;} //@line 49 "src/read.cpp"
 case 839: 
 var $4281=((($f_i670_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4282=$4281&$storemerge_i_i_i675; //@line 16 "inc/front.h"
 var $4283=(($4253+($4282<<3))|0); //@line 16 "inc/front.h"
 var $4284=HEAPF64[(($4283)>>3)]; //@line 59 "src/read.cpp"
 var $ld$546$0=(($4283)|0);
 var $4284$$SHADOW$0=HEAP32[(($ld$546$0)>>2)];
 var $ld$547$1=(($4283+4)|0);
 var $4284$$SHADOW$1=HEAP32[(($ld$547$1)>>2)];
 var $4285=((($f_i670_sroa_55_5)-($4229))|0); //@line 16 "inc/front.h"
 var $4286=((($4285)-($4231))|0); //@line 16 "inc/front.h"
 var $4287=$4286&$storemerge_i_i_i675; //@line 16 "inc/front.h"
 var $4288=(($4253+($4287<<3))|0); //@line 16 "inc/front.h"
 var $4289=HEAPF64[(($4288)>>3)]; //@line 59 "src/read.cpp"
 var $ld$548$0=(($4288)|0);
 var $4289$$SHADOW$0=HEAP32[(($ld$548$0)>>2)];
 var $ld$549$1=(($4288+4)|0);
 var $4289$$SHADOW$1=HEAP32[(($ld$549$1)>>2)];
 var $4290=$4285&$storemerge_i_i_i675; //@line 16 "inc/front.h"
 var $4291=(($4253+($4290<<3))|0); //@line 16 "inc/front.h"
 var $4292=HEAPF64[(($4291)>>3)]; //@line 60 "src/read.cpp"
 var $ld$550$0=(($4291)|0);
 var $4292$$SHADOW$0=HEAP32[(($ld$550$0)>>2)];
 var $ld$551$1=(($4291+4)|0);
 var $4292$$SHADOW$1=HEAP32[(($ld$551$1)>>2)];
 var $4293=((($4281)-($4231))|0); //@line 16 "inc/front.h"
 var $4294=$4293&$storemerge_i_i_i675; //@line 16 "inc/front.h"
 var $4295=(($4253+($4294<<3))|0); //@line 16 "inc/front.h"
 var $4296=HEAPF64[(($4295)>>3)]; //@line 60 "src/read.cpp"
 var $ld$552$0=(($4295)|0);
 var $4296$$SHADOW$0=HEAP32[(($ld$552$0)>>2)];
 var $ld$553$1=(($4295+4)|0);
 var $4296$$SHADOW$1=HEAP32[(($ld$553$1)>>2)];
 var $4297=((($f_i670_sroa_55_5)-($4231))|0); //@line 16 "inc/front.h"
 var $4298=$4297&$storemerge_i_i_i675; //@line 16 "inc/front.h"
 var $4299=(($4253+($4298<<3))|0); //@line 16 "inc/front.h"
 var $4300=HEAPF64[(($4299)>>3)]; //@line 61 "src/read.cpp"
 var $ld$554$0=(($4299)|0);
 var $4300$$SHADOW$0=HEAP32[(($ld$554$0)>>2)];
 var $ld$555$1=(($4299+4)|0);
 var $4300$$SHADOW$1=HEAP32[(($ld$555$1)>>2)];
 var $4301=((($4281)-($4229))|0); //@line 16 "inc/front.h"
 var $4302=$4301&$storemerge_i_i_i675; //@line 16 "inc/front.h"
 var $4303=(($4253+($4302<<3))|0); //@line 16 "inc/front.h"
 var $4304=HEAPF64[(($4303)>>3)]; //@line 61 "src/read.cpp"
 var $ld$556$0=(($4303)|0);
 var $4304$$SHADOW$0=HEAP32[(($ld$556$0)>>2)];
 var $ld$557$1=(($4303+4)|0);
 var $4304$$SHADOW$1=HEAP32[(($ld$557$1)>>2)];
 var $4305=((($4301)-($4231))|0); //@line 16 "inc/front.h"
 var $4306=$4305&$storemerge_i_i_i675; //@line 16 "inc/front.h"
 var $4307=(($4253+($4306<<3))|0); //@line 16 "inc/front.h"
 var $4308=($4284)-($4289); //@line 59 "src/read.cpp"
 var $4309=($4308)+($4292); //@line 60 "src/read.cpp"
 var $4310=($4309)-($4296); //@line 60 "src/read.cpp"
 var $4311=($4310)+($4300); //@line 61 "src/read.cpp"
 var $4312=($4311)-($4304); //@line 61 "src/read.cpp"
 var $4313=HEAPF64[(($4307)>>3)]; //@line 62 "src/read.cpp"
 var $ld$558$0=(($4307)|0);
 var $4313$$SHADOW$0=HEAP32[(($ld$558$0)>>2)];
 var $ld$559$1=(($4307+4)|0);
 var $4313$$SHADOW$1=HEAP32[(($ld$559$1)>>2)];
 var $4314=($4312)+($4313); //@line 62 "src/read.cpp"
 var $4315=HEAP32[(($4261)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4316=HEAP32[(($4263)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4317=HEAP32[(($4316)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$560$0=4;
 var $$etemp$560$1=0;

 var $$etemp$561$0=4;
 var $$etemp$561$1=0;

 var $4318=$4317; //@line 25 "src/rcdecoder.cpp"
 var $4319=HEAP32[(($4318)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4320=(($4319+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4321=HEAP32[(($4320)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4322=(($4315+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4321]($4317,$4322) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=840;break; } else { label=854;break; }
 case 840: 
 var $4323=(($4315+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4324=HEAP32[(($4323)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4325=(($4315+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4326=HEAP32[(($4325)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4327=((($4324)-($4326))|0); //@line 26 "src/rcdecoder.cpp"
 var $4328=HEAP32[(($4322)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4329=(((($4327>>>0))/(($4328>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i662)>>2)]=$4329; //@line 26 "src/rcdecoder.cpp"
 var $4330=$4317; //@line 27 "src/rcdecoder.cpp"
 var $4331=HEAP32[(($4330)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4332=(($4331+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4333=HEAP32[(($4332)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4334=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4333]($4317,$l_i_i_i662,$r_i_i_i663) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=841;break; } else { label=854;break; }
 case 841: 
 var $4335=HEAP32[(($4322)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4336=HEAP32[(($l_i_i_i662)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4337=(Math_imul($4335,$4336)|0); //@line 28 "src/rcdecoder.cpp"
 var $4338=HEAP32[(($4325)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4339=((($4338)+($4337))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4325)>>2)]=$4339; //@line 28 "src/rcdecoder.cpp"
 var $4340=HEAP32[(($r_i_i_i663)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4341=(Math_imul($4335,$4340)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4322)>>2)]=$4341; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4315) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=842;break; } else { label=854;break; }
 case 842: 
 var $$etemp$562$0=4;
 var $$etemp$562$1=0;

 var $$etemp$563$0=4;
 var $$etemp$563$1=0;

 var $4342=($4334>>>0)>44; //@line 51 "inc/pcdecoder.inl"
 if($4342){label=843;break;}else{label=845;break;} //@line 51 "inc/pcdecoder.inl"
 case 843: 
 var $4344=((($4334)-(45))|0); //@line 52 "inc/pcdecoder.inl"
 var $4345=HEAP32[(($4261)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4346$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4345,$4344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4346$0=$4346$r;var $4346$1=tempRet0;if (!__THREW__) { label=844;break; } else { label=854;break; }
 case 844: 
 var $4347$0=$4344;
 var $4347$1=0;
 var $$etemp$564$0=1;
 var $$etemp$564$1=0;
 var $4348$0=_bitshift64Shl($$etemp$564$0,$$etemp$564$1,$4347$0);var $4348$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $4349$0=_i64Add($4348$0,$4348$1,$4346$0,$4346$1);var $4349$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4314; var $4350$0=HEAP32[((tempDoublePtr)>>2)];var $4350$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$565$0=-1;
 var $$etemp$565$1=-1;
 var $4351$0=$4350$0^$$etemp$565$0;
 var $4351$1=$4350$1^$$etemp$565$1;
 var $4352$0=($4351$0>>>20)|($4351$1<<12);
 var $4352$1=($4351$1>>>20)|(0<<12);
 var $4353$0=($4351$1>>31)|((((((($4351$1|0)<0))|0)?-1:0))<<1);
 var $4353$1=((((((($4351$1|0)<0))|0)?-1:0))>>31)|((((((($4351$1|0)<0))|0)?-1:0))<<1);
 var $4354$0=($4353$0>>>21)|($4353$1<<11);
 var $4354$1=($4353$1>>>21)|(0<<11);
 var $4355$0=$4352$0^$4354$0;
 var $4355$1=$4352$1^$4354$1;
 var $4356$0=_i64Add($4355$0,$4355$1,$4349$0,$4349$1);var $4356$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $4357$0=($4356$1>>>11)|(0<<21);
 var $4357$1=(0>>>11)|(0<<21);
 var $$etemp$566$0=0;
 var $$etemp$566$1=0;
 var $4358$0=_i64Subtract($$etemp$566$0,$$etemp$566$1,$4357$0,$4357$1);var $4358$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4359$0=($4358$0>>>21)|($4358$1<<11);
 var $4359$1=($4358$1>>>21)|(0<<11);
 var $4360$0=$4359$0^$4356$0;
 var $4360$1=$4359$1^$4356$1;
 var $4361$0=($4360$0<<20)|(0>>>12);
 var $4361$1=($4360$1<<20)|($4360$0>>>12);
 var $$etemp$567$0=-1048576;
 var $$etemp$567$1=-1;
 var $4362$0=$4361$0^$$etemp$567$0;
 var $4362$1=$4361$1^$$etemp$567$1;
 var $_01170_in$1=$4362$1;var $_01170_in$0=$4362$0;label=849;break; //@line 56 "inc/pcdecoder.inl"
 case 845: 
 var $4364=($4334>>>0)<44; //@line undefined "inc/pcdecoder.inl"
 if($4364){label=846;break;}else{label=848;break;} //@line undefined "inc/pcdecoder.inl"
 case 846: 
 var $4366=(((43)-($4334))|0); //@line 59 "inc/pcdecoder.inl"
 var $4367=HEAP32[(($4261)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4368$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4367,$4366) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4368$0=$4368$r;var $4368$1=tempRet0;if (!__THREW__) { label=847;break; } else { label=854;break; }
 case 847: 
 var $4369$0=$4366;
 var $4369$1=0;
 var $$etemp$568$0=1;
 var $$etemp$568$1=0;
 var $4370$0=_bitshift64Shl($$etemp$568$0,$$etemp$568$1,$4369$0);var $4370$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $4371$0=_i64Add($4370$0,$4370$1,$4368$0,$4368$1);var $4371$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4314; var $4372$0=HEAP32[((tempDoublePtr)>>2)];var $4372$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$569$0=-1;
 var $$etemp$569$1=-1;
 var $4373$0=$4372$0^$$etemp$569$0;
 var $4373$1=$4372$1^$$etemp$569$1;
 var $4374$0=($4373$0>>>20)|($4373$1<<12);
 var $4374$1=($4373$1>>>20)|(0<<12);
 var $4375$0=($4373$1>>31)|((((((($4373$1|0)<0))|0)?-1:0))<<1);
 var $4375$1=((((((($4373$1|0)<0))|0)?-1:0))>>31)|((((((($4373$1|0)<0))|0)?-1:0))<<1);
 var $4376$0=($4375$0>>>21)|($4375$1<<11);
 var $4376$1=($4375$1>>>21)|(0<<11);
 var $4377$0=$4374$0^$4376$0;
 var $4377$1=$4374$1^$4376$1;
 var $4378$0=_i64Subtract($4377$0,$4377$1,$4371$0,$4371$1);var $4378$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $4379$0=($4378$1>>>11)|(0<<21);
 var $4379$1=(0>>>11)|(0<<21);
 var $$etemp$570$0=0;
 var $$etemp$570$1=0;
 var $4380$0=_i64Subtract($$etemp$570$0,$$etemp$570$1,$4379$0,$4379$1);var $4380$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4381$0=($4380$0>>>21)|($4380$1<<11);
 var $4381$1=($4380$1>>>21)|(0<<11);
 var $4382$0=$4381$0^$4378$0;
 var $4382$1=$4381$1^$4378$1;
 var $4383$0=($4382$0<<20)|(0>>>12);
 var $4383$1=($4382$1<<20)|($4382$0>>>12);
 var $$etemp$571$0=-1048576;
 var $$etemp$571$1=-1;
 var $4384$0=$4383$0^$$etemp$571$0;
 var $4384$1=$4383$1^$$etemp$571$1;
 var $_01170_in$1=$4384$1;var $_01170_in$0=$4384$0;label=849;break; //@line 63 "inc/pcdecoder.inl"
 case 848: 
 HEAPF64[(tempDoublePtr)>>3]=$4314; var $4386$0=HEAP32[((tempDoublePtr)>>2)];var $4386$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$572$0=-1048576;
 var $$etemp$572$1=-1;
 var $4387$0=$4386$0&$$etemp$572$0;
 var $4387$1=$4386$1&$$etemp$572$1;
 var $_01170_in$1=$4387$1;var $_01170_in$0=$4387$0;label=849;break; //@line 66 "inc/pcdecoder.inl"
 case 849: 
 var $_01170_in$0;
 var $_01170_in$1;
 var $_01170=(HEAP32[((tempDoublePtr)>>2)]=$_01170_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01170_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $4388=(($_21180+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21180)>>3)]=$_01170; //@line 65 "src/read.cpp"
 var $_01171=1;var $f_i670_sroa_55_6=$f_i670_sroa_55_5;label=850;break; //@line 22 "inc/front.h"
 case 850: 
 var $f_i670_sroa_55_6;
 var $_01171;
 var $4390=((($f_i670_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4391=$f_i670_sroa_55_6&$storemerge_i_i_i675; //@line 23 "inc/front.h"
 var $4392=(($4253+($4391<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4392)>>3)]=$_01170; //@line 23 "inc/front.h"
 var $4393=((($_01171)-(1))|0); //@line 23 "inc/front.h"
 var $4394=($4393|0)==0; //@line 23 "inc/front.h"
 if($4394){label=851;break;}else{var $_01171=$4393;var $f_i670_sroa_55_6=$4390;label=850;break;} //@line 23 "inc/front.h"
 case 851: 
 var $4395=((($x_i671_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21180=$4388;var $f_i670_sroa_55_5=$4390;var $x_i671_0=$4395;label=838;break; //@line 49 "src/read.cpp"
 case 852: 
 var $4397$0 = ___cxa_find_matching_catch(-1, -1); var $4397$1 = tempRet0;
 var $4398=$4397$0;
 var $4399=$4397$1;
 var $4400=($4220|0)==0;
 if($4400){var $_01181=$4398;var $_01182=$4399;label=864;break;}else{label=853;break;}
 case 853: 
 _free($4220);
 var $_01181=$4398;var $_01182=$4399;label=864;break;
 case 854: 
 var $4403$0 = ___cxa_find_matching_catch(-1, -1); var $4403$1 = tempRet0;
 var $4404=$4403$0;
 var $4405=$4403$1;
 var $4406=($4245|0)==0; //@line 11 "inc/front.h"
 if($4406){var $_01181=$4404;var $_01182=$4405;label=864;break;}else{label=855;break;} //@line 11 "inc/front.h"
 case 855: 
 _free($4245);
 var $_01181=$4404;var $_01182=$4405;label=864;break; //@line 11 "inc/front.h"
 case 856: 
 var $4408=((($y_i672_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11179=$_21180;var $f_i670_sroa_55_3=$f_i670_sroa_55_5;var $y_i672_0=$4408;label=836;break; //@line 48 "src/read.cpp"
 case 857: 
 var $4410=((($z_i673_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01178=$_11179;var $f_i670_sroa_55_1=$f_i670_sroa_55_3;var $z_i673_0=$4410;label=834;break; //@line 47 "src/read.cpp"
 case 858: 
 var $4412=($4224|0)==0; //@line 69 "src/read.cpp"
 if($4412){label=860;break;}else{label=859;break;} //@line 69 "src/read.cpp"
 case 859: 
 _free($4224);
 label=860;break; //@line 69 "src/read.cpp"
 case 860: 
 var $4414=HEAP32[(($rm_i668)>>2)]; //@line 70 "src/read.cpp"
 var $4415=($4414|0)==0; //@line 70 "src/read.cpp"
 if($4415){label=862;break;}else{label=861;break;} //@line 70 "src/read.cpp"
 case 861: 
 var $4417=$4414; //@line 70 "src/read.cpp"
 var $4418=HEAP32[(($4417)>>2)]; //@line 70 "src/read.cpp"
 var $4419=(($4418+4)|0); //@line 70 "src/read.cpp"
 var $4420=HEAP32[(($4419)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4420]($4414); //@line 70 "src/read.cpp"
 label=862;break; //@line 70 "src/read.cpp"
 case 862: 
 var $4422=($4245|0)==0; //@line 11 "inc/front.h"
 if($4422){label=1285;break;}else{label=863;break;} //@line 11 "inc/front.h"
 case 863: 
 _free($4245);
 label=1285;break; //@line 11 "inc/front.h"
 case 864: 
 var $_01182;
 var $_01181;
 var $4423$0=$_01181;
 var $4423$1=0;
 var $4424$0=$4423$0;
 var $4424$1=$_01182;
 ___resumeException($4424$0) //@line 71 "src/read.cpp"
 case 865: 
 var $4426=HEAP32[(($3)>>2)]; //@line 188 "src/read.cpp"
 var $4427=HEAP32[(($4)>>2)]; //@line 188 "src/read.cpp"
 var $4428=HEAP32[(($5)>>2)]; //@line 188 "src/read.cpp"
 var $4429=HEAP32[(($6)>>2)]; //@line 188 "src/read.cpp"
 var $$etemp$573$0=4;
 var $$etemp$573$1=0;

 var $4430=__Znwj(48); //@line 41 "src/read.cpp"
 var $4431=$4430; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4431,0,93,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=866;break; } else { label=894;break; } //@line 41 "src/read.cpp"
 case 866: 
 var $4433=$4430; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i704)>>2)]=$4433; //@line 71 "src/read.cpp"
 var $4434=__Znwj(12); //@line 42 "src/read.cpp"
 var $4435=(($4434+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4436=$4435; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4436)>>2)]=$4426; //@line 34 "inc/pcdecoder.inl"
 var $4437=(($4434+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4438=$4437; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4438)>>2)]=$rm_i704; //@line 34 "inc/pcdecoder.inl"
 var $4439=((($4427)+(1))|0); //@line 10 "inc/front.h"
 var $4440=((($4428)+(1))|0); //@line 10 "inc/front.h"
 var $4441=(Math_imul($4439,$4440)|0); //@line 10 "inc/front.h"
 var $4442=((($4427)+(2))|0); //@line 9 "inc/front.h"
 var $4443=((($4442)+($4441))|0); //@line 9 "inc/front.h"
 var $4444=((($4443)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i711=$4444;label=867;break; //@line 45 "inc/front.h"
 case 867: 
 var $storemerge_i_i_i711;
 var $4446=((($storemerge_i_i_i711)+(1))|0); //@line 45 "inc/front.h"
 var $4447=$storemerge_i_i_i711&$4446; //@line 45 "inc/front.h"
 var $4448=($4447|0)==0; //@line 45 "inc/front.h"
 if($4448){label=869;break;}else{label=868;break;} //@line 45 "inc/front.h"
 case 868: 
 var $4450=$storemerge_i_i_i711|$4446; //@line 45 "inc/front.h"
 var $storemerge_i_i_i711=$4450;label=867;break; //@line 45 "inc/front.h"
 case 869: 
 var $4451$0=_llvm_umul_with_overflow_i32($4446,8);
 var $4451$1=tempRet0;
 var $4452=$4451$1;
 var $4453=$4451$0;
 var $4454=($4452?-1:$4453); //@line 9 "inc/front.h"
 var $4455=(function() { try { __THREW__ = 0; return __Znwj($4454) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=873;break; } else { label=870;break; }
 case 870: 
 var $4457$0 = ___cxa_find_matching_catch(-1, -1); var $4457$1 = tempRet0;
 var $4458=$4457$1;
 var $4459=($4458|0)<0;
 if($4459){label=871;break;}else{label=872;break;}
 case 871: 
 var $4461=$4457$0;
 ___cxa_call_unexpected($4461);
 throw "Reached an unreachable!";
 case 872: 
 ___resumeException($4457$0)
 case 873: 
 var $4463=$4455; //@line 9 "inc/front.h"
 var $_01162=$4441;var $f_i706_sroa_55_0=0;label=874;break; //@line 22 "inc/front.h"
 case 874: 
 var $f_i706_sroa_55_0;
 var $_01162;
 var $4465=((($f_i706_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4466=$f_i706_sroa_55_0&$storemerge_i_i_i711; //@line 23 "inc/front.h"
 var $4467=(($4463+($4466<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4467)>>3)]=0; //@line 23 "inc/front.h"
 var $4468=((($_01162)-(1))|0); //@line 23 "inc/front.h"
 var $4469=($4468|0)==0; //@line 23 "inc/front.h"
 if($4469){label=875;break;}else{var $_01162=$4468;var $f_i706_sroa_55_0=$4465;label=874;break;} //@line 23 "inc/front.h"
 case 875: 
 var $4470=(($4434+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4471=$4470; //@line 50 "inc/pcdecoder.inl"
 var $4472=(($4434+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4473=$4472; //@line 50 "inc/pcdecoder.inl"
 var $_01163=$_01052;var $f_i706_sroa_55_1=$4465;var $z_i709_0=0;label=876;break; //@line 47 "src/read.cpp"
 case 876: 
 var $z_i709_0;
 var $f_i706_sroa_55_1;
 var $_01163;
 var $4475=($z_i709_0>>>0)<($4429>>>0); //@line 47 "src/read.cpp"
 if($4475){var $_01161=$4439;var $f_i706_sroa_55_2=$f_i706_sroa_55_1;label=877;break;}else{label=900;break;} //@line 47 "src/read.cpp"
 case 877: 
 var $f_i706_sroa_55_2;
 var $_01161;
 var $4477=((($f_i706_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4478=$f_i706_sroa_55_2&$storemerge_i_i_i711; //@line 23 "inc/front.h"
 var $4479=(($4463+($4478<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4479)>>3)]=0; //@line 23 "inc/front.h"
 var $4480=((($_01161)-(1))|0); //@line 23 "inc/front.h"
 var $4481=($4480|0)==0; //@line 23 "inc/front.h"
 if($4481){var $_11164=$_01163;var $f_i706_sroa_55_3=$4477;var $y_i708_0=0;label=878;break;}else{var $_01161=$4480;var $f_i706_sroa_55_2=$4477;label=877;break;} //@line 23 "inc/front.h"
 case 878: 
 var $y_i708_0;
 var $f_i706_sroa_55_3;
 var $_11164;
 var $4482=($y_i708_0>>>0)<($4428>>>0); //@line 48 "src/read.cpp"
 if($4482){var $_01160=1;var $f_i706_sroa_55_4=$f_i706_sroa_55_3;label=879;break;}else{label=899;break;} //@line 48 "src/read.cpp"
 case 879: 
 var $f_i706_sroa_55_4;
 var $_01160;
 var $4484=((($f_i706_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4485=$f_i706_sroa_55_4&$storemerge_i_i_i711; //@line 23 "inc/front.h"
 var $4486=(($4463+($4485<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4486)>>3)]=0; //@line 23 "inc/front.h"
 var $4487=((($_01160)-(1))|0); //@line 23 "inc/front.h"
 var $4488=($4487|0)==0; //@line 23 "inc/front.h"
 if($4488){var $_21165=$_11164;var $f_i706_sroa_55_5=$4484;var $x_i707_0=0;label=880;break;}else{var $_01160=$4487;var $f_i706_sroa_55_4=$4484;label=879;break;} //@line 23 "inc/front.h"
 case 880: 
 var $x_i707_0;
 var $f_i706_sroa_55_5;
 var $_21165;
 var $4489=($x_i707_0>>>0)<($4427>>>0); //@line 49 "src/read.cpp"
 if($4489){label=881;break;}else{label=898;break;} //@line 49 "src/read.cpp"
 case 881: 
 var $4491=((($f_i706_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4492=$4491&$storemerge_i_i_i711; //@line 16 "inc/front.h"
 var $4493=(($4463+($4492<<3))|0); //@line 16 "inc/front.h"
 var $4494=HEAPF64[(($4493)>>3)]; //@line 59 "src/read.cpp"
 var $ld$574$0=(($4493)|0);
 var $4494$$SHADOW$0=HEAP32[(($ld$574$0)>>2)];
 var $ld$575$1=(($4493+4)|0);
 var $4494$$SHADOW$1=HEAP32[(($ld$575$1)>>2)];
 var $4495=((($f_i706_sroa_55_5)-($4439))|0); //@line 16 "inc/front.h"
 var $4496=((($4495)-($4441))|0); //@line 16 "inc/front.h"
 var $4497=$4496&$storemerge_i_i_i711; //@line 16 "inc/front.h"
 var $4498=(($4463+($4497<<3))|0); //@line 16 "inc/front.h"
 var $4499=HEAPF64[(($4498)>>3)]; //@line 59 "src/read.cpp"
 var $ld$576$0=(($4498)|0);
 var $4499$$SHADOW$0=HEAP32[(($ld$576$0)>>2)];
 var $ld$577$1=(($4498+4)|0);
 var $4499$$SHADOW$1=HEAP32[(($ld$577$1)>>2)];
 var $4500=$4495&$storemerge_i_i_i711; //@line 16 "inc/front.h"
 var $4501=(($4463+($4500<<3))|0); //@line 16 "inc/front.h"
 var $4502=HEAPF64[(($4501)>>3)]; //@line 60 "src/read.cpp"
 var $ld$578$0=(($4501)|0);
 var $4502$$SHADOW$0=HEAP32[(($ld$578$0)>>2)];
 var $ld$579$1=(($4501+4)|0);
 var $4502$$SHADOW$1=HEAP32[(($ld$579$1)>>2)];
 var $4503=((($4491)-($4441))|0); //@line 16 "inc/front.h"
 var $4504=$4503&$storemerge_i_i_i711; //@line 16 "inc/front.h"
 var $4505=(($4463+($4504<<3))|0); //@line 16 "inc/front.h"
 var $4506=HEAPF64[(($4505)>>3)]; //@line 60 "src/read.cpp"
 var $ld$580$0=(($4505)|0);
 var $4506$$SHADOW$0=HEAP32[(($ld$580$0)>>2)];
 var $ld$581$1=(($4505+4)|0);
 var $4506$$SHADOW$1=HEAP32[(($ld$581$1)>>2)];
 var $4507=((($f_i706_sroa_55_5)-($4441))|0); //@line 16 "inc/front.h"
 var $4508=$4507&$storemerge_i_i_i711; //@line 16 "inc/front.h"
 var $4509=(($4463+($4508<<3))|0); //@line 16 "inc/front.h"
 var $4510=HEAPF64[(($4509)>>3)]; //@line 61 "src/read.cpp"
 var $ld$582$0=(($4509)|0);
 var $4510$$SHADOW$0=HEAP32[(($ld$582$0)>>2)];
 var $ld$583$1=(($4509+4)|0);
 var $4510$$SHADOW$1=HEAP32[(($ld$583$1)>>2)];
 var $4511=((($4491)-($4439))|0); //@line 16 "inc/front.h"
 var $4512=$4511&$storemerge_i_i_i711; //@line 16 "inc/front.h"
 var $4513=(($4463+($4512<<3))|0); //@line 16 "inc/front.h"
 var $4514=HEAPF64[(($4513)>>3)]; //@line 61 "src/read.cpp"
 var $ld$584$0=(($4513)|0);
 var $4514$$SHADOW$0=HEAP32[(($ld$584$0)>>2)];
 var $ld$585$1=(($4513+4)|0);
 var $4514$$SHADOW$1=HEAP32[(($ld$585$1)>>2)];
 var $4515=((($4511)-($4441))|0); //@line 16 "inc/front.h"
 var $4516=$4515&$storemerge_i_i_i711; //@line 16 "inc/front.h"
 var $4517=(($4463+($4516<<3))|0); //@line 16 "inc/front.h"
 var $4518=($4494)-($4499); //@line 59 "src/read.cpp"
 var $4519=($4518)+($4502); //@line 60 "src/read.cpp"
 var $4520=($4519)-($4506); //@line 60 "src/read.cpp"
 var $4521=($4520)+($4510); //@line 61 "src/read.cpp"
 var $4522=($4521)-($4514); //@line 61 "src/read.cpp"
 var $4523=HEAPF64[(($4517)>>3)]; //@line 62 "src/read.cpp"
 var $ld$586$0=(($4517)|0);
 var $4523$$SHADOW$0=HEAP32[(($ld$586$0)>>2)];
 var $ld$587$1=(($4517+4)|0);
 var $4523$$SHADOW$1=HEAP32[(($ld$587$1)>>2)];
 var $4524=($4522)+($4523); //@line 62 "src/read.cpp"
 var $4525=HEAP32[(($4471)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4526=HEAP32[(($4473)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4527=HEAP32[(($4526)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$588$0=4;
 var $$etemp$588$1=0;

 var $$etemp$589$0=4;
 var $$etemp$589$1=0;

 var $4528=$4527; //@line 25 "src/rcdecoder.cpp"
 var $4529=HEAP32[(($4528)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4530=(($4529+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4531=HEAP32[(($4530)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4532=(($4525+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4531]($4527,$4532) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=882;break; } else { label=896;break; }
 case 882: 
 var $4533=(($4525+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4534=HEAP32[(($4533)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4535=(($4525+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4536=HEAP32[(($4535)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4537=((($4534)-($4536))|0); //@line 26 "src/rcdecoder.cpp"
 var $4538=HEAP32[(($4532)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4539=(((($4537>>>0))/(($4538>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i698)>>2)]=$4539; //@line 26 "src/rcdecoder.cpp"
 var $4540=$4527; //@line 27 "src/rcdecoder.cpp"
 var $4541=HEAP32[(($4540)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4542=(($4541+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4543=HEAP32[(($4542)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4544=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4543]($4527,$l_i_i_i698,$r_i_i_i699) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=883;break; } else { label=896;break; }
 case 883: 
 var $4545=HEAP32[(($4532)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4546=HEAP32[(($l_i_i_i698)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4547=(Math_imul($4545,$4546)|0); //@line 28 "src/rcdecoder.cpp"
 var $4548=HEAP32[(($4535)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4549=((($4548)+($4547))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4535)>>2)]=$4549; //@line 28 "src/rcdecoder.cpp"
 var $4550=HEAP32[(($r_i_i_i699)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4551=(Math_imul($4545,$4550)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4532)>>2)]=$4551; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4525) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=884;break; } else { label=896;break; }
 case 884: 
 var $$etemp$590$0=4;
 var $$etemp$590$1=0;

 var $$etemp$591$0=4;
 var $$etemp$591$1=0;

 var $4552=($4544>>>0)>46; //@line 51 "inc/pcdecoder.inl"
 if($4552){label=885;break;}else{label=887;break;} //@line 51 "inc/pcdecoder.inl"
 case 885: 
 var $4554=((($4544)-(47))|0); //@line 52 "inc/pcdecoder.inl"
 var $4555=HEAP32[(($4471)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4556$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4555,$4554) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4556$0=$4556$r;var $4556$1=tempRet0;if (!__THREW__) { label=886;break; } else { label=896;break; }
 case 886: 
 var $4557$0=$4554;
 var $4557$1=0;
 var $$etemp$592$0=1;
 var $$etemp$592$1=0;
 var $4558$0=_bitshift64Shl($$etemp$592$0,$$etemp$592$1,$4557$0);var $4558$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $4559$0=_i64Add($4558$0,$4558$1,$4556$0,$4556$1);var $4559$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4524; var $4560$0=HEAP32[((tempDoublePtr)>>2)];var $4560$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$593$0=-1;
 var $$etemp$593$1=-1;
 var $4561$0=$4560$0^$$etemp$593$0;
 var $4561$1=$4560$1^$$etemp$593$1;
 var $4562$0=($4561$0>>>18)|($4561$1<<14);
 var $4562$1=($4561$1>>>18)|(0<<14);
 var $4563$0=($4561$1>>31)|((((((($4561$1|0)<0))|0)?-1:0))<<1);
 var $4563$1=((((((($4561$1|0)<0))|0)?-1:0))>>31)|((((((($4561$1|0)<0))|0)?-1:0))<<1);
 var $4564$0=($4563$0>>>19)|($4563$1<<13);
 var $4564$1=($4563$1>>>19)|(0<<13);
 var $4565$0=$4562$0^$4564$0;
 var $4565$1=$4562$1^$4564$1;
 var $4566$0=_i64Add($4565$0,$4565$1,$4559$0,$4559$1);var $4566$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $4567$0=($4566$1>>>13)|(0<<19);
 var $4567$1=(0>>>13)|(0<<19);
 var $$etemp$594$0=0;
 var $$etemp$594$1=0;
 var $4568$0=_i64Subtract($$etemp$594$0,$$etemp$594$1,$4567$0,$4567$1);var $4568$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4569$0=($4568$0>>>19)|($4568$1<<13);
 var $4569$1=($4568$1>>>19)|(0<<13);
 var $4570$0=$4569$0^$4566$0;
 var $4570$1=$4569$1^$4566$1;
 var $4571$0=($4570$0<<18)|(0>>>14);
 var $4571$1=($4570$1<<18)|($4570$0>>>14);
 var $$etemp$595$0=-262144;
 var $$etemp$595$1=-1;
 var $4572$0=$4571$0^$$etemp$595$0;
 var $4572$1=$4571$1^$$etemp$595$1;
 var $_01158_in$1=$4572$1;var $_01158_in$0=$4572$0;label=891;break; //@line 56 "inc/pcdecoder.inl"
 case 887: 
 var $4574=($4544>>>0)<46; //@line undefined "inc/pcdecoder.inl"
 if($4574){label=888;break;}else{label=890;break;} //@line undefined "inc/pcdecoder.inl"
 case 888: 
 var $4576=(((45)-($4544))|0); //@line 59 "inc/pcdecoder.inl"
 var $4577=HEAP32[(($4471)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4578$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4577,$4576) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4578$0=$4578$r;var $4578$1=tempRet0;if (!__THREW__) { label=889;break; } else { label=896;break; }
 case 889: 
 var $4579$0=$4576;
 var $4579$1=0;
 var $$etemp$596$0=1;
 var $$etemp$596$1=0;
 var $4580$0=_bitshift64Shl($$etemp$596$0,$$etemp$596$1,$4579$0);var $4580$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $4581$0=_i64Add($4580$0,$4580$1,$4578$0,$4578$1);var $4581$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4524; var $4582$0=HEAP32[((tempDoublePtr)>>2)];var $4582$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$597$0=-1;
 var $$etemp$597$1=-1;
 var $4583$0=$4582$0^$$etemp$597$0;
 var $4583$1=$4582$1^$$etemp$597$1;
 var $4584$0=($4583$0>>>18)|($4583$1<<14);
 var $4584$1=($4583$1>>>18)|(0<<14);
 var $4585$0=($4583$1>>31)|((((((($4583$1|0)<0))|0)?-1:0))<<1);
 var $4585$1=((((((($4583$1|0)<0))|0)?-1:0))>>31)|((((((($4583$1|0)<0))|0)?-1:0))<<1);
 var $4586$0=($4585$0>>>19)|($4585$1<<13);
 var $4586$1=($4585$1>>>19)|(0<<13);
 var $4587$0=$4584$0^$4586$0;
 var $4587$1=$4584$1^$4586$1;
 var $4588$0=_i64Subtract($4587$0,$4587$1,$4581$0,$4581$1);var $4588$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $4589$0=($4588$1>>>13)|(0<<19);
 var $4589$1=(0>>>13)|(0<<19);
 var $$etemp$598$0=0;
 var $$etemp$598$1=0;
 var $4590$0=_i64Subtract($$etemp$598$0,$$etemp$598$1,$4589$0,$4589$1);var $4590$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4591$0=($4590$0>>>19)|($4590$1<<13);
 var $4591$1=($4590$1>>>19)|(0<<13);
 var $4592$0=$4591$0^$4588$0;
 var $4592$1=$4591$1^$4588$1;
 var $4593$0=($4592$0<<18)|(0>>>14);
 var $4593$1=($4592$1<<18)|($4592$0>>>14);
 var $$etemp$599$0=-262144;
 var $$etemp$599$1=-1;
 var $4594$0=$4593$0^$$etemp$599$0;
 var $4594$1=$4593$1^$$etemp$599$1;
 var $_01158_in$1=$4594$1;var $_01158_in$0=$4594$0;label=891;break; //@line 63 "inc/pcdecoder.inl"
 case 890: 
 HEAPF64[(tempDoublePtr)>>3]=$4524; var $4596$0=HEAP32[((tempDoublePtr)>>2)];var $4596$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$600$0=-262144;
 var $$etemp$600$1=-1;
 var $4597$0=$4596$0&$$etemp$600$0;
 var $4597$1=$4596$1&$$etemp$600$1;
 var $_01158_in$1=$4597$1;var $_01158_in$0=$4597$0;label=891;break; //@line 66 "inc/pcdecoder.inl"
 case 891: 
 var $_01158_in$0;
 var $_01158_in$1;
 var $_01158=(HEAP32[((tempDoublePtr)>>2)]=$_01158_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01158_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $4598=(($_21165+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21165)>>3)]=$_01158; //@line 65 "src/read.cpp"
 var $_01159=1;var $f_i706_sroa_55_6=$f_i706_sroa_55_5;label=892;break; //@line 22 "inc/front.h"
 case 892: 
 var $f_i706_sroa_55_6;
 var $_01159;
 var $4600=((($f_i706_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4601=$f_i706_sroa_55_6&$storemerge_i_i_i711; //@line 23 "inc/front.h"
 var $4602=(($4463+($4601<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4602)>>3)]=$_01158; //@line 23 "inc/front.h"
 var $4603=((($_01159)-(1))|0); //@line 23 "inc/front.h"
 var $4604=($4603|0)==0; //@line 23 "inc/front.h"
 if($4604){label=893;break;}else{var $_01159=$4603;var $f_i706_sroa_55_6=$4600;label=892;break;} //@line 23 "inc/front.h"
 case 893: 
 var $4605=((($x_i707_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21165=$4598;var $f_i706_sroa_55_5=$4600;var $x_i707_0=$4605;label=880;break; //@line 49 "src/read.cpp"
 case 894: 
 var $4607$0 = ___cxa_find_matching_catch(-1, -1); var $4607$1 = tempRet0;
 var $4608=$4607$0;
 var $4609=$4607$1;
 var $4610=($4430|0)==0;
 if($4610){var $_01166=$4608;var $_01167=$4609;label=906;break;}else{label=895;break;}
 case 895: 
 _free($4430);
 var $_01166=$4608;var $_01167=$4609;label=906;break;
 case 896: 
 var $4613$0 = ___cxa_find_matching_catch(-1, -1); var $4613$1 = tempRet0;
 var $4614=$4613$0;
 var $4615=$4613$1;
 var $4616=($4455|0)==0; //@line 11 "inc/front.h"
 if($4616){var $_01166=$4614;var $_01167=$4615;label=906;break;}else{label=897;break;} //@line 11 "inc/front.h"
 case 897: 
 _free($4455);
 var $_01166=$4614;var $_01167=$4615;label=906;break; //@line 11 "inc/front.h"
 case 898: 
 var $4618=((($y_i708_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11164=$_21165;var $f_i706_sroa_55_3=$f_i706_sroa_55_5;var $y_i708_0=$4618;label=878;break; //@line 48 "src/read.cpp"
 case 899: 
 var $4620=((($z_i709_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01163=$_11164;var $f_i706_sroa_55_1=$f_i706_sroa_55_3;var $z_i709_0=$4620;label=876;break; //@line 47 "src/read.cpp"
 case 900: 
 var $4622=($4434|0)==0; //@line 69 "src/read.cpp"
 if($4622){label=902;break;}else{label=901;break;} //@line 69 "src/read.cpp"
 case 901: 
 _free($4434);
 label=902;break; //@line 69 "src/read.cpp"
 case 902: 
 var $4624=HEAP32[(($rm_i704)>>2)]; //@line 70 "src/read.cpp"
 var $4625=($4624|0)==0; //@line 70 "src/read.cpp"
 if($4625){label=904;break;}else{label=903;break;} //@line 70 "src/read.cpp"
 case 903: 
 var $4627=$4624; //@line 70 "src/read.cpp"
 var $4628=HEAP32[(($4627)>>2)]; //@line 70 "src/read.cpp"
 var $4629=(($4628+4)|0); //@line 70 "src/read.cpp"
 var $4630=HEAP32[(($4629)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4630]($4624); //@line 70 "src/read.cpp"
 label=904;break; //@line 70 "src/read.cpp"
 case 904: 
 var $4632=($4455|0)==0; //@line 11 "inc/front.h"
 if($4632){label=1285;break;}else{label=905;break;} //@line 11 "inc/front.h"
 case 905: 
 _free($4455);
 label=1285;break; //@line 11 "inc/front.h"
 case 906: 
 var $_01167;
 var $_01166;
 var $4633$0=$_01166;
 var $4633$1=0;
 var $4634$0=$4633$0;
 var $4634$1=$_01167;
 ___resumeException($4634$0) //@line 71 "src/read.cpp"
 case 907: 
 var $4636=HEAP32[(($3)>>2)]; //@line 189 "src/read.cpp"
 var $4637=HEAP32[(($4)>>2)]; //@line 189 "src/read.cpp"
 var $4638=HEAP32[(($5)>>2)]; //@line 189 "src/read.cpp"
 var $4639=HEAP32[(($6)>>2)]; //@line 189 "src/read.cpp"
 var $$etemp$601$0=4;
 var $$etemp$601$1=0;

 var $4640=__Znwj(48); //@line 41 "src/read.cpp"
 var $4641=$4640; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4641,0,97,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=908;break; } else { label=936;break; } //@line 41 "src/read.cpp"
 case 908: 
 var $4643=$4640; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i740)>>2)]=$4643; //@line 71 "src/read.cpp"
 var $4644=__Znwj(12); //@line 42 "src/read.cpp"
 var $4645=(($4644+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4646=$4645; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4646)>>2)]=$4636; //@line 34 "inc/pcdecoder.inl"
 var $4647=(($4644+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4648=$4647; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4648)>>2)]=$rm_i740; //@line 34 "inc/pcdecoder.inl"
 var $4649=((($4637)+(1))|0); //@line 10 "inc/front.h"
 var $4650=((($4638)+(1))|0); //@line 10 "inc/front.h"
 var $4651=(Math_imul($4649,$4650)|0); //@line 10 "inc/front.h"
 var $4652=((($4637)+(2))|0); //@line 9 "inc/front.h"
 var $4653=((($4652)+($4651))|0); //@line 9 "inc/front.h"
 var $4654=((($4653)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i747=$4654;label=909;break; //@line 45 "inc/front.h"
 case 909: 
 var $storemerge_i_i_i747;
 var $4656=((($storemerge_i_i_i747)+(1))|0); //@line 45 "inc/front.h"
 var $4657=$storemerge_i_i_i747&$4656; //@line 45 "inc/front.h"
 var $4658=($4657|0)==0; //@line 45 "inc/front.h"
 if($4658){label=911;break;}else{label=910;break;} //@line 45 "inc/front.h"
 case 910: 
 var $4660=$storemerge_i_i_i747|$4656; //@line 45 "inc/front.h"
 var $storemerge_i_i_i747=$4660;label=909;break; //@line 45 "inc/front.h"
 case 911: 
 var $4661$0=_llvm_umul_with_overflow_i32($4656,8);
 var $4661$1=tempRet0;
 var $4662=$4661$1;
 var $4663=$4661$0;
 var $4664=($4662?-1:$4663); //@line 9 "inc/front.h"
 var $4665=(function() { try { __THREW__ = 0; return __Znwj($4664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=915;break; } else { label=912;break; }
 case 912: 
 var $4667$0 = ___cxa_find_matching_catch(-1, -1); var $4667$1 = tempRet0;
 var $4668=$4667$1;
 var $4669=($4668|0)<0;
 if($4669){label=913;break;}else{label=914;break;}
 case 913: 
 var $4671=$4667$0;
 ___cxa_call_unexpected($4671);
 throw "Reached an unreachable!";
 case 914: 
 ___resumeException($4667$0)
 case 915: 
 var $4673=$4665; //@line 9 "inc/front.h"
 var $_01152=$4651;var $f_i742_sroa_55_0=0;label=916;break; //@line 22 "inc/front.h"
 case 916: 
 var $f_i742_sroa_55_0;
 var $_01152;
 var $4675=((($f_i742_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4676=$f_i742_sroa_55_0&$storemerge_i_i_i747; //@line 23 "inc/front.h"
 var $4677=(($4673+($4676<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4677)>>3)]=0; //@line 23 "inc/front.h"
 var $4678=((($_01152)-(1))|0); //@line 23 "inc/front.h"
 var $4679=($4678|0)==0; //@line 23 "inc/front.h"
 if($4679){label=917;break;}else{var $_01152=$4678;var $f_i742_sroa_55_0=$4675;label=916;break;} //@line 23 "inc/front.h"
 case 917: 
 var $4680=(($4644+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4681=$4680; //@line 50 "inc/pcdecoder.inl"
 var $4682=(($4644+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4683=$4682; //@line 50 "inc/pcdecoder.inl"
 var $_01153=$_01052;var $f_i742_sroa_55_1=$4675;var $z_i745_0=0;label=918;break; //@line 47 "src/read.cpp"
 case 918: 
 var $z_i745_0;
 var $f_i742_sroa_55_1;
 var $_01153;
 var $4685=($z_i745_0>>>0)<($4639>>>0); //@line 47 "src/read.cpp"
 if($4685){var $_01151=$4649;var $f_i742_sroa_55_2=$f_i742_sroa_55_1;label=919;break;}else{label=942;break;} //@line 47 "src/read.cpp"
 case 919: 
 var $f_i742_sroa_55_2;
 var $_01151;
 var $4687=((($f_i742_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4688=$f_i742_sroa_55_2&$storemerge_i_i_i747; //@line 23 "inc/front.h"
 var $4689=(($4673+($4688<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4689)>>3)]=0; //@line 23 "inc/front.h"
 var $4690=((($_01151)-(1))|0); //@line 23 "inc/front.h"
 var $4691=($4690|0)==0; //@line 23 "inc/front.h"
 if($4691){var $_11154=$_01153;var $f_i742_sroa_55_3=$4687;var $y_i744_0=0;label=920;break;}else{var $_01151=$4690;var $f_i742_sroa_55_2=$4687;label=919;break;} //@line 23 "inc/front.h"
 case 920: 
 var $y_i744_0;
 var $f_i742_sroa_55_3;
 var $_11154;
 var $4692=($y_i744_0>>>0)<($4638>>>0); //@line 48 "src/read.cpp"
 if($4692){var $_01150=1;var $f_i742_sroa_55_4=$f_i742_sroa_55_3;label=921;break;}else{label=941;break;} //@line 48 "src/read.cpp"
 case 921: 
 var $f_i742_sroa_55_4;
 var $_01150;
 var $4694=((($f_i742_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4695=$f_i742_sroa_55_4&$storemerge_i_i_i747; //@line 23 "inc/front.h"
 var $4696=(($4673+($4695<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4696)>>3)]=0; //@line 23 "inc/front.h"
 var $4697=((($_01150)-(1))|0); //@line 23 "inc/front.h"
 var $4698=($4697|0)==0; //@line 23 "inc/front.h"
 if($4698){var $_21155=$_11154;var $f_i742_sroa_55_5=$4694;var $x_i743_0=0;label=922;break;}else{var $_01150=$4697;var $f_i742_sroa_55_4=$4694;label=921;break;} //@line 23 "inc/front.h"
 case 922: 
 var $x_i743_0;
 var $f_i742_sroa_55_5;
 var $_21155;
 var $4699=($x_i743_0>>>0)<($4637>>>0); //@line 49 "src/read.cpp"
 if($4699){label=923;break;}else{label=940;break;} //@line 49 "src/read.cpp"
 case 923: 
 var $4701=((($f_i742_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4702=$4701&$storemerge_i_i_i747; //@line 16 "inc/front.h"
 var $4703=(($4673+($4702<<3))|0); //@line 16 "inc/front.h"
 var $4704=HEAPF64[(($4703)>>3)]; //@line 59 "src/read.cpp"
 var $ld$602$0=(($4703)|0);
 var $4704$$SHADOW$0=HEAP32[(($ld$602$0)>>2)];
 var $ld$603$1=(($4703+4)|0);
 var $4704$$SHADOW$1=HEAP32[(($ld$603$1)>>2)];
 var $4705=((($f_i742_sroa_55_5)-($4649))|0); //@line 16 "inc/front.h"
 var $4706=((($4705)-($4651))|0); //@line 16 "inc/front.h"
 var $4707=$4706&$storemerge_i_i_i747; //@line 16 "inc/front.h"
 var $4708=(($4673+($4707<<3))|0); //@line 16 "inc/front.h"
 var $4709=HEAPF64[(($4708)>>3)]; //@line 59 "src/read.cpp"
 var $ld$604$0=(($4708)|0);
 var $4709$$SHADOW$0=HEAP32[(($ld$604$0)>>2)];
 var $ld$605$1=(($4708+4)|0);
 var $4709$$SHADOW$1=HEAP32[(($ld$605$1)>>2)];
 var $4710=$4705&$storemerge_i_i_i747; //@line 16 "inc/front.h"
 var $4711=(($4673+($4710<<3))|0); //@line 16 "inc/front.h"
 var $4712=HEAPF64[(($4711)>>3)]; //@line 60 "src/read.cpp"
 var $ld$606$0=(($4711)|0);
 var $4712$$SHADOW$0=HEAP32[(($ld$606$0)>>2)];
 var $ld$607$1=(($4711+4)|0);
 var $4712$$SHADOW$1=HEAP32[(($ld$607$1)>>2)];
 var $4713=((($4701)-($4651))|0); //@line 16 "inc/front.h"
 var $4714=$4713&$storemerge_i_i_i747; //@line 16 "inc/front.h"
 var $4715=(($4673+($4714<<3))|0); //@line 16 "inc/front.h"
 var $4716=HEAPF64[(($4715)>>3)]; //@line 60 "src/read.cpp"
 var $ld$608$0=(($4715)|0);
 var $4716$$SHADOW$0=HEAP32[(($ld$608$0)>>2)];
 var $ld$609$1=(($4715+4)|0);
 var $4716$$SHADOW$1=HEAP32[(($ld$609$1)>>2)];
 var $4717=((($f_i742_sroa_55_5)-($4651))|0); //@line 16 "inc/front.h"
 var $4718=$4717&$storemerge_i_i_i747; //@line 16 "inc/front.h"
 var $4719=(($4673+($4718<<3))|0); //@line 16 "inc/front.h"
 var $4720=HEAPF64[(($4719)>>3)]; //@line 61 "src/read.cpp"
 var $ld$610$0=(($4719)|0);
 var $4720$$SHADOW$0=HEAP32[(($ld$610$0)>>2)];
 var $ld$611$1=(($4719+4)|0);
 var $4720$$SHADOW$1=HEAP32[(($ld$611$1)>>2)];
 var $4721=((($4701)-($4649))|0); //@line 16 "inc/front.h"
 var $4722=$4721&$storemerge_i_i_i747; //@line 16 "inc/front.h"
 var $4723=(($4673+($4722<<3))|0); //@line 16 "inc/front.h"
 var $4724=HEAPF64[(($4723)>>3)]; //@line 61 "src/read.cpp"
 var $ld$612$0=(($4723)|0);
 var $4724$$SHADOW$0=HEAP32[(($ld$612$0)>>2)];
 var $ld$613$1=(($4723+4)|0);
 var $4724$$SHADOW$1=HEAP32[(($ld$613$1)>>2)];
 var $4725=((($4721)-($4651))|0); //@line 16 "inc/front.h"
 var $4726=$4725&$storemerge_i_i_i747; //@line 16 "inc/front.h"
 var $4727=(($4673+($4726<<3))|0); //@line 16 "inc/front.h"
 var $4728=($4704)-($4709); //@line 59 "src/read.cpp"
 var $4729=($4728)+($4712); //@line 60 "src/read.cpp"
 var $4730=($4729)-($4716); //@line 60 "src/read.cpp"
 var $4731=($4730)+($4720); //@line 61 "src/read.cpp"
 var $4732=($4731)-($4724); //@line 61 "src/read.cpp"
 var $4733=HEAPF64[(($4727)>>3)]; //@line 62 "src/read.cpp"
 var $ld$614$0=(($4727)|0);
 var $4733$$SHADOW$0=HEAP32[(($ld$614$0)>>2)];
 var $ld$615$1=(($4727+4)|0);
 var $4733$$SHADOW$1=HEAP32[(($ld$615$1)>>2)];
 var $4734=($4732)+($4733); //@line 62 "src/read.cpp"
 var $4735=HEAP32[(($4681)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4736=HEAP32[(($4683)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4737=HEAP32[(($4736)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$616$0=4;
 var $$etemp$616$1=0;

 var $$etemp$617$0=4;
 var $$etemp$617$1=0;

 var $4738=$4737; //@line 25 "src/rcdecoder.cpp"
 var $4739=HEAP32[(($4738)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4740=(($4739+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4741=HEAP32[(($4740)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4742=(($4735+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4741]($4737,$4742) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=924;break; } else { label=938;break; }
 case 924: 
 var $4743=(($4735+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4744=HEAP32[(($4743)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4745=(($4735+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4746=HEAP32[(($4745)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4747=((($4744)-($4746))|0); //@line 26 "src/rcdecoder.cpp"
 var $4748=HEAP32[(($4742)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4749=(((($4747>>>0))/(($4748>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i734)>>2)]=$4749; //@line 26 "src/rcdecoder.cpp"
 var $4750=$4737; //@line 27 "src/rcdecoder.cpp"
 var $4751=HEAP32[(($4750)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4752=(($4751+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4753=HEAP32[(($4752)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4754=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4753]($4737,$l_i_i_i734,$r_i_i_i735) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=925;break; } else { label=938;break; }
 case 925: 
 var $4755=HEAP32[(($4742)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4756=HEAP32[(($l_i_i_i734)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4757=(Math_imul($4755,$4756)|0); //@line 28 "src/rcdecoder.cpp"
 var $4758=HEAP32[(($4745)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4759=((($4758)+($4757))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4745)>>2)]=$4759; //@line 28 "src/rcdecoder.cpp"
 var $4760=HEAP32[(($r_i_i_i735)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4761=(Math_imul($4755,$4760)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4742)>>2)]=$4761; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4735) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=926;break; } else { label=938;break; }
 case 926: 
 var $$etemp$618$0=4;
 var $$etemp$618$1=0;

 var $$etemp$619$0=4;
 var $$etemp$619$1=0;

 var $4762=($4754>>>0)>48; //@line 51 "inc/pcdecoder.inl"
 if($4762){label=927;break;}else{label=929;break;} //@line 51 "inc/pcdecoder.inl"
 case 927: 
 var $4764=((($4754)-(49))|0); //@line 52 "inc/pcdecoder.inl"
 var $4765=HEAP32[(($4681)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4766$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4765,$4764) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4766$0=$4766$r;var $4766$1=tempRet0;if (!__THREW__) { label=928;break; } else { label=938;break; }
 case 928: 
 var $4767$0=$4764;
 var $4767$1=0;
 var $$etemp$620$0=1;
 var $$etemp$620$1=0;
 var $4768$0=_bitshift64Shl($$etemp$620$0,$$etemp$620$1,$4767$0);var $4768$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $4769$0=_i64Add($4768$0,$4768$1,$4766$0,$4766$1);var $4769$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4734; var $4770$0=HEAP32[((tempDoublePtr)>>2)];var $4770$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$621$0=-1;
 var $$etemp$621$1=-1;
 var $4771$0=$4770$0^$$etemp$621$0;
 var $4771$1=$4770$1^$$etemp$621$1;
 var $4772$0=($4771$0>>>16)|($4771$1<<16);
 var $4772$1=($4771$1>>>16)|(0<<16);
 var $4773$0=($4771$1>>31)|((((((($4771$1|0)<0))|0)?-1:0))<<1);
 var $4773$1=((((((($4771$1|0)<0))|0)?-1:0))>>31)|((((((($4771$1|0)<0))|0)?-1:0))<<1);
 var $4774$0=($4773$0>>>17)|($4773$1<<15);
 var $4774$1=($4773$1>>>17)|(0<<15);
 var $4775$0=$4772$0^$4774$0;
 var $4775$1=$4772$1^$4774$1;
 var $4776$0=_i64Add($4775$0,$4775$1,$4769$0,$4769$1);var $4776$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $4777$0=($4776$1>>>15)|(0<<17);
 var $4777$1=(0>>>15)|(0<<17);
 var $$etemp$622$0=0;
 var $$etemp$622$1=0;
 var $4778$0=_i64Subtract($$etemp$622$0,$$etemp$622$1,$4777$0,$4777$1);var $4778$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4779$0=($4778$0>>>17)|($4778$1<<15);
 var $4779$1=($4778$1>>>17)|(0<<15);
 var $4780$0=$4779$0^$4776$0;
 var $4780$1=$4779$1^$4776$1;
 var $4781$0=($4780$0<<16)|(0>>>16);
 var $4781$1=($4780$1<<16)|($4780$0>>>16);
 var $$etemp$623$0=-65536;
 var $$etemp$623$1=-1;
 var $4782$0=$4781$0^$$etemp$623$0;
 var $4782$1=$4781$1^$$etemp$623$1;
 var $_01147_in$1=$4782$1;var $_01147_in$0=$4782$0;label=933;break; //@line 56 "inc/pcdecoder.inl"
 case 929: 
 var $4784=($4754>>>0)<48; //@line undefined "inc/pcdecoder.inl"
 if($4784){label=930;break;}else{label=932;break;} //@line undefined "inc/pcdecoder.inl"
 case 930: 
 var $4786=(((47)-($4754))|0); //@line 59 "inc/pcdecoder.inl"
 var $4787=HEAP32[(($4681)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4788$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4787,$4786) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4788$0=$4788$r;var $4788$1=tempRet0;if (!__THREW__) { label=931;break; } else { label=938;break; }
 case 931: 
 var $4789$0=$4786;
 var $4789$1=0;
 var $$etemp$624$0=1;
 var $$etemp$624$1=0;
 var $4790$0=_bitshift64Shl($$etemp$624$0,$$etemp$624$1,$4789$0);var $4790$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $4791$0=_i64Add($4790$0,$4790$1,$4788$0,$4788$1);var $4791$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4734; var $4792$0=HEAP32[((tempDoublePtr)>>2)];var $4792$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$625$0=-1;
 var $$etemp$625$1=-1;
 var $4793$0=$4792$0^$$etemp$625$0;
 var $4793$1=$4792$1^$$etemp$625$1;
 var $4794$0=($4793$0>>>16)|($4793$1<<16);
 var $4794$1=($4793$1>>>16)|(0<<16);
 var $4795$0=($4793$1>>31)|((((((($4793$1|0)<0))|0)?-1:0))<<1);
 var $4795$1=((((((($4793$1|0)<0))|0)?-1:0))>>31)|((((((($4793$1|0)<0))|0)?-1:0))<<1);
 var $4796$0=($4795$0>>>17)|($4795$1<<15);
 var $4796$1=($4795$1>>>17)|(0<<15);
 var $4797$0=$4794$0^$4796$0;
 var $4797$1=$4794$1^$4796$1;
 var $4798$0=_i64Subtract($4797$0,$4797$1,$4791$0,$4791$1);var $4798$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $4799$0=($4798$1>>>15)|(0<<17);
 var $4799$1=(0>>>15)|(0<<17);
 var $$etemp$626$0=0;
 var $$etemp$626$1=0;
 var $4800$0=_i64Subtract($$etemp$626$0,$$etemp$626$1,$4799$0,$4799$1);var $4800$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4801$0=($4800$0>>>17)|($4800$1<<15);
 var $4801$1=($4800$1>>>17)|(0<<15);
 var $4802$0=$4801$0^$4798$0;
 var $4802$1=$4801$1^$4798$1;
 var $4803$0=($4802$0<<16)|(0>>>16);
 var $4803$1=($4802$1<<16)|($4802$0>>>16);
 var $$etemp$627$0=-65536;
 var $$etemp$627$1=-1;
 var $4804$0=$4803$0^$$etemp$627$0;
 var $4804$1=$4803$1^$$etemp$627$1;
 var $_01147_in$1=$4804$1;var $_01147_in$0=$4804$0;label=933;break; //@line 63 "inc/pcdecoder.inl"
 case 932: 
 HEAPF64[(tempDoublePtr)>>3]=$4734; var $4806$0=HEAP32[((tempDoublePtr)>>2)];var $4806$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$628$0=-65536;
 var $$etemp$628$1=-1;
 var $4807$0=$4806$0&$$etemp$628$0;
 var $4807$1=$4806$1&$$etemp$628$1;
 var $_01147_in$1=$4807$1;var $_01147_in$0=$4807$0;label=933;break; //@line 66 "inc/pcdecoder.inl"
 case 933: 
 var $_01147_in$0;
 var $_01147_in$1;
 var $_01147=(HEAP32[((tempDoublePtr)>>2)]=$_01147_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01147_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $4808=(($_21155+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21155)>>3)]=$_01147; //@line 65 "src/read.cpp"
 var $_01149=1;var $f_i742_sroa_55_6=$f_i742_sroa_55_5;label=934;break; //@line 22 "inc/front.h"
 case 934: 
 var $f_i742_sroa_55_6;
 var $_01149;
 var $4810=((($f_i742_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $4811=$f_i742_sroa_55_6&$storemerge_i_i_i747; //@line 23 "inc/front.h"
 var $4812=(($4673+($4811<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4812)>>3)]=$_01147; //@line 23 "inc/front.h"
 var $4813=((($_01149)-(1))|0); //@line 23 "inc/front.h"
 var $4814=($4813|0)==0; //@line 23 "inc/front.h"
 if($4814){label=935;break;}else{var $_01149=$4813;var $f_i742_sroa_55_6=$4810;label=934;break;} //@line 23 "inc/front.h"
 case 935: 
 var $4815=((($x_i743_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21155=$4808;var $f_i742_sroa_55_5=$4810;var $x_i743_0=$4815;label=922;break; //@line 49 "src/read.cpp"
 case 936: 
 var $4817$0 = ___cxa_find_matching_catch(-1, -1); var $4817$1 = tempRet0;
 var $4818=$4817$0;
 var $4819=$4817$1;
 var $4820=($4640|0)==0;
 if($4820){var $_01156=$4818;var $_01157=$4819;label=948;break;}else{label=937;break;}
 case 937: 
 _free($4640);
 var $_01156=$4818;var $_01157=$4819;label=948;break;
 case 938: 
 var $4823$0 = ___cxa_find_matching_catch(-1, -1); var $4823$1 = tempRet0;
 var $4824=$4823$0;
 var $4825=$4823$1;
 var $4826=($4665|0)==0; //@line 11 "inc/front.h"
 if($4826){var $_01156=$4824;var $_01157=$4825;label=948;break;}else{label=939;break;} //@line 11 "inc/front.h"
 case 939: 
 _free($4665);
 var $_01156=$4824;var $_01157=$4825;label=948;break; //@line 11 "inc/front.h"
 case 940: 
 var $4828=((($y_i744_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11154=$_21155;var $f_i742_sroa_55_3=$f_i742_sroa_55_5;var $y_i744_0=$4828;label=920;break; //@line 48 "src/read.cpp"
 case 941: 
 var $4830=((($z_i745_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01153=$_11154;var $f_i742_sroa_55_1=$f_i742_sroa_55_3;var $z_i745_0=$4830;label=918;break; //@line 47 "src/read.cpp"
 case 942: 
 var $4832=($4644|0)==0; //@line 69 "src/read.cpp"
 if($4832){label=944;break;}else{label=943;break;} //@line 69 "src/read.cpp"
 case 943: 
 _free($4644);
 label=944;break; //@line 69 "src/read.cpp"
 case 944: 
 var $4834=HEAP32[(($rm_i740)>>2)]; //@line 70 "src/read.cpp"
 var $4835=($4834|0)==0; //@line 70 "src/read.cpp"
 if($4835){label=946;break;}else{label=945;break;} //@line 70 "src/read.cpp"
 case 945: 
 var $4837=$4834; //@line 70 "src/read.cpp"
 var $4838=HEAP32[(($4837)>>2)]; //@line 70 "src/read.cpp"
 var $4839=(($4838+4)|0); //@line 70 "src/read.cpp"
 var $4840=HEAP32[(($4839)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$4840]($4834); //@line 70 "src/read.cpp"
 label=946;break; //@line 70 "src/read.cpp"
 case 946: 
 var $4842=($4665|0)==0; //@line 11 "inc/front.h"
 if($4842){label=1285;break;}else{label=947;break;} //@line 11 "inc/front.h"
 case 947: 
 _free($4665);
 label=1285;break; //@line 11 "inc/front.h"
 case 948: 
 var $_01157;
 var $_01156;
 var $4843$0=$_01156;
 var $4843$1=0;
 var $4844$0=$4843$0;
 var $4844$1=$_01157;
 ___resumeException($4844$0) //@line 71 "src/read.cpp"
 case 949: 
 var $4846=HEAP32[(($3)>>2)]; //@line 190 "src/read.cpp"
 var $4847=HEAP32[(($4)>>2)]; //@line 190 "src/read.cpp"
 var $4848=HEAP32[(($5)>>2)]; //@line 190 "src/read.cpp"
 var $4849=HEAP32[(($6)>>2)]; //@line 190 "src/read.cpp"
 var $$etemp$629$0=4;
 var $$etemp$629$1=0;

 var $4850=__Znwj(48); //@line 41 "src/read.cpp"
 var $4851=$4850; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($4851,0,101,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=950;break; } else { label=978;break; } //@line 41 "src/read.cpp"
 case 950: 
 var $4853=$4850; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i776)>>2)]=$4853; //@line 71 "src/read.cpp"
 var $4854=__Znwj(12); //@line 42 "src/read.cpp"
 var $4855=(($4854+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $4856=$4855; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4856)>>2)]=$4846; //@line 34 "inc/pcdecoder.inl"
 var $4857=(($4854+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $4858=$4857; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($4858)>>2)]=$rm_i776; //@line 34 "inc/pcdecoder.inl"
 var $4859=((($4847)+(1))|0); //@line 10 "inc/front.h"
 var $4860=((($4848)+(1))|0); //@line 10 "inc/front.h"
 var $4861=(Math_imul($4859,$4860)|0); //@line 10 "inc/front.h"
 var $4862=((($4847)+(2))|0); //@line 9 "inc/front.h"
 var $4863=((($4862)+($4861))|0); //@line 9 "inc/front.h"
 var $4864=((($4863)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i783=$4864;label=951;break; //@line 45 "inc/front.h"
 case 951: 
 var $storemerge_i_i_i783;
 var $4866=((($storemerge_i_i_i783)+(1))|0); //@line 45 "inc/front.h"
 var $4867=$storemerge_i_i_i783&$4866; //@line 45 "inc/front.h"
 var $4868=($4867|0)==0; //@line 45 "inc/front.h"
 if($4868){label=953;break;}else{label=952;break;} //@line 45 "inc/front.h"
 case 952: 
 var $4870=$storemerge_i_i_i783|$4866; //@line 45 "inc/front.h"
 var $storemerge_i_i_i783=$4870;label=951;break; //@line 45 "inc/front.h"
 case 953: 
 var $4871$0=_llvm_umul_with_overflow_i32($4866,8);
 var $4871$1=tempRet0;
 var $4872=$4871$1;
 var $4873=$4871$0;
 var $4874=($4872?-1:$4873); //@line 9 "inc/front.h"
 var $4875=(function() { try { __THREW__ = 0; return __Znwj($4874) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=957;break; } else { label=954;break; }
 case 954: 
 var $4877$0 = ___cxa_find_matching_catch(-1, -1); var $4877$1 = tempRet0;
 var $4878=$4877$1;
 var $4879=($4878|0)<0;
 if($4879){label=955;break;}else{label=956;break;}
 case 955: 
 var $4881=$4877$0;
 ___cxa_call_unexpected($4881);
 throw "Reached an unreachable!";
 case 956: 
 ___resumeException($4877$0)
 case 957: 
 var $4883=$4875; //@line 9 "inc/front.h"
 var $_01141=$4861;var $f_i778_sroa_55_0=0;label=958;break; //@line 22 "inc/front.h"
 case 958: 
 var $f_i778_sroa_55_0;
 var $_01141;
 var $4885=((($f_i778_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $4886=$f_i778_sroa_55_0&$storemerge_i_i_i783; //@line 23 "inc/front.h"
 var $4887=(($4883+($4886<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4887)>>3)]=0; //@line 23 "inc/front.h"
 var $4888=((($_01141)-(1))|0); //@line 23 "inc/front.h"
 var $4889=($4888|0)==0; //@line 23 "inc/front.h"
 if($4889){label=959;break;}else{var $_01141=$4888;var $f_i778_sroa_55_0=$4885;label=958;break;} //@line 23 "inc/front.h"
 case 959: 
 var $4890=(($4854+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $4891=$4890; //@line 50 "inc/pcdecoder.inl"
 var $4892=(($4854+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $4893=$4892; //@line 50 "inc/pcdecoder.inl"
 var $_01142=$_01052;var $f_i778_sroa_55_1=$4885;var $z_i781_0=0;label=960;break; //@line 47 "src/read.cpp"
 case 960: 
 var $z_i781_0;
 var $f_i778_sroa_55_1;
 var $_01142;
 var $4895=($z_i781_0>>>0)<($4849>>>0); //@line 47 "src/read.cpp"
 if($4895){var $_01140=$4859;var $f_i778_sroa_55_2=$f_i778_sroa_55_1;label=961;break;}else{label=984;break;} //@line 47 "src/read.cpp"
 case 961: 
 var $f_i778_sroa_55_2;
 var $_01140;
 var $4897=((($f_i778_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $4898=$f_i778_sroa_55_2&$storemerge_i_i_i783; //@line 23 "inc/front.h"
 var $4899=(($4883+($4898<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4899)>>3)]=0; //@line 23 "inc/front.h"
 var $4900=((($_01140)-(1))|0); //@line 23 "inc/front.h"
 var $4901=($4900|0)==0; //@line 23 "inc/front.h"
 if($4901){var $_11143=$_01142;var $f_i778_sroa_55_3=$4897;var $y_i780_0=0;label=962;break;}else{var $_01140=$4900;var $f_i778_sroa_55_2=$4897;label=961;break;} //@line 23 "inc/front.h"
 case 962: 
 var $y_i780_0;
 var $f_i778_sroa_55_3;
 var $_11143;
 var $4902=($y_i780_0>>>0)<($4848>>>0); //@line 48 "src/read.cpp"
 if($4902){var $_01139=1;var $f_i778_sroa_55_4=$f_i778_sroa_55_3;label=963;break;}else{label=983;break;} //@line 48 "src/read.cpp"
 case 963: 
 var $f_i778_sroa_55_4;
 var $_01139;
 var $4904=((($f_i778_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $4905=$f_i778_sroa_55_4&$storemerge_i_i_i783; //@line 23 "inc/front.h"
 var $4906=(($4883+($4905<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($4906)>>3)]=0; //@line 23 "inc/front.h"
 var $4907=((($_01139)-(1))|0); //@line 23 "inc/front.h"
 var $4908=($4907|0)==0; //@line 23 "inc/front.h"
 if($4908){var $_21144=$_11143;var $f_i778_sroa_55_5=$4904;var $x_i779_0=0;label=964;break;}else{var $_01139=$4907;var $f_i778_sroa_55_4=$4904;label=963;break;} //@line 23 "inc/front.h"
 case 964: 
 var $x_i779_0;
 var $f_i778_sroa_55_5;
 var $_21144;
 var $4909=($x_i779_0>>>0)<($4847>>>0); //@line 49 "src/read.cpp"
 if($4909){label=965;break;}else{label=982;break;} //@line 49 "src/read.cpp"
 case 965: 
 var $4911=((($f_i778_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $4912=$4911&$storemerge_i_i_i783; //@line 16 "inc/front.h"
 var $4913=(($4883+($4912<<3))|0); //@line 16 "inc/front.h"
 var $4914=HEAPF64[(($4913)>>3)]; //@line 59 "src/read.cpp"
 var $ld$630$0=(($4913)|0);
 var $4914$$SHADOW$0=HEAP32[(($ld$630$0)>>2)];
 var $ld$631$1=(($4913+4)|0);
 var $4914$$SHADOW$1=HEAP32[(($ld$631$1)>>2)];
 var $4915=((($f_i778_sroa_55_5)-($4859))|0); //@line 16 "inc/front.h"
 var $4916=((($4915)-($4861))|0); //@line 16 "inc/front.h"
 var $4917=$4916&$storemerge_i_i_i783; //@line 16 "inc/front.h"
 var $4918=(($4883+($4917<<3))|0); //@line 16 "inc/front.h"
 var $4919=HEAPF64[(($4918)>>3)]; //@line 59 "src/read.cpp"
 var $ld$632$0=(($4918)|0);
 var $4919$$SHADOW$0=HEAP32[(($ld$632$0)>>2)];
 var $ld$633$1=(($4918+4)|0);
 var $4919$$SHADOW$1=HEAP32[(($ld$633$1)>>2)];
 var $4920=$4915&$storemerge_i_i_i783; //@line 16 "inc/front.h"
 var $4921=(($4883+($4920<<3))|0); //@line 16 "inc/front.h"
 var $4922=HEAPF64[(($4921)>>3)]; //@line 60 "src/read.cpp"
 var $ld$634$0=(($4921)|0);
 var $4922$$SHADOW$0=HEAP32[(($ld$634$0)>>2)];
 var $ld$635$1=(($4921+4)|0);
 var $4922$$SHADOW$1=HEAP32[(($ld$635$1)>>2)];
 var $4923=((($4911)-($4861))|0); //@line 16 "inc/front.h"
 var $4924=$4923&$storemerge_i_i_i783; //@line 16 "inc/front.h"
 var $4925=(($4883+($4924<<3))|0); //@line 16 "inc/front.h"
 var $4926=HEAPF64[(($4925)>>3)]; //@line 60 "src/read.cpp"
 var $ld$636$0=(($4925)|0);
 var $4926$$SHADOW$0=HEAP32[(($ld$636$0)>>2)];
 var $ld$637$1=(($4925+4)|0);
 var $4926$$SHADOW$1=HEAP32[(($ld$637$1)>>2)];
 var $4927=((($f_i778_sroa_55_5)-($4861))|0); //@line 16 "inc/front.h"
 var $4928=$4927&$storemerge_i_i_i783; //@line 16 "inc/front.h"
 var $4929=(($4883+($4928<<3))|0); //@line 16 "inc/front.h"
 var $4930=HEAPF64[(($4929)>>3)]; //@line 61 "src/read.cpp"
 var $ld$638$0=(($4929)|0);
 var $4930$$SHADOW$0=HEAP32[(($ld$638$0)>>2)];
 var $ld$639$1=(($4929+4)|0);
 var $4930$$SHADOW$1=HEAP32[(($ld$639$1)>>2)];
 var $4931=((($4911)-($4859))|0); //@line 16 "inc/front.h"
 var $4932=$4931&$storemerge_i_i_i783; //@line 16 "inc/front.h"
 var $4933=(($4883+($4932<<3))|0); //@line 16 "inc/front.h"
 var $4934=HEAPF64[(($4933)>>3)]; //@line 61 "src/read.cpp"
 var $ld$640$0=(($4933)|0);
 var $4934$$SHADOW$0=HEAP32[(($ld$640$0)>>2)];
 var $ld$641$1=(($4933+4)|0);
 var $4934$$SHADOW$1=HEAP32[(($ld$641$1)>>2)];
 var $4935=((($4931)-($4861))|0); //@line 16 "inc/front.h"
 var $4936=$4935&$storemerge_i_i_i783; //@line 16 "inc/front.h"
 var $4937=(($4883+($4936<<3))|0); //@line 16 "inc/front.h"
 var $4938=($4914)-($4919); //@line 59 "src/read.cpp"
 var $4939=($4938)+($4922); //@line 60 "src/read.cpp"
 var $4940=($4939)-($4926); //@line 60 "src/read.cpp"
 var $4941=($4940)+($4930); //@line 61 "src/read.cpp"
 var $4942=($4941)-($4934); //@line 61 "src/read.cpp"
 var $4943=HEAPF64[(($4937)>>3)]; //@line 62 "src/read.cpp"
 var $ld$642$0=(($4937)|0);
 var $4943$$SHADOW$0=HEAP32[(($ld$642$0)>>2)];
 var $ld$643$1=(($4937+4)|0);
 var $4943$$SHADOW$1=HEAP32[(($ld$643$1)>>2)];
 var $4944=($4942)+($4943); //@line 62 "src/read.cpp"
 var $4945=HEAP32[(($4891)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4946=HEAP32[(($4893)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $4947=HEAP32[(($4946)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$644$0=4;
 var $$etemp$644$1=0;

 var $$etemp$645$0=4;
 var $$etemp$645$1=0;

 var $4948=$4947; //@line 25 "src/rcdecoder.cpp"
 var $4949=HEAP32[(($4948)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4950=(($4949+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $4951=HEAP32[(($4950)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $4952=(($4945+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4951]($4947,$4952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=966;break; } else { label=980;break; }
 case 966: 
 var $4953=(($4945+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $4954=HEAP32[(($4953)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4955=(($4945+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $4956=HEAP32[(($4955)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4957=((($4954)-($4956))|0); //@line 26 "src/rcdecoder.cpp"
 var $4958=HEAP32[(($4952)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $4959=(((($4957>>>0))/(($4958>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i770)>>2)]=$4959; //@line 26 "src/rcdecoder.cpp"
 var $4960=$4947; //@line 27 "src/rcdecoder.cpp"
 var $4961=HEAP32[(($4960)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4962=(($4961+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $4963=HEAP32[(($4962)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $4964=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$4963]($4947,$l_i_i_i770,$r_i_i_i771) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=967;break; } else { label=980;break; }
 case 967: 
 var $4965=HEAP32[(($4952)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4966=HEAP32[(($l_i_i_i770)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4967=(Math_imul($4965,$4966)|0); //@line 28 "src/rcdecoder.cpp"
 var $4968=HEAP32[(($4955)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $4969=((($4968)+($4967))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($4955)>>2)]=$4969; //@line 28 "src/rcdecoder.cpp"
 var $4970=HEAP32[(($r_i_i_i771)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $4971=(Math_imul($4965,$4970)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($4952)>>2)]=$4971; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($4945) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=968;break; } else { label=980;break; }
 case 968: 
 var $$etemp$646$0=4;
 var $$etemp$646$1=0;

 var $$etemp$647$0=4;
 var $$etemp$647$1=0;

 var $4972=($4964>>>0)>50; //@line 51 "inc/pcdecoder.inl"
 if($4972){label=969;break;}else{label=971;break;} //@line 51 "inc/pcdecoder.inl"
 case 969: 
 var $4974=((($4964)-(51))|0); //@line 52 "inc/pcdecoder.inl"
 var $4975=HEAP32[(($4891)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $4976$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4975,$4974) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4976$0=$4976$r;var $4976$1=tempRet0;if (!__THREW__) { label=970;break; } else { label=980;break; }
 case 970: 
 var $4977$0=$4974;
 var $4977$1=0;
 var $$etemp$648$0=1;
 var $$etemp$648$1=0;
 var $4978$0=_bitshift64Shl($$etemp$648$0,$$etemp$648$1,$4977$0);var $4978$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $4979$0=_i64Add($4978$0,$4978$1,$4976$0,$4976$1);var $4979$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4944; var $4980$0=HEAP32[((tempDoublePtr)>>2)];var $4980$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$649$0=-1;
 var $$etemp$649$1=-1;
 var $4981$0=$4980$0^$$etemp$649$0;
 var $4981$1=$4980$1^$$etemp$649$1;
 var $4982$0=($4981$0>>>14)|($4981$1<<18);
 var $4982$1=($4981$1>>>14)|(0<<18);
 var $4983$0=($4981$1>>31)|((((((($4981$1|0)<0))|0)?-1:0))<<1);
 var $4983$1=((((((($4981$1|0)<0))|0)?-1:0))>>31)|((((((($4981$1|0)<0))|0)?-1:0))<<1);
 var $4984$0=($4983$0>>>15)|($4983$1<<17);
 var $4984$1=($4983$1>>>15)|(0<<17);
 var $4985$0=$4982$0^$4984$0;
 var $4985$1=$4982$1^$4984$1;
 var $4986$0=_i64Add($4985$0,$4985$1,$4979$0,$4979$1);var $4986$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $4987$0=($4986$1>>>17)|(0<<15);
 var $4987$1=(0>>>17)|(0<<15);
 var $$etemp$650$0=0;
 var $$etemp$650$1=0;
 var $4988$0=_i64Subtract($$etemp$650$0,$$etemp$650$1,$4987$0,$4987$1);var $4988$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $4989$0=($4988$0>>>15)|($4988$1<<17);
 var $4989$1=($4988$1>>>15)|(0<<17);
 var $4990$0=$4989$0^$4986$0;
 var $4990$1=$4989$1^$4986$1;
 var $4991$0=($4990$0<<14)|(0>>>18);
 var $4991$1=($4990$1<<14)|($4990$0>>>18);
 var $$etemp$651$0=-16384;
 var $$etemp$651$1=-1;
 var $4992$0=$4991$0^$$etemp$651$0;
 var $4992$1=$4991$1^$$etemp$651$1;
 var $_01137_in$1=$4992$1;var $_01137_in$0=$4992$0;label=975;break; //@line 56 "inc/pcdecoder.inl"
 case 971: 
 var $4994=($4964>>>0)<50; //@line undefined "inc/pcdecoder.inl"
 if($4994){label=972;break;}else{label=974;break;} //@line undefined "inc/pcdecoder.inl"
 case 972: 
 var $4996=(((49)-($4964))|0); //@line 59 "inc/pcdecoder.inl"
 var $4997=HEAP32[(($4891)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $4998$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($4997,$4996) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $4998$0=$4998$r;var $4998$1=tempRet0;if (!__THREW__) { label=973;break; } else { label=980;break; }
 case 973: 
 var $4999$0=$4996;
 var $4999$1=0;
 var $$etemp$652$0=1;
 var $$etemp$652$1=0;
 var $5000$0=_bitshift64Shl($$etemp$652$0,$$etemp$652$1,$4999$0);var $5000$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $5001$0=_i64Add($5000$0,$5000$1,$4998$0,$4998$1);var $5001$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$4944; var $5002$0=HEAP32[((tempDoublePtr)>>2)];var $5002$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$653$0=-1;
 var $$etemp$653$1=-1;
 var $5003$0=$5002$0^$$etemp$653$0;
 var $5003$1=$5002$1^$$etemp$653$1;
 var $5004$0=($5003$0>>>14)|($5003$1<<18);
 var $5004$1=($5003$1>>>14)|(0<<18);
 var $5005$0=($5003$1>>31)|((((((($5003$1|0)<0))|0)?-1:0))<<1);
 var $5005$1=((((((($5003$1|0)<0))|0)?-1:0))>>31)|((((((($5003$1|0)<0))|0)?-1:0))<<1);
 var $5006$0=($5005$0>>>15)|($5005$1<<17);
 var $5006$1=($5005$1>>>15)|(0<<17);
 var $5007$0=$5004$0^$5006$0;
 var $5007$1=$5004$1^$5006$1;
 var $5008$0=_i64Subtract($5007$0,$5007$1,$5001$0,$5001$1);var $5008$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $5009$0=($5008$1>>>17)|(0<<15);
 var $5009$1=(0>>>17)|(0<<15);
 var $$etemp$654$0=0;
 var $$etemp$654$1=0;
 var $5010$0=_i64Subtract($$etemp$654$0,$$etemp$654$1,$5009$0,$5009$1);var $5010$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5011$0=($5010$0>>>15)|($5010$1<<17);
 var $5011$1=($5010$1>>>15)|(0<<17);
 var $5012$0=$5011$0^$5008$0;
 var $5012$1=$5011$1^$5008$1;
 var $5013$0=($5012$0<<14)|(0>>>18);
 var $5013$1=($5012$1<<14)|($5012$0>>>18);
 var $$etemp$655$0=-16384;
 var $$etemp$655$1=-1;
 var $5014$0=$5013$0^$$etemp$655$0;
 var $5014$1=$5013$1^$$etemp$655$1;
 var $_01137_in$1=$5014$1;var $_01137_in$0=$5014$0;label=975;break; //@line 63 "inc/pcdecoder.inl"
 case 974: 
 HEAPF64[(tempDoublePtr)>>3]=$4944; var $5016$0=HEAP32[((tempDoublePtr)>>2)];var $5016$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$656$0=-16384;
 var $$etemp$656$1=-1;
 var $5017$0=$5016$0&$$etemp$656$0;
 var $5017$1=$5016$1&$$etemp$656$1;
 var $_01137_in$1=$5017$1;var $_01137_in$0=$5017$0;label=975;break; //@line 66 "inc/pcdecoder.inl"
 case 975: 
 var $_01137_in$0;
 var $_01137_in$1;
 var $_01137=(HEAP32[((tempDoublePtr)>>2)]=$_01137_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01137_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $5018=(($_21144+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21144)>>3)]=$_01137; //@line 65 "src/read.cpp"
 var $_01138=1;var $f_i778_sroa_55_6=$f_i778_sroa_55_5;label=976;break; //@line 22 "inc/front.h"
 case 976: 
 var $f_i778_sroa_55_6;
 var $_01138;
 var $5020=((($f_i778_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5021=$f_i778_sroa_55_6&$storemerge_i_i_i783; //@line 23 "inc/front.h"
 var $5022=(($4883+($5021<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5022)>>3)]=$_01137; //@line 23 "inc/front.h"
 var $5023=((($_01138)-(1))|0); //@line 23 "inc/front.h"
 var $5024=($5023|0)==0; //@line 23 "inc/front.h"
 if($5024){label=977;break;}else{var $_01138=$5023;var $f_i778_sroa_55_6=$5020;label=976;break;} //@line 23 "inc/front.h"
 case 977: 
 var $5025=((($x_i779_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21144=$5018;var $f_i778_sroa_55_5=$5020;var $x_i779_0=$5025;label=964;break; //@line 49 "src/read.cpp"
 case 978: 
 var $5027$0 = ___cxa_find_matching_catch(-1, -1); var $5027$1 = tempRet0;
 var $5028=$5027$0;
 var $5029=$5027$1;
 var $5030=($4850|0)==0;
 if($5030){var $_01145=$5028;var $_01146=$5029;label=990;break;}else{label=979;break;}
 case 979: 
 _free($4850);
 var $_01145=$5028;var $_01146=$5029;label=990;break;
 case 980: 
 var $5033$0 = ___cxa_find_matching_catch(-1, -1); var $5033$1 = tempRet0;
 var $5034=$5033$0;
 var $5035=$5033$1;
 var $5036=($4875|0)==0; //@line 11 "inc/front.h"
 if($5036){var $_01145=$5034;var $_01146=$5035;label=990;break;}else{label=981;break;} //@line 11 "inc/front.h"
 case 981: 
 _free($4875);
 var $_01145=$5034;var $_01146=$5035;label=990;break; //@line 11 "inc/front.h"
 case 982: 
 var $5038=((($y_i780_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11143=$_21144;var $f_i778_sroa_55_3=$f_i778_sroa_55_5;var $y_i780_0=$5038;label=962;break; //@line 48 "src/read.cpp"
 case 983: 
 var $5040=((($z_i781_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01142=$_11143;var $f_i778_sroa_55_1=$f_i778_sroa_55_3;var $z_i781_0=$5040;label=960;break; //@line 47 "src/read.cpp"
 case 984: 
 var $5042=($4854|0)==0; //@line 69 "src/read.cpp"
 if($5042){label=986;break;}else{label=985;break;} //@line 69 "src/read.cpp"
 case 985: 
 _free($4854);
 label=986;break; //@line 69 "src/read.cpp"
 case 986: 
 var $5044=HEAP32[(($rm_i776)>>2)]; //@line 70 "src/read.cpp"
 var $5045=($5044|0)==0; //@line 70 "src/read.cpp"
 if($5045){label=988;break;}else{label=987;break;} //@line 70 "src/read.cpp"
 case 987: 
 var $5047=$5044; //@line 70 "src/read.cpp"
 var $5048=HEAP32[(($5047)>>2)]; //@line 70 "src/read.cpp"
 var $5049=(($5048+4)|0); //@line 70 "src/read.cpp"
 var $5050=HEAP32[(($5049)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5050]($5044); //@line 70 "src/read.cpp"
 label=988;break; //@line 70 "src/read.cpp"
 case 988: 
 var $5052=($4875|0)==0; //@line 11 "inc/front.h"
 if($5052){label=1285;break;}else{label=989;break;} //@line 11 "inc/front.h"
 case 989: 
 _free($4875);
 label=1285;break; //@line 11 "inc/front.h"
 case 990: 
 var $_01146;
 var $_01145;
 var $5053$0=$_01145;
 var $5053$1=0;
 var $5054$0=$5053$0;
 var $5054$1=$_01146;
 ___resumeException($5054$0) //@line 71 "src/read.cpp"
 case 991: 
 var $5056=HEAP32[(($3)>>2)]; //@line 191 "src/read.cpp"
 var $5057=HEAP32[(($4)>>2)]; //@line 191 "src/read.cpp"
 var $5058=HEAP32[(($5)>>2)]; //@line 191 "src/read.cpp"
 var $5059=HEAP32[(($6)>>2)]; //@line 191 "src/read.cpp"
 var $$etemp$657$0=4;
 var $$etemp$657$1=0;

 var $5060=__Znwj(48); //@line 41 "src/read.cpp"
 var $5061=$5060; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5061,0,105,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=992;break; } else { label=1020;break; } //@line 41 "src/read.cpp"
 case 992: 
 var $5063=$5060; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i812)>>2)]=$5063; //@line 71 "src/read.cpp"
 var $5064=__Znwj(12); //@line 42 "src/read.cpp"
 var $5065=(($5064+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5066=$5065; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5066)>>2)]=$5056; //@line 34 "inc/pcdecoder.inl"
 var $5067=(($5064+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5068=$5067; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5068)>>2)]=$rm_i812; //@line 34 "inc/pcdecoder.inl"
 var $5069=((($5057)+(1))|0); //@line 10 "inc/front.h"
 var $5070=((($5058)+(1))|0); //@line 10 "inc/front.h"
 var $5071=(Math_imul($5069,$5070)|0); //@line 10 "inc/front.h"
 var $5072=((($5057)+(2))|0); //@line 9 "inc/front.h"
 var $5073=((($5072)+($5071))|0); //@line 9 "inc/front.h"
 var $5074=((($5073)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i819=$5074;label=993;break; //@line 45 "inc/front.h"
 case 993: 
 var $storemerge_i_i_i819;
 var $5076=((($storemerge_i_i_i819)+(1))|0); //@line 45 "inc/front.h"
 var $5077=$storemerge_i_i_i819&$5076; //@line 45 "inc/front.h"
 var $5078=($5077|0)==0; //@line 45 "inc/front.h"
 if($5078){label=995;break;}else{label=994;break;} //@line 45 "inc/front.h"
 case 994: 
 var $5080=$storemerge_i_i_i819|$5076; //@line 45 "inc/front.h"
 var $storemerge_i_i_i819=$5080;label=993;break; //@line 45 "inc/front.h"
 case 995: 
 var $5081$0=_llvm_umul_with_overflow_i32($5076,8);
 var $5081$1=tempRet0;
 var $5082=$5081$1;
 var $5083=$5081$0;
 var $5084=($5082?-1:$5083); //@line 9 "inc/front.h"
 var $5085=(function() { try { __THREW__ = 0; return __Znwj($5084) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=999;break; } else { label=996;break; }
 case 996: 
 var $5087$0 = ___cxa_find_matching_catch(-1, -1); var $5087$1 = tempRet0;
 var $5088=$5087$1;
 var $5089=($5088|0)<0;
 if($5089){label=997;break;}else{label=998;break;}
 case 997: 
 var $5091=$5087$0;
 ___cxa_call_unexpected($5091);
 throw "Reached an unreachable!";
 case 998: 
 ___resumeException($5087$0)
 case 999: 
 var $5093=$5085; //@line 9 "inc/front.h"
 var $_01129=$5071;var $f_i814_sroa_55_0=0;label=1000;break; //@line 22 "inc/front.h"
 case 1000: 
 var $f_i814_sroa_55_0;
 var $_01129;
 var $5095=((($f_i814_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5096=$f_i814_sroa_55_0&$storemerge_i_i_i819; //@line 23 "inc/front.h"
 var $5097=(($5093+($5096<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5097)>>3)]=0; //@line 23 "inc/front.h"
 var $5098=((($_01129)-(1))|0); //@line 23 "inc/front.h"
 var $5099=($5098|0)==0; //@line 23 "inc/front.h"
 if($5099){label=1001;break;}else{var $_01129=$5098;var $f_i814_sroa_55_0=$5095;label=1000;break;} //@line 23 "inc/front.h"
 case 1001: 
 var $5100=(($5064+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5101=$5100; //@line 50 "inc/pcdecoder.inl"
 var $5102=(($5064+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5103=$5102; //@line 50 "inc/pcdecoder.inl"
 var $_01130=$_01052;var $f_i814_sroa_55_1=$5095;var $z_i817_0=0;label=1002;break; //@line 47 "src/read.cpp"
 case 1002: 
 var $z_i817_0;
 var $f_i814_sroa_55_1;
 var $_01130;
 var $5105=($z_i817_0>>>0)<($5059>>>0); //@line 47 "src/read.cpp"
 if($5105){var $_01127=$5069;var $f_i814_sroa_55_2=$f_i814_sroa_55_1;label=1003;break;}else{label=1026;break;} //@line 47 "src/read.cpp"
 case 1003: 
 var $f_i814_sroa_55_2;
 var $_01127;
 var $5107=((($f_i814_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5108=$f_i814_sroa_55_2&$storemerge_i_i_i819; //@line 23 "inc/front.h"
 var $5109=(($5093+($5108<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5109)>>3)]=0; //@line 23 "inc/front.h"
 var $5110=((($_01127)-(1))|0); //@line 23 "inc/front.h"
 var $5111=($5110|0)==0; //@line 23 "inc/front.h"
 if($5111){var $_11131=$_01130;var $f_i814_sroa_55_3=$5107;var $y_i816_0=0;label=1004;break;}else{var $_01127=$5110;var $f_i814_sroa_55_2=$5107;label=1003;break;} //@line 23 "inc/front.h"
 case 1004: 
 var $y_i816_0;
 var $f_i814_sroa_55_3;
 var $_11131;
 var $5112=($y_i816_0>>>0)<($5058>>>0); //@line 48 "src/read.cpp"
 if($5112){var $_01126=1;var $f_i814_sroa_55_4=$f_i814_sroa_55_3;label=1005;break;}else{label=1025;break;} //@line 48 "src/read.cpp"
 case 1005: 
 var $f_i814_sroa_55_4;
 var $_01126;
 var $5114=((($f_i814_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5115=$f_i814_sroa_55_4&$storemerge_i_i_i819; //@line 23 "inc/front.h"
 var $5116=(($5093+($5115<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5116)>>3)]=0; //@line 23 "inc/front.h"
 var $5117=((($_01126)-(1))|0); //@line 23 "inc/front.h"
 var $5118=($5117|0)==0; //@line 23 "inc/front.h"
 if($5118){var $_21132=$_11131;var $f_i814_sroa_55_5=$5114;var $x_i815_0=0;label=1006;break;}else{var $_01126=$5117;var $f_i814_sroa_55_4=$5114;label=1005;break;} //@line 23 "inc/front.h"
 case 1006: 
 var $x_i815_0;
 var $f_i814_sroa_55_5;
 var $_21132;
 var $5119=($x_i815_0>>>0)<($5057>>>0); //@line 49 "src/read.cpp"
 if($5119){label=1007;break;}else{label=1024;break;} //@line 49 "src/read.cpp"
 case 1007: 
 var $5121=((($f_i814_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5122=$5121&$storemerge_i_i_i819; //@line 16 "inc/front.h"
 var $5123=(($5093+($5122<<3))|0); //@line 16 "inc/front.h"
 var $5124=HEAPF64[(($5123)>>3)]; //@line 59 "src/read.cpp"
 var $ld$658$0=(($5123)|0);
 var $5124$$SHADOW$0=HEAP32[(($ld$658$0)>>2)];
 var $ld$659$1=(($5123+4)|0);
 var $5124$$SHADOW$1=HEAP32[(($ld$659$1)>>2)];
 var $5125=((($f_i814_sroa_55_5)-($5069))|0); //@line 16 "inc/front.h"
 var $5126=((($5125)-($5071))|0); //@line 16 "inc/front.h"
 var $5127=$5126&$storemerge_i_i_i819; //@line 16 "inc/front.h"
 var $5128=(($5093+($5127<<3))|0); //@line 16 "inc/front.h"
 var $5129=HEAPF64[(($5128)>>3)]; //@line 59 "src/read.cpp"
 var $ld$660$0=(($5128)|0);
 var $5129$$SHADOW$0=HEAP32[(($ld$660$0)>>2)];
 var $ld$661$1=(($5128+4)|0);
 var $5129$$SHADOW$1=HEAP32[(($ld$661$1)>>2)];
 var $5130=$5125&$storemerge_i_i_i819; //@line 16 "inc/front.h"
 var $5131=(($5093+($5130<<3))|0); //@line 16 "inc/front.h"
 var $5132=HEAPF64[(($5131)>>3)]; //@line 60 "src/read.cpp"
 var $ld$662$0=(($5131)|0);
 var $5132$$SHADOW$0=HEAP32[(($ld$662$0)>>2)];
 var $ld$663$1=(($5131+4)|0);
 var $5132$$SHADOW$1=HEAP32[(($ld$663$1)>>2)];
 var $5133=((($5121)-($5071))|0); //@line 16 "inc/front.h"
 var $5134=$5133&$storemerge_i_i_i819; //@line 16 "inc/front.h"
 var $5135=(($5093+($5134<<3))|0); //@line 16 "inc/front.h"
 var $5136=HEAPF64[(($5135)>>3)]; //@line 60 "src/read.cpp"
 var $ld$664$0=(($5135)|0);
 var $5136$$SHADOW$0=HEAP32[(($ld$664$0)>>2)];
 var $ld$665$1=(($5135+4)|0);
 var $5136$$SHADOW$1=HEAP32[(($ld$665$1)>>2)];
 var $5137=((($f_i814_sroa_55_5)-($5071))|0); //@line 16 "inc/front.h"
 var $5138=$5137&$storemerge_i_i_i819; //@line 16 "inc/front.h"
 var $5139=(($5093+($5138<<3))|0); //@line 16 "inc/front.h"
 var $5140=HEAPF64[(($5139)>>3)]; //@line 61 "src/read.cpp"
 var $ld$666$0=(($5139)|0);
 var $5140$$SHADOW$0=HEAP32[(($ld$666$0)>>2)];
 var $ld$667$1=(($5139+4)|0);
 var $5140$$SHADOW$1=HEAP32[(($ld$667$1)>>2)];
 var $5141=((($5121)-($5069))|0); //@line 16 "inc/front.h"
 var $5142=$5141&$storemerge_i_i_i819; //@line 16 "inc/front.h"
 var $5143=(($5093+($5142<<3))|0); //@line 16 "inc/front.h"
 var $5144=HEAPF64[(($5143)>>3)]; //@line 61 "src/read.cpp"
 var $ld$668$0=(($5143)|0);
 var $5144$$SHADOW$0=HEAP32[(($ld$668$0)>>2)];
 var $ld$669$1=(($5143+4)|0);
 var $5144$$SHADOW$1=HEAP32[(($ld$669$1)>>2)];
 var $5145=((($5141)-($5071))|0); //@line 16 "inc/front.h"
 var $5146=$5145&$storemerge_i_i_i819; //@line 16 "inc/front.h"
 var $5147=(($5093+($5146<<3))|0); //@line 16 "inc/front.h"
 var $5148=($5124)-($5129); //@line 59 "src/read.cpp"
 var $5149=($5148)+($5132); //@line 60 "src/read.cpp"
 var $5150=($5149)-($5136); //@line 60 "src/read.cpp"
 var $5151=($5150)+($5140); //@line 61 "src/read.cpp"
 var $5152=($5151)-($5144); //@line 61 "src/read.cpp"
 var $5153=HEAPF64[(($5147)>>3)]; //@line 62 "src/read.cpp"
 var $ld$670$0=(($5147)|0);
 var $5153$$SHADOW$0=HEAP32[(($ld$670$0)>>2)];
 var $ld$671$1=(($5147+4)|0);
 var $5153$$SHADOW$1=HEAP32[(($ld$671$1)>>2)];
 var $5154=($5152)+($5153); //@line 62 "src/read.cpp"
 var $5155=HEAP32[(($5101)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5156=HEAP32[(($5103)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5157=HEAP32[(($5156)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$672$0=4;
 var $$etemp$672$1=0;

 var $$etemp$673$0=4;
 var $$etemp$673$1=0;

 var $5158=$5157; //@line 25 "src/rcdecoder.cpp"
 var $5159=HEAP32[(($5158)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5160=(($5159+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5161=HEAP32[(($5160)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5162=(($5155+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5161]($5157,$5162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1008;break; } else { label=1022;break; }
 case 1008: 
 var $5163=(($5155+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5164=HEAP32[(($5163)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5165=(($5155+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5166=HEAP32[(($5165)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5167=((($5164)-($5166))|0); //@line 26 "src/rcdecoder.cpp"
 var $5168=HEAP32[(($5162)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5169=(((($5167>>>0))/(($5168>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i806)>>2)]=$5169; //@line 26 "src/rcdecoder.cpp"
 var $5170=$5157; //@line 27 "src/rcdecoder.cpp"
 var $5171=HEAP32[(($5170)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5172=(($5171+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5173=HEAP32[(($5172)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5173]($5157,$l_i_i_i806,$r_i_i_i807) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1009;break; } else { label=1022;break; }
 case 1009: 
 var $5175=HEAP32[(($5162)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5176=HEAP32[(($l_i_i_i806)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5177=(Math_imul($5175,$5176)|0); //@line 28 "src/rcdecoder.cpp"
 var $5178=HEAP32[(($5165)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5179=((($5178)+($5177))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5165)>>2)]=$5179; //@line 28 "src/rcdecoder.cpp"
 var $5180=HEAP32[(($r_i_i_i807)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5181=(Math_imul($5175,$5180)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5162)>>2)]=$5181; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1010;break; } else { label=1022;break; }
 case 1010: 
 var $$etemp$674$0=4;
 var $$etemp$674$1=0;

 var $$etemp$675$0=4;
 var $$etemp$675$1=0;

 var $5182=($5174>>>0)>52; //@line 51 "inc/pcdecoder.inl"
 if($5182){label=1011;break;}else{label=1013;break;} //@line 51 "inc/pcdecoder.inl"
 case 1011: 
 var $5184=((($5174)-(53))|0); //@line 52 "inc/pcdecoder.inl"
 var $5185=HEAP32[(($5101)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5186$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5185,$5184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5186$0=$5186$r;var $5186$1=tempRet0;if (!__THREW__) { label=1012;break; } else { label=1022;break; }
 case 1012: 
 var $5187$0=$5184;
 var $5187$1=0;
 var $$etemp$676$0=1;
 var $$etemp$676$1=0;
 var $5188$0=_bitshift64Shl($$etemp$676$0,$$etemp$676$1,$5187$0);var $5188$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $5189$0=_i64Add($5188$0,$5188$1,$5186$0,$5186$1);var $5189$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5154; var $5190$0=HEAP32[((tempDoublePtr)>>2)];var $5190$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$677$0=-1;
 var $$etemp$677$1=-1;
 var $5191$0=$5190$0^$$etemp$677$0;
 var $5191$1=$5190$1^$$etemp$677$1;
 var $5192$0=($5191$0>>>12)|($5191$1<<20);
 var $5192$1=($5191$1>>>12)|(0<<20);
 var $5193$0=($5191$1>>31)|((((((($5191$1|0)<0))|0)?-1:0))<<1);
 var $5193$1=((((((($5191$1|0)<0))|0)?-1:0))>>31)|((((((($5191$1|0)<0))|0)?-1:0))<<1);
 var $5194$0=($5193$0>>>13)|($5193$1<<19);
 var $5194$1=($5193$1>>>13)|(0<<19);
 var $5195$0=$5192$0^$5194$0;
 var $5195$1=$5192$1^$5194$1;
 var $5196$0=_i64Add($5195$0,$5195$1,$5189$0,$5189$1);var $5196$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $5197$0=($5196$1>>>19)|(0<<13);
 var $5197$1=(0>>>19)|(0<<13);
 var $$etemp$678$0=0;
 var $$etemp$678$1=0;
 var $5198$0=_i64Subtract($$etemp$678$0,$$etemp$678$1,$5197$0,$5197$1);var $5198$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5199$0=($5198$0>>>13)|($5198$1<<19);
 var $5199$1=($5198$1>>>13)|(0<<19);
 var $5200$0=$5199$0^$5196$0;
 var $5200$1=$5199$1^$5196$1;
 var $5201$0=($5200$0<<12)|(0>>>20);
 var $5201$1=($5200$1<<12)|($5200$0>>>20);
 var $$etemp$679$0=-4096;
 var $$etemp$679$1=-1;
 var $5202$0=$5201$0^$$etemp$679$0;
 var $5202$1=$5201$1^$$etemp$679$1;
 var $_01124_in$1=$5202$1;var $_01124_in$0=$5202$0;label=1017;break; //@line 56 "inc/pcdecoder.inl"
 case 1013: 
 var $5204=($5174>>>0)<52; //@line undefined "inc/pcdecoder.inl"
 if($5204){label=1014;break;}else{label=1016;break;} //@line undefined "inc/pcdecoder.inl"
 case 1014: 
 var $5206=(((51)-($5174))|0); //@line 59 "inc/pcdecoder.inl"
 var $5207=HEAP32[(($5101)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5208$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5207,$5206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5208$0=$5208$r;var $5208$1=tempRet0;if (!__THREW__) { label=1015;break; } else { label=1022;break; }
 case 1015: 
 var $5209$0=$5206;
 var $5209$1=0;
 var $$etemp$680$0=1;
 var $$etemp$680$1=0;
 var $5210$0=_bitshift64Shl($$etemp$680$0,$$etemp$680$1,$5209$0);var $5210$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $5211$0=_i64Add($5210$0,$5210$1,$5208$0,$5208$1);var $5211$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5154; var $5212$0=HEAP32[((tempDoublePtr)>>2)];var $5212$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$681$0=-1;
 var $$etemp$681$1=-1;
 var $5213$0=$5212$0^$$etemp$681$0;
 var $5213$1=$5212$1^$$etemp$681$1;
 var $5214$0=($5213$0>>>12)|($5213$1<<20);
 var $5214$1=($5213$1>>>12)|(0<<20);
 var $5215$0=($5213$1>>31)|((((((($5213$1|0)<0))|0)?-1:0))<<1);
 var $5215$1=((((((($5213$1|0)<0))|0)?-1:0))>>31)|((((((($5213$1|0)<0))|0)?-1:0))<<1);
 var $5216$0=($5215$0>>>13)|($5215$1<<19);
 var $5216$1=($5215$1>>>13)|(0<<19);
 var $5217$0=$5214$0^$5216$0;
 var $5217$1=$5214$1^$5216$1;
 var $5218$0=_i64Subtract($5217$0,$5217$1,$5211$0,$5211$1);var $5218$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $5219$0=($5218$1>>>19)|(0<<13);
 var $5219$1=(0>>>19)|(0<<13);
 var $$etemp$682$0=0;
 var $$etemp$682$1=0;
 var $5220$0=_i64Subtract($$etemp$682$0,$$etemp$682$1,$5219$0,$5219$1);var $5220$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5221$0=($5220$0>>>13)|($5220$1<<19);
 var $5221$1=($5220$1>>>13)|(0<<19);
 var $5222$0=$5221$0^$5218$0;
 var $5222$1=$5221$1^$5218$1;
 var $5223$0=($5222$0<<12)|(0>>>20);
 var $5223$1=($5222$1<<12)|($5222$0>>>20);
 var $$etemp$683$0=-4096;
 var $$etemp$683$1=-1;
 var $5224$0=$5223$0^$$etemp$683$0;
 var $5224$1=$5223$1^$$etemp$683$1;
 var $_01124_in$1=$5224$1;var $_01124_in$0=$5224$0;label=1017;break; //@line 63 "inc/pcdecoder.inl"
 case 1016: 
 HEAPF64[(tempDoublePtr)>>3]=$5154; var $5226$0=HEAP32[((tempDoublePtr)>>2)];var $5226$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$684$0=-4096;
 var $$etemp$684$1=-1;
 var $5227$0=$5226$0&$$etemp$684$0;
 var $5227$1=$5226$1&$$etemp$684$1;
 var $_01124_in$1=$5227$1;var $_01124_in$0=$5227$0;label=1017;break; //@line 66 "inc/pcdecoder.inl"
 case 1017: 
 var $_01124_in$0;
 var $_01124_in$1;
 var $_01124=(HEAP32[((tempDoublePtr)>>2)]=$_01124_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01124_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $5228=(($_21132+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21132)>>3)]=$_01124; //@line 65 "src/read.cpp"
 var $_01125=1;var $f_i814_sroa_55_6=$f_i814_sroa_55_5;label=1018;break; //@line 22 "inc/front.h"
 case 1018: 
 var $f_i814_sroa_55_6;
 var $_01125;
 var $5230=((($f_i814_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5231=$f_i814_sroa_55_6&$storemerge_i_i_i819; //@line 23 "inc/front.h"
 var $5232=(($5093+($5231<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5232)>>3)]=$_01124; //@line 23 "inc/front.h"
 var $5233=((($_01125)-(1))|0); //@line 23 "inc/front.h"
 var $5234=($5233|0)==0; //@line 23 "inc/front.h"
 if($5234){label=1019;break;}else{var $_01125=$5233;var $f_i814_sroa_55_6=$5230;label=1018;break;} //@line 23 "inc/front.h"
 case 1019: 
 var $5235=((($x_i815_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21132=$5228;var $f_i814_sroa_55_5=$5230;var $x_i815_0=$5235;label=1006;break; //@line 49 "src/read.cpp"
 case 1020: 
 var $5237$0 = ___cxa_find_matching_catch(-1, -1); var $5237$1 = tempRet0;
 var $5238=$5237$0;
 var $5239=$5237$1;
 var $5240=($5060|0)==0;
 if($5240){var $_01133=$5238;var $_01134=$5239;label=1032;break;}else{label=1021;break;}
 case 1021: 
 _free($5060);
 var $_01133=$5238;var $_01134=$5239;label=1032;break;
 case 1022: 
 var $5243$0 = ___cxa_find_matching_catch(-1, -1); var $5243$1 = tempRet0;
 var $5244=$5243$0;
 var $5245=$5243$1;
 var $5246=($5085|0)==0; //@line 11 "inc/front.h"
 if($5246){var $_01133=$5244;var $_01134=$5245;label=1032;break;}else{label=1023;break;} //@line 11 "inc/front.h"
 case 1023: 
 _free($5085);
 var $_01133=$5244;var $_01134=$5245;label=1032;break; //@line 11 "inc/front.h"
 case 1024: 
 var $5248=((($y_i816_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11131=$_21132;var $f_i814_sroa_55_3=$f_i814_sroa_55_5;var $y_i816_0=$5248;label=1004;break; //@line 48 "src/read.cpp"
 case 1025: 
 var $5250=((($z_i817_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01130=$_11131;var $f_i814_sroa_55_1=$f_i814_sroa_55_3;var $z_i817_0=$5250;label=1002;break; //@line 47 "src/read.cpp"
 case 1026: 
 var $5252=($5064|0)==0; //@line 69 "src/read.cpp"
 if($5252){label=1028;break;}else{label=1027;break;} //@line 69 "src/read.cpp"
 case 1027: 
 _free($5064);
 label=1028;break; //@line 69 "src/read.cpp"
 case 1028: 
 var $5254=HEAP32[(($rm_i812)>>2)]; //@line 70 "src/read.cpp"
 var $5255=($5254|0)==0; //@line 70 "src/read.cpp"
 if($5255){label=1030;break;}else{label=1029;break;} //@line 70 "src/read.cpp"
 case 1029: 
 var $5257=$5254; //@line 70 "src/read.cpp"
 var $5258=HEAP32[(($5257)>>2)]; //@line 70 "src/read.cpp"
 var $5259=(($5258+4)|0); //@line 70 "src/read.cpp"
 var $5260=HEAP32[(($5259)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5260]($5254); //@line 70 "src/read.cpp"
 label=1030;break; //@line 70 "src/read.cpp"
 case 1030: 
 var $5262=($5085|0)==0; //@line 11 "inc/front.h"
 if($5262){label=1285;break;}else{label=1031;break;} //@line 11 "inc/front.h"
 case 1031: 
 _free($5085);
 label=1285;break; //@line 11 "inc/front.h"
 case 1032: 
 var $_01134;
 var $_01133;
 var $5263$0=$_01133;
 var $5263$1=0;
 var $5264$0=$5263$0;
 var $5264$1=$_01134;
 ___resumeException($5264$0) //@line 71 "src/read.cpp"
 case 1033: 
 var $5266=HEAP32[(($3)>>2)]; //@line 192 "src/read.cpp"
 var $5267=HEAP32[(($4)>>2)]; //@line 192 "src/read.cpp"
 var $5268=HEAP32[(($5)>>2)]; //@line 192 "src/read.cpp"
 var $5269=HEAP32[(($6)>>2)]; //@line 192 "src/read.cpp"
 var $$etemp$685$0=4;
 var $$etemp$685$1=0;

 var $5270=__Znwj(48); //@line 41 "src/read.cpp"
 var $5271=$5270; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5271,0,109,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1034;break; } else { label=1062;break; } //@line 41 "src/read.cpp"
 case 1034: 
 var $5273=$5270; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i848)>>2)]=$5273; //@line 71 "src/read.cpp"
 var $5274=__Znwj(12); //@line 42 "src/read.cpp"
 var $5275=(($5274+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5276=$5275; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5276)>>2)]=$5266; //@line 34 "inc/pcdecoder.inl"
 var $5277=(($5274+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5278=$5277; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5278)>>2)]=$rm_i848; //@line 34 "inc/pcdecoder.inl"
 var $5279=((($5267)+(1))|0); //@line 10 "inc/front.h"
 var $5280=((($5268)+(1))|0); //@line 10 "inc/front.h"
 var $5281=(Math_imul($5279,$5280)|0); //@line 10 "inc/front.h"
 var $5282=((($5267)+(2))|0); //@line 9 "inc/front.h"
 var $5283=((($5282)+($5281))|0); //@line 9 "inc/front.h"
 var $5284=((($5283)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i855=$5284;label=1035;break; //@line 45 "inc/front.h"
 case 1035: 
 var $storemerge_i_i_i855;
 var $5286=((($storemerge_i_i_i855)+(1))|0); //@line 45 "inc/front.h"
 var $5287=$storemerge_i_i_i855&$5286; //@line 45 "inc/front.h"
 var $5288=($5287|0)==0; //@line 45 "inc/front.h"
 if($5288){label=1037;break;}else{label=1036;break;} //@line 45 "inc/front.h"
 case 1036: 
 var $5290=$storemerge_i_i_i855|$5286; //@line 45 "inc/front.h"
 var $storemerge_i_i_i855=$5290;label=1035;break; //@line 45 "inc/front.h"
 case 1037: 
 var $5291$0=_llvm_umul_with_overflow_i32($5286,8);
 var $5291$1=tempRet0;
 var $5292=$5291$1;
 var $5293=$5291$0;
 var $5294=($5292?-1:$5293); //@line 9 "inc/front.h"
 var $5295=(function() { try { __THREW__ = 0; return __Znwj($5294) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1041;break; } else { label=1038;break; }
 case 1038: 
 var $5297$0 = ___cxa_find_matching_catch(-1, -1); var $5297$1 = tempRet0;
 var $5298=$5297$1;
 var $5299=($5298|0)<0;
 if($5299){label=1039;break;}else{label=1040;break;}
 case 1039: 
 var $5301=$5297$0;
 ___cxa_call_unexpected($5301);
 throw "Reached an unreachable!";
 case 1040: 
 ___resumeException($5297$0)
 case 1041: 
 var $5303=$5295; //@line 9 "inc/front.h"
 var $_01113=$5281;var $f_i850_sroa_55_0=0;label=1042;break; //@line 22 "inc/front.h"
 case 1042: 
 var $f_i850_sroa_55_0;
 var $_01113;
 var $5305=((($f_i850_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5306=$f_i850_sroa_55_0&$storemerge_i_i_i855; //@line 23 "inc/front.h"
 var $5307=(($5303+($5306<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5307)>>3)]=0; //@line 23 "inc/front.h"
 var $5308=((($_01113)-(1))|0); //@line 23 "inc/front.h"
 var $5309=($5308|0)==0; //@line 23 "inc/front.h"
 if($5309){label=1043;break;}else{var $_01113=$5308;var $f_i850_sroa_55_0=$5305;label=1042;break;} //@line 23 "inc/front.h"
 case 1043: 
 var $5310=(($5274+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5311=$5310; //@line 50 "inc/pcdecoder.inl"
 var $5312=(($5274+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5313=$5312; //@line 50 "inc/pcdecoder.inl"
 var $_01116=$_01052;var $f_i850_sroa_55_1=$5305;var $z_i853_0=0;label=1044;break; //@line 47 "src/read.cpp"
 case 1044: 
 var $z_i853_0;
 var $f_i850_sroa_55_1;
 var $_01116;
 var $5315=($z_i853_0>>>0)<($5269>>>0); //@line 47 "src/read.cpp"
 if($5315){var $_01112=$5279;var $f_i850_sroa_55_2=$f_i850_sroa_55_1;label=1045;break;}else{label=1068;break;} //@line 47 "src/read.cpp"
 case 1045: 
 var $f_i850_sroa_55_2;
 var $_01112;
 var $5317=((($f_i850_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5318=$f_i850_sroa_55_2&$storemerge_i_i_i855; //@line 23 "inc/front.h"
 var $5319=(($5303+($5318<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5319)>>3)]=0; //@line 23 "inc/front.h"
 var $5320=((($_01112)-(1))|0); //@line 23 "inc/front.h"
 var $5321=($5320|0)==0; //@line 23 "inc/front.h"
 if($5321){var $_11117=$_01116;var $f_i850_sroa_55_3=$5317;var $y_i852_0=0;label=1046;break;}else{var $_01112=$5320;var $f_i850_sroa_55_2=$5317;label=1045;break;} //@line 23 "inc/front.h"
 case 1046: 
 var $y_i852_0;
 var $f_i850_sroa_55_3;
 var $_11117;
 var $5322=($y_i852_0>>>0)<($5268>>>0); //@line 48 "src/read.cpp"
 if($5322){var $_01111=1;var $f_i850_sroa_55_4=$f_i850_sroa_55_3;label=1047;break;}else{label=1067;break;} //@line 48 "src/read.cpp"
 case 1047: 
 var $f_i850_sroa_55_4;
 var $_01111;
 var $5324=((($f_i850_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5325=$f_i850_sroa_55_4&$storemerge_i_i_i855; //@line 23 "inc/front.h"
 var $5326=(($5303+($5325<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5326)>>3)]=0; //@line 23 "inc/front.h"
 var $5327=((($_01111)-(1))|0); //@line 23 "inc/front.h"
 var $5328=($5327|0)==0; //@line 23 "inc/front.h"
 if($5328){var $_21118=$_11117;var $f_i850_sroa_55_5=$5324;var $x_i851_0=0;label=1048;break;}else{var $_01111=$5327;var $f_i850_sroa_55_4=$5324;label=1047;break;} //@line 23 "inc/front.h"
 case 1048: 
 var $x_i851_0;
 var $f_i850_sroa_55_5;
 var $_21118;
 var $5329=($x_i851_0>>>0)<($5267>>>0); //@line 49 "src/read.cpp"
 if($5329){label=1049;break;}else{label=1066;break;} //@line 49 "src/read.cpp"
 case 1049: 
 var $5331=((($f_i850_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5332=$5331&$storemerge_i_i_i855; //@line 16 "inc/front.h"
 var $5333=(($5303+($5332<<3))|0); //@line 16 "inc/front.h"
 var $5334=HEAPF64[(($5333)>>3)]; //@line 59 "src/read.cpp"
 var $ld$686$0=(($5333)|0);
 var $5334$$SHADOW$0=HEAP32[(($ld$686$0)>>2)];
 var $ld$687$1=(($5333+4)|0);
 var $5334$$SHADOW$1=HEAP32[(($ld$687$1)>>2)];
 var $5335=((($f_i850_sroa_55_5)-($5279))|0); //@line 16 "inc/front.h"
 var $5336=((($5335)-($5281))|0); //@line 16 "inc/front.h"
 var $5337=$5336&$storemerge_i_i_i855; //@line 16 "inc/front.h"
 var $5338=(($5303+($5337<<3))|0); //@line 16 "inc/front.h"
 var $5339=HEAPF64[(($5338)>>3)]; //@line 59 "src/read.cpp"
 var $ld$688$0=(($5338)|0);
 var $5339$$SHADOW$0=HEAP32[(($ld$688$0)>>2)];
 var $ld$689$1=(($5338+4)|0);
 var $5339$$SHADOW$1=HEAP32[(($ld$689$1)>>2)];
 var $5340=$5335&$storemerge_i_i_i855; //@line 16 "inc/front.h"
 var $5341=(($5303+($5340<<3))|0); //@line 16 "inc/front.h"
 var $5342=HEAPF64[(($5341)>>3)]; //@line 60 "src/read.cpp"
 var $ld$690$0=(($5341)|0);
 var $5342$$SHADOW$0=HEAP32[(($ld$690$0)>>2)];
 var $ld$691$1=(($5341+4)|0);
 var $5342$$SHADOW$1=HEAP32[(($ld$691$1)>>2)];
 var $5343=((($5331)-($5281))|0); //@line 16 "inc/front.h"
 var $5344=$5343&$storemerge_i_i_i855; //@line 16 "inc/front.h"
 var $5345=(($5303+($5344<<3))|0); //@line 16 "inc/front.h"
 var $5346=HEAPF64[(($5345)>>3)]; //@line 60 "src/read.cpp"
 var $ld$692$0=(($5345)|0);
 var $5346$$SHADOW$0=HEAP32[(($ld$692$0)>>2)];
 var $ld$693$1=(($5345+4)|0);
 var $5346$$SHADOW$1=HEAP32[(($ld$693$1)>>2)];
 var $5347=((($f_i850_sroa_55_5)-($5281))|0); //@line 16 "inc/front.h"
 var $5348=$5347&$storemerge_i_i_i855; //@line 16 "inc/front.h"
 var $5349=(($5303+($5348<<3))|0); //@line 16 "inc/front.h"
 var $5350=HEAPF64[(($5349)>>3)]; //@line 61 "src/read.cpp"
 var $ld$694$0=(($5349)|0);
 var $5350$$SHADOW$0=HEAP32[(($ld$694$0)>>2)];
 var $ld$695$1=(($5349+4)|0);
 var $5350$$SHADOW$1=HEAP32[(($ld$695$1)>>2)];
 var $5351=((($5331)-($5279))|0); //@line 16 "inc/front.h"
 var $5352=$5351&$storemerge_i_i_i855; //@line 16 "inc/front.h"
 var $5353=(($5303+($5352<<3))|0); //@line 16 "inc/front.h"
 var $5354=HEAPF64[(($5353)>>3)]; //@line 61 "src/read.cpp"
 var $ld$696$0=(($5353)|0);
 var $5354$$SHADOW$0=HEAP32[(($ld$696$0)>>2)];
 var $ld$697$1=(($5353+4)|0);
 var $5354$$SHADOW$1=HEAP32[(($ld$697$1)>>2)];
 var $5355=((($5351)-($5281))|0); //@line 16 "inc/front.h"
 var $5356=$5355&$storemerge_i_i_i855; //@line 16 "inc/front.h"
 var $5357=(($5303+($5356<<3))|0); //@line 16 "inc/front.h"
 var $5358=($5334)-($5339); //@line 59 "src/read.cpp"
 var $5359=($5358)+($5342); //@line 60 "src/read.cpp"
 var $5360=($5359)-($5346); //@line 60 "src/read.cpp"
 var $5361=($5360)+($5350); //@line 61 "src/read.cpp"
 var $5362=($5361)-($5354); //@line 61 "src/read.cpp"
 var $5363=HEAPF64[(($5357)>>3)]; //@line 62 "src/read.cpp"
 var $ld$698$0=(($5357)|0);
 var $5363$$SHADOW$0=HEAP32[(($ld$698$0)>>2)];
 var $ld$699$1=(($5357+4)|0);
 var $5363$$SHADOW$1=HEAP32[(($ld$699$1)>>2)];
 var $5364=($5362)+($5363); //@line 62 "src/read.cpp"
 var $5365=HEAP32[(($5311)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5366=HEAP32[(($5313)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5367=HEAP32[(($5366)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$700$0=4;
 var $$etemp$700$1=0;

 var $$etemp$701$0=4;
 var $$etemp$701$1=0;

 var $5368=$5367; //@line 25 "src/rcdecoder.cpp"
 var $5369=HEAP32[(($5368)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5370=(($5369+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5371=HEAP32[(($5370)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5372=(($5365+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5371]($5367,$5372) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1050;break; } else { label=1064;break; }
 case 1050: 
 var $5373=(($5365+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5374=HEAP32[(($5373)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5375=(($5365+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5376=HEAP32[(($5375)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5377=((($5374)-($5376))|0); //@line 26 "src/rcdecoder.cpp"
 var $5378=HEAP32[(($5372)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5379=(((($5377>>>0))/(($5378>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i842)>>2)]=$5379; //@line 26 "src/rcdecoder.cpp"
 var $5380=$5367; //@line 27 "src/rcdecoder.cpp"
 var $5381=HEAP32[(($5380)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5382=(($5381+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5383=HEAP32[(($5382)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5384=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5383]($5367,$l_i_i_i842,$r_i_i_i843) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1051;break; } else { label=1064;break; }
 case 1051: 
 var $5385=HEAP32[(($5372)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5386=HEAP32[(($l_i_i_i842)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5387=(Math_imul($5385,$5386)|0); //@line 28 "src/rcdecoder.cpp"
 var $5388=HEAP32[(($5375)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5389=((($5388)+($5387))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5375)>>2)]=$5389; //@line 28 "src/rcdecoder.cpp"
 var $5390=HEAP32[(($r_i_i_i843)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5391=(Math_imul($5385,$5390)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5372)>>2)]=$5391; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5365) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1052;break; } else { label=1064;break; }
 case 1052: 
 var $$etemp$702$0=4;
 var $$etemp$702$1=0;

 var $$etemp$703$0=4;
 var $$etemp$703$1=0;

 var $5392=($5384>>>0)>54; //@line 51 "inc/pcdecoder.inl"
 if($5392){label=1053;break;}else{label=1055;break;} //@line 51 "inc/pcdecoder.inl"
 case 1053: 
 var $5394=((($5384)-(55))|0); //@line 52 "inc/pcdecoder.inl"
 var $5395=HEAP32[(($5311)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5396$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5395,$5394) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5396$0=$5396$r;var $5396$1=tempRet0;if (!__THREW__) { label=1054;break; } else { label=1064;break; }
 case 1054: 
 var $5397$0=$5394;
 var $5397$1=0;
 var $$etemp$704$0=1;
 var $$etemp$704$1=0;
 var $5398$0=_bitshift64Shl($$etemp$704$0,$$etemp$704$1,$5397$0);var $5398$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $5399$0=_i64Add($5398$0,$5398$1,$5396$0,$5396$1);var $5399$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5364; var $5400$0=HEAP32[((tempDoublePtr)>>2)];var $5400$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$705$0=-1;
 var $$etemp$705$1=-1;
 var $5401$0=$5400$0^$$etemp$705$0;
 var $5401$1=$5400$1^$$etemp$705$1;
 var $5402$0=($5401$0>>>10)|($5401$1<<22);
 var $5402$1=($5401$1>>>10)|(0<<22);
 var $5403$0=($5401$1>>31)|((((((($5401$1|0)<0))|0)?-1:0))<<1);
 var $5403$1=((((((($5401$1|0)<0))|0)?-1:0))>>31)|((((((($5401$1|0)<0))|0)?-1:0))<<1);
 var $5404$0=($5403$0>>>11)|($5403$1<<21);
 var $5404$1=($5403$1>>>11)|(0<<21);
 var $5405$0=$5402$0^$5404$0;
 var $5405$1=$5402$1^$5404$1;
 var $5406$0=_i64Add($5405$0,$5405$1,$5399$0,$5399$1);var $5406$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $5407$0=($5406$1>>>21)|(0<<11);
 var $5407$1=(0>>>21)|(0<<11);
 var $$etemp$706$0=0;
 var $$etemp$706$1=0;
 var $5408$0=_i64Subtract($$etemp$706$0,$$etemp$706$1,$5407$0,$5407$1);var $5408$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5409$0=($5408$0>>>11)|($5408$1<<21);
 var $5409$1=($5408$1>>>11)|(0<<21);
 var $5410$0=$5409$0^$5406$0;
 var $5410$1=$5409$1^$5406$1;
 var $5411$0=($5410$0<<10)|(0>>>22);
 var $5411$1=($5410$1<<10)|($5410$0>>>22);
 var $$etemp$707$0=-1024;
 var $$etemp$707$1=-1;
 var $5412$0=$5411$0^$$etemp$707$0;
 var $5412$1=$5411$1^$$etemp$707$1;
 var $_01109_in$1=$5412$1;var $_01109_in$0=$5412$0;label=1059;break; //@line 56 "inc/pcdecoder.inl"
 case 1055: 
 var $5414=($5384>>>0)<54; //@line undefined "inc/pcdecoder.inl"
 if($5414){label=1056;break;}else{label=1058;break;} //@line undefined "inc/pcdecoder.inl"
 case 1056: 
 var $5416=(((53)-($5384))|0); //@line 59 "inc/pcdecoder.inl"
 var $5417=HEAP32[(($5311)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5418$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5417,$5416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5418$0=$5418$r;var $5418$1=tempRet0;if (!__THREW__) { label=1057;break; } else { label=1064;break; }
 case 1057: 
 var $5419$0=$5416;
 var $5419$1=0;
 var $$etemp$708$0=1;
 var $$etemp$708$1=0;
 var $5420$0=_bitshift64Shl($$etemp$708$0,$$etemp$708$1,$5419$0);var $5420$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $5421$0=_i64Add($5420$0,$5420$1,$5418$0,$5418$1);var $5421$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5364; var $5422$0=HEAP32[((tempDoublePtr)>>2)];var $5422$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$709$0=-1;
 var $$etemp$709$1=-1;
 var $5423$0=$5422$0^$$etemp$709$0;
 var $5423$1=$5422$1^$$etemp$709$1;
 var $5424$0=($5423$0>>>10)|($5423$1<<22);
 var $5424$1=($5423$1>>>10)|(0<<22);
 var $5425$0=($5423$1>>31)|((((((($5423$1|0)<0))|0)?-1:0))<<1);
 var $5425$1=((((((($5423$1|0)<0))|0)?-1:0))>>31)|((((((($5423$1|0)<0))|0)?-1:0))<<1);
 var $5426$0=($5425$0>>>11)|($5425$1<<21);
 var $5426$1=($5425$1>>>11)|(0<<21);
 var $5427$0=$5424$0^$5426$0;
 var $5427$1=$5424$1^$5426$1;
 var $5428$0=_i64Subtract($5427$0,$5427$1,$5421$0,$5421$1);var $5428$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $5429$0=($5428$1>>>21)|(0<<11);
 var $5429$1=(0>>>21)|(0<<11);
 var $$etemp$710$0=0;
 var $$etemp$710$1=0;
 var $5430$0=_i64Subtract($$etemp$710$0,$$etemp$710$1,$5429$0,$5429$1);var $5430$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5431$0=($5430$0>>>11)|($5430$1<<21);
 var $5431$1=($5430$1>>>11)|(0<<21);
 var $5432$0=$5431$0^$5428$0;
 var $5432$1=$5431$1^$5428$1;
 var $5433$0=($5432$0<<10)|(0>>>22);
 var $5433$1=($5432$1<<10)|($5432$0>>>22);
 var $$etemp$711$0=-1024;
 var $$etemp$711$1=-1;
 var $5434$0=$5433$0^$$etemp$711$0;
 var $5434$1=$5433$1^$$etemp$711$1;
 var $_01109_in$1=$5434$1;var $_01109_in$0=$5434$0;label=1059;break; //@line 63 "inc/pcdecoder.inl"
 case 1058: 
 HEAPF64[(tempDoublePtr)>>3]=$5364; var $5436$0=HEAP32[((tempDoublePtr)>>2)];var $5436$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$712$0=-1024;
 var $$etemp$712$1=-1;
 var $5437$0=$5436$0&$$etemp$712$0;
 var $5437$1=$5436$1&$$etemp$712$1;
 var $_01109_in$1=$5437$1;var $_01109_in$0=$5437$0;label=1059;break; //@line 66 "inc/pcdecoder.inl"
 case 1059: 
 var $_01109_in$0;
 var $_01109_in$1;
 var $_01109=(HEAP32[((tempDoublePtr)>>2)]=$_01109_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01109_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $5438=(($_21118+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21118)>>3)]=$_01109; //@line 65 "src/read.cpp"
 var $_01110=1;var $f_i850_sroa_55_6=$f_i850_sroa_55_5;label=1060;break; //@line 22 "inc/front.h"
 case 1060: 
 var $f_i850_sroa_55_6;
 var $_01110;
 var $5440=((($f_i850_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5441=$f_i850_sroa_55_6&$storemerge_i_i_i855; //@line 23 "inc/front.h"
 var $5442=(($5303+($5441<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5442)>>3)]=$_01109; //@line 23 "inc/front.h"
 var $5443=((($_01110)-(1))|0); //@line 23 "inc/front.h"
 var $5444=($5443|0)==0; //@line 23 "inc/front.h"
 if($5444){label=1061;break;}else{var $_01110=$5443;var $f_i850_sroa_55_6=$5440;label=1060;break;} //@line 23 "inc/front.h"
 case 1061: 
 var $5445=((($x_i851_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21118=$5438;var $f_i850_sroa_55_5=$5440;var $x_i851_0=$5445;label=1048;break; //@line 49 "src/read.cpp"
 case 1062: 
 var $5447$0 = ___cxa_find_matching_catch(-1, -1); var $5447$1 = tempRet0;
 var $5448=$5447$0;
 var $5449=$5447$1;
 var $5450=($5270|0)==0;
 if($5450){var $_01119=$5448;var $_01120=$5449;label=1074;break;}else{label=1063;break;}
 case 1063: 
 _free($5270);
 var $_01119=$5448;var $_01120=$5449;label=1074;break;
 case 1064: 
 var $5453$0 = ___cxa_find_matching_catch(-1, -1); var $5453$1 = tempRet0;
 var $5454=$5453$0;
 var $5455=$5453$1;
 var $5456=($5295|0)==0; //@line 11 "inc/front.h"
 if($5456){var $_01119=$5454;var $_01120=$5455;label=1074;break;}else{label=1065;break;} //@line 11 "inc/front.h"
 case 1065: 
 _free($5295);
 var $_01119=$5454;var $_01120=$5455;label=1074;break; //@line 11 "inc/front.h"
 case 1066: 
 var $5458=((($y_i852_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11117=$_21118;var $f_i850_sroa_55_3=$f_i850_sroa_55_5;var $y_i852_0=$5458;label=1046;break; //@line 48 "src/read.cpp"
 case 1067: 
 var $5460=((($z_i853_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01116=$_11117;var $f_i850_sroa_55_1=$f_i850_sroa_55_3;var $z_i853_0=$5460;label=1044;break; //@line 47 "src/read.cpp"
 case 1068: 
 var $5462=($5274|0)==0; //@line 69 "src/read.cpp"
 if($5462){label=1070;break;}else{label=1069;break;} //@line 69 "src/read.cpp"
 case 1069: 
 _free($5274);
 label=1070;break; //@line 69 "src/read.cpp"
 case 1070: 
 var $5464=HEAP32[(($rm_i848)>>2)]; //@line 70 "src/read.cpp"
 var $5465=($5464|0)==0; //@line 70 "src/read.cpp"
 if($5465){label=1072;break;}else{label=1071;break;} //@line 70 "src/read.cpp"
 case 1071: 
 var $5467=$5464; //@line 70 "src/read.cpp"
 var $5468=HEAP32[(($5467)>>2)]; //@line 70 "src/read.cpp"
 var $5469=(($5468+4)|0); //@line 70 "src/read.cpp"
 var $5470=HEAP32[(($5469)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5470]($5464); //@line 70 "src/read.cpp"
 label=1072;break; //@line 70 "src/read.cpp"
 case 1072: 
 var $5472=($5295|0)==0; //@line 11 "inc/front.h"
 if($5472){label=1285;break;}else{label=1073;break;} //@line 11 "inc/front.h"
 case 1073: 
 _free($5295);
 label=1285;break; //@line 11 "inc/front.h"
 case 1074: 
 var $_01120;
 var $_01119;
 var $5473$0=$_01119;
 var $5473$1=0;
 var $5474$0=$5473$0;
 var $5474$1=$_01120;
 ___resumeException($5474$0) //@line 71 "src/read.cpp"
 case 1075: 
 var $5476=HEAP32[(($3)>>2)]; //@line 193 "src/read.cpp"
 var $5477=HEAP32[(($4)>>2)]; //@line 193 "src/read.cpp"
 var $5478=HEAP32[(($5)>>2)]; //@line 193 "src/read.cpp"
 var $5479=HEAP32[(($6)>>2)]; //@line 193 "src/read.cpp"
 var $$etemp$713$0=4;
 var $$etemp$713$1=0;

 var $5480=__Znwj(48); //@line 41 "src/read.cpp"
 var $5481=$5480; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5481,0,113,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1076;break; } else { label=1104;break; } //@line 41 "src/read.cpp"
 case 1076: 
 var $5483=$5480; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i884)>>2)]=$5483; //@line 71 "src/read.cpp"
 var $5484=__Znwj(12); //@line 42 "src/read.cpp"
 var $5485=(($5484+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5486=$5485; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5486)>>2)]=$5476; //@line 34 "inc/pcdecoder.inl"
 var $5487=(($5484+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5488=$5487; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5488)>>2)]=$rm_i884; //@line 34 "inc/pcdecoder.inl"
 var $5489=((($5477)+(1))|0); //@line 10 "inc/front.h"
 var $5490=((($5478)+(1))|0); //@line 10 "inc/front.h"
 var $5491=(Math_imul($5489,$5490)|0); //@line 10 "inc/front.h"
 var $5492=((($5477)+(2))|0); //@line 9 "inc/front.h"
 var $5493=((($5492)+($5491))|0); //@line 9 "inc/front.h"
 var $5494=((($5493)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i891=$5494;label=1077;break; //@line 45 "inc/front.h"
 case 1077: 
 var $storemerge_i_i_i891;
 var $5496=((($storemerge_i_i_i891)+(1))|0); //@line 45 "inc/front.h"
 var $5497=$storemerge_i_i_i891&$5496; //@line 45 "inc/front.h"
 var $5498=($5497|0)==0; //@line 45 "inc/front.h"
 if($5498){label=1079;break;}else{label=1078;break;} //@line 45 "inc/front.h"
 case 1078: 
 var $5500=$storemerge_i_i_i891|$5496; //@line 45 "inc/front.h"
 var $storemerge_i_i_i891=$5500;label=1077;break; //@line 45 "inc/front.h"
 case 1079: 
 var $5501$0=_llvm_umul_with_overflow_i32($5496,8);
 var $5501$1=tempRet0;
 var $5502=$5501$1;
 var $5503=$5501$0;
 var $5504=($5502?-1:$5503); //@line 9 "inc/front.h"
 var $5505=(function() { try { __THREW__ = 0; return __Znwj($5504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1083;break; } else { label=1080;break; }
 case 1080: 
 var $5507$0 = ___cxa_find_matching_catch(-1, -1); var $5507$1 = tempRet0;
 var $5508=$5507$1;
 var $5509=($5508|0)<0;
 if($5509){label=1081;break;}else{label=1082;break;}
 case 1081: 
 var $5511=$5507$0;
 ___cxa_call_unexpected($5511);
 throw "Reached an unreachable!";
 case 1082: 
 ___resumeException($5507$0)
 case 1083: 
 var $5513=$5505; //@line 9 "inc/front.h"
 var $_01103=$5491;var $f_i886_sroa_55_0=0;label=1084;break; //@line 22 "inc/front.h"
 case 1084: 
 var $f_i886_sroa_55_0;
 var $_01103;
 var $5515=((($f_i886_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5516=$f_i886_sroa_55_0&$storemerge_i_i_i891; //@line 23 "inc/front.h"
 var $5517=(($5513+($5516<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5517)>>3)]=0; //@line 23 "inc/front.h"
 var $5518=((($_01103)-(1))|0); //@line 23 "inc/front.h"
 var $5519=($5518|0)==0; //@line 23 "inc/front.h"
 if($5519){label=1085;break;}else{var $_01103=$5518;var $f_i886_sroa_55_0=$5515;label=1084;break;} //@line 23 "inc/front.h"
 case 1085: 
 var $5520=(($5484+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5521=$5520; //@line 50 "inc/pcdecoder.inl"
 var $5522=(($5484+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5523=$5522; //@line 50 "inc/pcdecoder.inl"
 var $_01104=$_01052;var $f_i886_sroa_55_1=$5515;var $z_i889_0=0;label=1086;break; //@line 47 "src/read.cpp"
 case 1086: 
 var $z_i889_0;
 var $f_i886_sroa_55_1;
 var $_01104;
 var $5525=($z_i889_0>>>0)<($5479>>>0); //@line 47 "src/read.cpp"
 if($5525){var $_01102=$5489;var $f_i886_sroa_55_2=$f_i886_sroa_55_1;label=1087;break;}else{label=1110;break;} //@line 47 "src/read.cpp"
 case 1087: 
 var $f_i886_sroa_55_2;
 var $_01102;
 var $5527=((($f_i886_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5528=$f_i886_sroa_55_2&$storemerge_i_i_i891; //@line 23 "inc/front.h"
 var $5529=(($5513+($5528<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5529)>>3)]=0; //@line 23 "inc/front.h"
 var $5530=((($_01102)-(1))|0); //@line 23 "inc/front.h"
 var $5531=($5530|0)==0; //@line 23 "inc/front.h"
 if($5531){var $_11105=$_01104;var $f_i886_sroa_55_3=$5527;var $y_i888_0=0;label=1088;break;}else{var $_01102=$5530;var $f_i886_sroa_55_2=$5527;label=1087;break;} //@line 23 "inc/front.h"
 case 1088: 
 var $y_i888_0;
 var $f_i886_sroa_55_3;
 var $_11105;
 var $5532=($y_i888_0>>>0)<($5478>>>0); //@line 48 "src/read.cpp"
 if($5532){var $_01101=1;var $f_i886_sroa_55_4=$f_i886_sroa_55_3;label=1089;break;}else{label=1109;break;} //@line 48 "src/read.cpp"
 case 1089: 
 var $f_i886_sroa_55_4;
 var $_01101;
 var $5534=((($f_i886_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5535=$f_i886_sroa_55_4&$storemerge_i_i_i891; //@line 23 "inc/front.h"
 var $5536=(($5513+($5535<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5536)>>3)]=0; //@line 23 "inc/front.h"
 var $5537=((($_01101)-(1))|0); //@line 23 "inc/front.h"
 var $5538=($5537|0)==0; //@line 23 "inc/front.h"
 if($5538){var $_21106=$_11105;var $f_i886_sroa_55_5=$5534;var $x_i887_0=0;label=1090;break;}else{var $_01101=$5537;var $f_i886_sroa_55_4=$5534;label=1089;break;} //@line 23 "inc/front.h"
 case 1090: 
 var $x_i887_0;
 var $f_i886_sroa_55_5;
 var $_21106;
 var $5539=($x_i887_0>>>0)<($5477>>>0); //@line 49 "src/read.cpp"
 if($5539){label=1091;break;}else{label=1108;break;} //@line 49 "src/read.cpp"
 case 1091: 
 var $5541=((($f_i886_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5542=$5541&$storemerge_i_i_i891; //@line 16 "inc/front.h"
 var $5543=(($5513+($5542<<3))|0); //@line 16 "inc/front.h"
 var $5544=HEAPF64[(($5543)>>3)]; //@line 59 "src/read.cpp"
 var $ld$714$0=(($5543)|0);
 var $5544$$SHADOW$0=HEAP32[(($ld$714$0)>>2)];
 var $ld$715$1=(($5543+4)|0);
 var $5544$$SHADOW$1=HEAP32[(($ld$715$1)>>2)];
 var $5545=((($f_i886_sroa_55_5)-($5489))|0); //@line 16 "inc/front.h"
 var $5546=((($5545)-($5491))|0); //@line 16 "inc/front.h"
 var $5547=$5546&$storemerge_i_i_i891; //@line 16 "inc/front.h"
 var $5548=(($5513+($5547<<3))|0); //@line 16 "inc/front.h"
 var $5549=HEAPF64[(($5548)>>3)]; //@line 59 "src/read.cpp"
 var $ld$716$0=(($5548)|0);
 var $5549$$SHADOW$0=HEAP32[(($ld$716$0)>>2)];
 var $ld$717$1=(($5548+4)|0);
 var $5549$$SHADOW$1=HEAP32[(($ld$717$1)>>2)];
 var $5550=$5545&$storemerge_i_i_i891; //@line 16 "inc/front.h"
 var $5551=(($5513+($5550<<3))|0); //@line 16 "inc/front.h"
 var $5552=HEAPF64[(($5551)>>3)]; //@line 60 "src/read.cpp"
 var $ld$718$0=(($5551)|0);
 var $5552$$SHADOW$0=HEAP32[(($ld$718$0)>>2)];
 var $ld$719$1=(($5551+4)|0);
 var $5552$$SHADOW$1=HEAP32[(($ld$719$1)>>2)];
 var $5553=((($5541)-($5491))|0); //@line 16 "inc/front.h"
 var $5554=$5553&$storemerge_i_i_i891; //@line 16 "inc/front.h"
 var $5555=(($5513+($5554<<3))|0); //@line 16 "inc/front.h"
 var $5556=HEAPF64[(($5555)>>3)]; //@line 60 "src/read.cpp"
 var $ld$720$0=(($5555)|0);
 var $5556$$SHADOW$0=HEAP32[(($ld$720$0)>>2)];
 var $ld$721$1=(($5555+4)|0);
 var $5556$$SHADOW$1=HEAP32[(($ld$721$1)>>2)];
 var $5557=((($f_i886_sroa_55_5)-($5491))|0); //@line 16 "inc/front.h"
 var $5558=$5557&$storemerge_i_i_i891; //@line 16 "inc/front.h"
 var $5559=(($5513+($5558<<3))|0); //@line 16 "inc/front.h"
 var $5560=HEAPF64[(($5559)>>3)]; //@line 61 "src/read.cpp"
 var $ld$722$0=(($5559)|0);
 var $5560$$SHADOW$0=HEAP32[(($ld$722$0)>>2)];
 var $ld$723$1=(($5559+4)|0);
 var $5560$$SHADOW$1=HEAP32[(($ld$723$1)>>2)];
 var $5561=((($5541)-($5489))|0); //@line 16 "inc/front.h"
 var $5562=$5561&$storemerge_i_i_i891; //@line 16 "inc/front.h"
 var $5563=(($5513+($5562<<3))|0); //@line 16 "inc/front.h"
 var $5564=HEAPF64[(($5563)>>3)]; //@line 61 "src/read.cpp"
 var $ld$724$0=(($5563)|0);
 var $5564$$SHADOW$0=HEAP32[(($ld$724$0)>>2)];
 var $ld$725$1=(($5563+4)|0);
 var $5564$$SHADOW$1=HEAP32[(($ld$725$1)>>2)];
 var $5565=((($5561)-($5491))|0); //@line 16 "inc/front.h"
 var $5566=$5565&$storemerge_i_i_i891; //@line 16 "inc/front.h"
 var $5567=(($5513+($5566<<3))|0); //@line 16 "inc/front.h"
 var $5568=($5544)-($5549); //@line 59 "src/read.cpp"
 var $5569=($5568)+($5552); //@line 60 "src/read.cpp"
 var $5570=($5569)-($5556); //@line 60 "src/read.cpp"
 var $5571=($5570)+($5560); //@line 61 "src/read.cpp"
 var $5572=($5571)-($5564); //@line 61 "src/read.cpp"
 var $5573=HEAPF64[(($5567)>>3)]; //@line 62 "src/read.cpp"
 var $ld$726$0=(($5567)|0);
 var $5573$$SHADOW$0=HEAP32[(($ld$726$0)>>2)];
 var $ld$727$1=(($5567+4)|0);
 var $5573$$SHADOW$1=HEAP32[(($ld$727$1)>>2)];
 var $5574=($5572)+($5573); //@line 62 "src/read.cpp"
 var $5575=HEAP32[(($5521)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5576=HEAP32[(($5523)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5577=HEAP32[(($5576)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$728$0=4;
 var $$etemp$728$1=0;

 var $$etemp$729$0=4;
 var $$etemp$729$1=0;

 var $5578=$5577; //@line 25 "src/rcdecoder.cpp"
 var $5579=HEAP32[(($5578)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5580=(($5579+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5581=HEAP32[(($5580)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5582=(($5575+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5581]($5577,$5582) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1092;break; } else { label=1106;break; }
 case 1092: 
 var $5583=(($5575+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5584=HEAP32[(($5583)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5585=(($5575+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5586=HEAP32[(($5585)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5587=((($5584)-($5586))|0); //@line 26 "src/rcdecoder.cpp"
 var $5588=HEAP32[(($5582)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5589=(((($5587>>>0))/(($5588>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i878)>>2)]=$5589; //@line 26 "src/rcdecoder.cpp"
 var $5590=$5577; //@line 27 "src/rcdecoder.cpp"
 var $5591=HEAP32[(($5590)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5592=(($5591+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5593=HEAP32[(($5592)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5594=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5593]($5577,$l_i_i_i878,$r_i_i_i879) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1093;break; } else { label=1106;break; }
 case 1093: 
 var $5595=HEAP32[(($5582)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5596=HEAP32[(($l_i_i_i878)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5597=(Math_imul($5595,$5596)|0); //@line 28 "src/rcdecoder.cpp"
 var $5598=HEAP32[(($5585)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5599=((($5598)+($5597))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5585)>>2)]=$5599; //@line 28 "src/rcdecoder.cpp"
 var $5600=HEAP32[(($r_i_i_i879)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5601=(Math_imul($5595,$5600)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5582)>>2)]=$5601; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5575) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1094;break; } else { label=1106;break; }
 case 1094: 
 var $$etemp$730$0=4;
 var $$etemp$730$1=0;

 var $$etemp$731$0=4;
 var $$etemp$731$1=0;

 var $5602=($5594>>>0)>56; //@line 51 "inc/pcdecoder.inl"
 if($5602){label=1095;break;}else{label=1097;break;} //@line 51 "inc/pcdecoder.inl"
 case 1095: 
 var $5604=((($5594)-(57))|0); //@line 52 "inc/pcdecoder.inl"
 var $5605=HEAP32[(($5521)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5606$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5605,$5604) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5606$0=$5606$r;var $5606$1=tempRet0;if (!__THREW__) { label=1096;break; } else { label=1106;break; }
 case 1096: 
 var $5607$0=$5604;
 var $5607$1=0;
 var $$etemp$732$0=1;
 var $$etemp$732$1=0;
 var $5608$0=_bitshift64Shl($$etemp$732$0,$$etemp$732$1,$5607$0);var $5608$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $5609$0=_i64Add($5608$0,$5608$1,$5606$0,$5606$1);var $5609$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5574; var $5610$0=HEAP32[((tempDoublePtr)>>2)];var $5610$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$733$0=-1;
 var $$etemp$733$1=-1;
 var $5611$0=$5610$0^$$etemp$733$0;
 var $5611$1=$5610$1^$$etemp$733$1;
 var $5612$0=($5611$0>>>8)|($5611$1<<24);
 var $5612$1=($5611$1>>>8)|(0<<24);
 var $5613$0=($5611$1>>31)|((((((($5611$1|0)<0))|0)?-1:0))<<1);
 var $5613$1=((((((($5611$1|0)<0))|0)?-1:0))>>31)|((((((($5611$1|0)<0))|0)?-1:0))<<1);
 var $5614$0=($5613$0>>>9)|($5613$1<<23);
 var $5614$1=($5613$1>>>9)|(0<<23);
 var $5615$0=$5612$0^$5614$0;
 var $5615$1=$5612$1^$5614$1;
 var $5616$0=_i64Add($5615$0,$5615$1,$5609$0,$5609$1);var $5616$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $5617$0=($5616$1>>>23)|(0<<9);
 var $5617$1=(0>>>23)|(0<<9);
 var $$etemp$734$0=0;
 var $$etemp$734$1=0;
 var $5618$0=_i64Subtract($$etemp$734$0,$$etemp$734$1,$5617$0,$5617$1);var $5618$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5619$0=($5618$0>>>9)|($5618$1<<23);
 var $5619$1=($5618$1>>>9)|(0<<23);
 var $5620$0=$5619$0^$5616$0;
 var $5620$1=$5619$1^$5616$1;
 var $5621$0=($5620$0<<8)|(0>>>24);
 var $5621$1=($5620$1<<8)|($5620$0>>>24);
 var $$etemp$735$0=-256;
 var $$etemp$735$1=-1;
 var $5622$0=$5621$0^$$etemp$735$0;
 var $5622$1=$5621$1^$$etemp$735$1;
 var $_01099_in$1=$5622$1;var $_01099_in$0=$5622$0;label=1101;break; //@line 56 "inc/pcdecoder.inl"
 case 1097: 
 var $5624=($5594>>>0)<56; //@line undefined "inc/pcdecoder.inl"
 if($5624){label=1098;break;}else{label=1100;break;} //@line undefined "inc/pcdecoder.inl"
 case 1098: 
 var $5626=(((55)-($5594))|0); //@line 59 "inc/pcdecoder.inl"
 var $5627=HEAP32[(($5521)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5628$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5627,$5626) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5628$0=$5628$r;var $5628$1=tempRet0;if (!__THREW__) { label=1099;break; } else { label=1106;break; }
 case 1099: 
 var $5629$0=$5626;
 var $5629$1=0;
 var $$etemp$736$0=1;
 var $$etemp$736$1=0;
 var $5630$0=_bitshift64Shl($$etemp$736$0,$$etemp$736$1,$5629$0);var $5630$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $5631$0=_i64Add($5630$0,$5630$1,$5628$0,$5628$1);var $5631$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5574; var $5632$0=HEAP32[((tempDoublePtr)>>2)];var $5632$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$737$0=-1;
 var $$etemp$737$1=-1;
 var $5633$0=$5632$0^$$etemp$737$0;
 var $5633$1=$5632$1^$$etemp$737$1;
 var $5634$0=($5633$0>>>8)|($5633$1<<24);
 var $5634$1=($5633$1>>>8)|(0<<24);
 var $5635$0=($5633$1>>31)|((((((($5633$1|0)<0))|0)?-1:0))<<1);
 var $5635$1=((((((($5633$1|0)<0))|0)?-1:0))>>31)|((((((($5633$1|0)<0))|0)?-1:0))<<1);
 var $5636$0=($5635$0>>>9)|($5635$1<<23);
 var $5636$1=($5635$1>>>9)|(0<<23);
 var $5637$0=$5634$0^$5636$0;
 var $5637$1=$5634$1^$5636$1;
 var $5638$0=_i64Subtract($5637$0,$5637$1,$5631$0,$5631$1);var $5638$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $5639$0=($5638$1>>>23)|(0<<9);
 var $5639$1=(0>>>23)|(0<<9);
 var $$etemp$738$0=0;
 var $$etemp$738$1=0;
 var $5640$0=_i64Subtract($$etemp$738$0,$$etemp$738$1,$5639$0,$5639$1);var $5640$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5641$0=($5640$0>>>9)|($5640$1<<23);
 var $5641$1=($5640$1>>>9)|(0<<23);
 var $5642$0=$5641$0^$5638$0;
 var $5642$1=$5641$1^$5638$1;
 var $5643$0=($5642$0<<8)|(0>>>24);
 var $5643$1=($5642$1<<8)|($5642$0>>>24);
 var $$etemp$739$0=-256;
 var $$etemp$739$1=-1;
 var $5644$0=$5643$0^$$etemp$739$0;
 var $5644$1=$5643$1^$$etemp$739$1;
 var $_01099_in$1=$5644$1;var $_01099_in$0=$5644$0;label=1101;break; //@line 63 "inc/pcdecoder.inl"
 case 1100: 
 HEAPF64[(tempDoublePtr)>>3]=$5574; var $5646$0=HEAP32[((tempDoublePtr)>>2)];var $5646$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$740$0=-256;
 var $$etemp$740$1=-1;
 var $5647$0=$5646$0&$$etemp$740$0;
 var $5647$1=$5646$1&$$etemp$740$1;
 var $_01099_in$1=$5647$1;var $_01099_in$0=$5647$0;label=1101;break; //@line 66 "inc/pcdecoder.inl"
 case 1101: 
 var $_01099_in$0;
 var $_01099_in$1;
 var $_01099=(HEAP32[((tempDoublePtr)>>2)]=$_01099_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01099_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $5648=(($_21106+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21106)>>3)]=$_01099; //@line 65 "src/read.cpp"
 var $_01100=1;var $f_i886_sroa_55_6=$f_i886_sroa_55_5;label=1102;break; //@line 22 "inc/front.h"
 case 1102: 
 var $f_i886_sroa_55_6;
 var $_01100;
 var $5650=((($f_i886_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5651=$f_i886_sroa_55_6&$storemerge_i_i_i891; //@line 23 "inc/front.h"
 var $5652=(($5513+($5651<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5652)>>3)]=$_01099; //@line 23 "inc/front.h"
 var $5653=((($_01100)-(1))|0); //@line 23 "inc/front.h"
 var $5654=($5653|0)==0; //@line 23 "inc/front.h"
 if($5654){label=1103;break;}else{var $_01100=$5653;var $f_i886_sroa_55_6=$5650;label=1102;break;} //@line 23 "inc/front.h"
 case 1103: 
 var $5655=((($x_i887_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21106=$5648;var $f_i886_sroa_55_5=$5650;var $x_i887_0=$5655;label=1090;break; //@line 49 "src/read.cpp"
 case 1104: 
 var $5657$0 = ___cxa_find_matching_catch(-1, -1); var $5657$1 = tempRet0;
 var $5658=$5657$0;
 var $5659=$5657$1;
 var $5660=($5480|0)==0;
 if($5660){var $_01107=$5658;var $_01108=$5659;label=1116;break;}else{label=1105;break;}
 case 1105: 
 _free($5480);
 var $_01107=$5658;var $_01108=$5659;label=1116;break;
 case 1106: 
 var $5663$0 = ___cxa_find_matching_catch(-1, -1); var $5663$1 = tempRet0;
 var $5664=$5663$0;
 var $5665=$5663$1;
 var $5666=($5505|0)==0; //@line 11 "inc/front.h"
 if($5666){var $_01107=$5664;var $_01108=$5665;label=1116;break;}else{label=1107;break;} //@line 11 "inc/front.h"
 case 1107: 
 _free($5505);
 var $_01107=$5664;var $_01108=$5665;label=1116;break; //@line 11 "inc/front.h"
 case 1108: 
 var $5668=((($y_i888_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11105=$_21106;var $f_i886_sroa_55_3=$f_i886_sroa_55_5;var $y_i888_0=$5668;label=1088;break; //@line 48 "src/read.cpp"
 case 1109: 
 var $5670=((($z_i889_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01104=$_11105;var $f_i886_sroa_55_1=$f_i886_sroa_55_3;var $z_i889_0=$5670;label=1086;break; //@line 47 "src/read.cpp"
 case 1110: 
 var $5672=($5484|0)==0; //@line 69 "src/read.cpp"
 if($5672){label=1112;break;}else{label=1111;break;} //@line 69 "src/read.cpp"
 case 1111: 
 _free($5484);
 label=1112;break; //@line 69 "src/read.cpp"
 case 1112: 
 var $5674=HEAP32[(($rm_i884)>>2)]; //@line 70 "src/read.cpp"
 var $5675=($5674|0)==0; //@line 70 "src/read.cpp"
 if($5675){label=1114;break;}else{label=1113;break;} //@line 70 "src/read.cpp"
 case 1113: 
 var $5677=$5674; //@line 70 "src/read.cpp"
 var $5678=HEAP32[(($5677)>>2)]; //@line 70 "src/read.cpp"
 var $5679=(($5678+4)|0); //@line 70 "src/read.cpp"
 var $5680=HEAP32[(($5679)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5680]($5674); //@line 70 "src/read.cpp"
 label=1114;break; //@line 70 "src/read.cpp"
 case 1114: 
 var $5682=($5505|0)==0; //@line 11 "inc/front.h"
 if($5682){label=1285;break;}else{label=1115;break;} //@line 11 "inc/front.h"
 case 1115: 
 _free($5505);
 label=1285;break; //@line 11 "inc/front.h"
 case 1116: 
 var $_01108;
 var $_01107;
 var $5683$0=$_01107;
 var $5683$1=0;
 var $5684$0=$5683$0;
 var $5684$1=$_01108;
 ___resumeException($5684$0) //@line 71 "src/read.cpp"
 case 1117: 
 var $5686=HEAP32[(($3)>>2)]; //@line 194 "src/read.cpp"
 var $5687=HEAP32[(($4)>>2)]; //@line 194 "src/read.cpp"
 var $5688=HEAP32[(($5)>>2)]; //@line 194 "src/read.cpp"
 var $5689=HEAP32[(($6)>>2)]; //@line 194 "src/read.cpp"
 var $$etemp$741$0=4;
 var $$etemp$741$1=0;

 var $5690=__Znwj(48); //@line 41 "src/read.cpp"
 var $5691=$5690; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5691,0,117,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1118;break; } else { label=1146;break; } //@line 41 "src/read.cpp"
 case 1118: 
 var $5693=$5690; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i920)>>2)]=$5693; //@line 71 "src/read.cpp"
 var $5694=__Znwj(12); //@line 42 "src/read.cpp"
 var $5695=(($5694+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5696=$5695; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5696)>>2)]=$5686; //@line 34 "inc/pcdecoder.inl"
 var $5697=(($5694+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5698=$5697; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5698)>>2)]=$rm_i920; //@line 34 "inc/pcdecoder.inl"
 var $5699=((($5687)+(1))|0); //@line 10 "inc/front.h"
 var $5700=((($5688)+(1))|0); //@line 10 "inc/front.h"
 var $5701=(Math_imul($5699,$5700)|0); //@line 10 "inc/front.h"
 var $5702=((($5687)+(2))|0); //@line 9 "inc/front.h"
 var $5703=((($5702)+($5701))|0); //@line 9 "inc/front.h"
 var $5704=((($5703)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i927=$5704;label=1119;break; //@line 45 "inc/front.h"
 case 1119: 
 var $storemerge_i_i_i927;
 var $5706=((($storemerge_i_i_i927)+(1))|0); //@line 45 "inc/front.h"
 var $5707=$storemerge_i_i_i927&$5706; //@line 45 "inc/front.h"
 var $5708=($5707|0)==0; //@line 45 "inc/front.h"
 if($5708){label=1121;break;}else{label=1120;break;} //@line 45 "inc/front.h"
 case 1120: 
 var $5710=$storemerge_i_i_i927|$5706; //@line 45 "inc/front.h"
 var $storemerge_i_i_i927=$5710;label=1119;break; //@line 45 "inc/front.h"
 case 1121: 
 var $5711$0=_llvm_umul_with_overflow_i32($5706,8);
 var $5711$1=tempRet0;
 var $5712=$5711$1;
 var $5713=$5711$0;
 var $5714=($5712?-1:$5713); //@line 9 "inc/front.h"
 var $5715=(function() { try { __THREW__ = 0; return __Znwj($5714) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1125;break; } else { label=1122;break; }
 case 1122: 
 var $5717$0 = ___cxa_find_matching_catch(-1, -1); var $5717$1 = tempRet0;
 var $5718=$5717$1;
 var $5719=($5718|0)<0;
 if($5719){label=1123;break;}else{label=1124;break;}
 case 1123: 
 var $5721=$5717$0;
 ___cxa_call_unexpected($5721);
 throw "Reached an unreachable!";
 case 1124: 
 ___resumeException($5717$0)
 case 1125: 
 var $5723=$5715; //@line 9 "inc/front.h"
 var $_01092=$5701;var $f_i922_sroa_55_0=0;label=1126;break; //@line 22 "inc/front.h"
 case 1126: 
 var $f_i922_sroa_55_0;
 var $_01092;
 var $5725=((($f_i922_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5726=$f_i922_sroa_55_0&$storemerge_i_i_i927; //@line 23 "inc/front.h"
 var $5727=(($5723+($5726<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5727)>>3)]=0; //@line 23 "inc/front.h"
 var $5728=((($_01092)-(1))|0); //@line 23 "inc/front.h"
 var $5729=($5728|0)==0; //@line 23 "inc/front.h"
 if($5729){label=1127;break;}else{var $_01092=$5728;var $f_i922_sroa_55_0=$5725;label=1126;break;} //@line 23 "inc/front.h"
 case 1127: 
 var $5730=(($5694+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5731=$5730; //@line 50 "inc/pcdecoder.inl"
 var $5732=(($5694+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5733=$5732; //@line 50 "inc/pcdecoder.inl"
 var $_01093=$_01052;var $f_i922_sroa_55_1=$5725;var $z_i925_0=0;label=1128;break; //@line 47 "src/read.cpp"
 case 1128: 
 var $z_i925_0;
 var $f_i922_sroa_55_1;
 var $_01093;
 var $5735=($z_i925_0>>>0)<($5689>>>0); //@line 47 "src/read.cpp"
 if($5735){var $_01091=$5699;var $f_i922_sroa_55_2=$f_i922_sroa_55_1;label=1129;break;}else{label=1152;break;} //@line 47 "src/read.cpp"
 case 1129: 
 var $f_i922_sroa_55_2;
 var $_01091;
 var $5737=((($f_i922_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5738=$f_i922_sroa_55_2&$storemerge_i_i_i927; //@line 23 "inc/front.h"
 var $5739=(($5723+($5738<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5739)>>3)]=0; //@line 23 "inc/front.h"
 var $5740=((($_01091)-(1))|0); //@line 23 "inc/front.h"
 var $5741=($5740|0)==0; //@line 23 "inc/front.h"
 if($5741){var $_11094=$_01093;var $f_i922_sroa_55_3=$5737;var $y_i924_0=0;label=1130;break;}else{var $_01091=$5740;var $f_i922_sroa_55_2=$5737;label=1129;break;} //@line 23 "inc/front.h"
 case 1130: 
 var $y_i924_0;
 var $f_i922_sroa_55_3;
 var $_11094;
 var $5742=($y_i924_0>>>0)<($5688>>>0); //@line 48 "src/read.cpp"
 if($5742){var $_01090=1;var $f_i922_sroa_55_4=$f_i922_sroa_55_3;label=1131;break;}else{label=1151;break;} //@line 48 "src/read.cpp"
 case 1131: 
 var $f_i922_sroa_55_4;
 var $_01090;
 var $5744=((($f_i922_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5745=$f_i922_sroa_55_4&$storemerge_i_i_i927; //@line 23 "inc/front.h"
 var $5746=(($5723+($5745<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5746)>>3)]=0; //@line 23 "inc/front.h"
 var $5747=((($_01090)-(1))|0); //@line 23 "inc/front.h"
 var $5748=($5747|0)==0; //@line 23 "inc/front.h"
 if($5748){var $_21095=$_11094;var $f_i922_sroa_55_5=$5744;var $x_i923_0=0;label=1132;break;}else{var $_01090=$5747;var $f_i922_sroa_55_4=$5744;label=1131;break;} //@line 23 "inc/front.h"
 case 1132: 
 var $x_i923_0;
 var $f_i922_sroa_55_5;
 var $_21095;
 var $5749=($x_i923_0>>>0)<($5687>>>0); //@line 49 "src/read.cpp"
 if($5749){label=1133;break;}else{label=1150;break;} //@line 49 "src/read.cpp"
 case 1133: 
 var $5751=((($f_i922_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5752=$5751&$storemerge_i_i_i927; //@line 16 "inc/front.h"
 var $5753=(($5723+($5752<<3))|0); //@line 16 "inc/front.h"
 var $5754=HEAPF64[(($5753)>>3)]; //@line 59 "src/read.cpp"
 var $ld$742$0=(($5753)|0);
 var $5754$$SHADOW$0=HEAP32[(($ld$742$0)>>2)];
 var $ld$743$1=(($5753+4)|0);
 var $5754$$SHADOW$1=HEAP32[(($ld$743$1)>>2)];
 var $5755=((($f_i922_sroa_55_5)-($5699))|0); //@line 16 "inc/front.h"
 var $5756=((($5755)-($5701))|0); //@line 16 "inc/front.h"
 var $5757=$5756&$storemerge_i_i_i927; //@line 16 "inc/front.h"
 var $5758=(($5723+($5757<<3))|0); //@line 16 "inc/front.h"
 var $5759=HEAPF64[(($5758)>>3)]; //@line 59 "src/read.cpp"
 var $ld$744$0=(($5758)|0);
 var $5759$$SHADOW$0=HEAP32[(($ld$744$0)>>2)];
 var $ld$745$1=(($5758+4)|0);
 var $5759$$SHADOW$1=HEAP32[(($ld$745$1)>>2)];
 var $5760=$5755&$storemerge_i_i_i927; //@line 16 "inc/front.h"
 var $5761=(($5723+($5760<<3))|0); //@line 16 "inc/front.h"
 var $5762=HEAPF64[(($5761)>>3)]; //@line 60 "src/read.cpp"
 var $ld$746$0=(($5761)|0);
 var $5762$$SHADOW$0=HEAP32[(($ld$746$0)>>2)];
 var $ld$747$1=(($5761+4)|0);
 var $5762$$SHADOW$1=HEAP32[(($ld$747$1)>>2)];
 var $5763=((($5751)-($5701))|0); //@line 16 "inc/front.h"
 var $5764=$5763&$storemerge_i_i_i927; //@line 16 "inc/front.h"
 var $5765=(($5723+($5764<<3))|0); //@line 16 "inc/front.h"
 var $5766=HEAPF64[(($5765)>>3)]; //@line 60 "src/read.cpp"
 var $ld$748$0=(($5765)|0);
 var $5766$$SHADOW$0=HEAP32[(($ld$748$0)>>2)];
 var $ld$749$1=(($5765+4)|0);
 var $5766$$SHADOW$1=HEAP32[(($ld$749$1)>>2)];
 var $5767=((($f_i922_sroa_55_5)-($5701))|0); //@line 16 "inc/front.h"
 var $5768=$5767&$storemerge_i_i_i927; //@line 16 "inc/front.h"
 var $5769=(($5723+($5768<<3))|0); //@line 16 "inc/front.h"
 var $5770=HEAPF64[(($5769)>>3)]; //@line 61 "src/read.cpp"
 var $ld$750$0=(($5769)|0);
 var $5770$$SHADOW$0=HEAP32[(($ld$750$0)>>2)];
 var $ld$751$1=(($5769+4)|0);
 var $5770$$SHADOW$1=HEAP32[(($ld$751$1)>>2)];
 var $5771=((($5751)-($5699))|0); //@line 16 "inc/front.h"
 var $5772=$5771&$storemerge_i_i_i927; //@line 16 "inc/front.h"
 var $5773=(($5723+($5772<<3))|0); //@line 16 "inc/front.h"
 var $5774=HEAPF64[(($5773)>>3)]; //@line 61 "src/read.cpp"
 var $ld$752$0=(($5773)|0);
 var $5774$$SHADOW$0=HEAP32[(($ld$752$0)>>2)];
 var $ld$753$1=(($5773+4)|0);
 var $5774$$SHADOW$1=HEAP32[(($ld$753$1)>>2)];
 var $5775=((($5771)-($5701))|0); //@line 16 "inc/front.h"
 var $5776=$5775&$storemerge_i_i_i927; //@line 16 "inc/front.h"
 var $5777=(($5723+($5776<<3))|0); //@line 16 "inc/front.h"
 var $5778=($5754)-($5759); //@line 59 "src/read.cpp"
 var $5779=($5778)+($5762); //@line 60 "src/read.cpp"
 var $5780=($5779)-($5766); //@line 60 "src/read.cpp"
 var $5781=($5780)+($5770); //@line 61 "src/read.cpp"
 var $5782=($5781)-($5774); //@line 61 "src/read.cpp"
 var $5783=HEAPF64[(($5777)>>3)]; //@line 62 "src/read.cpp"
 var $ld$754$0=(($5777)|0);
 var $5783$$SHADOW$0=HEAP32[(($ld$754$0)>>2)];
 var $ld$755$1=(($5777+4)|0);
 var $5783$$SHADOW$1=HEAP32[(($ld$755$1)>>2)];
 var $5784=($5782)+($5783); //@line 62 "src/read.cpp"
 var $5785=HEAP32[(($5731)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5786=HEAP32[(($5733)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5787=HEAP32[(($5786)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$756$0=4;
 var $$etemp$756$1=0;

 var $$etemp$757$0=4;
 var $$etemp$757$1=0;

 var $5788=$5787; //@line 25 "src/rcdecoder.cpp"
 var $5789=HEAP32[(($5788)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5790=(($5789+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $5791=HEAP32[(($5790)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $5792=(($5785+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5791]($5787,$5792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1134;break; } else { label=1148;break; }
 case 1134: 
 var $5793=(($5785+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $5794=HEAP32[(($5793)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5795=(($5785+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $5796=HEAP32[(($5795)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5797=((($5794)-($5796))|0); //@line 26 "src/rcdecoder.cpp"
 var $5798=HEAP32[(($5792)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $5799=(((($5797>>>0))/(($5798>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i914)>>2)]=$5799; //@line 26 "src/rcdecoder.cpp"
 var $5800=$5787; //@line 27 "src/rcdecoder.cpp"
 var $5801=HEAP32[(($5800)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5802=(($5801+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $5803=HEAP32[(($5802)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $5804=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$5803]($5787,$l_i_i_i914,$r_i_i_i915) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1135;break; } else { label=1148;break; }
 case 1135: 
 var $5805=HEAP32[(($5792)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5806=HEAP32[(($l_i_i_i914)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5807=(Math_imul($5805,$5806)|0); //@line 28 "src/rcdecoder.cpp"
 var $5808=HEAP32[(($5795)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $5809=((($5808)+($5807))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($5795)>>2)]=$5809; //@line 28 "src/rcdecoder.cpp"
 var $5810=HEAP32[(($r_i_i_i915)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $5811=(Math_imul($5805,$5810)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($5792)>>2)]=$5811; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5785) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1136;break; } else { label=1148;break; }
 case 1136: 
 var $$etemp$758$0=4;
 var $$etemp$758$1=0;

 var $$etemp$759$0=4;
 var $$etemp$759$1=0;

 var $5812=($5804>>>0)>58; //@line 51 "inc/pcdecoder.inl"
 if($5812){label=1137;break;}else{label=1139;break;} //@line 51 "inc/pcdecoder.inl"
 case 1137: 
 var $5814=((($5804)-(59))|0); //@line 52 "inc/pcdecoder.inl"
 var $5815=HEAP32[(($5731)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $5816$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5815,$5814) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5816$0=$5816$r;var $5816$1=tempRet0;if (!__THREW__) { label=1138;break; } else { label=1148;break; }
 case 1138: 
 var $5817$0=$5814;
 var $5817$1=0;
 var $$etemp$760$0=1;
 var $$etemp$760$1=0;
 var $5818$0=_bitshift64Shl($$etemp$760$0,$$etemp$760$1,$5817$0);var $5818$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $5819$0=_i64Add($5818$0,$5818$1,$5816$0,$5816$1);var $5819$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5784; var $5820$0=HEAP32[((tempDoublePtr)>>2)];var $5820$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$761$0=-1;
 var $$etemp$761$1=-1;
 var $5821$0=$5820$0^$$etemp$761$0;
 var $5821$1=$5820$1^$$etemp$761$1;
 var $5822$0=($5821$0>>>6)|($5821$1<<26);
 var $5822$1=($5821$1>>>6)|(0<<26);
 var $5823$0=($5821$1>>31)|((((((($5821$1|0)<0))|0)?-1:0))<<1);
 var $5823$1=((((((($5821$1|0)<0))|0)?-1:0))>>31)|((((((($5821$1|0)<0))|0)?-1:0))<<1);
 var $5824$0=($5823$0>>>7)|($5823$1<<25);
 var $5824$1=($5823$1>>>7)|(0<<25);
 var $5825$0=$5822$0^$5824$0;
 var $5825$1=$5822$1^$5824$1;
 var $5826$0=_i64Add($5825$0,$5825$1,$5819$0,$5819$1);var $5826$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $5827$0=($5826$1>>>25)|(0<<7);
 var $5827$1=(0>>>25)|(0<<7);
 var $$etemp$762$0=0;
 var $$etemp$762$1=0;
 var $5828$0=_i64Subtract($$etemp$762$0,$$etemp$762$1,$5827$0,$5827$1);var $5828$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5829$0=($5828$0>>>7)|($5828$1<<25);
 var $5829$1=($5828$1>>>7)|(0<<25);
 var $5830$0=$5829$0^$5826$0;
 var $5830$1=$5829$1^$5826$1;
 var $5831$0=($5830$0<<6)|(0>>>26);
 var $5831$1=($5830$1<<6)|($5830$0>>>26);
 var $$etemp$763$0=-64;
 var $$etemp$763$1=-1;
 var $5832$0=$5831$0^$$etemp$763$0;
 var $5832$1=$5831$1^$$etemp$763$1;
 var $_01088_in$1=$5832$1;var $_01088_in$0=$5832$0;label=1143;break; //@line 56 "inc/pcdecoder.inl"
 case 1139: 
 var $5834=($5804>>>0)<58; //@line undefined "inc/pcdecoder.inl"
 if($5834){label=1140;break;}else{label=1142;break;} //@line undefined "inc/pcdecoder.inl"
 case 1140: 
 var $5836=(((57)-($5804))|0); //@line 59 "inc/pcdecoder.inl"
 var $5837=HEAP32[(($5731)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $5838$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($5837,$5836) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $5838$0=$5838$r;var $5838$1=tempRet0;if (!__THREW__) { label=1141;break; } else { label=1148;break; }
 case 1141: 
 var $5839$0=$5836;
 var $5839$1=0;
 var $$etemp$764$0=1;
 var $$etemp$764$1=0;
 var $5840$0=_bitshift64Shl($$etemp$764$0,$$etemp$764$1,$5839$0);var $5840$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $5841$0=_i64Add($5840$0,$5840$1,$5838$0,$5838$1);var $5841$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5784; var $5842$0=HEAP32[((tempDoublePtr)>>2)];var $5842$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$765$0=-1;
 var $$etemp$765$1=-1;
 var $5843$0=$5842$0^$$etemp$765$0;
 var $5843$1=$5842$1^$$etemp$765$1;
 var $5844$0=($5843$0>>>6)|($5843$1<<26);
 var $5844$1=($5843$1>>>6)|(0<<26);
 var $5845$0=($5843$1>>31)|((((((($5843$1|0)<0))|0)?-1:0))<<1);
 var $5845$1=((((((($5843$1|0)<0))|0)?-1:0))>>31)|((((((($5843$1|0)<0))|0)?-1:0))<<1);
 var $5846$0=($5845$0>>>7)|($5845$1<<25);
 var $5846$1=($5845$1>>>7)|(0<<25);
 var $5847$0=$5844$0^$5846$0;
 var $5847$1=$5844$1^$5846$1;
 var $5848$0=_i64Subtract($5847$0,$5847$1,$5841$0,$5841$1);var $5848$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $5849$0=($5848$1>>>25)|(0<<7);
 var $5849$1=(0>>>25)|(0<<7);
 var $$etemp$766$0=0;
 var $$etemp$766$1=0;
 var $5850$0=_i64Subtract($$etemp$766$0,$$etemp$766$1,$5849$0,$5849$1);var $5850$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $5851$0=($5850$0>>>7)|($5850$1<<25);
 var $5851$1=($5850$1>>>7)|(0<<25);
 var $5852$0=$5851$0^$5848$0;
 var $5852$1=$5851$1^$5848$1;
 var $5853$0=($5852$0<<6)|(0>>>26);
 var $5853$1=($5852$1<<6)|($5852$0>>>26);
 var $$etemp$767$0=-64;
 var $$etemp$767$1=-1;
 var $5854$0=$5853$0^$$etemp$767$0;
 var $5854$1=$5853$1^$$etemp$767$1;
 var $_01088_in$1=$5854$1;var $_01088_in$0=$5854$0;label=1143;break; //@line 63 "inc/pcdecoder.inl"
 case 1142: 
 HEAPF64[(tempDoublePtr)>>3]=$5784; var $5856$0=HEAP32[((tempDoublePtr)>>2)];var $5856$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$768$0=-64;
 var $$etemp$768$1=-1;
 var $5857$0=$5856$0&$$etemp$768$0;
 var $5857$1=$5856$1&$$etemp$768$1;
 var $_01088_in$1=$5857$1;var $_01088_in$0=$5857$0;label=1143;break; //@line 66 "inc/pcdecoder.inl"
 case 1143: 
 var $_01088_in$0;
 var $_01088_in$1;
 var $_01088=(HEAP32[((tempDoublePtr)>>2)]=$_01088_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01088_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $5858=(($_21095+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21095)>>3)]=$_01088; //@line 65 "src/read.cpp"
 var $_01089=1;var $f_i922_sroa_55_6=$f_i922_sroa_55_5;label=1144;break; //@line 22 "inc/front.h"
 case 1144: 
 var $f_i922_sroa_55_6;
 var $_01089;
 var $5860=((($f_i922_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $5861=$f_i922_sroa_55_6&$storemerge_i_i_i927; //@line 23 "inc/front.h"
 var $5862=(($5723+($5861<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5862)>>3)]=$_01088; //@line 23 "inc/front.h"
 var $5863=((($_01089)-(1))|0); //@line 23 "inc/front.h"
 var $5864=($5863|0)==0; //@line 23 "inc/front.h"
 if($5864){label=1145;break;}else{var $_01089=$5863;var $f_i922_sroa_55_6=$5860;label=1144;break;} //@line 23 "inc/front.h"
 case 1145: 
 var $5865=((($x_i923_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21095=$5858;var $f_i922_sroa_55_5=$5860;var $x_i923_0=$5865;label=1132;break; //@line 49 "src/read.cpp"
 case 1146: 
 var $5867$0 = ___cxa_find_matching_catch(-1, -1); var $5867$1 = tempRet0;
 var $5868=$5867$0;
 var $5869=$5867$1;
 var $5870=($5690|0)==0;
 if($5870){var $_01097=$5868;var $_01098=$5869;label=1158;break;}else{label=1147;break;}
 case 1147: 
 _free($5690);
 var $_01097=$5868;var $_01098=$5869;label=1158;break;
 case 1148: 
 var $5873$0 = ___cxa_find_matching_catch(-1, -1); var $5873$1 = tempRet0;
 var $5874=$5873$0;
 var $5875=$5873$1;
 var $5876=($5715|0)==0; //@line 11 "inc/front.h"
 if($5876){var $_01097=$5874;var $_01098=$5875;label=1158;break;}else{label=1149;break;} //@line 11 "inc/front.h"
 case 1149: 
 _free($5715);
 var $_01097=$5874;var $_01098=$5875;label=1158;break; //@line 11 "inc/front.h"
 case 1150: 
 var $5878=((($y_i924_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11094=$_21095;var $f_i922_sroa_55_3=$f_i922_sroa_55_5;var $y_i924_0=$5878;label=1130;break; //@line 48 "src/read.cpp"
 case 1151: 
 var $5880=((($z_i925_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01093=$_11094;var $f_i922_sroa_55_1=$f_i922_sroa_55_3;var $z_i925_0=$5880;label=1128;break; //@line 47 "src/read.cpp"
 case 1152: 
 var $5882=($5694|0)==0; //@line 69 "src/read.cpp"
 if($5882){label=1154;break;}else{label=1153;break;} //@line 69 "src/read.cpp"
 case 1153: 
 _free($5694);
 label=1154;break; //@line 69 "src/read.cpp"
 case 1154: 
 var $5884=HEAP32[(($rm_i920)>>2)]; //@line 70 "src/read.cpp"
 var $5885=($5884|0)==0; //@line 70 "src/read.cpp"
 if($5885){label=1156;break;}else{label=1155;break;} //@line 70 "src/read.cpp"
 case 1155: 
 var $5887=$5884; //@line 70 "src/read.cpp"
 var $5888=HEAP32[(($5887)>>2)]; //@line 70 "src/read.cpp"
 var $5889=(($5888+4)|0); //@line 70 "src/read.cpp"
 var $5890=HEAP32[(($5889)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$5890]($5884); //@line 70 "src/read.cpp"
 label=1156;break; //@line 70 "src/read.cpp"
 case 1156: 
 var $5892=($5715|0)==0; //@line 11 "inc/front.h"
 if($5892){label=1285;break;}else{label=1157;break;} //@line 11 "inc/front.h"
 case 1157: 
 _free($5715);
 label=1285;break; //@line 11 "inc/front.h"
 case 1158: 
 var $_01098;
 var $_01097;
 var $5893$0=$_01097;
 var $5893$1=0;
 var $5894$0=$5893$0;
 var $5894$1=$_01098;
 ___resumeException($5894$0) //@line 71 "src/read.cpp"
 case 1159: 
 var $5896=HEAP32[(($3)>>2)]; //@line 195 "src/read.cpp"
 var $5897=HEAP32[(($4)>>2)]; //@line 195 "src/read.cpp"
 var $5898=HEAP32[(($5)>>2)]; //@line 195 "src/read.cpp"
 var $5899=HEAP32[(($6)>>2)]; //@line 195 "src/read.cpp"
 var $$etemp$769$0=4;
 var $$etemp$769$1=0;

 var $5900=__Znwj(48); //@line 41 "src/read.cpp"
 var $5901=$5900; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($5901,0,121,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1160;break; } else { label=1188;break; } //@line 41 "src/read.cpp"
 case 1160: 
 var $5903=$5900; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i956)>>2)]=$5903; //@line 71 "src/read.cpp"
 var $5904=__Znwj(12); //@line 42 "src/read.cpp"
 var $5905=(($5904+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $5906=$5905; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5906)>>2)]=$5896; //@line 34 "inc/pcdecoder.inl"
 var $5907=(($5904+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $5908=$5907; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($5908)>>2)]=$rm_i956; //@line 34 "inc/pcdecoder.inl"
 var $5909=((($5897)+(1))|0); //@line 10 "inc/front.h"
 var $5910=((($5898)+(1))|0); //@line 10 "inc/front.h"
 var $5911=(Math_imul($5909,$5910)|0); //@line 10 "inc/front.h"
 var $5912=((($5897)+(2))|0); //@line 9 "inc/front.h"
 var $5913=((($5912)+($5911))|0); //@line 9 "inc/front.h"
 var $5914=((($5913)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i963=$5914;label=1161;break; //@line 45 "inc/front.h"
 case 1161: 
 var $storemerge_i_i_i963;
 var $5916=((($storemerge_i_i_i963)+(1))|0); //@line 45 "inc/front.h"
 var $5917=$storemerge_i_i_i963&$5916; //@line 45 "inc/front.h"
 var $5918=($5917|0)==0; //@line 45 "inc/front.h"
 if($5918){label=1163;break;}else{label=1162;break;} //@line 45 "inc/front.h"
 case 1162: 
 var $5920=$storemerge_i_i_i963|$5916; //@line 45 "inc/front.h"
 var $storemerge_i_i_i963=$5920;label=1161;break; //@line 45 "inc/front.h"
 case 1163: 
 var $5921$0=_llvm_umul_with_overflow_i32($5916,8);
 var $5921$1=tempRet0;
 var $5922=$5921$1;
 var $5923=$5921$0;
 var $5924=($5922?-1:$5923); //@line 9 "inc/front.h"
 var $5925=(function() { try { __THREW__ = 0; return __Znwj($5924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1167;break; } else { label=1164;break; }
 case 1164: 
 var $5927$0 = ___cxa_find_matching_catch(-1, -1); var $5927$1 = tempRet0;
 var $5928=$5927$1;
 var $5929=($5928|0)<0;
 if($5929){label=1165;break;}else{label=1166;break;}
 case 1165: 
 var $5931=$5927$0;
 ___cxa_call_unexpected($5931);
 throw "Reached an unreachable!";
 case 1166: 
 ___resumeException($5927$0)
 case 1167: 
 var $5933=$5925; //@line 9 "inc/front.h"
 var $_01081=$5911;var $f_i958_sroa_55_0=0;label=1168;break; //@line 22 "inc/front.h"
 case 1168: 
 var $f_i958_sroa_55_0;
 var $_01081;
 var $5935=((($f_i958_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $5936=$f_i958_sroa_55_0&$storemerge_i_i_i963; //@line 23 "inc/front.h"
 var $5937=(($5933+($5936<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5937)>>3)]=0; //@line 23 "inc/front.h"
 var $5938=((($_01081)-(1))|0); //@line 23 "inc/front.h"
 var $5939=($5938|0)==0; //@line 23 "inc/front.h"
 if($5939){label=1169;break;}else{var $_01081=$5938;var $f_i958_sroa_55_0=$5935;label=1168;break;} //@line 23 "inc/front.h"
 case 1169: 
 var $5940=(($5904+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $5941=$5940; //@line 50 "inc/pcdecoder.inl"
 var $5942=(($5904+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $5943=$5942; //@line 50 "inc/pcdecoder.inl"
 var $_01083=$_01052;var $f_i958_sroa_55_1=$5935;var $z_i961_0=0;label=1170;break; //@line 47 "src/read.cpp"
 case 1170: 
 var $z_i961_0;
 var $f_i958_sroa_55_1;
 var $_01083;
 var $5945=($z_i961_0>>>0)<($5899>>>0); //@line 47 "src/read.cpp"
 if($5945){var $_01080=$5909;var $f_i958_sroa_55_2=$f_i958_sroa_55_1;label=1171;break;}else{label=1194;break;} //@line 47 "src/read.cpp"
 case 1171: 
 var $f_i958_sroa_55_2;
 var $_01080;
 var $5947=((($f_i958_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $5948=$f_i958_sroa_55_2&$storemerge_i_i_i963; //@line 23 "inc/front.h"
 var $5949=(($5933+($5948<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5949)>>3)]=0; //@line 23 "inc/front.h"
 var $5950=((($_01080)-(1))|0); //@line 23 "inc/front.h"
 var $5951=($5950|0)==0; //@line 23 "inc/front.h"
 if($5951){var $_11084=$_01083;var $f_i958_sroa_55_3=$5947;var $y_i960_0=0;label=1172;break;}else{var $_01080=$5950;var $f_i958_sroa_55_2=$5947;label=1171;break;} //@line 23 "inc/front.h"
 case 1172: 
 var $y_i960_0;
 var $f_i958_sroa_55_3;
 var $_11084;
 var $5952=($y_i960_0>>>0)<($5898>>>0); //@line 48 "src/read.cpp"
 if($5952){var $_01079=1;var $f_i958_sroa_55_4=$f_i958_sroa_55_3;label=1173;break;}else{label=1193;break;} //@line 48 "src/read.cpp"
 case 1173: 
 var $f_i958_sroa_55_4;
 var $_01079;
 var $5954=((($f_i958_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $5955=$f_i958_sroa_55_4&$storemerge_i_i_i963; //@line 23 "inc/front.h"
 var $5956=(($5933+($5955<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($5956)>>3)]=0; //@line 23 "inc/front.h"
 var $5957=((($_01079)-(1))|0); //@line 23 "inc/front.h"
 var $5958=($5957|0)==0; //@line 23 "inc/front.h"
 if($5958){var $_21085=$_11084;var $f_i958_sroa_55_5=$5954;var $x_i959_0=0;label=1174;break;}else{var $_01079=$5957;var $f_i958_sroa_55_4=$5954;label=1173;break;} //@line 23 "inc/front.h"
 case 1174: 
 var $x_i959_0;
 var $f_i958_sroa_55_5;
 var $_21085;
 var $5959=($x_i959_0>>>0)<($5897>>>0); //@line 49 "src/read.cpp"
 if($5959){label=1175;break;}else{label=1192;break;} //@line 49 "src/read.cpp"
 case 1175: 
 var $5961=((($f_i958_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $5962=$5961&$storemerge_i_i_i963; //@line 16 "inc/front.h"
 var $5963=(($5933+($5962<<3))|0); //@line 16 "inc/front.h"
 var $5964=HEAPF64[(($5963)>>3)]; //@line 59 "src/read.cpp"
 var $ld$770$0=(($5963)|0);
 var $5964$$SHADOW$0=HEAP32[(($ld$770$0)>>2)];
 var $ld$771$1=(($5963+4)|0);
 var $5964$$SHADOW$1=HEAP32[(($ld$771$1)>>2)];
 var $5965=((($f_i958_sroa_55_5)-($5909))|0); //@line 16 "inc/front.h"
 var $5966=((($5965)-($5911))|0); //@line 16 "inc/front.h"
 var $5967=$5966&$storemerge_i_i_i963; //@line 16 "inc/front.h"
 var $5968=(($5933+($5967<<3))|0); //@line 16 "inc/front.h"
 var $5969=HEAPF64[(($5968)>>3)]; //@line 59 "src/read.cpp"
 var $ld$772$0=(($5968)|0);
 var $5969$$SHADOW$0=HEAP32[(($ld$772$0)>>2)];
 var $ld$773$1=(($5968+4)|0);
 var $5969$$SHADOW$1=HEAP32[(($ld$773$1)>>2)];
 var $5970=$5965&$storemerge_i_i_i963; //@line 16 "inc/front.h"
 var $5971=(($5933+($5970<<3))|0); //@line 16 "inc/front.h"
 var $5972=HEAPF64[(($5971)>>3)]; //@line 60 "src/read.cpp"
 var $ld$774$0=(($5971)|0);
 var $5972$$SHADOW$0=HEAP32[(($ld$774$0)>>2)];
 var $ld$775$1=(($5971+4)|0);
 var $5972$$SHADOW$1=HEAP32[(($ld$775$1)>>2)];
 var $5973=((($5961)-($5911))|0); //@line 16 "inc/front.h"
 var $5974=$5973&$storemerge_i_i_i963; //@line 16 "inc/front.h"
 var $5975=(($5933+($5974<<3))|0); //@line 16 "inc/front.h"
 var $5976=HEAPF64[(($5975)>>3)]; //@line 60 "src/read.cpp"
 var $ld$776$0=(($5975)|0);
 var $5976$$SHADOW$0=HEAP32[(($ld$776$0)>>2)];
 var $ld$777$1=(($5975+4)|0);
 var $5976$$SHADOW$1=HEAP32[(($ld$777$1)>>2)];
 var $5977=((($f_i958_sroa_55_5)-($5911))|0); //@line 16 "inc/front.h"
 var $5978=$5977&$storemerge_i_i_i963; //@line 16 "inc/front.h"
 var $5979=(($5933+($5978<<3))|0); //@line 16 "inc/front.h"
 var $5980=HEAPF64[(($5979)>>3)]; //@line 61 "src/read.cpp"
 var $ld$778$0=(($5979)|0);
 var $5980$$SHADOW$0=HEAP32[(($ld$778$0)>>2)];
 var $ld$779$1=(($5979+4)|0);
 var $5980$$SHADOW$1=HEAP32[(($ld$779$1)>>2)];
 var $5981=((($5961)-($5909))|0); //@line 16 "inc/front.h"
 var $5982=$5981&$storemerge_i_i_i963; //@line 16 "inc/front.h"
 var $5983=(($5933+($5982<<3))|0); //@line 16 "inc/front.h"
 var $5984=HEAPF64[(($5983)>>3)]; //@line 61 "src/read.cpp"
 var $ld$780$0=(($5983)|0);
 var $5984$$SHADOW$0=HEAP32[(($ld$780$0)>>2)];
 var $ld$781$1=(($5983+4)|0);
 var $5984$$SHADOW$1=HEAP32[(($ld$781$1)>>2)];
 var $5985=((($5981)-($5911))|0); //@line 16 "inc/front.h"
 var $5986=$5985&$storemerge_i_i_i963; //@line 16 "inc/front.h"
 var $5987=(($5933+($5986<<3))|0); //@line 16 "inc/front.h"
 var $5988=($5964)-($5969); //@line 59 "src/read.cpp"
 var $5989=($5988)+($5972); //@line 60 "src/read.cpp"
 var $5990=($5989)-($5976); //@line 60 "src/read.cpp"
 var $5991=($5990)+($5980); //@line 61 "src/read.cpp"
 var $5992=($5991)-($5984); //@line 61 "src/read.cpp"
 var $5993=HEAPF64[(($5987)>>3)]; //@line 62 "src/read.cpp"
 var $ld$782$0=(($5987)|0);
 var $5993$$SHADOW$0=HEAP32[(($ld$782$0)>>2)];
 var $ld$783$1=(($5987+4)|0);
 var $5993$$SHADOW$1=HEAP32[(($ld$783$1)>>2)];
 var $5994=($5992)+($5993); //@line 62 "src/read.cpp"
 var $5995=HEAP32[(($5941)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5996=HEAP32[(($5943)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $5997=HEAP32[(($5996)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$784$0=4;
 var $$etemp$784$1=0;

 var $$etemp$785$0=4;
 var $$etemp$785$1=0;

 var $5998=$5997; //@line 25 "src/rcdecoder.cpp"
 var $5999=HEAP32[(($5998)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6000=(($5999+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $6001=HEAP32[(($6000)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6002=(($5995+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6001]($5997,$6002) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1176;break; } else { label=1190;break; }
 case 1176: 
 var $6003=(($5995+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $6004=HEAP32[(($6003)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6005=(($5995+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $6006=HEAP32[(($6005)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6007=((($6004)-($6006))|0); //@line 26 "src/rcdecoder.cpp"
 var $6008=HEAP32[(($6002)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6009=(((($6007>>>0))/(($6008>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i950)>>2)]=$6009; //@line 26 "src/rcdecoder.cpp"
 var $6010=$5997; //@line 27 "src/rcdecoder.cpp"
 var $6011=HEAP32[(($6010)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6012=(($6011+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $6013=HEAP32[(($6012)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6014=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6013]($5997,$l_i_i_i950,$r_i_i_i951) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1177;break; } else { label=1190;break; }
 case 1177: 
 var $6015=HEAP32[(($6002)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6016=HEAP32[(($l_i_i_i950)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6017=(Math_imul($6015,$6016)|0); //@line 28 "src/rcdecoder.cpp"
 var $6018=HEAP32[(($6005)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6019=((($6018)+($6017))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($6005)>>2)]=$6019; //@line 28 "src/rcdecoder.cpp"
 var $6020=HEAP32[(($r_i_i_i951)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $6021=(Math_imul($6015,$6020)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($6002)>>2)]=$6021; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($5995) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1178;break; } else { label=1190;break; }
 case 1178: 
 var $$etemp$786$0=4;
 var $$etemp$786$1=0;

 var $$etemp$787$0=4;
 var $$etemp$787$1=0;

 var $6022=($6014>>>0)>60; //@line 51 "inc/pcdecoder.inl"
 if($6022){label=1179;break;}else{label=1181;break;} //@line 51 "inc/pcdecoder.inl"
 case 1179: 
 var $6024=((($6014)-(61))|0); //@line 52 "inc/pcdecoder.inl"
 var $6025=HEAP32[(($5941)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $6026$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($6025,$6024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $6026$0=$6026$r;var $6026$1=tempRet0;if (!__THREW__) { label=1180;break; } else { label=1190;break; }
 case 1180: 
 var $6027$0=$6024;
 var $6027$1=0;
 var $$etemp$788$0=1;
 var $$etemp$788$1=0;
 var $6028$0=_bitshift64Shl($$etemp$788$0,$$etemp$788$1,$6027$0);var $6028$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $6029$0=_i64Add($6028$0,$6028$1,$6026$0,$6026$1);var $6029$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5994; var $6030$0=HEAP32[((tempDoublePtr)>>2)];var $6030$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$789$0=-1;
 var $$etemp$789$1=-1;
 var $6031$0=$6030$0^$$etemp$789$0;
 var $6031$1=$6030$1^$$etemp$789$1;
 var $6032$0=($6031$0>>>4)|($6031$1<<28);
 var $6032$1=($6031$1>>>4)|(0<<28);
 var $6033$0=($6031$1>>31)|((((((($6031$1|0)<0))|0)?-1:0))<<1);
 var $6033$1=((((((($6031$1|0)<0))|0)?-1:0))>>31)|((((((($6031$1|0)<0))|0)?-1:0))<<1);
 var $6034$0=($6033$0>>>5)|($6033$1<<27);
 var $6034$1=($6033$1>>>5)|(0<<27);
 var $6035$0=$6032$0^$6034$0;
 var $6035$1=$6032$1^$6034$1;
 var $6036$0=_i64Add($6035$0,$6035$1,$6029$0,$6029$1);var $6036$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $6037$0=($6036$1>>>27)|(0<<5);
 var $6037$1=(0>>>27)|(0<<5);
 var $$etemp$790$0=0;
 var $$etemp$790$1=0;
 var $6038$0=_i64Subtract($$etemp$790$0,$$etemp$790$1,$6037$0,$6037$1);var $6038$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $6039$0=($6038$0>>>5)|($6038$1<<27);
 var $6039$1=($6038$1>>>5)|(0<<27);
 var $6040$0=$6039$0^$6036$0;
 var $6040$1=$6039$1^$6036$1;
 var $6041$0=($6040$0<<4)|(0>>>28);
 var $6041$1=($6040$1<<4)|($6040$0>>>28);
 var $$etemp$791$0=-16;
 var $$etemp$791$1=-1;
 var $6042$0=$6041$0^$$etemp$791$0;
 var $6042$1=$6041$1^$$etemp$791$1;
 var $_01076_in$1=$6042$1;var $_01076_in$0=$6042$0;label=1185;break; //@line 56 "inc/pcdecoder.inl"
 case 1181: 
 var $6044=($6014>>>0)<60; //@line undefined "inc/pcdecoder.inl"
 if($6044){label=1182;break;}else{label=1184;break;} //@line undefined "inc/pcdecoder.inl"
 case 1182: 
 var $6046=(((59)-($6014))|0); //@line 59 "inc/pcdecoder.inl"
 var $6047=HEAP32[(($5941)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $6048$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($6047,$6046) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $6048$0=$6048$r;var $6048$1=tempRet0;if (!__THREW__) { label=1183;break; } else { label=1190;break; }
 case 1183: 
 var $6049$0=$6046;
 var $6049$1=0;
 var $$etemp$792$0=1;
 var $$etemp$792$1=0;
 var $6050$0=_bitshift64Shl($$etemp$792$0,$$etemp$792$1,$6049$0);var $6050$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $6051$0=_i64Add($6050$0,$6050$1,$6048$0,$6048$1);var $6051$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$5994; var $6052$0=HEAP32[((tempDoublePtr)>>2)];var $6052$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$793$0=-1;
 var $$etemp$793$1=-1;
 var $6053$0=$6052$0^$$etemp$793$0;
 var $6053$1=$6052$1^$$etemp$793$1;
 var $6054$0=($6053$0>>>4)|($6053$1<<28);
 var $6054$1=($6053$1>>>4)|(0<<28);
 var $6055$0=($6053$1>>31)|((((((($6053$1|0)<0))|0)?-1:0))<<1);
 var $6055$1=((((((($6053$1|0)<0))|0)?-1:0))>>31)|((((((($6053$1|0)<0))|0)?-1:0))<<1);
 var $6056$0=($6055$0>>>5)|($6055$1<<27);
 var $6056$1=($6055$1>>>5)|(0<<27);
 var $6057$0=$6054$0^$6056$0;
 var $6057$1=$6054$1^$6056$1;
 var $6058$0=_i64Subtract($6057$0,$6057$1,$6051$0,$6051$1);var $6058$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $6059$0=($6058$1>>>27)|(0<<5);
 var $6059$1=(0>>>27)|(0<<5);
 var $$etemp$794$0=0;
 var $$etemp$794$1=0;
 var $6060$0=_i64Subtract($$etemp$794$0,$$etemp$794$1,$6059$0,$6059$1);var $6060$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $6061$0=($6060$0>>>5)|($6060$1<<27);
 var $6061$1=($6060$1>>>5)|(0<<27);
 var $6062$0=$6061$0^$6058$0;
 var $6062$1=$6061$1^$6058$1;
 var $6063$0=($6062$0<<4)|(0>>>28);
 var $6063$1=($6062$1<<4)|($6062$0>>>28);
 var $$etemp$795$0=-16;
 var $$etemp$795$1=-1;
 var $6064$0=$6063$0^$$etemp$795$0;
 var $6064$1=$6063$1^$$etemp$795$1;
 var $_01076_in$1=$6064$1;var $_01076_in$0=$6064$0;label=1185;break; //@line 63 "inc/pcdecoder.inl"
 case 1184: 
 HEAPF64[(tempDoublePtr)>>3]=$5994; var $6066$0=HEAP32[((tempDoublePtr)>>2)];var $6066$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$796$0=-16;
 var $$etemp$796$1=-1;
 var $6067$0=$6066$0&$$etemp$796$0;
 var $6067$1=$6066$1&$$etemp$796$1;
 var $_01076_in$1=$6067$1;var $_01076_in$0=$6067$0;label=1185;break; //@line 66 "inc/pcdecoder.inl"
 case 1185: 
 var $_01076_in$0;
 var $_01076_in$1;
 var $_01076=(HEAP32[((tempDoublePtr)>>2)]=$_01076_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01076_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $6068=(($_21085+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21085)>>3)]=$_01076; //@line 65 "src/read.cpp"
 var $_01078=1;var $f_i958_sroa_55_6=$f_i958_sroa_55_5;label=1186;break; //@line 22 "inc/front.h"
 case 1186: 
 var $f_i958_sroa_55_6;
 var $_01078;
 var $6070=((($f_i958_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $6071=$f_i958_sroa_55_6&$storemerge_i_i_i963; //@line 23 "inc/front.h"
 var $6072=(($5933+($6071<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6072)>>3)]=$_01076; //@line 23 "inc/front.h"
 var $6073=((($_01078)-(1))|0); //@line 23 "inc/front.h"
 var $6074=($6073|0)==0; //@line 23 "inc/front.h"
 if($6074){label=1187;break;}else{var $_01078=$6073;var $f_i958_sroa_55_6=$6070;label=1186;break;} //@line 23 "inc/front.h"
 case 1187: 
 var $6075=((($x_i959_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21085=$6068;var $f_i958_sroa_55_5=$6070;var $x_i959_0=$6075;label=1174;break; //@line 49 "src/read.cpp"
 case 1188: 
 var $6077$0 = ___cxa_find_matching_catch(-1, -1); var $6077$1 = tempRet0;
 var $6078=$6077$0;
 var $6079=$6077$1;
 var $6080=($5900|0)==0;
 if($6080){var $_01086=$6078;var $_01087=$6079;label=1200;break;}else{label=1189;break;}
 case 1189: 
 _free($5900);
 var $_01086=$6078;var $_01087=$6079;label=1200;break;
 case 1190: 
 var $6083$0 = ___cxa_find_matching_catch(-1, -1); var $6083$1 = tempRet0;
 var $6084=$6083$0;
 var $6085=$6083$1;
 var $6086=($5925|0)==0; //@line 11 "inc/front.h"
 if($6086){var $_01086=$6084;var $_01087=$6085;label=1200;break;}else{label=1191;break;} //@line 11 "inc/front.h"
 case 1191: 
 _free($5925);
 var $_01086=$6084;var $_01087=$6085;label=1200;break; //@line 11 "inc/front.h"
 case 1192: 
 var $6088=((($y_i960_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11084=$_21085;var $f_i958_sroa_55_3=$f_i958_sroa_55_5;var $y_i960_0=$6088;label=1172;break; //@line 48 "src/read.cpp"
 case 1193: 
 var $6090=((($z_i961_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01083=$_11084;var $f_i958_sroa_55_1=$f_i958_sroa_55_3;var $z_i961_0=$6090;label=1170;break; //@line 47 "src/read.cpp"
 case 1194: 
 var $6092=($5904|0)==0; //@line 69 "src/read.cpp"
 if($6092){label=1196;break;}else{label=1195;break;} //@line 69 "src/read.cpp"
 case 1195: 
 _free($5904);
 label=1196;break; //@line 69 "src/read.cpp"
 case 1196: 
 var $6094=HEAP32[(($rm_i956)>>2)]; //@line 70 "src/read.cpp"
 var $6095=($6094|0)==0; //@line 70 "src/read.cpp"
 if($6095){label=1198;break;}else{label=1197;break;} //@line 70 "src/read.cpp"
 case 1197: 
 var $6097=$6094; //@line 70 "src/read.cpp"
 var $6098=HEAP32[(($6097)>>2)]; //@line 70 "src/read.cpp"
 var $6099=(($6098+4)|0); //@line 70 "src/read.cpp"
 var $6100=HEAP32[(($6099)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$6100]($6094); //@line 70 "src/read.cpp"
 label=1198;break; //@line 70 "src/read.cpp"
 case 1198: 
 var $6102=($5925|0)==0; //@line 11 "inc/front.h"
 if($6102){label=1285;break;}else{label=1199;break;} //@line 11 "inc/front.h"
 case 1199: 
 _free($5925);
 label=1285;break; //@line 11 "inc/front.h"
 case 1200: 
 var $_01087;
 var $_01086;
 var $6103$0=$_01086;
 var $6103$1=0;
 var $6104$0=$6103$0;
 var $6104$1=$_01087;
 ___resumeException($6104$0) //@line 71 "src/read.cpp"
 case 1201: 
 var $6106=HEAP32[(($3)>>2)]; //@line 196 "src/read.cpp"
 var $6107=HEAP32[(($4)>>2)]; //@line 196 "src/read.cpp"
 var $6108=HEAP32[(($5)>>2)]; //@line 196 "src/read.cpp"
 var $6109=HEAP32[(($6)>>2)]; //@line 196 "src/read.cpp"
 var $$etemp$797$0=4;
 var $$etemp$797$1=0;

 var $6110=__Znwj(48); //@line 41 "src/read.cpp"
 var $6111=$6110; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($6111,0,125,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1202;break; } else { label=1230;break; } //@line 41 "src/read.cpp"
 case 1202: 
 var $6113=$6110; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i992)>>2)]=$6113; //@line 71 "src/read.cpp"
 var $6114=__Znwj(12); //@line 42 "src/read.cpp"
 var $6115=(($6114+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $6116=$6115; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($6116)>>2)]=$6106; //@line 34 "inc/pcdecoder.inl"
 var $6117=(($6114+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $6118=$6117; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($6118)>>2)]=$rm_i992; //@line 34 "inc/pcdecoder.inl"
 var $6119=((($6107)+(1))|0); //@line 10 "inc/front.h"
 var $6120=((($6108)+(1))|0); //@line 10 "inc/front.h"
 var $6121=(Math_imul($6119,$6120)|0); //@line 10 "inc/front.h"
 var $6122=((($6107)+(2))|0); //@line 9 "inc/front.h"
 var $6123=((($6122)+($6121))|0); //@line 9 "inc/front.h"
 var $6124=((($6123)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i999=$6124;label=1203;break; //@line 45 "inc/front.h"
 case 1203: 
 var $storemerge_i_i_i999;
 var $6126=((($storemerge_i_i_i999)+(1))|0); //@line 45 "inc/front.h"
 var $6127=$storemerge_i_i_i999&$6126; //@line 45 "inc/front.h"
 var $6128=($6127|0)==0; //@line 45 "inc/front.h"
 if($6128){label=1205;break;}else{label=1204;break;} //@line 45 "inc/front.h"
 case 1204: 
 var $6130=$storemerge_i_i_i999|$6126; //@line 45 "inc/front.h"
 var $storemerge_i_i_i999=$6130;label=1203;break; //@line 45 "inc/front.h"
 case 1205: 
 var $6131$0=_llvm_umul_with_overflow_i32($6126,8);
 var $6131$1=tempRet0;
 var $6132=$6131$1;
 var $6133=$6131$0;
 var $6134=($6132?-1:$6133); //@line 9 "inc/front.h"
 var $6135=(function() { try { __THREW__ = 0; return __Znwj($6134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1209;break; } else { label=1206;break; }
 case 1206: 
 var $6137$0 = ___cxa_find_matching_catch(-1, -1); var $6137$1 = tempRet0;
 var $6138=$6137$1;
 var $6139=($6138|0)<0;
 if($6139){label=1207;break;}else{label=1208;break;}
 case 1207: 
 var $6141=$6137$0;
 ___cxa_call_unexpected($6141);
 throw "Reached an unreachable!";
 case 1208: 
 ___resumeException($6137$0)
 case 1209: 
 var $6143=$6135; //@line 9 "inc/front.h"
 var $_01069=$6121;var $f_i994_sroa_55_0=0;label=1210;break; //@line 22 "inc/front.h"
 case 1210: 
 var $f_i994_sroa_55_0;
 var $_01069;
 var $6145=((($f_i994_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $6146=$f_i994_sroa_55_0&$storemerge_i_i_i999; //@line 23 "inc/front.h"
 var $6147=(($6143+($6146<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6147)>>3)]=0; //@line 23 "inc/front.h"
 var $6148=((($_01069)-(1))|0); //@line 23 "inc/front.h"
 var $6149=($6148|0)==0; //@line 23 "inc/front.h"
 if($6149){label=1211;break;}else{var $_01069=$6148;var $f_i994_sroa_55_0=$6145;label=1210;break;} //@line 23 "inc/front.h"
 case 1211: 
 var $6150=(($6114+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $6151=$6150; //@line 50 "inc/pcdecoder.inl"
 var $6152=(($6114+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $6153=$6152; //@line 50 "inc/pcdecoder.inl"
 var $_01070=$_01052;var $f_i994_sroa_55_1=$6145;var $z_i997_0=0;label=1212;break; //@line 47 "src/read.cpp"
 case 1212: 
 var $z_i997_0;
 var $f_i994_sroa_55_1;
 var $_01070;
 var $6155=($z_i997_0>>>0)<($6109>>>0); //@line 47 "src/read.cpp"
 if($6155){var $_01068=$6119;var $f_i994_sroa_55_2=$f_i994_sroa_55_1;label=1213;break;}else{label=1236;break;} //@line 47 "src/read.cpp"
 case 1213: 
 var $f_i994_sroa_55_2;
 var $_01068;
 var $6157=((($f_i994_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $6158=$f_i994_sroa_55_2&$storemerge_i_i_i999; //@line 23 "inc/front.h"
 var $6159=(($6143+($6158<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6159)>>3)]=0; //@line 23 "inc/front.h"
 var $6160=((($_01068)-(1))|0); //@line 23 "inc/front.h"
 var $6161=($6160|0)==0; //@line 23 "inc/front.h"
 if($6161){var $_11071=$_01070;var $f_i994_sroa_55_3=$6157;var $y_i996_0=0;label=1214;break;}else{var $_01068=$6160;var $f_i994_sroa_55_2=$6157;label=1213;break;} //@line 23 "inc/front.h"
 case 1214: 
 var $y_i996_0;
 var $f_i994_sroa_55_3;
 var $_11071;
 var $6162=($y_i996_0>>>0)<($6108>>>0); //@line 48 "src/read.cpp"
 if($6162){var $_01067=1;var $f_i994_sroa_55_4=$f_i994_sroa_55_3;label=1215;break;}else{label=1235;break;} //@line 48 "src/read.cpp"
 case 1215: 
 var $f_i994_sroa_55_4;
 var $_01067;
 var $6164=((($f_i994_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $6165=$f_i994_sroa_55_4&$storemerge_i_i_i999; //@line 23 "inc/front.h"
 var $6166=(($6143+($6165<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6166)>>3)]=0; //@line 23 "inc/front.h"
 var $6167=((($_01067)-(1))|0); //@line 23 "inc/front.h"
 var $6168=($6167|0)==0; //@line 23 "inc/front.h"
 if($6168){var $_21072=$_11071;var $f_i994_sroa_55_5=$6164;var $x_i995_0=0;label=1216;break;}else{var $_01067=$6167;var $f_i994_sroa_55_4=$6164;label=1215;break;} //@line 23 "inc/front.h"
 case 1216: 
 var $x_i995_0;
 var $f_i994_sroa_55_5;
 var $_21072;
 var $6169=($x_i995_0>>>0)<($6107>>>0); //@line 49 "src/read.cpp"
 if($6169){label=1217;break;}else{label=1234;break;} //@line 49 "src/read.cpp"
 case 1217: 
 var $6171=((($f_i994_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $6172=$6171&$storemerge_i_i_i999; //@line 16 "inc/front.h"
 var $6173=(($6143+($6172<<3))|0); //@line 16 "inc/front.h"
 var $6174=HEAPF64[(($6173)>>3)]; //@line 59 "src/read.cpp"
 var $ld$798$0=(($6173)|0);
 var $6174$$SHADOW$0=HEAP32[(($ld$798$0)>>2)];
 var $ld$799$1=(($6173+4)|0);
 var $6174$$SHADOW$1=HEAP32[(($ld$799$1)>>2)];
 var $6175=((($f_i994_sroa_55_5)-($6119))|0); //@line 16 "inc/front.h"
 var $6176=((($6175)-($6121))|0); //@line 16 "inc/front.h"
 var $6177=$6176&$storemerge_i_i_i999; //@line 16 "inc/front.h"
 var $6178=(($6143+($6177<<3))|0); //@line 16 "inc/front.h"
 var $6179=HEAPF64[(($6178)>>3)]; //@line 59 "src/read.cpp"
 var $ld$800$0=(($6178)|0);
 var $6179$$SHADOW$0=HEAP32[(($ld$800$0)>>2)];
 var $ld$801$1=(($6178+4)|0);
 var $6179$$SHADOW$1=HEAP32[(($ld$801$1)>>2)];
 var $6180=$6175&$storemerge_i_i_i999; //@line 16 "inc/front.h"
 var $6181=(($6143+($6180<<3))|0); //@line 16 "inc/front.h"
 var $6182=HEAPF64[(($6181)>>3)]; //@line 60 "src/read.cpp"
 var $ld$802$0=(($6181)|0);
 var $6182$$SHADOW$0=HEAP32[(($ld$802$0)>>2)];
 var $ld$803$1=(($6181+4)|0);
 var $6182$$SHADOW$1=HEAP32[(($ld$803$1)>>2)];
 var $6183=((($6171)-($6121))|0); //@line 16 "inc/front.h"
 var $6184=$6183&$storemerge_i_i_i999; //@line 16 "inc/front.h"
 var $6185=(($6143+($6184<<3))|0); //@line 16 "inc/front.h"
 var $6186=HEAPF64[(($6185)>>3)]; //@line 60 "src/read.cpp"
 var $ld$804$0=(($6185)|0);
 var $6186$$SHADOW$0=HEAP32[(($ld$804$0)>>2)];
 var $ld$805$1=(($6185+4)|0);
 var $6186$$SHADOW$1=HEAP32[(($ld$805$1)>>2)];
 var $6187=((($f_i994_sroa_55_5)-($6121))|0); //@line 16 "inc/front.h"
 var $6188=$6187&$storemerge_i_i_i999; //@line 16 "inc/front.h"
 var $6189=(($6143+($6188<<3))|0); //@line 16 "inc/front.h"
 var $6190=HEAPF64[(($6189)>>3)]; //@line 61 "src/read.cpp"
 var $ld$806$0=(($6189)|0);
 var $6190$$SHADOW$0=HEAP32[(($ld$806$0)>>2)];
 var $ld$807$1=(($6189+4)|0);
 var $6190$$SHADOW$1=HEAP32[(($ld$807$1)>>2)];
 var $6191=((($6171)-($6119))|0); //@line 16 "inc/front.h"
 var $6192=$6191&$storemerge_i_i_i999; //@line 16 "inc/front.h"
 var $6193=(($6143+($6192<<3))|0); //@line 16 "inc/front.h"
 var $6194=HEAPF64[(($6193)>>3)]; //@line 61 "src/read.cpp"
 var $ld$808$0=(($6193)|0);
 var $6194$$SHADOW$0=HEAP32[(($ld$808$0)>>2)];
 var $ld$809$1=(($6193+4)|0);
 var $6194$$SHADOW$1=HEAP32[(($ld$809$1)>>2)];
 var $6195=((($6191)-($6121))|0); //@line 16 "inc/front.h"
 var $6196=$6195&$storemerge_i_i_i999; //@line 16 "inc/front.h"
 var $6197=(($6143+($6196<<3))|0); //@line 16 "inc/front.h"
 var $6198=($6174)-($6179); //@line 59 "src/read.cpp"
 var $6199=($6198)+($6182); //@line 60 "src/read.cpp"
 var $6200=($6199)-($6186); //@line 60 "src/read.cpp"
 var $6201=($6200)+($6190); //@line 61 "src/read.cpp"
 var $6202=($6201)-($6194); //@line 61 "src/read.cpp"
 var $6203=HEAPF64[(($6197)>>3)]; //@line 62 "src/read.cpp"
 var $ld$810$0=(($6197)|0);
 var $6203$$SHADOW$0=HEAP32[(($ld$810$0)>>2)];
 var $ld$811$1=(($6197+4)|0);
 var $6203$$SHADOW$1=HEAP32[(($ld$811$1)>>2)];
 var $6204=($6202)+($6203); //@line 62 "src/read.cpp"
 var $6205=HEAP32[(($6151)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6206=HEAP32[(($6153)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6207=HEAP32[(($6206)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$812$0=4;
 var $$etemp$812$1=0;

 var $$etemp$813$0=4;
 var $$etemp$813$1=0;

 var $6208=$6207; //@line 25 "src/rcdecoder.cpp"
 var $6209=HEAP32[(($6208)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6210=(($6209+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $6211=HEAP32[(($6210)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6212=(($6205+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6211]($6207,$6212) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1218;break; } else { label=1232;break; }
 case 1218: 
 var $6213=(($6205+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $6214=HEAP32[(($6213)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6215=(($6205+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $6216=HEAP32[(($6215)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6217=((($6214)-($6216))|0); //@line 26 "src/rcdecoder.cpp"
 var $6218=HEAP32[(($6212)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6219=(((($6217>>>0))/(($6218>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i986)>>2)]=$6219; //@line 26 "src/rcdecoder.cpp"
 var $6220=$6207; //@line 27 "src/rcdecoder.cpp"
 var $6221=HEAP32[(($6220)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6222=(($6221+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $6223=HEAP32[(($6222)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6223]($6207,$l_i_i_i986,$r_i_i_i987) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1219;break; } else { label=1232;break; }
 case 1219: 
 var $6225=HEAP32[(($6212)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6226=HEAP32[(($l_i_i_i986)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6227=(Math_imul($6225,$6226)|0); //@line 28 "src/rcdecoder.cpp"
 var $6228=HEAP32[(($6215)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6229=((($6228)+($6227))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($6215)>>2)]=$6229; //@line 28 "src/rcdecoder.cpp"
 var $6230=HEAP32[(($r_i_i_i987)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $6231=(Math_imul($6225,$6230)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($6212)>>2)]=$6231; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($6205) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1220;break; } else { label=1232;break; }
 case 1220: 
 var $$etemp$814$0=4;
 var $$etemp$814$1=0;

 var $$etemp$815$0=4;
 var $$etemp$815$1=0;

 var $6232=($6224>>>0)>62; //@line 51 "inc/pcdecoder.inl"
 if($6232){label=1221;break;}else{label=1223;break;} //@line 51 "inc/pcdecoder.inl"
 case 1221: 
 var $6234=((($6224)-(63))|0); //@line 52 "inc/pcdecoder.inl"
 var $6235=HEAP32[(($6151)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $6236$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($6235,$6234) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $6236$0=$6236$r;var $6236$1=tempRet0;if (!__THREW__) { label=1222;break; } else { label=1232;break; }
 case 1222: 
 var $6237$0=$6234;
 var $6237$1=0;
 var $$etemp$816$0=1;
 var $$etemp$816$1=0;
 var $6238$0=_bitshift64Shl($$etemp$816$0,$$etemp$816$1,$6237$0);var $6238$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $6239$0=_i64Add($6238$0,$6238$1,$6236$0,$6236$1);var $6239$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$6204; var $6240$0=HEAP32[((tempDoublePtr)>>2)];var $6240$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$817$0=-1;
 var $$etemp$817$1=-1;
 var $6241$0=$6240$0^$$etemp$817$0;
 var $6241$1=$6240$1^$$etemp$817$1;
 var $6242$0=($6241$0>>>2)|($6241$1<<30);
 var $6242$1=($6241$1>>>2)|(0<<30);
 var $6243$0=($6241$1>>31)|((((((($6241$1|0)<0))|0)?-1:0))<<1);
 var $6243$1=((((((($6241$1|0)<0))|0)?-1:0))>>31)|((((((($6241$1|0)<0))|0)?-1:0))<<1);
 var $6244$0=($6243$0>>>3)|($6243$1<<29);
 var $6244$1=($6243$1>>>3)|(0<<29);
 var $6245$0=$6242$0^$6244$0;
 var $6245$1=$6242$1^$6244$1;
 var $6246$0=_i64Add($6245$0,$6245$1,$6239$0,$6239$1);var $6246$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $6247$0=($6246$1>>>29)|(0<<3);
 var $6247$1=(0>>>29)|(0<<3);
 var $$etemp$818$0=0;
 var $$etemp$818$1=0;
 var $6248$0=_i64Subtract($$etemp$818$0,$$etemp$818$1,$6247$0,$6247$1);var $6248$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $6249$0=($6248$0>>>3)|($6248$1<<29);
 var $6249$1=($6248$1>>>3)|(0<<29);
 var $6250$0=$6249$0^$6246$0;
 var $6250$1=$6249$1^$6246$1;
 var $6251$0=($6250$0<<2)|(0>>>30);
 var $6251$1=($6250$1<<2)|($6250$0>>>30);
 var $$etemp$819$0=-4;
 var $$etemp$819$1=-1;
 var $6252$0=$6251$0^$$etemp$819$0;
 var $6252$1=$6251$1^$$etemp$819$1;
 var $_01062_in$1=$6252$1;var $_01062_in$0=$6252$0;label=1227;break; //@line 56 "inc/pcdecoder.inl"
 case 1223: 
 var $6254=($6224>>>0)<62; //@line undefined "inc/pcdecoder.inl"
 if($6254){label=1224;break;}else{label=1226;break;} //@line undefined "inc/pcdecoder.inl"
 case 1224: 
 var $6256=(((61)-($6224))|0); //@line 59 "inc/pcdecoder.inl"
 var $6257=HEAP32[(($6151)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $6258$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($6257,$6256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $6258$0=$6258$r;var $6258$1=tempRet0;if (!__THREW__) { label=1225;break; } else { label=1232;break; }
 case 1225: 
 var $6259$0=$6256;
 var $6259$1=0;
 var $$etemp$820$0=1;
 var $$etemp$820$1=0;
 var $6260$0=_bitshift64Shl($$etemp$820$0,$$etemp$820$1,$6259$0);var $6260$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $6261$0=_i64Add($6260$0,$6260$1,$6258$0,$6258$1);var $6261$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$6204; var $6262$0=HEAP32[((tempDoublePtr)>>2)];var $6262$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$821$0=-1;
 var $$etemp$821$1=-1;
 var $6263$0=$6262$0^$$etemp$821$0;
 var $6263$1=$6262$1^$$etemp$821$1;
 var $6264$0=($6263$0>>>2)|($6263$1<<30);
 var $6264$1=($6263$1>>>2)|(0<<30);
 var $6265$0=($6263$1>>31)|((((((($6263$1|0)<0))|0)?-1:0))<<1);
 var $6265$1=((((((($6263$1|0)<0))|0)?-1:0))>>31)|((((((($6263$1|0)<0))|0)?-1:0))<<1);
 var $6266$0=($6265$0>>>3)|($6265$1<<29);
 var $6266$1=($6265$1>>>3)|(0<<29);
 var $6267$0=$6264$0^$6266$0;
 var $6267$1=$6264$1^$6266$1;
 var $6268$0=_i64Subtract($6267$0,$6267$1,$6261$0,$6261$1);var $6268$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $6269$0=($6268$1>>>29)|(0<<3);
 var $6269$1=(0>>>29)|(0<<3);
 var $$etemp$822$0=0;
 var $$etemp$822$1=0;
 var $6270$0=_i64Subtract($$etemp$822$0,$$etemp$822$1,$6269$0,$6269$1);var $6270$1=tempRet0; //@line 111 "inc/pcmap.h"
 var $6271$0=($6270$0>>>3)|($6270$1<<29);
 var $6271$1=($6270$1>>>3)|(0<<29);
 var $6272$0=$6271$0^$6268$0;
 var $6272$1=$6271$1^$6268$1;
 var $6273$0=($6272$0<<2)|(0>>>30);
 var $6273$1=($6272$1<<2)|($6272$0>>>30);
 var $$etemp$823$0=-4;
 var $$etemp$823$1=-1;
 var $6274$0=$6273$0^$$etemp$823$0;
 var $6274$1=$6273$1^$$etemp$823$1;
 var $_01062_in$1=$6274$1;var $_01062_in$0=$6274$0;label=1227;break; //@line 63 "inc/pcdecoder.inl"
 case 1226: 
 HEAPF64[(tempDoublePtr)>>3]=$6204; var $6276$0=HEAP32[((tempDoublePtr)>>2)];var $6276$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$824$0=-4;
 var $$etemp$824$1=-1;
 var $6277$0=$6276$0&$$etemp$824$0;
 var $6277$1=$6276$1&$$etemp$824$1;
 var $_01062_in$1=$6277$1;var $_01062_in$0=$6277$0;label=1227;break; //@line 66 "inc/pcdecoder.inl"
 case 1227: 
 var $_01062_in$0;
 var $_01062_in$1;
 var $_01062=(HEAP32[((tempDoublePtr)>>2)]=$_01062_in$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$_01062_in$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $6278=(($_21072+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_21072)>>3)]=$_01062; //@line 65 "src/read.cpp"
 var $_01066=1;var $f_i994_sroa_55_6=$f_i994_sroa_55_5;label=1228;break; //@line 22 "inc/front.h"
 case 1228: 
 var $f_i994_sroa_55_6;
 var $_01066;
 var $6280=((($f_i994_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $6281=$f_i994_sroa_55_6&$storemerge_i_i_i999; //@line 23 "inc/front.h"
 var $6282=(($6143+($6281<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6282)>>3)]=$_01062; //@line 23 "inc/front.h"
 var $6283=((($_01066)-(1))|0); //@line 23 "inc/front.h"
 var $6284=($6283|0)==0; //@line 23 "inc/front.h"
 if($6284){label=1229;break;}else{var $_01066=$6283;var $f_i994_sroa_55_6=$6280;label=1228;break;} //@line 23 "inc/front.h"
 case 1229: 
 var $6285=((($x_i995_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_21072=$6278;var $f_i994_sroa_55_5=$6280;var $x_i995_0=$6285;label=1216;break; //@line 49 "src/read.cpp"
 case 1230: 
 var $6287$0 = ___cxa_find_matching_catch(-1, -1); var $6287$1 = tempRet0;
 var $6288=$6287$0;
 var $6289=$6287$1;
 var $6290=($6110|0)==0;
 if($6290){var $_01073=$6288;var $_01074=$6289;label=1242;break;}else{label=1231;break;}
 case 1231: 
 _free($6110);
 var $_01073=$6288;var $_01074=$6289;label=1242;break;
 case 1232: 
 var $6293$0 = ___cxa_find_matching_catch(-1, -1); var $6293$1 = tempRet0;
 var $6294=$6293$0;
 var $6295=$6293$1;
 var $6296=($6135|0)==0; //@line 11 "inc/front.h"
 if($6296){var $_01073=$6294;var $_01074=$6295;label=1242;break;}else{label=1233;break;} //@line 11 "inc/front.h"
 case 1233: 
 _free($6135);
 var $_01073=$6294;var $_01074=$6295;label=1242;break; //@line 11 "inc/front.h"
 case 1234: 
 var $6298=((($y_i996_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_11071=$_21072;var $f_i994_sroa_55_3=$f_i994_sroa_55_5;var $y_i996_0=$6298;label=1214;break; //@line 48 "src/read.cpp"
 case 1235: 
 var $6300=((($z_i997_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01070=$_11071;var $f_i994_sroa_55_1=$f_i994_sroa_55_3;var $z_i997_0=$6300;label=1212;break; //@line 47 "src/read.cpp"
 case 1236: 
 var $6302=($6114|0)==0; //@line 69 "src/read.cpp"
 if($6302){label=1238;break;}else{label=1237;break;} //@line 69 "src/read.cpp"
 case 1237: 
 _free($6114);
 label=1238;break; //@line 69 "src/read.cpp"
 case 1238: 
 var $6304=HEAP32[(($rm_i992)>>2)]; //@line 70 "src/read.cpp"
 var $6305=($6304|0)==0; //@line 70 "src/read.cpp"
 if($6305){label=1240;break;}else{label=1239;break;} //@line 70 "src/read.cpp"
 case 1239: 
 var $6307=$6304; //@line 70 "src/read.cpp"
 var $6308=HEAP32[(($6307)>>2)]; //@line 70 "src/read.cpp"
 var $6309=(($6308+4)|0); //@line 70 "src/read.cpp"
 var $6310=HEAP32[(($6309)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$6310]($6304); //@line 70 "src/read.cpp"
 label=1240;break; //@line 70 "src/read.cpp"
 case 1240: 
 var $6312=($6135|0)==0; //@line 11 "inc/front.h"
 if($6312){label=1285;break;}else{label=1241;break;} //@line 11 "inc/front.h"
 case 1241: 
 _free($6135);
 label=1285;break; //@line 11 "inc/front.h"
 case 1242: 
 var $_01074;
 var $_01073;
 var $6313$0=$_01073;
 var $6313$1=0;
 var $6314$0=$6313$0;
 var $6314$1=$_01074;
 ___resumeException($6314$0) //@line 71 "src/read.cpp"
 case 1243: 
 var $6315=HEAP32[(($3)>>2)]; //@line 197 "src/read.cpp"
 var $6316=HEAP32[(($4)>>2)]; //@line 197 "src/read.cpp"
 var $6317=HEAP32[(($5)>>2)]; //@line 197 "src/read.cpp"
 var $6318=HEAP32[(($6)>>2)]; //@line 197 "src/read.cpp"
 var $$etemp$825$0=4;
 var $$etemp$825$1=0;

 var $6319=__Znwj(48); //@line 41 "src/read.cpp"
 var $6320=$6319; //@line 41 "src/read.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCqsmodelC2Ebjjj($6320,0,129,16,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1244;break; } else { label=1271;break; } //@line 41 "src/read.cpp"
 case 1244: 
 var $6322=$6319; //@line 71 "src/read.cpp"
 HEAP32[(($rm_i1028)>>2)]=$6322; //@line 71 "src/read.cpp"
 var $6323=__Znwj(12); //@line 42 "src/read.cpp"
 var $6324=(($6323+4)|0); //@line 34 "inc/pcdecoder.inl"
 var $6325=$6324; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($6325)>>2)]=$6315; //@line 34 "inc/pcdecoder.inl"
 var $6326=(($6323+8)|0); //@line 34 "inc/pcdecoder.inl"
 var $6327=$6326; //@line 34 "inc/pcdecoder.inl"
 HEAP32[(($6327)>>2)]=$rm_i1028; //@line 34 "inc/pcdecoder.inl"
 var $6328=((($6316)+(1))|0); //@line 10 "inc/front.h"
 var $6329=((($6317)+(1))|0); //@line 10 "inc/front.h"
 var $6330=(Math_imul($6328,$6329)|0); //@line 10 "inc/front.h"
 var $6331=((($6316)+(2))|0); //@line 9 "inc/front.h"
 var $6332=((($6331)+($6330))|0); //@line 9 "inc/front.h"
 var $6333=((($6332)-(1))|0); //@line 45 "inc/front.h"
 var $storemerge_i_i_i1035=$6333;label=1245;break; //@line 45 "inc/front.h"
 case 1245: 
 var $storemerge_i_i_i1035;
 var $6335=((($storemerge_i_i_i1035)+(1))|0); //@line 45 "inc/front.h"
 var $6336=$storemerge_i_i_i1035&$6335; //@line 45 "inc/front.h"
 var $6337=($6336|0)==0; //@line 45 "inc/front.h"
 if($6337){label=1247;break;}else{label=1246;break;} //@line 45 "inc/front.h"
 case 1246: 
 var $6339=$storemerge_i_i_i1035|$6335; //@line 45 "inc/front.h"
 var $storemerge_i_i_i1035=$6339;label=1245;break; //@line 45 "inc/front.h"
 case 1247: 
 var $6340$0=_llvm_umul_with_overflow_i32($6335,8);
 var $6340$1=tempRet0;
 var $6341=$6340$1;
 var $6342=$6340$0;
 var $6343=($6341?-1:$6342); //@line 9 "inc/front.h"
 var $6344=(function() { try { __THREW__ = 0; return __Znwj($6343) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1251;break; } else { label=1248;break; }
 case 1248: 
 var $6346$0 = ___cxa_find_matching_catch(-1, -1); var $6346$1 = tempRet0;
 var $6347=$6346$1;
 var $6348=($6347|0)<0;
 if($6348){label=1249;break;}else{label=1250;break;}
 case 1249: 
 var $6350=$6346$0;
 ___cxa_call_unexpected($6350);
 throw "Reached an unreachable!";
 case 1250: 
 ___resumeException($6346$0)
 case 1251: 
 var $6352=$6344; //@line 9 "inc/front.h"
 var $_01056=$6330;var $f_i1030_sroa_55_0=0;label=1252;break; //@line 22 "inc/front.h"
 case 1252: 
 var $f_i1030_sroa_55_0;
 var $_01056;
 var $6354=((($f_i1030_sroa_55_0)+(1))|0); //@line 23 "inc/front.h"
 var $6355=$f_i1030_sroa_55_0&$storemerge_i_i_i1035; //@line 23 "inc/front.h"
 var $6356=(($6352+($6355<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6356)>>3)]=0; //@line 23 "inc/front.h"
 var $6357=((($_01056)-(1))|0); //@line 23 "inc/front.h"
 var $6358=($6357|0)==0; //@line 23 "inc/front.h"
 if($6358){label=1253;break;}else{var $_01056=$6357;var $f_i1030_sroa_55_0=$6354;label=1252;break;} //@line 23 "inc/front.h"
 case 1253: 
 var $6359=(($6323+4)|0); //@line 50 "inc/pcdecoder.inl"
 var $6360=$6359; //@line 50 "inc/pcdecoder.inl"
 var $6361=(($6323+8)|0); //@line 50 "inc/pcdecoder.inl"
 var $6362=$6361; //@line 50 "inc/pcdecoder.inl"
 var $_01057=$_01052;var $f_i1030_sroa_55_1=$6354;var $z_i1033_0=0;label=1254;break; //@line 47 "src/read.cpp"
 case 1254: 
 var $z_i1033_0;
 var $f_i1030_sroa_55_1;
 var $_01057;
 var $6364=($z_i1033_0>>>0)<($6318>>>0); //@line 47 "src/read.cpp"
 if($6364){var $_01055=$6328;var $f_i1030_sroa_55_2=$f_i1030_sroa_55_1;label=1255;break;}else{label=1277;break;} //@line 47 "src/read.cpp"
 case 1255: 
 var $f_i1030_sroa_55_2;
 var $_01055;
 var $6366=((($f_i1030_sroa_55_2)+(1))|0); //@line 23 "inc/front.h"
 var $6367=$f_i1030_sroa_55_2&$storemerge_i_i_i1035; //@line 23 "inc/front.h"
 var $6368=(($6352+($6367<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6368)>>3)]=0; //@line 23 "inc/front.h"
 var $6369=((($_01055)-(1))|0); //@line 23 "inc/front.h"
 var $6370=($6369|0)==0; //@line 23 "inc/front.h"
 if($6370){var $_1=$_01057;var $f_i1030_sroa_55_3=$6366;var $y_i1032_0=0;label=1256;break;}else{var $_01055=$6369;var $f_i1030_sroa_55_2=$6366;label=1255;break;} //@line 23 "inc/front.h"
 case 1256: 
 var $y_i1032_0;
 var $f_i1030_sroa_55_3;
 var $_1;
 var $6371=($y_i1032_0>>>0)<($6317>>>0); //@line 48 "src/read.cpp"
 if($6371){var $_01054=1;var $f_i1030_sroa_55_4=$f_i1030_sroa_55_3;label=1257;break;}else{label=1276;break;} //@line 48 "src/read.cpp"
 case 1257: 
 var $f_i1030_sroa_55_4;
 var $_01054;
 var $6373=((($f_i1030_sroa_55_4)+(1))|0); //@line 23 "inc/front.h"
 var $6374=$f_i1030_sroa_55_4&$storemerge_i_i_i1035; //@line 23 "inc/front.h"
 var $6375=(($6352+($6374<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6375)>>3)]=0; //@line 23 "inc/front.h"
 var $6376=((($_01054)-(1))|0); //@line 23 "inc/front.h"
 var $6377=($6376|0)==0; //@line 23 "inc/front.h"
 if($6377){var $_2=$_1;var $f_i1030_sroa_55_5=$6373;var $x_i1031_0=0;label=1258;break;}else{var $_01054=$6376;var $f_i1030_sroa_55_4=$6373;label=1257;break;} //@line 23 "inc/front.h"
 case 1258: 
 var $x_i1031_0;
 var $f_i1030_sroa_55_5;
 var $_2;
 var $6378=($x_i1031_0>>>0)<($6316>>>0); //@line 49 "src/read.cpp"
 if($6378){label=1259;break;}else{label=1275;break;} //@line 49 "src/read.cpp"
 case 1259: 
 var $6380=((($f_i1030_sroa_55_5)-(1))|0); //@line 16 "inc/front.h"
 var $6381=$6380&$storemerge_i_i_i1035; //@line 16 "inc/front.h"
 var $6382=(($6352+($6381<<3))|0); //@line 16 "inc/front.h"
 var $6383=HEAPF64[(($6382)>>3)]; //@line 59 "src/read.cpp"
 var $ld$826$0=(($6382)|0);
 var $6383$$SHADOW$0=HEAP32[(($ld$826$0)>>2)];
 var $ld$827$1=(($6382+4)|0);
 var $6383$$SHADOW$1=HEAP32[(($ld$827$1)>>2)];
 var $6384=((($f_i1030_sroa_55_5)-($6328))|0); //@line 16 "inc/front.h"
 var $6385=((($6384)-($6330))|0); //@line 16 "inc/front.h"
 var $6386=$6385&$storemerge_i_i_i1035; //@line 16 "inc/front.h"
 var $6387=(($6352+($6386<<3))|0); //@line 16 "inc/front.h"
 var $6388=HEAPF64[(($6387)>>3)]; //@line 59 "src/read.cpp"
 var $ld$828$0=(($6387)|0);
 var $6388$$SHADOW$0=HEAP32[(($ld$828$0)>>2)];
 var $ld$829$1=(($6387+4)|0);
 var $6388$$SHADOW$1=HEAP32[(($ld$829$1)>>2)];
 var $6389=$6384&$storemerge_i_i_i1035; //@line 16 "inc/front.h"
 var $6390=(($6352+($6389<<3))|0); //@line 16 "inc/front.h"
 var $6391=HEAPF64[(($6390)>>3)]; //@line 60 "src/read.cpp"
 var $ld$830$0=(($6390)|0);
 var $6391$$SHADOW$0=HEAP32[(($ld$830$0)>>2)];
 var $ld$831$1=(($6390+4)|0);
 var $6391$$SHADOW$1=HEAP32[(($ld$831$1)>>2)];
 var $6392=((($6380)-($6330))|0); //@line 16 "inc/front.h"
 var $6393=$6392&$storemerge_i_i_i1035; //@line 16 "inc/front.h"
 var $6394=(($6352+($6393<<3))|0); //@line 16 "inc/front.h"
 var $6395=HEAPF64[(($6394)>>3)]; //@line 60 "src/read.cpp"
 var $ld$832$0=(($6394)|0);
 var $6395$$SHADOW$0=HEAP32[(($ld$832$0)>>2)];
 var $ld$833$1=(($6394+4)|0);
 var $6395$$SHADOW$1=HEAP32[(($ld$833$1)>>2)];
 var $6396=((($f_i1030_sroa_55_5)-($6330))|0); //@line 16 "inc/front.h"
 var $6397=$6396&$storemerge_i_i_i1035; //@line 16 "inc/front.h"
 var $6398=(($6352+($6397<<3))|0); //@line 16 "inc/front.h"
 var $6399=HEAPF64[(($6398)>>3)]; //@line 61 "src/read.cpp"
 var $ld$834$0=(($6398)|0);
 var $6399$$SHADOW$0=HEAP32[(($ld$834$0)>>2)];
 var $ld$835$1=(($6398+4)|0);
 var $6399$$SHADOW$1=HEAP32[(($ld$835$1)>>2)];
 var $6400=((($6380)-($6328))|0); //@line 16 "inc/front.h"
 var $6401=$6400&$storemerge_i_i_i1035; //@line 16 "inc/front.h"
 var $6402=(($6352+($6401<<3))|0); //@line 16 "inc/front.h"
 var $6403=HEAPF64[(($6402)>>3)]; //@line 61 "src/read.cpp"
 var $ld$836$0=(($6402)|0);
 var $6403$$SHADOW$0=HEAP32[(($ld$836$0)>>2)];
 var $ld$837$1=(($6402+4)|0);
 var $6403$$SHADOW$1=HEAP32[(($ld$837$1)>>2)];
 var $6404=((($6400)-($6330))|0); //@line 16 "inc/front.h"
 var $6405=$6404&$storemerge_i_i_i1035; //@line 16 "inc/front.h"
 var $6406=(($6352+($6405<<3))|0); //@line 16 "inc/front.h"
 var $6407=($6383)-($6388); //@line 59 "src/read.cpp"
 var $6408=($6407)+($6391); //@line 60 "src/read.cpp"
 var $6409=($6408)-($6395); //@line 60 "src/read.cpp"
 var $6410=($6409)+($6399); //@line 61 "src/read.cpp"
 var $6411=($6410)-($6403); //@line 61 "src/read.cpp"
 var $6412=HEAPF64[(($6406)>>3)]; //@line 62 "src/read.cpp"
 var $ld$838$0=(($6406)|0);
 var $6412$$SHADOW$0=HEAP32[(($ld$838$0)>>2)];
 var $ld$839$1=(($6406+4)|0);
 var $6412$$SHADOW$1=HEAP32[(($ld$839$1)>>2)];
 var $6413=($6411)+($6412); //@line 62 "src/read.cpp"
 var $6414=HEAP32[(($6360)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6415=HEAP32[(($6362)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $6416=HEAP32[(($6415)>>2)]; //@line 50 "inc/pcdecoder.inl"
 var $$etemp$840$0=4;
 var $$etemp$840$1=0;

 var $$etemp$841$0=4;
 var $$etemp$841$1=0;

 var $6417=$6416; //@line 25 "src/rcdecoder.cpp"
 var $6418=HEAP32[(($6417)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6419=(($6418+16)|0); //@line 25 "src/rcdecoder.cpp"
 var $6420=HEAP32[(($6419)>>2)]; //@line 25 "src/rcdecoder.cpp"
 var $6421=(($6414+12)|0); //@line 25 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6420]($6416,$6421) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1260;break; } else { label=1273;break; }
 case 1260: 
 var $6422=(($6414+16)|0); //@line 26 "src/rcdecoder.cpp"
 var $6423=HEAP32[(($6422)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6424=(($6414+8)|0); //@line 26 "src/rcdecoder.cpp"
 var $6425=HEAP32[(($6424)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6426=((($6423)-($6425))|0); //@line 26 "src/rcdecoder.cpp"
 var $6427=HEAP32[(($6421)>>2)]; //@line 26 "src/rcdecoder.cpp"
 var $6428=(((($6426>>>0))/(($6427>>>0)))&-1); //@line 26 "src/rcdecoder.cpp"
 HEAP32[(($l_i_i_i1022)>>2)]=$6428; //@line 26 "src/rcdecoder.cpp"
 var $6429=$6416; //@line 27 "src/rcdecoder.cpp"
 var $6430=HEAP32[(($6429)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6431=(($6430+12)|0); //@line 27 "src/rcdecoder.cpp"
 var $6432=HEAP32[(($6431)>>2)]; //@line 27 "src/rcdecoder.cpp"
 var $6433=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$6432]($6416,$l_i_i_i1022,$r_i_i_i1023) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1261;break; } else { label=1273;break; }
 case 1261: 
 var $6434=HEAP32[(($6421)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6435=HEAP32[(($l_i_i_i1022)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6436=(Math_imul($6434,$6435)|0); //@line 28 "src/rcdecoder.cpp"
 var $6437=HEAP32[(($6424)>>2)]; //@line 28 "src/rcdecoder.cpp"
 var $6438=((($6437)+($6436))|0); //@line 28 "src/rcdecoder.cpp"
 HEAP32[(($6424)>>2)]=$6438; //@line 28 "src/rcdecoder.cpp"
 var $6439=HEAP32[(($r_i_i_i1023)>>2)]; //@line 29 "src/rcdecoder.cpp"
 var $6440=(Math_imul($6434,$6439)|0); //@line 29 "src/rcdecoder.cpp"
 HEAP32[(($6421)>>2)]=$6440; //@line 29 "src/rcdecoder.cpp"
 (function() { try { __THREW__ = 0; return __ZN9RCdecoder9normalizeEv($6414) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=1262;break; } else { label=1273;break; }
 case 1262: 
 var $$etemp$842$0=4;
 var $$etemp$842$1=0;

 var $$etemp$843$0=4;
 var $$etemp$843$1=0;

 var $6441=($6433>>>0)>64; //@line 51 "inc/pcdecoder.inl"
 if($6441){label=1263;break;}else{label=1265;break;} //@line 51 "inc/pcdecoder.inl"
 case 1263: 
 var $6443=((($6433)-(65))|0); //@line 52 "inc/pcdecoder.inl"
 var $6444=HEAP32[(($6360)>>2)]; //@line 53 "inc/pcdecoder.inl"
 var $6445$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($6444,$6443) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $6445$0=$6445$r;var $6445$1=tempRet0;if (!__THREW__) { label=1264;break; } else { label=1273;break; }
 case 1264: 
 var $6446$0=$6443;
 var $6446$1=0;
 var $$etemp$844$0=1;
 var $$etemp$844$1=0;
 var $6447$0=_bitshift64Shl($$etemp$844$0,$$etemp$844$1,$6446$0);var $6447$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 var $6448$0=_i64Add($6447$0,$6447$1,$6445$0,$6445$1);var $6448$1=tempRet0; //@line 53 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$6413; var $6449$0=HEAP32[((tempDoublePtr)>>2)];var $6449$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$845$0=-1;
 var $$etemp$845$1=-1;
 var $6450$0=$6449$0^$$etemp$845$0;
 var $6450$1=$6449$1^$$etemp$845$1;
 var $6451$0=($6450$1>>31)|((((((($6450$1|0)<0))|0)?-1:0))<<1);
 var $6451$1=((((((($6450$1|0)<0))|0)?-1:0))>>31)|((((((($6450$1|0)<0))|0)?-1:0))<<1);
 var $6452$0=($6451$0>>>1)|($6451$1<<31);
 var $6452$1=($6451$1>>>1)|(0<<31);
 var $6453$0=$6452$0^$6450$0;
 var $6453$1=$6452$1^$6450$1;
 var $6454$0=_i64Add($6453$0,$6453$1,$6448$0,$6448$1);var $6454$1=tempRet0; //@line 55 "inc/pcdecoder.inl"
 var $6455$0=($6454$1>>31)|((((((($6454$1|0)<0))|0)?-1:0))<<1);
 var $6455$1=((((((($6454$1|0)<0))|0)?-1:0))>>31)|((((((($6454$1|0)<0))|0)?-1:0))<<1);
 var $6456$0=($6455$0>>>1)|($6455$1<<31);
 var $6456$1=($6455$1>>>1)|(0<<31);
 var $6457$0=$6456$0^$6454$0;
 var $6457$1=$6456$1^$6454$1;
 var $$etemp$846$0=-1;
 var $$etemp$846$1=-1;
 var $6458$0=$6457$0^$$etemp$846$0;
 var $6458$1=$6457$1^$$etemp$846$1;
 var $6459=(HEAP32[((tempDoublePtr)>>2)]=$6458$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$6458$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $_0=$6459;label=1268;break; //@line 56 "inc/pcdecoder.inl"
 case 1265: 
 var $6461=($6433>>>0)<64; //@line undefined "inc/pcdecoder.inl"
 if($6461){label=1266;break;}else{var $_0=$6413;label=1268;break;} //@line undefined "inc/pcdecoder.inl"
 case 1266: 
 var $6463=(((63)-($6433))|0); //@line 59 "inc/pcdecoder.inl"
 var $6464=HEAP32[(($6360)>>2)]; //@line 60 "inc/pcdecoder.inl"
 var $6465$r=(function() { try { __THREW__ = 0; return __ZN9RCdecoder6decodeIyEET_j($6464,$6463) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $6465$0=$6465$r;var $6465$1=tempRet0;if (!__THREW__) { label=1267;break; } else { label=1273;break; }
 case 1267: 
 var $6466$0=$6463;
 var $6466$1=0;
 var $$etemp$847$0=1;
 var $$etemp$847$1=0;
 var $6467$0=_bitshift64Shl($$etemp$847$0,$$etemp$847$1,$6466$0);var $6467$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 var $6468$0=_i64Add($6467$0,$6467$1,$6465$0,$6465$1);var $6468$1=tempRet0; //@line 60 "inc/pcdecoder.inl"
 HEAPF64[(tempDoublePtr)>>3]=$6413; var $6469$0=HEAP32[((tempDoublePtr)>>2)];var $6469$1=HEAP32[(((tempDoublePtr)+(4))>>2)]; //@line 52 "inc/pcmap.h"
 var $$etemp$848$0=-1;
 var $$etemp$848$1=-1;
 var $6470$0=$6469$0^$$etemp$848$0;
 var $6470$1=$6469$1^$$etemp$848$1;
 var $6471$0=($6470$1>>31)|((((((($6470$1|0)<0))|0)?-1:0))<<1);
 var $6471$1=((((((($6470$1|0)<0))|0)?-1:0))>>31)|((((((($6470$1|0)<0))|0)?-1:0))<<1);
 var $6472$0=($6471$0>>>1)|($6471$1<<31);
 var $6472$1=($6471$1>>>1)|(0<<31);
 var $6473$0=$6472$0^$6470$0;
 var $6473$1=$6472$1^$6470$1;
 var $6474$0=_i64Subtract($6473$0,$6473$1,$6468$0,$6468$1);var $6474$1=tempRet0; //@line 62 "inc/pcdecoder.inl"
 var $6475$0=($6474$1>>31)|((((((($6474$1|0)<0))|0)?-1:0))<<1);
 var $6475$1=((((((($6474$1|0)<0))|0)?-1:0))>>31)|((((((($6474$1|0)<0))|0)?-1:0))<<1);
 var $6476$0=($6475$0>>>1)|($6475$1<<31);
 var $6476$1=($6475$1>>>1)|(0<<31);
 var $6477$0=$6476$0^$6474$0;
 var $6477$1=$6476$1^$6474$1;
 var $$etemp$849$0=-1;
 var $$etemp$849$1=-1;
 var $6478$0=$6477$0^$$etemp$849$0;
 var $6478$1=$6477$1^$$etemp$849$1;
 var $6479=(HEAP32[((tempDoublePtr)>>2)]=$6478$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$6478$1, HEAPF64[(tempDoublePtr)>>3]); //@line 88 "inc/pcmap.h"
 var $_0=$6479;label=1268;break; //@line 63 "inc/pcdecoder.inl"
 case 1268: 
 var $_0;
 var $6480=(($_2+8)|0); //@line 65 "src/read.cpp"
 HEAPF64[(($_2)>>3)]=$_0; //@line 65 "src/read.cpp"
 var $_01053=1;var $f_i1030_sroa_55_6=$f_i1030_sroa_55_5;label=1269;break; //@line 22 "inc/front.h"
 case 1269: 
 var $f_i1030_sroa_55_6;
 var $_01053;
 var $6482=((($f_i1030_sroa_55_6)+(1))|0); //@line 23 "inc/front.h"
 var $6483=$f_i1030_sroa_55_6&$storemerge_i_i_i1035; //@line 23 "inc/front.h"
 var $6484=(($6352+($6483<<3))|0); //@line 23 "inc/front.h"
 HEAPF64[(($6484)>>3)]=$_0; //@line 23 "inc/front.h"
 var $6485=((($_01053)-(1))|0); //@line 23 "inc/front.h"
 var $6486=($6485|0)==0; //@line 23 "inc/front.h"
 if($6486){label=1270;break;}else{var $_01053=$6485;var $f_i1030_sroa_55_6=$6482;label=1269;break;} //@line 23 "inc/front.h"
 case 1270: 
 var $6487=((($x_i1031_0)+(1))|0); //@line 49 "src/read.cpp"
 var $_2=$6480;var $f_i1030_sroa_55_5=$6482;var $x_i1031_0=$6487;label=1258;break; //@line 49 "src/read.cpp"
 case 1271: 
 var $6489$0 = ___cxa_find_matching_catch(-1, -1); var $6489$1 = tempRet0;
 var $6490=$6489$0;
 var $6491=$6489$1;
 var $6492=($6319|0)==0;
 if($6492){var $_01058=$6490;var $_01059=$6491;label=1283;break;}else{label=1272;break;}
 case 1272: 
 _free($6319);
 var $_01058=$6490;var $_01059=$6491;label=1283;break;
 case 1273: 
 var $6495$0 = ___cxa_find_matching_catch(-1, -1); var $6495$1 = tempRet0;
 var $6496=$6495$0;
 var $6497=$6495$1;
 var $6498=($6344|0)==0; //@line 11 "inc/front.h"
 if($6498){var $_01058=$6496;var $_01059=$6497;label=1283;break;}else{label=1274;break;} //@line 11 "inc/front.h"
 case 1274: 
 _free($6344);
 var $_01058=$6496;var $_01059=$6497;label=1283;break; //@line 11 "inc/front.h"
 case 1275: 
 var $6500=((($y_i1032_0)+(1))|0); //@line 48 "src/read.cpp"
 var $_1=$_2;var $f_i1030_sroa_55_3=$f_i1030_sroa_55_5;var $y_i1032_0=$6500;label=1256;break; //@line 48 "src/read.cpp"
 case 1276: 
 var $6502=((($z_i1033_0)+(1))|0); //@line 47 "src/read.cpp"
 var $_01057=$_1;var $f_i1030_sroa_55_1=$f_i1030_sroa_55_3;var $z_i1033_0=$6502;label=1254;break; //@line 47 "src/read.cpp"
 case 1277: 
 var $6504=($6323|0)==0; //@line 69 "src/read.cpp"
 if($6504){label=1279;break;}else{label=1278;break;} //@line 69 "src/read.cpp"
 case 1278: 
 _free($6323);
 label=1279;break; //@line 69 "src/read.cpp"
 case 1279: 
 var $6506=HEAP32[(($rm_i1028)>>2)]; //@line 70 "src/read.cpp"
 var $6507=($6506|0)==0; //@line 70 "src/read.cpp"
 if($6507){label=1281;break;}else{label=1280;break;} //@line 70 "src/read.cpp"
 case 1280: 
 var $6509=$6506; //@line 70 "src/read.cpp"
 var $6510=HEAP32[(($6509)>>2)]; //@line 70 "src/read.cpp"
 var $6511=(($6510+4)|0); //@line 70 "src/read.cpp"
 var $6512=HEAP32[(($6511)>>2)]; //@line 70 "src/read.cpp"
 FUNCTION_TABLE[$6512]($6506); //@line 70 "src/read.cpp"
 label=1281;break; //@line 70 "src/read.cpp"
 case 1281: 
 var $6514=($6344|0)==0; //@line 11 "inc/front.h"
 if($6514){label=1285;break;}else{label=1282;break;} //@line 11 "inc/front.h"
 case 1282: 
 _free($6344);
 label=1285;break; //@line 11 "inc/front.h"
 case 1283: 
 var $_01059;
 var $_01058;
 var $6515$0=$_01058;
 var $6515$1=0;
 var $6516$0=$6515$0;
 var $6516$1=$_01059;
 ___resumeException($6516$0) //@line 71 "src/read.cpp"
 case 1284: 
 HEAP32[((_fpzip_errno)>>2)]=5; //@line 199 "src/read.cpp"
 var $storemerge1=0;label=1286;break; //@line 200 "src/read.cpp"
 case 1285: 
 var $6518=HEAP32[(($4)>>2)]; //@line 202 "src/read.cpp"
 var $6519=HEAP32[(($5)>>2)]; //@line 202 "src/read.cpp"
 var $6520=(Math_imul($6518,$6519)|0); //@line 202 "src/read.cpp"
 var $6521=HEAP32[(($6)>>2)]; //@line 202 "src/read.cpp"
 var $6522=(Math_imul($6520,$6521)|0); //@line 202 "src/read.cpp"
 var $6523=(($_01052+($6522<<3))|0); //@line 202 "src/read.cpp"
 var $6524=((($storemerge)+(1))|0); //@line 164 "src/read.cpp"
 var $storemerge=$6524;var $_01052=$6523;label=2;break; //@line 164 "src/read.cpp"
 case 1286: 
 var $storemerge1;
 STACKTOP=sp;return $storemerge1; //@line 205 "src/read.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCdecoder6decodeIyEET_j($this,$n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0); //@line 37 "src/rcdecoder.cpp"
 var $2=(($this+16)|0); //@line 38 "src/rcdecoder.cpp"
 var $3=(($this+8)|0); //@line 38 "src/rcdecoder.cpp"
 var $storemerge=1;var $_0=$n;var $m_0=0;var $s_0$1=0;var $s_0$0=0;label=2;break; //@line 6 "inc/rcdecoder.inl"
 case 2: 
 var $s_0$0;
 var $s_0$1;
 var $m_0;
 var $_0;
 var $storemerge;
 var $5=($storemerge|0)<4; //@line 6 "inc/rcdecoder.inl"
 if($5){label=3;break;}else{label=6;break;} //@line 6 "inc/rcdecoder.inl"
 case 3: 
 var $7=($_0>>>0)>16; //@line 7 "inc/rcdecoder.inl"
 if($7){label=4;break;}else{var $_1=$_0;var $m_1=$m_0;var $s_1$1=$s_0$1;var $s_1$0=$s_0$0;label=5;break;} //@line 7 "inc/rcdecoder.inl"
 case 4: 
 var $9=HEAP32[(($1)>>2)]; //@line 37 "src/rcdecoder.cpp"
 var $10=$9>>>16; //@line 37 "src/rcdecoder.cpp"
 HEAP32[(($1)>>2)]=$10; //@line 37 "src/rcdecoder.cpp"
 var $11=HEAP32[(($2)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $12=HEAP32[(($3)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $13=((($11)-($12))|0); //@line 38 "src/rcdecoder.cpp"
 var $14=(((($13>>>0))/(($10>>>0)))&-1); //@line 38 "src/rcdecoder.cpp"
 var $15=(Math_imul($10,$14)|0); //@line 39 "src/rcdecoder.cpp"
 var $16=((($12)+($15))|0); //@line 39 "src/rcdecoder.cpp"
 HEAP32[(($3)>>2)]=$16; //@line 39 "src/rcdecoder.cpp"
 __ZN9RCdecoder9normalizeEv($this); //@line 40 "src/rcdecoder.cpp"
 var $17$0=$14;
 var $17$1=0;
 var $18$0=$m_0;
 var $18$1=0;
 var $19$0=_bitshift64Shl($17$0,$17$1,$18$0);var $19$1=tempRet0; //@line undefined "inc/rcdecoder.inl"
 var $20$0=_i64Add($s_0$0,$s_0$1,$19$0,$19$1);var $20$1=tempRet0; //@line undefined "inc/rcdecoder.inl"
 var $21=((($m_0)+(16))|0); //@line 9 "inc/rcdecoder.inl"
 var $22=((($_0)-(16))|0); //@line 10 "inc/rcdecoder.inl"
 var $_1=$22;var $m_1=$21;var $s_1$1=$20$1;var $s_1$0=$20$0;label=5;break; //@line 11 "inc/rcdecoder.inl"
 case 5: 
 var $s_1$0;
 var $s_1$1;
 var $m_1;
 var $_1;
 var $24=((($storemerge)+(1))|0); //@line 6 "inc/rcdecoder.inl"
 var $storemerge=$24;var $_0=$_1;var $m_0=$m_1;var $s_0$1=$s_1$1;var $s_0$0=$s_1$0;label=2;break; //@line 6 "inc/rcdecoder.inl"
 case 6: 
 var $26=HEAP32[(($1)>>2)]; //@line 37 "src/rcdecoder.cpp"
 var $27=$26>>>($_0>>>0); //@line 37 "src/rcdecoder.cpp"
 HEAP32[(($1)>>2)]=$27; //@line 37 "src/rcdecoder.cpp"
 var $28=HEAP32[(($2)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $29=HEAP32[(($3)>>2)]; //@line 38 "src/rcdecoder.cpp"
 var $30=((($28)-($29))|0); //@line 38 "src/rcdecoder.cpp"
 var $31=(((($30>>>0))/(($27>>>0)))&-1); //@line 38 "src/rcdecoder.cpp"
 var $32=(Math_imul($27,$31)|0); //@line 39 "src/rcdecoder.cpp"
 var $33=((($29)+($32))|0); //@line 39 "src/rcdecoder.cpp"
 HEAP32[(($3)>>2)]=$33; //@line 39 "src/rcdecoder.cpp"
 __ZN9RCdecoder9normalizeEv($this); //@line 40 "src/rcdecoder.cpp"
 var $34$0=$31;
 var $34$1=0;
 var $35$0=$m_0;
 var $35$1=0;
 var $36$0=_bitshift64Shl($34$0,$34$1,$35$0);var $36$1=tempRet0; //@line 12 "inc/rcdecoder.inl"
 var $37$0=_i64Add($36$0,$36$1,$s_0$0,$s_0$1);var $37$1=tempRet0; //@line 12 "inc/rcdecoder.inl"
 return (tempRet0=$37$1,$37$0); //@line 12 "inc/rcdecoder.inl"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN12RCmemdecoderD2Ev($this){
 var label=0;


 return; //@line 55 "inc/read.h"
}


function __ZN12RCmemdecoderD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this; //@line 55 "inc/read.h"
 _free($3);
 label=3;break;
 case 3: 
 return; //@line 55 "inc/read.h"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN12RCmemdecoder7getbyteEv($this){
 var label=0;


 var $1=(($this+20)|0); //@line undefined "inc/read.h"
 var $2=HEAP32[(($1)>>2)]; //@line undefined "inc/read.h"
 var $3=(($2+1)|0); //@line undefined "inc/read.h"
 HEAP32[(($1)>>2)]=$3; //@line undefined "inc/read.h"
 var $4=HEAP8[($2)]; //@line undefined "inc/read.h"
 var $5=($4&255); //@line undefined "inc/read.h"
 return $5; //@line undefined "inc/read.h"
}


function __ZNK12RCmemdecoder5bytesEv($this){
 var label=0;


 var $1=(($this+20)|0); //@line 59 "inc/read.h"
 var $2=HEAP32[(($1)>>2)]; //@line 59 "inc/read.h"
 var $3=(($this+24)|0); //@line 59 "inc/read.h"
 var $4=HEAP32[(($3)>>2)]; //@line 59 "inc/read.h"
 var $5=$2; //@line 59 "inc/read.h"
 var $6=$4; //@line 59 "inc/read.h"
 var $7=((($5)-($6))|0); //@line 59 "inc/read.h"
 return $7; //@line 59 "inc/read.h"
}


function __Z10decompressPv($buffer){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[((_fpzip_errno)>>2)]=0; //@line 226 "src/read.cpp"
 var $1=__Znwj(28); //@line 19 "src/read.cpp"
 var $2=$1; //@line 20 "src/read.cpp"
 HEAP32[(($2)>>2)]=0; //@line 20 "src/read.cpp"
 var $3=(($1+4)|0); //@line 21 "src/read.cpp"
 var $4=$3; //@line 21 "src/read.cpp"
 HEAP32[(($4)>>2)]=0; //@line 21 "src/read.cpp"
 var $5=(($1+20)|0); //@line 22 "src/read.cpp"
 var $6=$5; //@line 22 "src/read.cpp"
 HEAP32[(($6)>>2)]=1; //@line 22 "src/read.cpp"
 var $7=(($1+16)|0); //@line 22 "src/read.cpp"
 var $8=$7; //@line 22 "src/read.cpp"
 HEAP32[(($8)>>2)]=1; //@line 22 "src/read.cpp"
 var $9=(($1+12)|0); //@line 22 "src/read.cpp"
 var $10=$9; //@line 22 "src/read.cpp"
 HEAP32[(($10)>>2)]=1; //@line 22 "src/read.cpp"
 var $11=(($1+8)|0); //@line 22 "src/read.cpp"
 var $12=$11; //@line 22 "src/read.cpp"
 HEAP32[(($12)>>2)]=1; //@line 22 "src/read.cpp"
 var $13=(($1+24)|0); //@line 23 "src/read.cpp"
 var $14=$13; //@line 23 "src/read.cpp"
 var $15=__Znwj(28); //@line 228 "src/read.cpp"
 var $16=$15; //@line undefined "inc/rcdecoder.h"
 var $17=(($15+8)|0); //@line undefined "inc/rcdecoder.h"
 var $18=$17; //@line undefined "inc/rcdecoder.h"
 HEAP32[(($18)>>2)]=0; //@line undefined "inc/rcdecoder.h"
 var $19=(($15+12)|0); //@line undefined "inc/rcdecoder.h"
 var $20=$19; //@line undefined "inc/rcdecoder.h"
 HEAP32[(($20)>>2)]=-1; //@line undefined "inc/rcdecoder.h"
 var $21=(($15+16)|0); //@line undefined "inc/rcdecoder.h"
 var $22=$21; //@line undefined "inc/rcdecoder.h"
 HEAP32[(($22)>>2)]=0; //@line undefined "inc/rcdecoder.h"
 HEAP32[(($16)>>2)]=576; //@line 57 "inc/read.h"
 var $23=(($15+20)|0); //@line 57 "inc/read.h"
 var $24=$23; //@line 57 "inc/read.h"
 HEAP32[(($24)>>2)]=$buffer; //@line 57 "inc/read.h"
 var $25=(($15+24)|0); //@line 57 "inc/read.h"
 var $26=$25; //@line 57 "inc/read.h"
 HEAP32[(($26)>>2)]=$buffer; //@line 57 "inc/read.h"
 var $27=$15; //@line 231 "src/read.cpp"
 HEAP32[(($14)>>2)]=$27; //@line 231 "src/read.cpp"
 var $28=(($15+4)|0); //@line 7 "src/rcdecoder.cpp"
 HEAP8[($28)]=0; //@line 7 "src/rcdecoder.cpp"
 var $29=(($15+16)|0); //@line 35 "inc/rcdecoder.inl"
 var $30=$29; //@line 35 "inc/rcdecoder.inl"
 var $31=$15; //@line 36 "inc/rcdecoder.inl"
 var $32=(($15+8)|0); //@line 37 "inc/rcdecoder.inl"
 var $33=$32; //@line 37 "inc/rcdecoder.inl"
 var $storemerge_i_i_i=0;var $35=0;label=2;break; //@line 34 "inc/rcdecoder.inl"
 case 2: 
 var $35;
 var $storemerge_i_i_i;
 var $36=($storemerge_i_i_i>>>0)<4; //@line 34 "inc/rcdecoder.inl"
 if($36){label=3;break;}else{label=4;break;} //@line 34 "inc/rcdecoder.inl"
 case 3: 
 var $38=$35<<8; //@line 35 "inc/rcdecoder.inl"
 HEAP32[(($30)>>2)]=$38; //@line 35 "inc/rcdecoder.inl"
 var $39=HEAP32[(($31)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $40=(($39+8)|0); //@line 36 "inc/rcdecoder.inl"
 var $41=HEAP32[(($40)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $42=FUNCTION_TABLE[$41]($27); //@line 36 "inc/rcdecoder.inl"
 var $43=HEAP32[(($30)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $44=$43|$42; //@line 36 "inc/rcdecoder.inl"
 HEAP32[(($30)>>2)]=$44; //@line 36 "inc/rcdecoder.inl"
 var $45=HEAP32[(($33)>>2)]; //@line 37 "inc/rcdecoder.inl"
 var $46=$45<<8; //@line 37 "inc/rcdecoder.inl"
 HEAP32[(($33)>>2)]=$46; //@line 37 "inc/rcdecoder.inl"
 var $47=((($storemerge_i_i_i)+(1))|0); //@line 34 "inc/rcdecoder.inl"
 var $storemerge_i_i_i=$47;var $35=$44;label=2;break; //@line 34 "inc/rcdecoder.inl"
 case 4: 
 HEAP32[((_fpzip_errno)>>2)]=0; //@line 250 "src/read.cpp"
 var $48=(($1+24)|0); //@line 253 "src/read.cpp"
 var $49=$48; //@line 253 "src/read.cpp"
 var $50=HEAP32[(($49)>>2)]; //@line 253 "src/read.cpp"
 var $51=__ZN9RCdecoder6decodeIjEET_j($50,8); //@line 256 "src/read.cpp"
 var $52=($51|0)==102; //@line 256 "src/read.cpp"
 if($52){label=5;break;}else{label=8;break;} //@line 256 "src/read.cpp"
 case 5: 
 var $54=__ZN9RCdecoder6decodeIjEET_j($50,8); //@line 257 "src/read.cpp"
 var $55=($54|0)==112; //@line 257 "src/read.cpp"
 if($55){label=6;break;}else{label=8;break;} //@line 257 "src/read.cpp"
 case 6: 
 var $57=__ZN9RCdecoder6decodeIjEET_j($50,8); //@line 258 "src/read.cpp"
 var $58=($57|0)==122; //@line 258 "src/read.cpp"
 if($58){label=7;break;}else{label=8;break;} //@line 258 "src/read.cpp"
 case 7: 
 var $60=__ZN9RCdecoder6decodeIjEET_j($50,8); //@line 259 "src/read.cpp"
 var $61=($60|0)==0; //@line 259 "src/read.cpp"
 if($61){label=9;break;}else{label=8;break;} //@line 259 "src/read.cpp"
 case 8: 
 HEAP32[((_fpzip_errno)>>2)]=3; //@line 260 "src/read.cpp"
 label=12;break; //@line 261 "src/read.cpp"
 case 9: 
 var $64=__ZN9RCdecoder6decodeIjEET_j($50,16); //@line 265 "src/read.cpp"
 var $65=($64|0)==272; //@line 265 "src/read.cpp"
 if($65){label=10;break;}else{label=11;break;} //@line 265 "src/read.cpp"
 case 10: 
 var $67=__ZN9RCdecoder6decodeIjEET_j($50,8); //@line 266 "src/read.cpp"
 var $68=($67|0)==1; //@line 266 "src/read.cpp"
 if($68){label=13;break;}else{label=11;break;} //@line 266 "src/read.cpp"
 case 11: 
 HEAP32[((_fpzip_errno)>>2)]=4; //@line 267 "src/read.cpp"
 label=12;break; //@line 268 "src/read.cpp"
 case 12: 
 var $71=HEAP32[((_fpzip_errno)>>2)]; //@line 34 "src/fpzip_decompressor.cpp"
 var $72=((_fpzip_errstr+($71<<2))|0); //@line 34 "src/fpzip_decompressor.cpp"
 var $73=HEAP32[(($72)>>2)]; //@line 34 "src/fpzip_decompressor.cpp"
 var $74=_sprintf(0,368,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$73,tempVarArgs)); STACKTOP=tempVarArgs; //@line 34 "src/fpzip_decompressor.cpp"
 var $75=___cxa_allocate_exception(4); //@line 35 "src/fpzip_decompressor.cpp"
 ___cxa_throw($75,1416,0); //@line 35 "src/fpzip_decompressor.cpp"
 throw "Reached an unreachable!"; //@line 35 "src/fpzip_decompressor.cpp"
 case 13: 
 var $77=__ZN9RCdecoder6decodeIjEET_j($50,1); //@line 272 "src/read.cpp"
 var $78=$1; //@line 272 "src/read.cpp"
 HEAP32[(($78)>>2)]=$77; //@line 272 "src/read.cpp"
 var $79=__ZN9RCdecoder6decodeIjEET_j($50,7); //@line 273 "src/read.cpp"
 HEAP32[(($4)>>2)]=$79; //@line 273 "src/read.cpp"
 var $80=__ZN9RCdecoder6decodeIjEET_j($50,32); //@line 276 "src/read.cpp"
 HEAP32[(($12)>>2)]=$80; //@line 276 "src/read.cpp"
 var $81=__ZN9RCdecoder6decodeIjEET_j($50,32); //@line 277 "src/read.cpp"
 HEAP32[(($10)>>2)]=$81; //@line 277 "src/read.cpp"
 var $82=__ZN9RCdecoder6decodeIjEET_j($50,32); //@line 278 "src/read.cpp"
 HEAP32[(($8)>>2)]=$82; //@line 278 "src/read.cpp"
 var $83=__ZN9RCdecoder6decodeIjEET_j($50,32); //@line 279 "src/read.cpp"
 HEAP32[(($6)>>2)]=$83; //@line 279 "src/read.cpp"
 var $84=$1; //@line 37 "src/fpzip_decompressor.cpp"
 var $85=HEAP32[(($84)>>2)]; //@line 37 "src/fpzip_decompressor.cpp"
 var $86=(($1+4)|0); //@line 38 "src/fpzip_decompressor.cpp"
 var $87=$86; //@line 38 "src/fpzip_decompressor.cpp"
 var $88=HEAP32[(($87)>>2)]; //@line 38 "src/fpzip_decompressor.cpp"
 var $89=(($1+8)|0); //@line 39 "src/fpzip_decompressor.cpp"
 var $90=$89; //@line 39 "src/fpzip_decompressor.cpp"
 var $91=HEAP32[(($90)>>2)]; //@line 39 "src/fpzip_decompressor.cpp"
 var $92=(($1+12)|0); //@line 40 "src/fpzip_decompressor.cpp"
 var $93=$92; //@line 40 "src/fpzip_decompressor.cpp"
 var $94=HEAP32[(($93)>>2)]; //@line 40 "src/fpzip_decompressor.cpp"
 var $95=(($1+16)|0); //@line 41 "src/fpzip_decompressor.cpp"
 var $96=$95; //@line 41 "src/fpzip_decompressor.cpp"
 var $97=HEAP32[(($96)>>2)]; //@line 41 "src/fpzip_decompressor.cpp"
 var $98=(($1+20)|0); //@line 42 "src/fpzip_decompressor.cpp"
 var $99=$98; //@line 42 "src/fpzip_decompressor.cpp"
 var $100=HEAP32[(($99)>>2)]; //@line 42 "src/fpzip_decompressor.cpp"
 var $101=(Math_imul($91,$94)|0); //@line 44 "src/fpzip_decompressor.cpp"
 var $102=(Math_imul($101,$97)|0); //@line 44 "src/fpzip_decompressor.cpp"
 var $103=(Math_imul($102,$100)|0); //@line 44 "src/fpzip_decompressor.cpp"
 var $104=($85|0)==0; //@line 46 "src/fpzip_decompressor.cpp"
 if($104){label=14;break;}else{label=18;break;} //@line 46 "src/fpzip_decompressor.cpp"
 case 14: 
 var $106$0=_llvm_umul_with_overflow_i32($103,4);
 var $106$1=tempRet0;
 var $107=$106$1;
 var $108=$106$0;
 var $109=($107?-1:$108); //@line 46 "src/fpzip_decompressor.cpp"
 var $110=(function() { try { __THREW__ = 0; return __Znwj($109) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $131=$110;label=22;break; } else { label=15;break; }
 case 15: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1); var $112$1 = tempRet0;
 var $113=$112$1;
 var $114=($113|0)<0;
 if($114){label=16;break;}else{label=17;break;}
 case 16: 
 var $116=$112$0;
 ___cxa_call_unexpected($116);
 throw "Reached an unreachable!";
 case 17: 
 ___resumeException($112$0)
 case 18: 
 var $119$0=_llvm_umul_with_overflow_i32($103,8);
 var $119$1=tempRet0;
 var $120=$119$1;
 var $121=$119$0;
 var $122=($120?-1:$121); //@line 46 "src/fpzip_decompressor.cpp"
 var $123=(function() { try { __THREW__ = 0; return __Znwj($122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $131=$123;label=22;break; } else { label=19;break; }
 case 19: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$1;
 var $127=($126|0)<0;
 if($127){label=20;break;}else{label=21;break;}
 case 20: 
 var $129=$125$0;
 ___cxa_call_unexpected($129);
 throw "Reached an unreachable!";
 case 21: 
 ___resumeException($125$0)
 case 22: 
 var $131; //@line 46 "src/fpzip_decompressor.cpp"
 HEAP32[((_fpzip_errno)>>2)]=0; //@line 291 "src/read.cpp"
 var $132=$1; //@line 293 "src/read.cpp"
 var $133=HEAP32[(($84)>>2)]; //@line 294 "src/read.cpp"
 var $134=($133|0)==0; //@line 294 "src/read.cpp"
 if($134){label=23;break;}else{label=24;break;} //@line 294 "src/read.cpp"
 case 23: 
 var $136=$131; //@line 295 "src/read.cpp"
 var $137=__ZL12decompress4dIfEbP8FPZinputPT_($132,$136); //@line 295 "src/read.cpp"
 if($137){label=25;break;}else{label=29;break;} //@line 297 "src/read.cpp"
 case 24: 
 var $139=$131; //@line 296 "src/read.cpp"
 var $140=__ZL12decompress4dIdEbP8FPZinputPT_($132,$139); //@line 296 "src/read.cpp"
 if($140){label=25;break;}else{label=29;break;} //@line 297 "src/read.cpp"
 case 25: 
 var $142=(($1+24)|0); //@line 298 "src/read.cpp"
 var $143=$142; //@line 298 "src/read.cpp"
 var $144=HEAP32[(($143)>>2)]; //@line 298 "src/read.cpp"
 var $145=(($144+4)|0); //@line 299 "src/read.cpp"
 var $146=HEAP8[($145)]; //@line 299 "src/read.cpp"
 var $147=$146&1; //@line 299 "src/read.cpp"
 var $148=(($147<<24)>>24)==0; //@line 299 "src/read.cpp"
 if($148){label=28;break;}else{label=26;break;} //@line 299 "src/read.cpp"
 case 26: 
 var $150=HEAP32[((_fpzip_errno)>>2)]; //@line 300 "src/read.cpp"
 var $151=($150|0)==0; //@line 300 "src/read.cpp"
 if($151){label=27;break;}else{label=29;break;} //@line 300 "src/read.cpp"
 case 27: 
 HEAP32[((_fpzip_errno)>>2)]=1; //@line 301 "src/read.cpp"
 label=29;break; //@line 301 "src/read.cpp"
 case 28: 
 var $153=$144; //@line 304 "src/read.cpp"
 var $154=HEAP32[(($153)>>2)]; //@line 304 "src/read.cpp"
 var $155=(($154+12)|0); //@line 304 "src/read.cpp"
 var $156=HEAP32[(($155)>>2)]; //@line 304 "src/read.cpp"
 var $157=FUNCTION_TABLE[$156]($144); //@line 304 "src/read.cpp"
 var $phitmp=($157|0)==0;
 if($phitmp){label=29;break;}else{label=30;break;} //@line 52 "src/fpzip_decompressor.cpp"
 case 29: 
 var $158=HEAP32[((_fpzip_errno)>>2)]; //@line 53 "src/fpzip_decompressor.cpp"
 var $159=((_fpzip_errstr+($158<<2))|0); //@line 53 "src/fpzip_decompressor.cpp"
 var $160=HEAP32[(($159)>>2)]; //@line 53 "src/fpzip_decompressor.cpp"
 var $161=_sprintf(0,336,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$160,tempVarArgs)); STACKTOP=tempVarArgs; //@line 53 "src/fpzip_decompressor.cpp"
 var $162=___cxa_allocate_exception(4); //@line 54 "src/fpzip_decompressor.cpp"
 ___cxa_throw($162,1416,0); //@line 54 "src/fpzip_decompressor.cpp"
 throw "Reached an unreachable!"; //@line 54 "src/fpzip_decompressor.cpp"
 case 30: 
 var $164=HEAP32[(($49)>>2)]; //@line 240 "src/read.cpp"
 var $165=($164|0)==0; //@line 240 "src/read.cpp"
 if($165){label=32;break;}else{label=31;break;} //@line 240 "src/read.cpp"
 case 31: 
 var $167=$164; //@line 240 "src/read.cpp"
 var $168=HEAP32[(($167)>>2)]; //@line 240 "src/read.cpp"
 var $169=(($168+4)|0); //@line 240 "src/read.cpp"
 var $170=HEAP32[(($169)>>2)]; //@line 240 "src/read.cpp"
 FUNCTION_TABLE[$170]($164); //@line 240 "src/read.cpp"
 label=32;break; //@line 240 "src/read.cpp"
 case 32: 
 var $172=($1|0)==0; //@line 241 "src/read.cpp"
 if($172){label=34;break;}else{label=33;break;} //@line 241 "src/read.cpp"
 case 33: 
 _free($1);
 label=34;break; //@line 241 "src/read.cpp"
 case 34: 
 _free($buffer); //@line undefined "src/fpzip_decompressor.cpp"
 var $173=__Znwj(28); //@line 60 "src/fpzip_decompressor.cpp"
 var $174=$173; //@line 60 "src/fpzip_decompressor.cpp"
 HEAP32[(($173)>>2)]=0; HEAP32[((($173)+(4))>>2)]=0; HEAP32[((($173)+(8))>>2)]=0; HEAP32[((($173)+(12))>>2)]=0; HEAP32[((($173)+(16))>>2)]=0; HEAP32[((($173)+(20))>>2)]=0; //@line 60 "src/fpzip_decompressor.cpp"
 var $175=$173; //@line 61 "src/fpzip_decompressor.cpp"
 HEAP32[(($175)>>2)]=$85; //@line 61 "src/fpzip_decompressor.cpp"
 var $176=(($173+4)|0); //@line 62 "src/fpzip_decompressor.cpp"
 var $177=$176; //@line 62 "src/fpzip_decompressor.cpp"
 HEAP32[(($177)>>2)]=$88; //@line 62 "src/fpzip_decompressor.cpp"
 var $178=(($173+8)|0); //@line 63 "src/fpzip_decompressor.cpp"
 var $179=$178; //@line 63 "src/fpzip_decompressor.cpp"
 HEAP32[(($179)>>2)]=$91; //@line 63 "src/fpzip_decompressor.cpp"
 var $180=(($173+12)|0); //@line 64 "src/fpzip_decompressor.cpp"
 var $181=$180; //@line 64 "src/fpzip_decompressor.cpp"
 HEAP32[(($181)>>2)]=$94; //@line 64 "src/fpzip_decompressor.cpp"
 var $182=(($173+16)|0); //@line 65 "src/fpzip_decompressor.cpp"
 var $183=$182; //@line 65 "src/fpzip_decompressor.cpp"
 HEAP32[(($183)>>2)]=$97; //@line 65 "src/fpzip_decompressor.cpp"
 var $184=(($173+20)|0); //@line 66 "src/fpzip_decompressor.cpp"
 var $185=$184; //@line 66 "src/fpzip_decompressor.cpp"
 HEAP32[(($185)>>2)]=$100; //@line 66 "src/fpzip_decompressor.cpp"
 var $186=(($173+24)|0); //@line 67 "src/fpzip_decompressor.cpp"
 var $187=$186; //@line 67 "src/fpzip_decompressor.cpp"
 HEAP32[(($187)>>2)]=$131; //@line 67 "src/fpzip_decompressor.cpp"
 STACKTOP=sp;return $174; //@line 69 "src/fpzip_decompressor.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $args_i_i_i=sp;
 var $1=$args_i_i_i; //@line 297 "/usr/share/emscripten/system/include/emscripten/wire.h"
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $2=(($args_i_i_i)|0); //@line 109 "/usr/share/emscripten/system/include/emscripten/wire.h"
 HEAP32[(($2)>>2)]=2; //@line 109 "/usr/share/emscripten/system/include/emscripten/wire.h"
 var $3=(($args_i_i_i+4)|0); //@line 110 "/usr/share/emscripten/system/include/emscripten/wire.h"
 HEAP32[(($3)>>2)]=1432; //@line 98 "/usr/share/emscripten/system/include/emscripten/wire.h"
 var $4=(($args_i_i_i+8)|0); //@line 99 "/usr/share/emscripten/system/include/emscripten/wire.h"
 HEAP32[(($4)>>2)]=1400; //@line 98 "/usr/share/emscripten/system/include/emscripten/wire.h"
 __embind_register_function(176,2,$3,(18),(48)); //@line 300 "/usr/share/emscripten/system/include/emscripten/wire.h"
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 STACKTOP=sp;return; //@line 54 "src/fpzip_decompressor.cpp"
}


function __ZN10emscripten8internal7InvokerIP12DecodedImageJPvEE6invokeEPFS3_S4_ES4_($fn,$args){
 var label=0;


 var $1=FUNCTION_TABLE[$fn]($args); //@line 268 "/usr/share/emscripten/system/include/emscripten/bind.h"
 return $1; //@line 267 "/usr/share/emscripten/system/include/emscripten/bind.h"
}


function __ZN9RCdecoder9normalizeEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0); //@line 57 "src/rcdecoder.cpp"
 var $2=(($this+12)|0); //@line 57 "src/rcdecoder.cpp"
 var $3=(($this+16)|0); //@line 35 "inc/rcdecoder.inl"
 var $4=$this; //@line 36 "inc/rcdecoder.inl"
 var $_pre=HEAP32[(($1)>>2)]; //@line 57 "src/rcdecoder.cpp"
 var $_pre4=HEAP32[(($2)>>2)]; //@line 57 "src/rcdecoder.cpp"
 var $7=$_pre;var $6=$_pre4;label=2;break; //@line 57 "src/rcdecoder.cpp"
 case 2: 
 var $6;
 var $7; //@line 57 "src/rcdecoder.cpp"
 var $8=((($7)+($6))|0); //@line 57 "src/rcdecoder.cpp"
 var $9=$7^$8; //@line 57 "src/rcdecoder.cpp"
 var $10=($9>>>0)<16777216; //@line 57 "src/rcdecoder.cpp"
 if($10){var $storemerge_i=0;var $12=$7;label=3;break;}else{label=6;break;} //@line 57 "src/rcdecoder.cpp"
 case 3: 
 var $12;
 var $storemerge_i;
 var $13=($storemerge_i|0)==0; //@line 34 "inc/rcdecoder.inl"
 if($13){label=4;break;}else{label=5;break;} //@line 34 "inc/rcdecoder.inl"
 case 4: 
 var $15=HEAP32[(($3)>>2)]; //@line 35 "inc/rcdecoder.inl"
 var $16=$15<<8; //@line 35 "inc/rcdecoder.inl"
 HEAP32[(($3)>>2)]=$16; //@line 35 "inc/rcdecoder.inl"
 var $17=HEAP32[(($4)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $18=(($17+8)|0); //@line 36 "inc/rcdecoder.inl"
 var $19=HEAP32[(($18)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $20=FUNCTION_TABLE[$19]($this); //@line 36 "inc/rcdecoder.inl"
 var $21=HEAP32[(($3)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $22=$21|$20; //@line 36 "inc/rcdecoder.inl"
 HEAP32[(($3)>>2)]=$22; //@line 36 "inc/rcdecoder.inl"
 var $23=HEAP32[(($1)>>2)]; //@line 37 "inc/rcdecoder.inl"
 var $24=$23<<8; //@line 37 "inc/rcdecoder.inl"
 HEAP32[(($1)>>2)]=$24; //@line 37 "inc/rcdecoder.inl"
 var $25=((($storemerge_i)+(1))|0); //@line 34 "inc/rcdecoder.inl"
 var $storemerge_i=$25;var $12=$24;label=3;break; //@line 34 "inc/rcdecoder.inl"
 case 5: 
 var $26=HEAP32[(($2)>>2)]; //@line 60 "src/rcdecoder.cpp"
 var $27=$26<<8; //@line 60 "src/rcdecoder.cpp"
 HEAP32[(($2)>>2)]=$27; //@line 60 "src/rcdecoder.cpp"
 var $7=$12;var $6=$27;label=2;break; //@line 61 "src/rcdecoder.cpp"
 case 6: 
 var $29=($6>>>0)>65535; //@line 62 "src/rcdecoder.cpp"
 if($29){label=10;break;}else{var $storemerge_i2=0;var $31=$7;label=7;break;} //@line 62 "src/rcdecoder.cpp"
 case 7: 
 var $31;
 var $storemerge_i2;
 var $32=($storemerge_i2>>>0)<2; //@line 34 "inc/rcdecoder.inl"
 if($32){label=8;break;}else{label=9;break;} //@line 34 "inc/rcdecoder.inl"
 case 8: 
 var $34=HEAP32[(($3)>>2)]; //@line 35 "inc/rcdecoder.inl"
 var $35=$34<<8; //@line 35 "inc/rcdecoder.inl"
 HEAP32[(($3)>>2)]=$35; //@line 35 "inc/rcdecoder.inl"
 var $36=HEAP32[(($4)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $37=(($36+8)|0); //@line 36 "inc/rcdecoder.inl"
 var $38=HEAP32[(($37)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $39=FUNCTION_TABLE[$38]($this); //@line 36 "inc/rcdecoder.inl"
 var $40=HEAP32[(($3)>>2)]; //@line 36 "inc/rcdecoder.inl"
 var $41=$40|$39; //@line 36 "inc/rcdecoder.inl"
 HEAP32[(($3)>>2)]=$41; //@line 36 "inc/rcdecoder.inl"
 var $42=HEAP32[(($1)>>2)]; //@line 37 "inc/rcdecoder.inl"
 var $43=$42<<8; //@line 37 "inc/rcdecoder.inl"
 HEAP32[(($1)>>2)]=$43; //@line 37 "inc/rcdecoder.inl"
 var $44=((($storemerge_i2)+(1))|0); //@line 34 "inc/rcdecoder.inl"
 var $storemerge_i2=$44;var $31=$43;label=7;break; //@line 34 "inc/rcdecoder.inl"
 case 9: 
 var $45=(((-$31))|0); //@line 66 "src/rcdecoder.cpp"
 HEAP32[(($2)>>2)]=$45; //@line 66 "src/rcdecoder.cpp"
 label=10;break; //@line 67 "src/rcdecoder.cpp"
 case 10: 
 return; //@line 68 "src/rcdecoder.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCqsmodelC2Ebjjj($this,$compress,$symbols,$bits,$period){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0); //@line 6 "inc/rcmodel.h"
 var $2=(($this+4)|0); //@line 6 "inc/rcmodel.h"
 HEAP32[(($2)>>2)]=$symbols; //@line 6 "inc/rcmodel.h"
 HEAP32[(($1)>>2)]=536; //@line undefined "src/rcqsmodel.cpp"
 var $3=(($this+8)|0); //@line undefined "src/rcqsmodel.cpp"
 HEAP32[(($3)>>2)]=$bits; //@line undefined "src/rcqsmodel.cpp"
 var $4=(($this+28)|0); //@line undefined "src/rcqsmodel.cpp"
 HEAP32[(($4)>>2)]=$period; //@line undefined "src/rcqsmodel.cpp"
 var $5=($bits>>>0)<17; //@line 9 "src/rcqsmodel.cpp"
 if($5){label=5;break;}else{label=2;break;} //@line 9 "src/rcqsmodel.cpp"
 case 2: 
 (function() { try { __THREW__ = 0; return ___assert_fail(40,192,9,392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=4;break; } //@line 9 "src/rcqsmodel.cpp"
 case 3: 
 throw "Reached an unreachable!"; //@line 9 "src/rcqsmodel.cpp"
 case 4: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1); var $9$1 = tempRet0;
 var $eh_lpad_body$1=$9$1;var $eh_lpad_body$0=$9$0;label=29;break;
 case 5: 
 var $11=((($bits)+(1))|0); //@line 10 "src/rcqsmodel.cpp"
 var $12=1<<$11; //@line 10 "src/rcqsmodel.cpp"
 var $13=($12>>>0)>($period>>>0); //@line 10 "src/rcqsmodel.cpp"
 if($13){label=8;break;}else{label=6;break;} //@line 10 "src/rcqsmodel.cpp"
 case 6: 
 (function() { try { __THREW__ = 0; return ___assert_fail(128,192,10,392) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=4;break; } //@line 10 "src/rcqsmodel.cpp"
 case 7: 
 throw "Reached an unreachable!"; //@line 10 "src/rcqsmodel.cpp"
 case 8: 
 var $17=((($symbols)+(1))|0); //@line 13 "src/rcqsmodel.cpp"
 var $18$0=_llvm_umul_with_overflow_i32($17,4);
 var $18$1=tempRet0;
 var $19=$18$1;
 var $20=$18$0;
 var $21=($19?-1:$20); //@line 13 "src/rcqsmodel.cpp"
 var $22=(function() { try { __THREW__ = 0; return __Znwj($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=9;break; }
 case 9: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1); var $24$1 = tempRet0;
 var $25=$24$1;
 var $26=($25|0)<0;
 if($26){label=10;break;}else{var $eh_lpad_body$1=$24$1;var $eh_lpad_body$0=$24$0;label=29;break;}
 case 10: 
 var $28=$24$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=4;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $29=$22; //@line 13 "src/rcqsmodel.cpp"
 var $30=(($this+32)|0); //@line 13 "src/rcqsmodel.cpp"
 HEAP32[(($30)>>2)]=$29; //@line 13 "src/rcqsmodel.cpp"
 var $31=(function() { try { __THREW__ = 0; return __Znwj($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=13;break; }
 case 13: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=$33$1;
 var $35=($34|0)<0;
 if($35){label=14;break;}else{var $eh_lpad_body$1=$33$1;var $eh_lpad_body$0=$33$0;label=29;break;}
 case 14: 
 var $37=$33$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=4;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $38=$31; //@line 14 "src/rcqsmodel.cpp"
 var $39=(($this+36)|0); //@line 14 "src/rcqsmodel.cpp"
 HEAP32[(($39)>>2)]=$38; //@line 14 "src/rcqsmodel.cpp"
 HEAP32[(($38)>>2)]=0; //@line 15 "src/rcqsmodel.cpp"
 var $40=1<<$bits; //@line 16 "src/rcqsmodel.cpp"
 var $41=(($38+($symbols<<2))|0); //@line 16 "src/rcqsmodel.cpp"
 HEAP32[(($41)>>2)]=$40; //@line 16 "src/rcqsmodel.cpp"
 if($compress){label=17;break;}else{label=18;break;} //@line 17 "src/rcqsmodel.cpp"
 case 17: 
 var $43=(($this+44)|0); //@line 18 "src/rcqsmodel.cpp"
 HEAP32[(($43)>>2)]=0; //@line 18 "src/rcqsmodel.cpp"
 var $57=$38;label=23;break; //@line 18 "src/rcqsmodel.cpp"
 case 18: 
 var $45=((($bits)-(7))|0); //@line 20 "src/rcqsmodel.cpp"
 var $46=(($this+40)|0); //@line 20 "src/rcqsmodel.cpp"
 HEAP32[(($46)>>2)]=$45; //@line 20 "src/rcqsmodel.cpp"
 var $47=(function() { try { __THREW__ = 0; return __Znwj(516) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=19;break; }
 case 19: 
 var $49$0 = ___cxa_find_matching_catch(-1, -1); var $49$1 = tempRet0;
 var $50=$49$1;
 var $51=($50|0)<0;
 if($51){label=20;break;}else{var $eh_lpad_body$1=$49$1;var $eh_lpad_body$0=$49$0;label=29;break;}
 case 20: 
 var $53=$49$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=4;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $54=$47; //@line 21 "src/rcqsmodel.cpp"
 var $55=(($this+44)|0); //@line 21 "src/rcqsmodel.cpp"
 HEAP32[(($55)>>2)]=$54; //@line 21 "src/rcqsmodel.cpp"
 var $_pre=HEAP32[(($39)>>2)]; //@line 39 "src/rcqsmodel.cpp"
 var $57=$_pre;label=23;break;
 case 23: 
 var $57;
 var $58=HEAP32[(($2)>>2)]; //@line 36 "src/rcqsmodel.cpp"
 var $59=$58>>>4; //@line 37 "src/rcqsmodel.cpp"
 var $60=$59|2; //@line 37 "src/rcqsmodel.cpp"
 var $61=(($this+24)|0); //@line 37 "src/rcqsmodel.cpp"
 HEAP32[(($61)>>2)]=$60; //@line 37 "src/rcqsmodel.cpp"
 var $62=(($this+16)|0); //@line 38 "src/rcqsmodel.cpp"
 HEAP32[(($62)>>2)]=0; //@line 38 "src/rcqsmodel.cpp"
 var $63=(($57+($58<<2))|0); //@line 39 "src/rcqsmodel.cpp"
 var $64=HEAP32[(($63)>>2)]; //@line 39 "src/rcqsmodel.cpp"
 var $65=(((($64>>>0))/(($58>>>0)))&-1); //@line 39 "src/rcqsmodel.cpp"
 var $66=(((($64>>>0))%(($58>>>0)))&-1); //@line 40 "src/rcqsmodel.cpp"
 var $67=((($65)+(1))|0); //@line 42 "src/rcqsmodel.cpp"
 var $storemerge_i=0;label=24;break; //@line 41 "src/rcqsmodel.cpp"
 case 24: 
 var $storemerge_i;
 var $69=($storemerge_i>>>0)<($66>>>0); //@line 41 "src/rcqsmodel.cpp"
 if($69){label=25;break;}else{var $storemerge1_i=$66;label=26;break;} //@line 41 "src/rcqsmodel.cpp"
 case 25: 
 var $71=HEAP32[(($30)>>2)]; //@line 42 "src/rcqsmodel.cpp"
 var $72=(($71+($storemerge_i<<2))|0); //@line 42 "src/rcqsmodel.cpp"
 HEAP32[(($72)>>2)]=$67; //@line 42 "src/rcqsmodel.cpp"
 var $73=((($storemerge_i)+(1))|0); //@line 41 "src/rcqsmodel.cpp"
 var $storemerge_i=$73;label=24;break; //@line 41 "src/rcqsmodel.cpp"
 case 26: 
 var $storemerge1_i;
 var $75=($storemerge1_i>>>0)<($58>>>0); //@line 43 "src/rcqsmodel.cpp"
 if($75){label=27;break;}else{label=28;break;} //@line 43 "src/rcqsmodel.cpp"
 case 27: 
 var $77=HEAP32[(($30)>>2)]; //@line 44 "src/rcqsmodel.cpp"
 var $78=(($77+($storemerge1_i<<2))|0); //@line 44 "src/rcqsmodel.cpp"
 HEAP32[(($78)>>2)]=$65; //@line 44 "src/rcqsmodel.cpp"
 var $79=((($storemerge1_i)+(1))|0); //@line 43 "src/rcqsmodel.cpp"
 var $storemerge1_i=$79;label=26;break; //@line 43 "src/rcqsmodel.cpp"
 case 28: 
 __ZN9RCqsmodel6updateEv($this); //@line 45 "src/rcqsmodel.cpp"
 return; //@line 24 "src/rcqsmodel.cpp"
 case 29: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0) //@line 24 "src/rcqsmodel.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCqsmodelD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0); //@line 27 "src/rcqsmodel.cpp"
 HEAP32[(($1)>>2)]=536; //@line 27 "src/rcqsmodel.cpp"
 var $2=(($this+32)|0); //@line 28 "src/rcqsmodel.cpp"
 var $3=HEAP32[(($2)>>2)]; //@line 28 "src/rcqsmodel.cpp"
 var $4=($3|0)==0; //@line 28 "src/rcqsmodel.cpp"
 if($4){label=3;break;}else{label=2;break;} //@line 28 "src/rcqsmodel.cpp"
 case 2: 
 var $5=$3; //@line 28 "src/rcqsmodel.cpp"
 _free($5);
 label=3;break; //@line 28 "src/rcqsmodel.cpp"
 case 3: 
 var $7=(($this+36)|0); //@line 29 "src/rcqsmodel.cpp"
 var $8=HEAP32[(($7)>>2)]; //@line 29 "src/rcqsmodel.cpp"
 var $9=($8|0)==0; //@line 29 "src/rcqsmodel.cpp"
 if($9){label=5;break;}else{label=4;break;} //@line 29 "src/rcqsmodel.cpp"
 case 4: 
 var $10=$8; //@line 29 "src/rcqsmodel.cpp"
 _free($10);
 label=5;break; //@line 29 "src/rcqsmodel.cpp"
 case 5: 
 var $12=(($this+44)|0); //@line 30 "src/rcqsmodel.cpp"
 var $13=HEAP32[(($12)>>2)]; //@line 30 "src/rcqsmodel.cpp"
 var $14=($13|0)==0; //@line 30 "src/rcqsmodel.cpp"
 if($14){label=7;break;}else{label=6;break;} //@line 30 "src/rcqsmodel.cpp"
 case 6: 
 var $15=$13; //@line 30 "src/rcqsmodel.cpp"
 _free($15);
 label=7;break; //@line 30 "src/rcqsmodel.cpp"
 case 7: 
 var $16=($this|0)==0;
 if($16){label=9;break;}else{label=8;break;}
 case 8: 
 var $18=$this; //@line 27 "src/rcqsmodel.cpp"
 _free($18);
 label=9;break;
 case 9: 
 return; //@line 31 "src/rcqsmodel.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCqsmodelD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0); //@line 27 "src/rcqsmodel.cpp"
 HEAP32[(($1)>>2)]=536; //@line 27 "src/rcqsmodel.cpp"
 var $2=(($this+32)|0); //@line 28 "src/rcqsmodel.cpp"
 var $3=HEAP32[(($2)>>2)]; //@line 28 "src/rcqsmodel.cpp"
 var $4=($3|0)==0; //@line 28 "src/rcqsmodel.cpp"
 if($4){label=3;break;}else{label=2;break;} //@line 28 "src/rcqsmodel.cpp"
 case 2: 
 var $5=$3; //@line 28 "src/rcqsmodel.cpp"
 _free($5);
 label=3;break; //@line 28 "src/rcqsmodel.cpp"
 case 3: 
 var $7=(($this+36)|0); //@line 29 "src/rcqsmodel.cpp"
 var $8=HEAP32[(($7)>>2)]; //@line 29 "src/rcqsmodel.cpp"
 var $9=($8|0)==0; //@line 29 "src/rcqsmodel.cpp"
 if($9){label=5;break;}else{label=4;break;} //@line 29 "src/rcqsmodel.cpp"
 case 4: 
 var $10=$8; //@line 29 "src/rcqsmodel.cpp"
 _free($10);
 label=5;break; //@line 29 "src/rcqsmodel.cpp"
 case 5: 
 var $12=(($this+44)|0); //@line 30 "src/rcqsmodel.cpp"
 var $13=HEAP32[(($12)>>2)]; //@line 30 "src/rcqsmodel.cpp"
 var $14=($13|0)==0; //@line 30 "src/rcqsmodel.cpp"
 if($14){label=7;break;}else{label=6;break;} //@line 30 "src/rcqsmodel.cpp"
 case 6: 
 var $15=$13; //@line 30 "src/rcqsmodel.cpp"
 _free($15);
 label=7;break; //@line 30 "src/rcqsmodel.cpp"
 case 7: 
 return; //@line 31 "src/rcqsmodel.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCqsmodel6updateEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+16)|0); //@line 74 "src/rcqsmodel.cpp"
 var $2=HEAP32[(($1)>>2)]; //@line 74 "src/rcqsmodel.cpp"
 var $3=($2|0)==0; //@line 74 "src/rcqsmodel.cpp"
 if($3){label=3;break;}else{label=2;break;} //@line 74 "src/rcqsmodel.cpp"
 case 2: 
 var $5=(($this+12)|0); //@line 75 "src/rcqsmodel.cpp"
 HEAP32[(($5)>>2)]=$2; //@line 75 "src/rcqsmodel.cpp"
 HEAP32[(($1)>>2)]=0; //@line 76 "src/rcqsmodel.cpp"
 var $6=(($this+20)|0); //@line 77 "src/rcqsmodel.cpp"
 var $7=HEAP32[(($6)>>2)]; //@line 77 "src/rcqsmodel.cpp"
 var $8=((($7)+(1))|0); //@line 77 "src/rcqsmodel.cpp"
 HEAP32[(($6)>>2)]=$8; //@line 77 "src/rcqsmodel.cpp"
 label=15;break; //@line 78 "src/rcqsmodel.cpp"
 case 3: 
 var $10=(($this+24)|0); //@line 80 "src/rcqsmodel.cpp"
 var $11=HEAP32[(($10)>>2)]; //@line 80 "src/rcqsmodel.cpp"
 var $12=(($this+28)|0); //@line 80 "src/rcqsmodel.cpp"
 var $13=HEAP32[(($12)>>2)]; //@line 80 "src/rcqsmodel.cpp"
 var $14=($11|0)==($13|0); //@line 80 "src/rcqsmodel.cpp"
 if($14){label=5;break;}else{label=4;break;} //@line 80 "src/rcqsmodel.cpp"
 case 4: 
 var $16=$11<<1; //@line 81 "src/rcqsmodel.cpp"
 HEAP32[(($10)>>2)]=$16; //@line 81 "src/rcqsmodel.cpp"
 var $17=($16>>>0)>($13>>>0); //@line 82 "src/rcqsmodel.cpp"
 var $_=($17?$13:$16); //@line 82 "src/rcqsmodel.cpp"
 HEAP32[(($10)>>2)]=$_; //@line 83 "src/rcqsmodel.cpp"
 label=5;break; //@line 82 "src/rcqsmodel.cpp"
 case 5: 
 var $19=(($this+4)|0); //@line 87 "src/rcqsmodel.cpp"
 var $20=HEAP32[(($19)>>2)]; //@line 87 "src/rcqsmodel.cpp"
 var $21=(($this+36)|0); //@line 88 "src/rcqsmodel.cpp"
 var $22=HEAP32[(($21)>>2)]; //@line 88 "src/rcqsmodel.cpp"
 var $23=(($22+($20<<2))|0); //@line 88 "src/rcqsmodel.cpp"
 var $24=HEAP32[(($23)>>2)]; //@line 88 "src/rcqsmodel.cpp"
 var $25=(($this+32)|0); //@line 91 "src/rcqsmodel.cpp"
 var $27=$20;var $cf_0=$24;var $count_0=$24;label=6;break; //@line 90 "src/rcqsmodel.cpp"
 case 6: 
 var $count_0;
 var $cf_0;
 var $27; //@line 90 "src/rcqsmodel.cpp"
 var $28=((($27)-(1))|0); //@line 90 "src/rcqsmodel.cpp"
 var $29=($27|0)==0; //@line 90 "src/rcqsmodel.cpp"
 if($29){label=8;break;}else{label=7;break;} //@line 90 "src/rcqsmodel.cpp"
 case 7: 
 var $31=HEAP32[(($25)>>2)]; //@line 91 "src/rcqsmodel.cpp"
 var $32=(($31+($28<<2))|0); //@line 91 "src/rcqsmodel.cpp"
 var $33=HEAP32[(($32)>>2)]; //@line 91 "src/rcqsmodel.cpp"
 var $34=((($cf_0)-($33))|0); //@line 92 "src/rcqsmodel.cpp"
 var $35=HEAP32[(($21)>>2)]; //@line 93 "src/rcqsmodel.cpp"
 var $36=(($35+($28<<2))|0); //@line 93 "src/rcqsmodel.cpp"
 HEAP32[(($36)>>2)]=$34; //@line 93 "src/rcqsmodel.cpp"
 var $37=$33>>>1; //@line 94 "src/rcqsmodel.cpp"
 var $38=$37|1; //@line 94 "src/rcqsmodel.cpp"
 var $39=((($count_0)-($38))|0); //@line 95 "src/rcqsmodel.cpp"
 var $40=HEAP32[(($25)>>2)]; //@line 96 "src/rcqsmodel.cpp"
 var $41=(($40+($28<<2))|0); //@line 96 "src/rcqsmodel.cpp"
 HEAP32[(($41)>>2)]=$38; //@line 96 "src/rcqsmodel.cpp"
 var $27=$28;var $cf_0=$34;var $count_0=$39;label=6;break; //@line 97 "src/rcqsmodel.cpp"
 case 8: 
 var $43=HEAP32[(($10)>>2)]; //@line 102 "src/rcqsmodel.cpp"
 var $44=(((($count_0>>>0))/(($43>>>0)))&-1); //@line 102 "src/rcqsmodel.cpp"
 var $45=(($this+20)|0); //@line 102 "src/rcqsmodel.cpp"
 HEAP32[(($45)>>2)]=$44; //@line 102 "src/rcqsmodel.cpp"
 var $46=(((($count_0>>>0))%(($43>>>0)))&-1); //@line 103 "src/rcqsmodel.cpp"
 HEAP32[(($1)>>2)]=$46; //@line 103 "src/rcqsmodel.cpp"
 var $47=((($43)-($46))|0); //@line 104 "src/rcqsmodel.cpp"
 var $48=(($this+12)|0); //@line 104 "src/rcqsmodel.cpp"
 HEAP32[(($48)>>2)]=$47; //@line 104 "src/rcqsmodel.cpp"
 var $49=(($this+44)|0); //@line 107 "src/rcqsmodel.cpp"
 var $50=HEAP32[(($49)>>2)]; //@line 107 "src/rcqsmodel.cpp"
 var $51=($50|0)==0; //@line 107 "src/rcqsmodel.cpp"
 if($51){label=15;break;}else{label=9;break;} //@line 107 "src/rcqsmodel.cpp"
 case 9: 
 var $53=(($this+40)|0); //@line 109 "src/rcqsmodel.cpp"
 var $storemerge=128;var $55=$20;label=10;break; //@line 108 "src/rcqsmodel.cpp"
 case 10: 
 var $55; //@line 108 "src/rcqsmodel.cpp"
 var $storemerge;
 var $56=((($55)-(1))|0); //@line 108 "src/rcqsmodel.cpp"
 var $57=($55|0)==0; //@line 108 "src/rcqsmodel.cpp"
 if($57){label=15;break;}else{label=11;break;} //@line 108 "src/rcqsmodel.cpp"
 case 11: 
 var $59=HEAP32[(($21)>>2)]; //@line 109 "src/rcqsmodel.cpp"
 var $60=(($59+($56<<2))|0); //@line 109 "src/rcqsmodel.cpp"
 var $61=HEAP32[(($60)>>2)]; //@line 109 "src/rcqsmodel.cpp"
 var $62=HEAP32[(($53)>>2)]; //@line 109 "src/rcqsmodel.cpp"
 var $63=$61>>>($62>>>0); //@line 109 "src/rcqsmodel.cpp"
 var $storemerge1=$63;label=12;break; //@line 109 "src/rcqsmodel.cpp"
 case 12: 
 var $storemerge1;
 var $65=($storemerge1>>>0)>($storemerge>>>0); //@line 109 "src/rcqsmodel.cpp"
 if($65){label=14;break;}else{label=13;break;} //@line 109 "src/rcqsmodel.cpp"
 case 13: 
 var $67=HEAP32[(($49)>>2)]; //@line 110 "src/rcqsmodel.cpp"
 var $68=(($67+($storemerge1<<2))|0); //@line 110 "src/rcqsmodel.cpp"
 HEAP32[(($68)>>2)]=$56; //@line 110 "src/rcqsmodel.cpp"
 var $69=((($storemerge1)+(1))|0); //@line 109 "src/rcqsmodel.cpp"
 var $storemerge1=$69;label=12;break; //@line 109 "src/rcqsmodel.cpp"
 case 14: 
 var $71=HEAP32[(($21)>>2)]; //@line 108 "src/rcqsmodel.cpp"
 var $72=(($71+($56<<2))|0); //@line 108 "src/rcqsmodel.cpp"
 var $73=HEAP32[(($72)>>2)]; //@line 108 "src/rcqsmodel.cpp"
 var $74=HEAP32[(($53)>>2)]; //@line 108 "src/rcqsmodel.cpp"
 var $75=$73>>>($74>>>0); //@line 108 "src/rcqsmodel.cpp"
 var $storemerge=$75;var $55=$56;label=10;break; //@line 108 "src/rcqsmodel.cpp"
 case 15: 
 return; //@line 111 "src/rcqsmodel.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCqsmodel6decodeERjS0_($this,$l,$r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($l)>>2)]; //@line 51 "src/rcqsmodel.cpp"
 var $2=(($this+40)|0); //@line 51 "src/rcqsmodel.cpp"
 var $3=HEAP32[(($2)>>2)]; //@line 51 "src/rcqsmodel.cpp"
 var $4=$1>>>($3>>>0); //@line 51 "src/rcqsmodel.cpp"
 var $5=(($this+44)|0); //@line 52 "src/rcqsmodel.cpp"
 var $6=HEAP32[(($5)>>2)]; //@line 52 "src/rcqsmodel.cpp"
 var $7=(($6+($4<<2))|0); //@line 52 "src/rcqsmodel.cpp"
 var $8=HEAP32[(($7)>>2)]; //@line 52 "src/rcqsmodel.cpp"
 var $9=((($4)+(1))|0); //@line 53 "src/rcqsmodel.cpp"
 var $10=(($6+($9<<2))|0); //@line 53 "src/rcqsmodel.cpp"
 var $11=HEAP32[(($10)>>2)]; //@line 53 "src/rcqsmodel.cpp"
 var $12=((($11)+(1))|0); //@line 53 "src/rcqsmodel.cpp"
 var $13=(($this+36)|0); //@line undefined "src/rcqsmodel.cpp"
 var $s_0_ph=$8;var $h_0_ph=$12;label=2;break; //@line 56 "src/rcqsmodel.cpp"
 case 2: 
 var $h_0_ph;
 var $s_0_ph;
 var $s_0=$s_0_ph;label=3;break;
 case 3: 
 var $s_0;
 var $15=((($s_0)+(1))|0); //@line 56 "src/rcqsmodel.cpp"
 var $16=($15>>>0)<($h_0_ph>>>0); //@line 56 "src/rcqsmodel.cpp"
 if($16){label=4;break;}else{label=5;break;} //@line 56 "src/rcqsmodel.cpp"
 case 4: 
 var $18=((($s_0)+($h_0_ph))|0); //@line 57 "src/rcqsmodel.cpp"
 var $19=$18>>>1; //@line 57 "src/rcqsmodel.cpp"
 var $20=HEAP32[(($13)>>2)]; //@line undefined "src/rcqsmodel.cpp"
 var $21=(($20+($19<<2))|0); //@line undefined "src/rcqsmodel.cpp"
 var $22=HEAP32[(($21)>>2)]; //@line undefined "src/rcqsmodel.cpp"
 var $23=($1>>>0)<($22>>>0); //@line undefined "src/rcqsmodel.cpp"
 if($23){var $s_0_ph=$s_0;var $h_0_ph=$19;label=2;break;}else{var $s_0=$19;label=3;break;} //@line undefined "src/rcqsmodel.cpp"
 case 5: 
 var $25=HEAP32[(($13)>>2)]; //@line 64 "src/rcqsmodel.cpp"
 var $26=(($25+($s_0<<2))|0); //@line 64 "src/rcqsmodel.cpp"
 var $27=HEAP32[(($26)>>2)]; //@line 64 "src/rcqsmodel.cpp"
 HEAP32[(($l)>>2)]=$27; //@line 64 "src/rcqsmodel.cpp"
 var $28=HEAP32[(($13)>>2)]; //@line 65 "src/rcqsmodel.cpp"
 var $29=(($28+($15<<2))|0); //@line 65 "src/rcqsmodel.cpp"
 var $30=HEAP32[(($29)>>2)]; //@line 65 "src/rcqsmodel.cpp"
 var $31=((($30)-($27))|0); //@line 65 "src/rcqsmodel.cpp"
 HEAP32[(($r)>>2)]=$31; //@line 65 "src/rcqsmodel.cpp"
 var $32=(($this+12)|0); //@line 116 "src/rcqsmodel.cpp"
 var $33=HEAP32[(($32)>>2)]; //@line 116 "src/rcqsmodel.cpp"
 var $34=($33|0)==0; //@line 116 "src/rcqsmodel.cpp"
 if($34){label=6;break;}else{var $36=$33;label=7;break;} //@line 116 "src/rcqsmodel.cpp"
 case 6: 
 __ZN9RCqsmodel6updateEv($this); //@line 117 "src/rcqsmodel.cpp"
 var $_pre=HEAP32[(($32)>>2)]; //@line 118 "src/rcqsmodel.cpp"
 var $36=$_pre;label=7;break; //@line 117 "src/rcqsmodel.cpp"
 case 7: 
 var $36;
 var $37=((($36)-(1))|0); //@line 118 "src/rcqsmodel.cpp"
 HEAP32[(($32)>>2)]=$37; //@line 118 "src/rcqsmodel.cpp"
 var $38=(($this+20)|0); //@line 119 "src/rcqsmodel.cpp"
 var $39=HEAP32[(($38)>>2)]; //@line 119 "src/rcqsmodel.cpp"
 var $40=(($this+32)|0); //@line 119 "src/rcqsmodel.cpp"
 var $41=HEAP32[(($40)>>2)]; //@line 119 "src/rcqsmodel.cpp"
 var $42=(($41+($s_0<<2))|0); //@line 119 "src/rcqsmodel.cpp"
 var $43=HEAP32[(($42)>>2)]; //@line 119 "src/rcqsmodel.cpp"
 var $44=((($43)+($39))|0); //@line 119 "src/rcqsmodel.cpp"
 HEAP32[(($42)>>2)]=$44; //@line 119 "src/rcqsmodel.cpp"
 return $s_0; //@line 68 "src/rcqsmodel.cpp"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCqsmodel6encodeEjRjS0_($this,$s,$l,$r){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+36)|0); //@line 4 "inc/rcqsmodel.inl"
 var $2=HEAP32[(($1)>>2)]; //@line 4 "inc/rcqsmodel.inl"
 var $3=(($2+($s<<2))|0); //@line 4 "inc/rcqsmodel.inl"
 var $4=HEAP32[(($3)>>2)]; //@line 4 "inc/rcqsmodel.inl"
 HEAP32[(($l)>>2)]=$4; //@line 4 "inc/rcqsmodel.inl"
 var $5=((($s)+(1))|0); //@line 5 "inc/rcqsmodel.inl"
 var $6=HEAP32[(($1)>>2)]; //@line 5 "inc/rcqsmodel.inl"
 var $7=(($6+($5<<2))|0); //@line 5 "inc/rcqsmodel.inl"
 var $8=HEAP32[(($7)>>2)]; //@line 5 "inc/rcqsmodel.inl"
 var $9=((($8)-($4))|0); //@line 5 "inc/rcqsmodel.inl"
 HEAP32[(($r)>>2)]=$9; //@line 5 "inc/rcqsmodel.inl"
 var $10=(($this+12)|0); //@line 116 "src/rcqsmodel.cpp"
 var $11=HEAP32[(($10)>>2)]; //@line 116 "src/rcqsmodel.cpp"
 var $12=($11|0)==0; //@line 116 "src/rcqsmodel.cpp"
 if($12){label=2;break;}else{var $14=$11;label=3;break;} //@line 116 "src/rcqsmodel.cpp"
 case 2: 
 __ZN9RCqsmodel6updateEv($this); //@line 117 "src/rcqsmodel.cpp"
 var $_pre=HEAP32[(($10)>>2)]; //@line 118 "src/rcqsmodel.cpp"
 var $14=$_pre;label=3;break; //@line 117 "src/rcqsmodel.cpp"
 case 3: 
 var $14;
 var $15=((($14)-(1))|0); //@line 118 "src/rcqsmodel.cpp"
 HEAP32[(($10)>>2)]=$15; //@line 118 "src/rcqsmodel.cpp"
 var $16=(($this+20)|0); //@line 119 "src/rcqsmodel.cpp"
 var $17=HEAP32[(($16)>>2)]; //@line 119 "src/rcqsmodel.cpp"
 var $18=(($this+32)|0); //@line 119 "src/rcqsmodel.cpp"
 var $19=HEAP32[(($18)>>2)]; //@line 119 "src/rcqsmodel.cpp"
 var $20=(($19+($s<<2))|0); //@line 119 "src/rcqsmodel.cpp"
 var $21=HEAP32[(($20)>>2)]; //@line 119 "src/rcqsmodel.cpp"
 var $22=((($21)+($17))|0); //@line 119 "src/rcqsmodel.cpp"
 HEAP32[(($20)>>2)]=$22; //@line 119 "src/rcqsmodel.cpp"
 return; //@line 7 "inc/rcqsmodel.inl"
  default: assert(0, "bad label: " + label);
 }

}


function __ZN9RCqsmodel9normalizeERj($this,$r){
 var label=0;


 var $1=(($this+8)|0); //@line 11 "inc/rcqsmodel.inl"
 var $2=HEAP32[(($1)>>2)]; //@line 11 "inc/rcqsmodel.inl"
 var $3=HEAP32[(($r)>>2)]; //@line 11 "inc/rcqsmodel.inl"
 var $4=$3>>>($2>>>0); //@line 11 "inc/rcqsmodel.inl"
 HEAP32[(($r)>>2)]=$4; //@line 11 "inc/rcqsmodel.inl"
 return; //@line 12 "inc/rcqsmodel.inl"
}


function ___getTypeName($ti){
 var label=0;


 var $1=(($ti+4)|0); //@line 86 "/usr/share/emscripten/system/include/libcxx/typeinfo"
 var $2=HEAP32[(($1)>>2)]; //@line 86 "/usr/share/emscripten/system/include/libcxx/typeinfo"
 var $3=_strdup($2); //@line 34 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 return $3; //@line 34 "/usr/share/emscripten/system/lib/embind/bind.cpp"
}
Module["___getTypeName"] = ___getTypeName;

function __GLOBAL__I_a18(){
 var label=0;


 __embind_register_void(1360,296); //@line 42 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_bool(1368,304,1,0); //@line 44 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIc,168,-128,127); //@line 46 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIa,112,-128,127); //@line 47 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIh,80,0,255); //@line 48 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIs,72,-32768,32767); //@line 49 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIt,56,0,65535); //@line 50 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIi,32,-2147483648,2147483647); //@line 51 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIj,16,0,-1); //@line 52 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIl,8,-2147483648,2147483647); //@line 53 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_integer(__ZTIm,320,0,-1); //@line 54 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_float(__ZTIf,312); //@line 56 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_float(__ZTId,288); //@line 57 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_string(1480,272); //@line 59 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_std_wstring(1456,4,256); //@line 60 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_emval(1504,240); //@line 61 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 __embind_register_memory_view(1512,216); //@line 62 "/usr/share/emscripten/system/lib/embind/bind.cpp"
 return; //@line 86 "/usr/share/emscripten/system/lib/embind/bind.cpp"
}


function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv123__fundamental_type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv117__class_type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv120__si_class_type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv121__vmi_class_type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv119__pointer_type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0){
 var label=0;


 var $2=(($this)|0);
 var $3=(($thrown_type)|0);
 var $4=($2|0)==($3|0);
 return $4;
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_0=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_0=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,1600);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_0=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 _memset($12, 0, 56)|0;
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_0=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_0=1;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i1=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i1=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i1;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i1)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=($49?$path_below:2);
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 var $80=(($p_0+8)|0);
 var $81=($80>>>0)<($29>>>0);
 if($81){var $p_0=$80;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=HEAP32[(($adjustedPtr)>>2)];
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$3;
 var $4=(($this)|0);
 var $5=(($thrown_type)|0);
 var $6=($4|0)==($5|0);
 var $7=($5|0)==1632;
 var $__i=$6|$7;
 if($__i){var $_0=1;label=12;break;}else{label=2;break;}
 case 2: 
 var $9=($thrown_type|0)==0;
 if($9){var $_0=0;label=12;break;}else{label=3;break;}
 case 3: 
 var $11=$thrown_type;
 var $12=___dynamic_cast($11,1568);
 var $13=($12|0)==0;
 if($13){var $_0=0;label=12;break;}else{label=4;break;}
 case 4: 
 var $15=(($12+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19^-1;
 var $21=$17&$20;
 var $22=($21|0)==0;
 if($22){label=5;break;}else{var $_0=0;label=12;break;}
 case 5: 
 var $24=(($this+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25)|0);
 var $27=(($12+12)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=($25|0)==($29|0);
 var $31=($26|0)==1360;
 var $or_cond=$30|$31;
 if($or_cond){var $_0=1;label=12;break;}else{label=6;break;}
 case 6: 
 var $33=($25|0)==0;
 if($33){var $_0=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $35=$25;
 var $36=___dynamic_cast($35,1600);
 var $37=$36;
 var $38=($36|0)==0;
 if($38){var $_0=0;label=12;break;}else{label=8;break;}
 case 8: 
 var $40=HEAP32[(($28)>>2)];
 var $41=($40|0)==0;
 if($41){var $_0=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 var $44=___dynamic_cast($43,1600);
 var $45=$44;
 var $46=($44|0)==0;
 if($46){var $_0=0;label=12;break;}else{label=10;break;}
 case 10: 
 var $48=$info;
 _memset($48, 0, 56)|0;
 var $49=(($info)|0);
 HEAP32[(($49)>>2)]=$45;
 var $50=(($info+8)|0);
 HEAP32[(($50)>>2)]=$37;
 var $51=(($info+12)|0);
 HEAP32[(($51)>>2)]=-1;
 var $52=(($info+48)|0);
 HEAP32[(($52)>>2)]=1;
 var $53=$44;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+28)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$56]($45,$info,$57,1);
 var $58=(($info+24)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==1;
 if($60){label=11;break;}else{var $_0=0;label=12;break;}
 case 11: 
 var $62=(($info+16)|0);
 var $63=HEAP32[(($62)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$63;
 var $_0=1;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___dynamic_cast($static_ptr,$dst_type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=(($info)|0);
 HEAP32[(($10)>>2)]=$dst_type;
 var $11=(($info+4)|0);
 HEAP32[(($11)>>2)]=$static_ptr;
 var $12=(($info+8)|0);
 HEAP32[(($12)>>2)]=1616;
 var $13=(($info+12)|0);
 var $14=(($info+16)|0);
 var $15=(($info+20)|0);
 var $16=(($info+24)|0);
 var $17=(($info+28)|0);
 var $18=(($info+32)|0);
 var $19=(($info+40)|0);
 var $20=$8;
 var $21=(($dst_type)|0);
 var $22=($20|0)==($21|0);
 var $23=$13;
 _memset($23, 0, 43)|0;
 if($22){label=2;break;}else{label=3;break;}
 case 2: 
 var $25=(($info+48)|0);
 HEAP32[(($25)>>2)]=1;
 var $26=$8;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+20)|0);
 var $29=HEAP32[(($28)>>2)];
 FUNCTION_TABLE[$29]($9,$info,$6,$6,1,0);
 var $30=HEAP32[(($16)>>2)];
 var $31=($30|0)==1;
 var $_=($31?$6:0);
 STACKTOP=sp;return $_;
 case 3: 
 var $33=(($info+36)|0);
 var $34=$8;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+24)|0);
 var $37=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$37]($9,$info,$6,1,0);
 var $38=HEAP32[(($33)>>2)];
 if(($38|0)==0){ label=4;break;}else if(($38|0)==1){ label=5;break;}else{var $dst_ptr_0=0;label=8;break;}
 case 4: 
 var $40=HEAP32[(($19)>>2)];
 var $41=($40|0)==1;
 var $42=HEAP32[(($17)>>2)];
 var $43=($42|0)==1;
 var $or_cond=$41&$43;
 var $44=HEAP32[(($18)>>2)];
 var $45=($44|0)==1;
 var $or_cond3=$or_cond&$45;
 var $46=HEAP32[(($15)>>2)];
 var $_8=($or_cond3?$46:0);
 STACKTOP=sp;return $_8;
 case 5: 
 var $48=HEAP32[(($16)>>2)];
 var $49=($48|0)==1;
 if($49){label=7;break;}else{label=6;break;}
 case 6: 
 var $51=HEAP32[(($19)>>2)];
 var $52=($51|0)==0;
 var $53=HEAP32[(($17)>>2)];
 var $54=($53|0)==1;
 var $or_cond5=$52&$54;
 var $55=HEAP32[(($18)>>2)];
 var $56=($55|0)==1;
 var $or_cond7=$or_cond5&$56;
 if($or_cond7){label=7;break;}else{var $dst_ptr_0=0;label=8;break;}
 case 7: 
 var $58=HEAP32[(($14)>>2)];
 var $dst_ptr_0=$58;label=8;break;
 case 8: 
 var $dst_ptr_0;
 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off030=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off019=0;var $p_020=$42;var $is_dst_type_derived_from_static_type_0_off021=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off021;
 var $p_020;
 var $does_dst_type_point_to_our_static_type_0_off019;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_020+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i13=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i13=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i13;
 var $60=(($p_020)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i13)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}
 case 16: 
 var $74=HEAP8[($44)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}else{label=17;break;}
 case 17: 
 var $78=HEAP8[($43)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=20;break;}else{label=18;break;}
 case 18: 
 var $82=HEAP32[(($47)>>2)];
 var $83=($82|0)==1;
 if($83){label=27;break;}else{label=19;break;}
 case 19: 
 var $85=HEAP32[(($46)>>2)];
 var $86=$85&2;
 var $87=($86|0)==0;
 if($87){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $89=HEAP32[(($46)>>2)];
 var $90=$89&1;
 var $91=($90|0)==0;
 if($91){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $93=(($p_020+8)|0);
 var $94=($93>>>0)<($40>>>0);
 if($94){var $does_dst_type_point_to_our_static_type_0_off019=$does_dst_type_point_to_our_static_type_1_off0;var $p_020=$93;var $is_dst_type_derived_from_static_type_0_off021=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off030=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off030;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $95=(($info+40)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)+(1))|0);
 HEAP32[(($95)>>2)]=$97;
 var $98=(($info+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==1;
 if($100){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 24: 
 var $102=(($info+24)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==2;
 if($104){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 25: 
 var $106=(($info+54)|0);
 HEAP8[($106)]=1;
 if($is_dst_type_derived_from_static_type_2_off030){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off031;
 if($is_dst_type_derived_from_static_type_2_off031){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $110=(($this+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($this+16+($111<<3))|0);
 var $113=(($this+20)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114>>8;
 var $116=$114&1;
 var $117=($116|0)==0;
 if($117){var $offset_to_base_0_i14=$115;label=31;break;}else{label=30;break;}
 case 30: 
 var $119=$current_ptr;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+$115)|0);
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $offset_to_base_0_i14=$123;label=31;break;
 case 31: 
 var $offset_to_base_0_i14;
 var $124=(($this+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+24)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($current_ptr+$offset_to_base_0_i14)|0);
 var $131=$114&2;
 var $132=($131|0)!=0;
 var $133=($132?$path_below:2);
 FUNCTION_TABLE[$129]($125,$info,$130,$133,$use_strcmp);
 var $134=(($this+24)|0);
 var $135=($111|0)>1;
 if($135){label=32;break;}else{label=53;break;}
 case 32: 
 var $137=(($this+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&2;
 var $140=($139|0)==0;
 if($140){label=33;break;}else{label=34;break;}
 case 33: 
 var $142=(($info+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==1;
 if($144){label=34;break;}else{label=39;break;}
 case 34: 
 var $145=(($info+54)|0);
 var $146=$current_ptr;
 var $p2_0=$134;label=35;break;
 case 35: 
 var $p2_0;
 var $148=HEAP8[($145)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=36;break;}else{label=53;break;}
 case 36: 
 var $152=(($p2_0+4)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153>>8;
 var $155=$153&1;
 var $156=($155|0)==0;
 if($156){var $offset_to_base_0_i11=$154;label=38;break;}else{label=37;break;}
 case 37: 
 var $158=HEAP32[(($146)>>2)];
 var $159=(($158+$154)|0);
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $offset_to_base_0_i11=$161;label=38;break;
 case 38: 
 var $offset_to_base_0_i11;
 var $162=(($p2_0)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+24)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($current_ptr+$offset_to_base_0_i11)|0);
 var $169=$153&2;
 var $170=($169|0)!=0;
 var $171=($170?$path_below:2);
 FUNCTION_TABLE[$167]($163,$info,$168,$171,$use_strcmp);
 var $172=(($p2_0+8)|0);
 var $173=($172>>>0)<($112>>>0);
 if($173){var $p2_0=$172;label=35;break;}else{label=53;break;}
 case 39: 
 var $175=$138&1;
 var $176=($175|0)==0;
 if($176){label=41;break;}else{label=40;break;}
 case 40: 
 var $177=(($info+24)|0);
 var $178=(($info+54)|0);
 var $179=$current_ptr;
 var $p2_1=$134;label=42;break;
 case 41: 
 var $180=(($info+54)|0);
 var $181=$current_ptr;
 var $p2_2=$134;label=48;break;
 case 42: 
 var $p2_1;
 var $183=HEAP8[($178)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=43;break;}else{label=53;break;}
 case 43: 
 var $187=HEAP32[(($142)>>2)];
 var $188=($187|0)==1;
 if($188){label=44;break;}else{label=45;break;}
 case 44: 
 var $190=HEAP32[(($177)>>2)];
 var $191=($190|0)==1;
 if($191){label=53;break;}else{label=45;break;}
 case 45: 
 var $193=(($p2_1+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$194>>8;
 var $196=$194&1;
 var $197=($196|0)==0;
 if($197){var $offset_to_base_0_i9=$195;label=47;break;}else{label=46;break;}
 case 46: 
 var $199=HEAP32[(($179)>>2)];
 var $200=(($199+$195)|0);
 var $201=$200;
 var $202=HEAP32[(($201)>>2)];
 var $offset_to_base_0_i9=$202;label=47;break;
 case 47: 
 var $offset_to_base_0_i9;
 var $203=(($p2_1)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=$204;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+24)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($current_ptr+$offset_to_base_0_i9)|0);
 var $210=$194&2;
 var $211=($210|0)!=0;
 var $212=($211?$path_below:2);
 FUNCTION_TABLE[$208]($204,$info,$209,$212,$use_strcmp);
 var $213=(($p2_1+8)|0);
 var $214=($213>>>0)<($112>>>0);
 if($214){var $p2_1=$213;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $216=HEAP8[($180)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=49;break;}else{label=53;break;}
 case 49: 
 var $220=HEAP32[(($142)>>2)];
 var $221=($220|0)==1;
 if($221){label=53;break;}else{label=50;break;}
 case 50: 
 var $223=(($p2_2+4)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$224>>8;
 var $226=$224&1;
 var $227=($226|0)==0;
 if($227){var $offset_to_base_0_i=$225;label=52;break;}else{label=51;break;}
 case 51: 
 var $229=HEAP32[(($181)>>2)];
 var $230=(($229+$225)|0);
 var $231=$230;
 var $232=HEAP32[(($231)>>2)];
 var $offset_to_base_0_i=$232;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $233=(($p2_2)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$234;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+24)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($current_ptr+$offset_to_base_0_i)|0);
 var $240=$224&2;
 var $241=($240|0)!=0;
 var $242=($241?$path_below:2);
 FUNCTION_TABLE[$238]($234,$info,$239,$242,$use_strcmp);
 var $243=(($p2_2+8)|0);
 var $244=($243>>>0)<($112>>>0);
 if($244){var $p2_2=$243;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $is_dst_type_derived_from_static_type_0_off01=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $50=HEAP8[($38)];
 var $51=$50&1;
 var $not_=(($51<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off01=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off01;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $52=(($info+40)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)+(1))|0);
 HEAP32[(($52)>>2)]=$54;
 var $55=(($info+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==1;
 if($57){label=14;break;}else{label=16;break;}
 case 14: 
 var $59=(($info+24)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==2;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=(($info+54)|0);
 HEAP8[($63)]=1;
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $67=(($this+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+24)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($68,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=$47&1;
 var $49=(($info+53)|0);
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=(($this+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($this+16+($53<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $55=(($this+20)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56>>8;
 var $58=$56&1;
 var $59=($58|0)==0;
 if($59){var $offset_to_base_0_i1=$57;label=14;break;}else{label=13;break;}
 case 13: 
 var $61=$current_ptr;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+$57)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i1=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i1;
 var $66=(($this+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($current_ptr+$offset_to_base_0_i1)|0);
 var $73=$56&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$dst_ptr,$72,$75,$use_strcmp);
 var $76=($53|0)>1;
 if($76){label=15;break;}else{label=25;break;}
 case 15: 
 var $77=(($this+24)|0);
 var $78=(($info+24)|0);
 var $79=(($this+8)|0);
 var $80=(($info+54)|0);
 var $81=$current_ptr;
 var $p_0=$77;label=16;break;
 case 16: 
 var $p_0;
 var $83=HEAP8[($80)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=17;break;}else{label=25;break;}
 case 17: 
 var $87=HEAP8[($46)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=20;break;}else{label=18;break;}
 case 18: 
 var $91=HEAP32[(($78)>>2)];
 var $92=($91|0)==1;
 if($92){label=25;break;}else{label=19;break;}
 case 19: 
 var $94=HEAP32[(($79)>>2)];
 var $95=$94&2;
 var $96=($95|0)==0;
 if($96){label=25;break;}else{label=22;break;}
 case 20: 
 var $98=HEAP8[($49)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=22;break;}else{label=21;break;}
 case 21: 
 var $102=HEAP32[(($79)>>2)];
 var $103=$102&1;
 var $104=($103|0)==0;
 if($104){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $106=(($p_0+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$107>>8;
 var $109=$107&1;
 var $110=($109|0)==0;
 if($110){var $offset_to_base_0_i=$108;label=24;break;}else{label=23;break;}
 case 23: 
 var $112=HEAP32[(($81)>>2)];
 var $113=(($112+$108)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $offset_to_base_0_i=$115;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $116=(($p_0)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+20)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($current_ptr+$offset_to_base_0_i)|0);
 var $123=$107&2;
 var $124=($123|0)!=0;
 var $125=($124?$path_below:2);
 FUNCTION_TABLE[$121]($117,$info,$dst_ptr,$122,$125,$use_strcmp);
 var $126=(($p_0+8)|0);
 var $127=($126>>>0)<($54>>>0);
 if($127){var $p_0=$126;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$48;
 HEAP8[($49)]=$51;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond1_i=$34&$35;
 if($or_cond1_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((1728)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((1768+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((1768+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((1728)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((1744)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((1736)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((1768+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((1768+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((1728)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((1744)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum67=$8|4;
 var $113=(($109+$_sum67)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((1736)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((1748)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((1768+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((1728)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((1728)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre=((1768+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((1768+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((1744)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((1736)>>2)]=$106;
 HEAP32[((1748)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((1732)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((2032+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((1744)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((2032+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((1732)>>2)];
 var $252=$251&$250;
 HEAP32[((1732)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((1744)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((1744)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((1744)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((1744)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i41=$8|4;
 var $311=(($192+$_sum_i41)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((1736)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((1748)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((1768+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((1728)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((1728)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((1768+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((1768+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((1744)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((1736)>>2)]=$rsize_0_i;
 HEAP32[((1748)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $mem_0=$343;label=341;break;
 case 78: 
 var $345=($bytes>>>0)>4294967231;
 if($345){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $347=((($bytes)+(11))|0);
 var $348=$347&-8;
 var $349=HEAP32[((1732)>>2)];
 var $350=($349|0)==0;
 if($350){var $nb_0=$348;label=160;break;}else{label=80;break;}
 case 80: 
 var $352=(((-$348))|0);
 var $353=$347>>>8;
 var $354=($353|0)==0;
 if($354){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $356=($348>>>0)>16777215;
 if($356){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $358=((($353)+(1048320))|0);
 var $359=$358>>>16;
 var $360=$359&8;
 var $361=$353<<$360;
 var $362=((($361)+(520192))|0);
 var $363=$362>>>16;
 var $364=$363&4;
 var $365=$364|$360;
 var $366=$361<<$364;
 var $367=((($366)+(245760))|0);
 var $368=$367>>>16;
 var $369=$368&2;
 var $370=$365|$369;
 var $371=(((14)-($370))|0);
 var $372=$366<<$369;
 var $373=$372>>>15;
 var $374=((($371)+($373))|0);
 var $375=$374<<1;
 var $376=((($374)+(7))|0);
 var $377=$348>>>($376>>>0);
 var $378=$377&1;
 var $379=$378|$375;
 var $idx_0_i=$379;label=83;break;
 case 83: 
 var $idx_0_i;
 var $381=((2032+($idx_0_i<<2))|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=($382|0)==0;
 if($383){var $v_2_i=0;var $rsize_2_i=$352;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $385=($idx_0_i|0)==31;
 if($385){var $390=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $387=$idx_0_i>>>1;
 var $388=(((25)-($387))|0);
 var $390=$388;label=86;break;
 case 86: 
 var $390;
 var $391=$348<<$390;
 var $v_0_i18=0;var $rsize_0_i17=$352;var $t_0_i16=$382;var $sizebits_0_i=$391;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $393=(($t_0_i16+4)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=$394&-8;
 var $396=((($395)-($348))|0);
 var $397=($396>>>0)<($rsize_0_i17>>>0);
 if($397){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $399=($395|0)==($348|0);
 if($399){var $v_2_i=$t_0_i16;var $rsize_2_i=$396;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$396;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $401=(($t_0_i16+20)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=$sizebits_0_i>>>31;
 var $404=(($t_0_i16+16+($403<<2))|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=($402|0)==0;
 var $407=($402|0)==($405|0);
 var $or_cond21_i=$406|$407;
 var $rst_1_i=($or_cond21_i?$rst_0_i:$402);
 var $408=($405|0)==0;
 var $409=$sizebits_0_i<<1;
 if($408){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$405;var $sizebits_0_i=$409;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $410=($t_1_i|0)==0;
 var $411=($v_2_i|0)==0;
 var $or_cond_i=$410&$411;
 if($or_cond_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $413=2<<$idx_0_i;
 var $414=(((-$413))|0);
 var $415=$413|$414;
 var $416=$349&$415;
 var $417=($416|0)==0;
 if($417){var $nb_0=$348;label=160;break;}else{label=92;break;}
 case 92: 
 var $419=(((-$416))|0);
 var $420=$416&$419;
 var $421=((($420)-(1))|0);
 var $422=$421>>>12;
 var $423=$422&16;
 var $424=$421>>>($423>>>0);
 var $425=$424>>>5;
 var $426=$425&8;
 var $427=$426|$423;
 var $428=$424>>>($426>>>0);
 var $429=$428>>>2;
 var $430=$429&4;
 var $431=$427|$430;
 var $432=$428>>>($430>>>0);
 var $433=$432>>>1;
 var $434=$433&2;
 var $435=$431|$434;
 var $436=$432>>>($434>>>0);
 var $437=$436>>>1;
 var $438=$437&1;
 var $439=$435|$438;
 var $440=$436>>>($438>>>0);
 var $441=((($439)+($440))|0);
 var $442=((2032+($441<<2))|0);
 var $443=HEAP32[(($442)>>2)];
 var $t_2_ph_i=$443;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $444=($t_2_ph_i|0)==0;
 if($444){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_232_i=$t_2_ph_i;var $rsize_333_i=$rsize_2_i;var $v_334_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_334_i;
 var $rsize_333_i;
 var $t_232_i;
 var $445=(($t_232_i+4)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=$446&-8;
 var $448=((($447)-($348))|0);
 var $449=($448>>>0)<($rsize_333_i>>>0);
 var $_rsize_3_i=($449?$448:$rsize_333_i);
 var $t_2_v_3_i=($449?$t_232_i:$v_334_i);
 var $450=(($t_232_i+16)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=($451|0)==0;
 if($452){label=95;break;}else{var $t_232_i=$451;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $453=(($t_232_i+20)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=($454|0)==0;
 if($455){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_232_i=$454;var $rsize_333_i=$_rsize_3_i;var $v_334_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $456=($v_3_lcssa_i|0)==0;
 if($456){var $nb_0=$348;label=160;break;}else{label=97;break;}
 case 97: 
 var $458=HEAP32[((1736)>>2)];
 var $459=((($458)-($348))|0);
 var $460=($rsize_3_lcssa_i>>>0)<($459>>>0);
 if($460){label=98;break;}else{var $nb_0=$348;label=160;break;}
 case 98: 
 var $462=$v_3_lcssa_i;
 var $463=HEAP32[((1744)>>2)];
 var $464=($462>>>0)<($463>>>0);
 if($464){label=158;break;}else{label=99;break;}
 case 99: 
 var $466=(($462+$348)|0);
 var $467=$466;
 var $468=($462>>>0)<($466>>>0);
 if($468){label=100;break;}else{label=158;break;}
 case 100: 
 var $470=(($v_3_lcssa_i+24)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=(($v_3_lcssa_i+12)|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($473|0)==($v_3_lcssa_i|0);
 if($474){label=106;break;}else{label=101;break;}
 case 101: 
 var $476=(($v_3_lcssa_i+8)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=$477;
 var $479=($478>>>0)<($463>>>0);
 if($479){label=105;break;}else{label=102;break;}
 case 102: 
 var $481=(($477+12)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=($482|0)==($v_3_lcssa_i|0);
 if($483){label=103;break;}else{label=105;break;}
 case 103: 
 var $485=(($473+8)|0);
 var $486=HEAP32[(($485)>>2)];
 var $487=($486|0)==($v_3_lcssa_i|0);
 if($487){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($481)>>2)]=$473;
 HEAP32[(($485)>>2)]=$477;
 var $R_1_i22=$473;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $490=(($v_3_lcssa_i+20)|0);
 var $491=HEAP32[(($490)>>2)];
 var $492=($491|0)==0;
 if($492){label=107;break;}else{var $R_0_i20=$491;var $RP_0_i19=$490;label=108;break;}
 case 107: 
 var $494=(($v_3_lcssa_i+16)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=($495|0)==0;
 if($496){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$495;var $RP_0_i19=$494;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $497=(($R_0_i20+20)|0);
 var $498=HEAP32[(($497)>>2)];
 var $499=($498|0)==0;
 if($499){label=109;break;}else{var $R_0_i20=$498;var $RP_0_i19=$497;label=108;break;}
 case 109: 
 var $501=(($R_0_i20+16)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=($502|0)==0;
 if($503){label=110;break;}else{var $R_0_i20=$502;var $RP_0_i19=$501;label=108;break;}
 case 110: 
 var $505=$RP_0_i19;
 var $506=($505>>>0)<($463>>>0);
 if($506){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $510=($471|0)==0;
 if($510){label=133;break;}else{label=114;break;}
 case 114: 
 var $512=(($v_3_lcssa_i+28)|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=((2032+($513<<2))|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=($v_3_lcssa_i|0)==($515|0);
 if($516){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($514)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $518=HEAP32[(($512)>>2)];
 var $519=1<<$518;
 var $520=$519^-1;
 var $521=HEAP32[((1732)>>2)];
 var $522=$521&$520;
 HEAP32[((1732)>>2)]=$522;
 label=133;break;
 case 117: 
 var $524=$471;
 var $525=HEAP32[((1744)>>2)];
 var $526=($524>>>0)<($525>>>0);
 if($526){label=121;break;}else{label=118;break;}
 case 118: 
 var $528=(($471+16)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=($529|0)==($v_3_lcssa_i|0);
 if($530){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($528)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $533=(($471+20)|0);
 HEAP32[(($533)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $536=($R_1_i22|0)==0;
 if($536){label=133;break;}else{label=123;break;}
 case 123: 
 var $538=$R_1_i22;
 var $539=HEAP32[((1744)>>2)];
 var $540=($538>>>0)<($539>>>0);
 if($540){label=132;break;}else{label=124;break;}
 case 124: 
 var $542=(($R_1_i22+24)|0);
 HEAP32[(($542)>>2)]=$471;
 var $543=(($v_3_lcssa_i+16)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=($544|0)==0;
 if($545){label=128;break;}else{label=125;break;}
 case 125: 
 var $547=$544;
 var $548=HEAP32[((1744)>>2)];
 var $549=($547>>>0)<($548>>>0);
 if($549){label=127;break;}else{label=126;break;}
 case 126: 
 var $551=(($R_1_i22+16)|0);
 HEAP32[(($551)>>2)]=$544;
 var $552=(($544+24)|0);
 HEAP32[(($552)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $555=(($v_3_lcssa_i+20)|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=($556|0)==0;
 if($557){label=133;break;}else{label=129;break;}
 case 129: 
 var $559=$556;
 var $560=HEAP32[((1744)>>2)];
 var $561=($559>>>0)<($560>>>0);
 if($561){label=131;break;}else{label=130;break;}
 case 130: 
 var $563=(($R_1_i22+20)|0);
 HEAP32[(($563)>>2)]=$556;
 var $564=(($556+24)|0);
 HEAP32[(($564)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $568=($rsize_3_lcssa_i>>>0)<16;
 if($568){label=134;break;}else{label=135;break;}
 case 134: 
 var $570=((($rsize_3_lcssa_i)+($348))|0);
 var $571=$570|3;
 var $572=(($v_3_lcssa_i+4)|0);
 HEAP32[(($572)>>2)]=$571;
 var $_sum19_i=((($570)+(4))|0);
 var $573=(($462+$_sum19_i)|0);
 var $574=$573;
 var $575=HEAP32[(($574)>>2)];
 var $576=$575|1;
 HEAP32[(($574)>>2)]=$576;
 label=159;break;
 case 135: 
 var $578=$348|3;
 var $579=(($v_3_lcssa_i+4)|0);
 HEAP32[(($579)>>2)]=$578;
 var $580=$rsize_3_lcssa_i|1;
 var $_sum_i2540=$348|4;
 var $581=(($462+$_sum_i2540)|0);
 var $582=$581;
 HEAP32[(($582)>>2)]=$580;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
 var $583=(($462+$_sum1_i26)|0);
 var $584=$583;
 HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
 var $585=$rsize_3_lcssa_i>>>3;
 var $586=($rsize_3_lcssa_i>>>0)<256;
 if($586){label=136;break;}else{label=141;break;}
 case 136: 
 var $588=$585<<1;
 var $589=((1768+($588<<2))|0);
 var $590=$589;
 var $591=HEAP32[((1728)>>2)];
 var $592=1<<$585;
 var $593=$591&$592;
 var $594=($593|0)==0;
 if($594){label=137;break;}else{label=138;break;}
 case 137: 
 var $596=$591|$592;
 HEAP32[((1728)>>2)]=$596;
 var $_sum15_pre_i=((($588)+(2))|0);
 var $_pre_i27=((1768+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$590;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($588)+(2))|0);
 var $598=((1768+($_sum18_i<<2))|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=$599;
 var $601=HEAP32[((1744)>>2)];
 var $602=($600>>>0)<($601>>>0);
 if($602){label=139;break;}else{var $F5_0_i=$599;var $_pre_phi_i28=$598;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$467;
 var $605=(($F5_0_i+12)|0);
 HEAP32[(($605)>>2)]=$467;
 var $_sum16_i=((($348)+(8))|0);
 var $606=(($462+$_sum16_i)|0);
 var $607=$606;
 HEAP32[(($607)>>2)]=$F5_0_i;
 var $_sum17_i=((($348)+(12))|0);
 var $608=(($462+$_sum17_i)|0);
 var $609=$608;
 HEAP32[(($609)>>2)]=$590;
 label=159;break;
 case 141: 
 var $611=$466;
 var $612=$rsize_3_lcssa_i>>>8;
 var $613=($612|0)==0;
 if($613){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $615=($rsize_3_lcssa_i>>>0)>16777215;
 if($615){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $617=((($612)+(1048320))|0);
 var $618=$617>>>16;
 var $619=$618&8;
 var $620=$612<<$619;
 var $621=((($620)+(520192))|0);
 var $622=$621>>>16;
 var $623=$622&4;
 var $624=$623|$619;
 var $625=$620<<$623;
 var $626=((($625)+(245760))|0);
 var $627=$626>>>16;
 var $628=$627&2;
 var $629=$624|$628;
 var $630=(((14)-($629))|0);
 var $631=$625<<$628;
 var $632=$631>>>15;
 var $633=((($630)+($632))|0);
 var $634=$633<<1;
 var $635=((($633)+(7))|0);
 var $636=$rsize_3_lcssa_i>>>($635>>>0);
 var $637=$636&1;
 var $638=$637|$634;
 var $I7_0_i=$638;label=144;break;
 case 144: 
 var $I7_0_i;
 var $640=((2032+($I7_0_i<<2))|0);
 var $_sum2_i=((($348)+(28))|0);
 var $641=(($462+$_sum2_i)|0);
 var $642=$641;
 HEAP32[(($642)>>2)]=$I7_0_i;
 var $_sum3_i29=((($348)+(16))|0);
 var $643=(($462+$_sum3_i29)|0);
 var $_sum4_i30=((($348)+(20))|0);
 var $644=(($462+$_sum4_i30)|0);
 var $645=$644;
 HEAP32[(($645)>>2)]=0;
 var $646=$643;
 HEAP32[(($646)>>2)]=0;
 var $647=HEAP32[((1732)>>2)];
 var $648=1<<$I7_0_i;
 var $649=$647&$648;
 var $650=($649|0)==0;
 if($650){label=145;break;}else{label=146;break;}
 case 145: 
 var $652=$647|$648;
 HEAP32[((1732)>>2)]=$652;
 HEAP32[(($640)>>2)]=$611;
 var $653=$640;
 var $_sum5_i=((($348)+(24))|0);
 var $654=(($462+$_sum5_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$653;
 var $_sum6_i=((($348)+(12))|0);
 var $656=(($462+$_sum6_i)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$611;
 var $_sum7_i=((($348)+(8))|0);
 var $658=(($462+$_sum7_i)|0);
 var $659=$658;
 HEAP32[(($659)>>2)]=$611;
 label=159;break;
 case 146: 
 var $661=HEAP32[(($640)>>2)];
 var $662=($I7_0_i|0)==31;
 if($662){var $667=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $664=$I7_0_i>>>1;
 var $665=(((25)-($664))|0);
 var $667=$665;label=148;break;
 case 148: 
 var $667;
 var $668=(($661+4)|0);
 var $669=HEAP32[(($668)>>2)];
 var $670=$669&-8;
 var $671=($670|0)==($rsize_3_lcssa_i|0);
 if($671){var $T_0_lcssa_i=$661;label=155;break;}else{label=149;break;}
 case 149: 
 var $672=$rsize_3_lcssa_i<<$667;
 var $T_028_i=$661;var $K12_029_i=$672;label=151;break;
 case 150: 
 var $674=$K12_029_i<<1;
 var $675=(($682+4)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677=$676&-8;
 var $678=($677|0)==($rsize_3_lcssa_i|0);
 if($678){var $T_0_lcssa_i=$682;label=155;break;}else{var $T_028_i=$682;var $K12_029_i=$674;label=151;break;}
 case 151: 
 var $K12_029_i;
 var $T_028_i;
 var $680=$K12_029_i>>>31;
 var $681=(($T_028_i+16+($680<<2))|0);
 var $682=HEAP32[(($681)>>2)];
 var $683=($682|0)==0;
 if($683){label=152;break;}else{label=150;break;}
 case 152: 
 var $685=$681;
 var $686=HEAP32[((1744)>>2)];
 var $687=($685>>>0)<($686>>>0);
 if($687){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($681)>>2)]=$611;
 var $_sum12_i=((($348)+(24))|0);
 var $689=(($462+$_sum12_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$T_028_i;
 var $_sum13_i=((($348)+(12))|0);
 var $691=(($462+$_sum13_i)|0);
 var $692=$691;
 HEAP32[(($692)>>2)]=$611;
 var $_sum14_i=((($348)+(8))|0);
 var $693=(($462+$_sum14_i)|0);
 var $694=$693;
 HEAP32[(($694)>>2)]=$611;
 label=159;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $696=(($T_0_lcssa_i+8)|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=$T_0_lcssa_i;
 var $699=HEAP32[((1744)>>2)];
 var $700=($698>>>0)>=($699>>>0);
 var $701=$697;
 var $702=($701>>>0)>=($699>>>0);
 var $or_cond26_i=$700&$702;
 if($or_cond26_i){label=156;break;}else{label=157;break;}
 case 156: 
 var $704=(($697+12)|0);
 HEAP32[(($704)>>2)]=$611;
 HEAP32[(($696)>>2)]=$611;
 var $_sum9_i=((($348)+(8))|0);
 var $705=(($462+$_sum9_i)|0);
 var $706=$705;
 HEAP32[(($706)>>2)]=$697;
 var $_sum10_i=((($348)+(12))|0);
 var $707=(($462+$_sum10_i)|0);
 var $708=$707;
 HEAP32[(($708)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($348)+(24))|0);
 var $709=(($462+$_sum11_i)|0);
 var $710=$709;
 HEAP32[(($710)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $712=(($v_3_lcssa_i+8)|0);
 var $713=$712;
 var $mem_0=$713;label=341;break;
 case 160: 
 var $nb_0;
 var $714=HEAP32[((1736)>>2)];
 var $715=($714>>>0)<($nb_0>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 var $717=((($714)-($nb_0))|0);
 var $718=HEAP32[((1748)>>2)];
 var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 var $721=$718;
 var $722=(($721+$nb_0)|0);
 var $723=$722;
 HEAP32[((1748)>>2)]=$723;
 HEAP32[((1736)>>2)]=$717;
 var $724=$717|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $725=(($721+$_sum2)|0);
 var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 var $727=(($721+$714)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 var $729=$nb_0|3;
 var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((1736)>>2)]=0;
 HEAP32[((1748)>>2)]=0;
 var $732=$714|3;
 var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 var $734=$718;
 var $_sum1=((($714)+(4))|0);
 var $735=(($734+$_sum1)|0);
 var $736=$735;
 var $737=HEAP32[(($736)>>2)];
 var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 var $740=(($718+8)|0);
 var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 var $743=HEAP32[((1740)>>2)];
 var $744=($743>>>0)>($nb_0>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 var $746=((($743)-($nb_0))|0);
 HEAP32[((1740)>>2)]=$746;
 var $747=HEAP32[((1752)>>2)];
 var $748=$747;
 var $749=(($748+$nb_0)|0);
 var $750=$749;
 HEAP32[((1752)>>2)]=$750;
 var $751=$746|1;
 var $_sum=((($nb_0)+(4))|0);
 var $752=(($748+$_sum)|0);
 var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 var $754=$nb_0|3;
 var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 var $756=(($747+8)|0);
 var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 var $759=HEAP32[((1696)>>2)];
 var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 var $762=_sysconf(30);
 var $763=((($762)-(1))|0);
 var $764=$763&$762;
 var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((1704)>>2)]=$762;
 HEAP32[((1700)>>2)]=$762;
 HEAP32[((1708)>>2)]=-1;
 HEAP32[((1712)>>2)]=-1;
 HEAP32[((1716)>>2)]=0;
 HEAP32[((2172)>>2)]=0;
 var $767=_time(0);
 var $768=$767&-16;
 var $769=$768^1431655768;
 HEAP32[((1696)>>2)]=$769;
 label=171;break;
 case 171: 
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((1704)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $779=HEAP32[((2168)>>2)];
 var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 var $782=HEAP32[((2160)>>2)];
 var $783=((($782)+($776))|0);
 var $784=($783>>>0)<=($782>>>0);
 var $785=($783>>>0)>($779>>>0);
 var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $787=HEAP32[((2172)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $791=HEAP32[((1752)>>2)];
 var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 var $794=$791;
 var $sp_0_i_i=2176;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $796=(($sp_0_i_i)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 var $800=(($sp_0_i_i+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($797+$801)|0);
 var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 var $805=(($sp_0_i_i+8)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 var $809=_sbrk(0);
 var $810=($809|0)==-1;
 if($810){var $tsize_03141_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $812=$809;
 var $813=HEAP32[((1700)>>2)];
 var $814=((($813)-(1))|0);
 var $815=$814&$812;
 var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 var $818=((($814)+($812))|0);
 var $819=(((-$813))|0);
 var $820=$818&$819;
 var $821=((($776)-($812))|0);
 var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $824=HEAP32[((2160)>>2)];
 var $825=((($824)+($ssize_0_i))|0);
 var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 var $827=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$826&$827;
 if($or_cond_i31){label=185;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 185: 
 var $829=HEAP32[((2168)>>2)];
 var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 var $832=($825>>>0)<=($824>>>0);
 var $833=($825>>>0)>($829>>>0);
 var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_03141_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $835=_sbrk($ssize_0_i);
 var $836=($835|0)==($809|0);
 if($836){var $br_0_i=$809;var $ssize_1_i=$ssize_0_i;label=190;break;}else{var $ssize_129_i=$ssize_0_i;var $br_030_i=$835;label=191;break;}
 case 188: 
 var $838=HEAP32[((1740)>>2)];
 var $839=((($774)-($838))|0);
 var $840=$839&$775;
 var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_03141_i=0;label=197;break;}
 case 189: 
 var $843=_sbrk($840);
 var $844=HEAP32[(($796)>>2)];
 var $845=HEAP32[(($800)>>2)];
 var $846=(($844+$845)|0);
 var $847=($843|0)==($846|0);
 if($847){var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;}else{var $ssize_129_i=$840;var $br_030_i=$843;label=191;break;}
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $849=($br_0_i|0)==-1;
 if($849){var $tsize_03141_i=$ssize_1_i;label=197;break;}else{var $tsize_244_i=$ssize_1_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 191: 
 var $br_030_i;
 var $ssize_129_i;
 var $850=(((-$ssize_129_i))|0);
 var $851=($br_030_i|0)!=-1;
 var $852=($ssize_129_i>>>0)<2147483647;
 var $or_cond5_i=$851&$852;
 var $853=($771>>>0)>($ssize_129_i>>>0);
 var $or_cond4_i=$or_cond5_i&$853;
 if($or_cond4_i){label=192;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 192: 
 var $855=HEAP32[((1704)>>2)];
 var $856=((($773)-($ssize_129_i))|0);
 var $857=((($856)+($855))|0);
 var $858=(((-$855))|0);
 var $859=$857&$858;
 var $860=($859>>>0)<2147483647;
 if($860){label=193;break;}else{var $ssize_2_i=$ssize_129_i;label=196;break;}
 case 193: 
 var $862=_sbrk($859);
 var $863=($862|0)==-1;
 if($863){label=195;break;}else{label=194;break;}
 case 194: 
 var $865=((($859)+($ssize_129_i))|0);
 var $ssize_2_i=$865;label=196;break;
 case 195: 
 var $866=_sbrk($850);
 var $tsize_03141_i=0;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $868=($br_030_i|0)==-1;
 if($868){var $tsize_03141_i=0;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_030_i;label=201;break;}
 case 197: 
 var $tsize_03141_i;
 var $869=HEAP32[((2172)>>2)];
 var $870=$869|4;
 HEAP32[((2172)>>2)]=$870;
 var $tsize_1_i=$tsize_03141_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $872=($776>>>0)<2147483647;
 if($872){label=199;break;}else{label=340;break;}
 case 199: 
 var $874=_sbrk($776);
 var $875=_sbrk(0);
 var $876=($874|0)!=-1;
 var $877=($875|0)!=-1;
 var $or_cond3_i=$876&$877;
 var $878=($874>>>0)<($875>>>0);
 var $or_cond6_i=$or_cond3_i&$878;
 if($or_cond6_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $880=$875;
 var $881=$874;
 var $882=((($880)-($881))|0);
 var $883=((($nb_0)+(40))|0);
 var $884=($882>>>0)>($883>>>0);
 var $_tsize_1_i=($884?$882:$tsize_1_i);
 if($884){var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$874;label=201;break;}else{label=340;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $885=HEAP32[((2160)>>2)];
 var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((2160)>>2)]=$886;
 var $887=HEAP32[((2164)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((2164)>>2)]=$886;
 label=203;break;
 case 203: 
 var $891=HEAP32[((1752)>>2)];
 var $892=($891|0)==0;
 if($892){label=204;break;}else{var $sp_073_i=2176;label=211;break;}
 case 204: 
 var $894=HEAP32[((1744)>>2)];
 var $895=($894|0)==0;
 var $896=($tbase_245_i>>>0)<($894>>>0);
 var $or_cond8_i=$895|$896;
 if($or_cond8_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((1744)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((2176)>>2)]=$tbase_245_i;
 HEAP32[((2180)>>2)]=$tsize_244_i;
 HEAP32[((2188)>>2)]=0;
 var $899=HEAP32[((1696)>>2)];
 HEAP32[((1764)>>2)]=$899;
 HEAP32[((1760)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $901=$i_02_i_i<<1;
 var $902=((1768+($901<<2))|0);
 var $903=$902;
 var $_sum_i_i=((($901)+(3))|0);
 var $904=((1768+($_sum_i_i<<2))|0);
 HEAP32[(($904)>>2)]=$903;
 var $_sum1_i_i=((($901)+(2))|0);
 var $905=((1768+($_sum1_i_i<<2))|0);
 HEAP32[(($905)>>2)]=$903;
 var $906=((($i_02_i_i)+(1))|0);
 var $907=($906>>>0)<32;
 if($907){var $i_02_i_i=$906;label=207;break;}else{label=208;break;}
 case 208: 
 var $908=((($tsize_244_i)-(40))|0);
 var $909=(($tbase_245_i+8)|0);
 var $910=$909;
 var $911=$910&7;
 var $912=($911|0)==0;
 if($912){var $916=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $914=(((-$910))|0);
 var $915=$914&7;
 var $916=$915;label=210;break;
 case 210: 
 var $916;
 var $917=(($tbase_245_i+$916)|0);
 var $918=$917;
 var $919=((($908)-($916))|0);
 HEAP32[((1752)>>2)]=$918;
 HEAP32[((1740)>>2)]=$919;
 var $920=$919|1;
 var $_sum_i12_i=((($916)+(4))|0);
 var $921=(($tbase_245_i+$_sum_i12_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=$920;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $923=(($tbase_245_i+$_sum2_i_i)|0);
 var $924=$923;
 HEAP32[(($924)>>2)]=40;
 var $925=HEAP32[((1712)>>2)];
 HEAP32[((1756)>>2)]=$925;
 label=338;break;
 case 211: 
 var $sp_073_i;
 var $926=(($sp_073_i)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($sp_073_i+4)|0);
 var $929=HEAP32[(($928)>>2)];
 var $930=(($927+$929)|0);
 var $931=($tbase_245_i|0)==($930|0);
 if($931){label=213;break;}else{label=212;break;}
 case 212: 
 var $933=(($sp_073_i+8)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=($934|0)==0;
 if($935){label=218;break;}else{var $sp_073_i=$934;label=211;break;}
 case 213: 
 var $936=(($sp_073_i+12)|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=$937&8;
 var $939=($938|0)==0;
 if($939){label=214;break;}else{label=218;break;}
 case 214: 
 var $941=$891;
 var $942=($941>>>0)>=($927>>>0);
 var $943=($941>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$942&$943;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $945=((($929)+($tsize_244_i))|0);
 HEAP32[(($928)>>2)]=$945;
 var $946=HEAP32[((1752)>>2)];
 var $947=HEAP32[((1740)>>2)];
 var $948=((($947)+($tsize_244_i))|0);
 var $949=$946;
 var $950=(($946+8)|0);
 var $951=$950;
 var $952=$951&7;
 var $953=($952|0)==0;
 if($953){var $957=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $955=(((-$951))|0);
 var $956=$955&7;
 var $957=$956;label=217;break;
 case 217: 
 var $957;
 var $958=(($949+$957)|0);
 var $959=$958;
 var $960=((($948)-($957))|0);
 HEAP32[((1752)>>2)]=$959;
 HEAP32[((1740)>>2)]=$960;
 var $961=$960|1;
 var $_sum_i16_i=((($957)+(4))|0);
 var $962=(($949+$_sum_i16_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=$961;
 var $_sum2_i17_i=((($948)+(4))|0);
 var $964=(($949+$_sum2_i17_i)|0);
 var $965=$964;
 HEAP32[(($965)>>2)]=40;
 var $966=HEAP32[((1712)>>2)];
 HEAP32[((1756)>>2)]=$966;
 label=338;break;
 case 218: 
 var $967=HEAP32[((1744)>>2)];
 var $968=($tbase_245_i>>>0)<($967>>>0);
 if($968){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((1744)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 var $970=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_166_i=2176;label=221;break;
 case 221: 
 var $sp_166_i;
 var $972=(($sp_166_i)|0);
 var $973=HEAP32[(($972)>>2)];
 var $974=($973|0)==($970|0);
 if($974){label=223;break;}else{label=222;break;}
 case 222: 
 var $976=(($sp_166_i+8)|0);
 var $977=HEAP32[(($976)>>2)];
 var $978=($977|0)==0;
 if($978){label=304;break;}else{var $sp_166_i=$977;label=221;break;}
 case 223: 
 var $979=(($sp_166_i+12)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=$980&8;
 var $982=($981|0)==0;
 if($982){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($972)>>2)]=$tbase_245_i;
 var $984=(($sp_166_i+4)|0);
 var $985=HEAP32[(($984)>>2)];
 var $986=((($985)+($tsize_244_i))|0);
 HEAP32[(($984)>>2)]=$986;
 var $987=(($tbase_245_i+8)|0);
 var $988=$987;
 var $989=$988&7;
 var $990=($989|0)==0;
 if($990){var $995=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $992=(((-$988))|0);
 var $993=$992&7;
 var $995=$993;label=226;break;
 case 226: 
 var $995;
 var $996=(($tbase_245_i+$995)|0);
 var $_sum102_i=((($tsize_244_i)+(8))|0);
 var $997=(($tbase_245_i+$_sum102_i)|0);
 var $998=$997;
 var $999=$998&7;
 var $1000=($999|0)==0;
 if($1000){var $1005=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $1002=(((-$998))|0);
 var $1003=$1002&7;
 var $1005=$1003;label=228;break;
 case 228: 
 var $1005;
 var $_sum103_i=((($1005)+($tsize_244_i))|0);
 var $1006=(($tbase_245_i+$_sum103_i)|0);
 var $1007=$1006;
 var $1008=$1006;
 var $1009=$996;
 var $1010=((($1008)-($1009))|0);
 var $_sum_i19_i=((($995)+($nb_0))|0);
 var $1011=(($tbase_245_i+$_sum_i19_i)|0);
 var $1012=$1011;
 var $1013=((($1010)-($nb_0))|0);
 var $1014=$nb_0|3;
 var $_sum1_i20_i=((($995)+(4))|0);
 var $1015=(($tbase_245_i+$_sum1_i20_i)|0);
 var $1016=$1015;
 HEAP32[(($1016)>>2)]=$1014;
 var $1017=HEAP32[((1752)>>2)];
 var $1018=($1007|0)==($1017|0);
 if($1018){label=229;break;}else{label=230;break;}
 case 229: 
 var $1020=HEAP32[((1740)>>2)];
 var $1021=((($1020)+($1013))|0);
 HEAP32[((1740)>>2)]=$1021;
 HEAP32[((1752)>>2)]=$1012;
 var $1022=$1021|1;
 var $_sum46_i_i=((($_sum_i19_i)+(4))|0);
 var $1023=(($tbase_245_i+$_sum46_i_i)|0);
 var $1024=$1023;
 HEAP32[(($1024)>>2)]=$1022;
 label=303;break;
 case 230: 
 var $1026=HEAP32[((1748)>>2)];
 var $1027=($1007|0)==($1026|0);
 if($1027){label=231;break;}else{label=232;break;}
 case 231: 
 var $1029=HEAP32[((1736)>>2)];
 var $1030=((($1029)+($1013))|0);
 HEAP32[((1736)>>2)]=$1030;
 HEAP32[((1748)>>2)]=$1012;
 var $1031=$1030|1;
 var $_sum44_i_i=((($_sum_i19_i)+(4))|0);
 var $1032=(($tbase_245_i+$_sum44_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1031;
 var $_sum45_i_i=((($1030)+($_sum_i19_i))|0);
 var $1034=(($tbase_245_i+$_sum45_i_i)|0);
 var $1035=$1034;
 HEAP32[(($1035)>>2)]=$1030;
 label=303;break;
 case 232: 
 var $_sum2_i21_i=((($tsize_244_i)+(4))|0);
 var $_sum104_i=((($_sum2_i21_i)+($1005))|0);
 var $1037=(($tbase_245_i+$_sum104_i)|0);
 var $1038=$1037;
 var $1039=HEAP32[(($1038)>>2)];
 var $1040=$1039&3;
 var $1041=($1040|0)==1;
 if($1041){label=233;break;}else{var $oldfirst_0_i_i=$1007;var $qsize_0_i_i=$1013;label=280;break;}
 case 233: 
 var $1043=$1039&-8;
 var $1044=$1039>>>3;
 var $1045=($1039>>>0)<256;
 if($1045){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1005|8;
 var $_sum114_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1047=(($tbase_245_i+$_sum114_i)|0);
 var $1048=$1047;
 var $1049=HEAP32[(($1048)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum115_i=((($_sum41_i_i)+($1005))|0);
 var $1050=(($tbase_245_i+$_sum115_i)|0);
 var $1051=$1050;
 var $1052=HEAP32[(($1051)>>2)];
 var $1053=$1044<<1;
 var $1054=((1768+($1053<<2))|0);
 var $1055=$1054;
 var $1056=($1049|0)==($1055|0);
 if($1056){label=237;break;}else{label=235;break;}
 case 235: 
 var $1058=$1049;
 var $1059=HEAP32[((1744)>>2)];
 var $1060=($1058>>>0)<($1059>>>0);
 if($1060){label=245;break;}else{label=236;break;}
 case 236: 
 var $1062=(($1049+12)|0);
 var $1063=HEAP32[(($1062)>>2)];
 var $1064=($1063|0)==($1007|0);
 if($1064){label=237;break;}else{label=245;break;}
 case 237: 
 var $1065=($1052|0)==($1049|0);
 if($1065){label=238;break;}else{label=239;break;}
 case 238: 
 var $1067=1<<$1044;
 var $1068=$1067^-1;
 var $1069=HEAP32[((1728)>>2)];
 var $1070=$1069&$1068;
 HEAP32[((1728)>>2)]=$1070;
 label=279;break;
 case 239: 
 var $1072=($1052|0)==($1055|0);
 if($1072){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre62_i_i=(($1052+8)|0);
 var $_pre_phi63_i_i=$_pre62_i_i;label=243;break;
 case 241: 
 var $1074=$1052;
 var $1075=HEAP32[((1744)>>2)];
 var $1076=($1074>>>0)<($1075>>>0);
 if($1076){label=244;break;}else{label=242;break;}
 case 242: 
 var $1078=(($1052+8)|0);
 var $1079=HEAP32[(($1078)>>2)];
 var $1080=($1079|0)==($1007|0);
 if($1080){var $_pre_phi63_i_i=$1078;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi63_i_i;
 var $1081=(($1049+12)|0);
 HEAP32[(($1081)>>2)]=$1052;
 HEAP32[(($_pre_phi63_i_i)>>2)]=$1049;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1083=$1006;
 var $_sum34_i_i=$1005|24;
 var $_sum105_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1084=(($tbase_245_i+$_sum105_i)|0);
 var $1085=$1084;
 var $1086=HEAP32[(($1085)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum5_i_i)+($1005))|0);
 var $1087=(($tbase_245_i+$_sum106_i)|0);
 var $1088=$1087;
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=($1089|0)==($1083|0);
 if($1090){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1005|8;
 var $_sum107_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1092=(($tbase_245_i+$_sum107_i)|0);
 var $1093=$1092;
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=$1094;
 var $1096=HEAP32[((1744)>>2)];
 var $1097=($1095>>>0)<($1096>>>0);
 if($1097){label=251;break;}else{label=248;break;}
 case 248: 
 var $1099=(($1094+12)|0);
 var $1100=HEAP32[(($1099)>>2)];
 var $1101=($1100|0)==($1083|0);
 if($1101){label=249;break;}else{label=251;break;}
 case 249: 
 var $1103=(($1089+8)|0);
 var $1104=HEAP32[(($1103)>>2)];
 var $1105=($1104|0)==($1083|0);
 if($1105){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1099)>>2)]=$1089;
 HEAP32[(($1103)>>2)]=$1094;
 var $R_1_i_i=$1089;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1005|16;
 var $_sum112_i=((($_sum2_i21_i)+($_sum67_i_i))|0);
 var $1108=(($tbase_245_i+$_sum112_i)|0);
 var $1109=$1108;
 var $1110=HEAP32[(($1109)>>2)];
 var $1111=($1110|0)==0;
 if($1111){label=253;break;}else{var $R_0_i_i=$1110;var $RP_0_i_i=$1109;label=254;break;}
 case 253: 
 var $_sum113_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1113=(($tbase_245_i+$_sum113_i)|0);
 var $1114=$1113;
 var $1115=HEAP32[(($1114)>>2)];
 var $1116=($1115|0)==0;
 if($1116){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1115;var $RP_0_i_i=$1114;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1117=(($R_0_i_i+20)|0);
 var $1118=HEAP32[(($1117)>>2)];
 var $1119=($1118|0)==0;
 if($1119){label=255;break;}else{var $R_0_i_i=$1118;var $RP_0_i_i=$1117;label=254;break;}
 case 255: 
 var $1121=(($R_0_i_i+16)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=($1122|0)==0;
 if($1123){label=256;break;}else{var $R_0_i_i=$1122;var $RP_0_i_i=$1121;label=254;break;}
 case 256: 
 var $1125=$RP_0_i_i;
 var $1126=HEAP32[((1744)>>2)];
 var $1127=($1125>>>0)<($1126>>>0);
 if($1127){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1131=($1086|0)==0;
 if($1131){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum108_i=((($_sum31_i_i)+($1005))|0);
 var $1133=(($tbase_245_i+$_sum108_i)|0);
 var $1134=$1133;
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=((2032+($1135<<2))|0);
 var $1137=HEAP32[(($1136)>>2)];
 var $1138=($1083|0)==($1137|0);
 if($1138){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1136)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1140=HEAP32[(($1134)>>2)];
 var $1141=1<<$1140;
 var $1142=$1141^-1;
 var $1143=HEAP32[((1732)>>2)];
 var $1144=$1143&$1142;
 HEAP32[((1732)>>2)]=$1144;
 label=279;break;
 case 263: 
 var $1146=$1086;
 var $1147=HEAP32[((1744)>>2)];
 var $1148=($1146>>>0)<($1147>>>0);
 if($1148){label=267;break;}else{label=264;break;}
 case 264: 
 var $1150=(($1086+16)|0);
 var $1151=HEAP32[(($1150)>>2)];
 var $1152=($1151|0)==($1083|0);
 if($1152){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1150)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1155=(($1086+20)|0);
 HEAP32[(($1155)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1158=($R_1_i_i|0)==0;
 if($1158){label=279;break;}else{label=269;break;}
 case 269: 
 var $1160=$R_1_i_i;
 var $1161=HEAP32[((1744)>>2)];
 var $1162=($1160>>>0)<($1161>>>0);
 if($1162){label=278;break;}else{label=270;break;}
 case 270: 
 var $1164=(($R_1_i_i+24)|0);
 HEAP32[(($1164)>>2)]=$1086;
 var $_sum3233_i_i=$1005|16;
 var $_sum109_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1165=(($tbase_245_i+$_sum109_i)|0);
 var $1166=$1165;
 var $1167=HEAP32[(($1166)>>2)];
 var $1168=($1167|0)==0;
 if($1168){label=274;break;}else{label=271;break;}
 case 271: 
 var $1170=$1167;
 var $1171=HEAP32[((1744)>>2)];
 var $1172=($1170>>>0)<($1171>>>0);
 if($1172){label=273;break;}else{label=272;break;}
 case 272: 
 var $1174=(($R_1_i_i+16)|0);
 HEAP32[(($1174)>>2)]=$1167;
 var $1175=(($1167+24)|0);
 HEAP32[(($1175)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum110_i=((($_sum2_i21_i)+($_sum3233_i_i))|0);
 var $1178=(($tbase_245_i+$_sum110_i)|0);
 var $1179=$1178;
 var $1180=HEAP32[(($1179)>>2)];
 var $1181=($1180|0)==0;
 if($1181){label=279;break;}else{label=275;break;}
 case 275: 
 var $1183=$1180;
 var $1184=HEAP32[((1744)>>2)];
 var $1185=($1183>>>0)<($1184>>>0);
 if($1185){label=277;break;}else{label=276;break;}
 case 276: 
 var $1187=(($R_1_i_i+20)|0);
 HEAP32[(($1187)>>2)]=$1180;
 var $1188=(($1180+24)|0);
 HEAP32[(($1188)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1043|$1005;
 var $_sum111_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1192=(($tbase_245_i+$_sum111_i)|0);
 var $1193=$1192;
 var $1194=((($1043)+($1013))|0);
 var $oldfirst_0_i_i=$1193;var $qsize_0_i_i=$1194;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1196=(($oldfirst_0_i_i+4)|0);
 var $1197=HEAP32[(($1196)>>2)];
 var $1198=$1197&-2;
 HEAP32[(($1196)>>2)]=$1198;
 var $1199=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i19_i)+(4))|0);
 var $1200=(($tbase_245_i+$_sum10_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$1199;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i19_i))|0);
 var $1202=(($tbase_245_i+$_sum11_i_i)|0);
 var $1203=$1202;
 HEAP32[(($1203)>>2)]=$qsize_0_i_i;
 var $1204=$qsize_0_i_i>>>3;
 var $1205=($qsize_0_i_i>>>0)<256;
 if($1205){label=281;break;}else{label=286;break;}
 case 281: 
 var $1207=$1204<<1;
 var $1208=((1768+($1207<<2))|0);
 var $1209=$1208;
 var $1210=HEAP32[((1728)>>2)];
 var $1211=1<<$1204;
 var $1212=$1210&$1211;
 var $1213=($1212|0)==0;
 if($1213){label=282;break;}else{label=283;break;}
 case 282: 
 var $1215=$1210|$1211;
 HEAP32[((1728)>>2)]=$1215;
 var $_sum27_pre_i_i=((($1207)+(2))|0);
 var $_pre_i22_i=((1768+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1209;var $_pre_phi_i23_i=$_pre_i22_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1207)+(2))|0);
 var $1217=((1768+($_sum30_i_i<<2))|0);
 var $1218=HEAP32[(($1217)>>2)];
 var $1219=$1218;
 var $1220=HEAP32[((1744)>>2)];
 var $1221=($1219>>>0)<($1220>>>0);
 if($1221){label=284;break;}else{var $F4_0_i_i=$1218;var $_pre_phi_i23_i=$1217;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i23_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i23_i)>>2)]=$1012;
 var $1224=(($F4_0_i_i+12)|0);
 HEAP32[(($1224)>>2)]=$1012;
 var $_sum28_i_i=((($_sum_i19_i)+(8))|0);
 var $1225=(($tbase_245_i+$_sum28_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i19_i)+(12))|0);
 var $1227=(($tbase_245_i+$_sum29_i_i)|0);
 var $1228=$1227;
 HEAP32[(($1228)>>2)]=$1209;
 label=303;break;
 case 286: 
 var $1230=$1011;
 var $1231=$qsize_0_i_i>>>8;
 var $1232=($1231|0)==0;
 if($1232){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1234=($qsize_0_i_i>>>0)>16777215;
 if($1234){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1236=((($1231)+(1048320))|0);
 var $1237=$1236>>>16;
 var $1238=$1237&8;
 var $1239=$1231<<$1238;
 var $1240=((($1239)+(520192))|0);
 var $1241=$1240>>>16;
 var $1242=$1241&4;
 var $1243=$1242|$1238;
 var $1244=$1239<<$1242;
 var $1245=((($1244)+(245760))|0);
 var $1246=$1245>>>16;
 var $1247=$1246&2;
 var $1248=$1243|$1247;
 var $1249=(((14)-($1248))|0);
 var $1250=$1244<<$1247;
 var $1251=$1250>>>15;
 var $1252=((($1249)+($1251))|0);
 var $1253=$1252<<1;
 var $1254=((($1252)+(7))|0);
 var $1255=$qsize_0_i_i>>>($1254>>>0);
 var $1256=$1255&1;
 var $1257=$1256|$1253;
 var $I7_0_i_i=$1257;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1259=((2032+($I7_0_i_i<<2))|0);
 var $_sum12_i24_i=((($_sum_i19_i)+(28))|0);
 var $1260=(($tbase_245_i+$_sum12_i24_i)|0);
 var $1261=$1260;
 HEAP32[(($1261)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i19_i)+(16))|0);
 var $1262=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i19_i)+(20))|0);
 var $1263=(($tbase_245_i+$_sum14_i_i)|0);
 var $1264=$1263;
 HEAP32[(($1264)>>2)]=0;
 var $1265=$1262;
 HEAP32[(($1265)>>2)]=0;
 var $1266=HEAP32[((1732)>>2)];
 var $1267=1<<$I7_0_i_i;
 var $1268=$1266&$1267;
 var $1269=($1268|0)==0;
 if($1269){label=290;break;}else{label=291;break;}
 case 290: 
 var $1271=$1266|$1267;
 HEAP32[((1732)>>2)]=$1271;
 HEAP32[(($1259)>>2)]=$1230;
 var $1272=$1259;
 var $_sum15_i_i=((($_sum_i19_i)+(24))|0);
 var $1273=(($tbase_245_i+$_sum15_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1272;
 var $_sum16_i_i=((($_sum_i19_i)+(12))|0);
 var $1275=(($tbase_245_i+$_sum16_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1230;
 var $_sum17_i_i=((($_sum_i19_i)+(8))|0);
 var $1277=(($tbase_245_i+$_sum17_i_i)|0);
 var $1278=$1277;
 HEAP32[(($1278)>>2)]=$1230;
 label=303;break;
 case 291: 
 var $1280=HEAP32[(($1259)>>2)];
 var $1281=($I7_0_i_i|0)==31;
 if($1281){var $1286=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1283=$I7_0_i_i>>>1;
 var $1284=(((25)-($1283))|0);
 var $1286=$1284;label=293;break;
 case 293: 
 var $1286;
 var $1287=(($1280+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){var $T_0_lcssa_i26_i=$1280;label=300;break;}else{label=294;break;}
 case 294: 
 var $1291=$qsize_0_i_i<<$1286;
 var $T_056_i_i=$1280;var $K8_057_i_i=$1291;label=296;break;
 case 295: 
 var $1293=$K8_057_i_i<<1;
 var $1294=(($1301+4)|0);
 var $1295=HEAP32[(($1294)>>2)];
 var $1296=$1295&-8;
 var $1297=($1296|0)==($qsize_0_i_i|0);
 if($1297){var $T_0_lcssa_i26_i=$1301;label=300;break;}else{var $T_056_i_i=$1301;var $K8_057_i_i=$1293;label=296;break;}
 case 296: 
 var $K8_057_i_i;
 var $T_056_i_i;
 var $1299=$K8_057_i_i>>>31;
 var $1300=(($T_056_i_i+16+($1299<<2))|0);
 var $1301=HEAP32[(($1300)>>2)];
 var $1302=($1301|0)==0;
 if($1302){label=297;break;}else{label=295;break;}
 case 297: 
 var $1304=$1300;
 var $1305=HEAP32[((1744)>>2)];
 var $1306=($1304>>>0)<($1305>>>0);
 if($1306){label=299;break;}else{label=298;break;}
 case 298: 
 HEAP32[(($1300)>>2)]=$1230;
 var $_sum24_i_i=((($_sum_i19_i)+(24))|0);
 var $1308=(($tbase_245_i+$_sum24_i_i)|0);
 var $1309=$1308;
 HEAP32[(($1309)>>2)]=$T_056_i_i;
 var $_sum25_i_i=((($_sum_i19_i)+(12))|0);
 var $1310=(($tbase_245_i+$_sum25_i_i)|0);
 var $1311=$1310;
 HEAP32[(($1311)>>2)]=$1230;
 var $_sum26_i_i=((($_sum_i19_i)+(8))|0);
 var $1312=(($tbase_245_i+$_sum26_i_i)|0);
 var $1313=$1312;
 HEAP32[(($1313)>>2)]=$1230;
 label=303;break;
 case 299: 
 _abort();
 throw "Reached an unreachable!";
 case 300: 
 var $T_0_lcssa_i26_i;
 var $1315=(($T_0_lcssa_i26_i+8)|0);
 var $1316=HEAP32[(($1315)>>2)];
 var $1317=$T_0_lcssa_i26_i;
 var $1318=HEAP32[((1744)>>2)];
 var $1319=($1317>>>0)>=($1318>>>0);
 var $1320=$1316;
 var $1321=($1320>>>0)>=($1318>>>0);
 var $or_cond_i27_i=$1319&$1321;
 if($or_cond_i27_i){label=301;break;}else{label=302;break;}
 case 301: 
 var $1323=(($1316+12)|0);
 HEAP32[(($1323)>>2)]=$1230;
 HEAP32[(($1315)>>2)]=$1230;
 var $_sum21_i_i=((($_sum_i19_i)+(8))|0);
 var $1324=(($tbase_245_i+$_sum21_i_i)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=$1316;
 var $_sum22_i_i=((($_sum_i19_i)+(12))|0);
 var $1326=(($tbase_245_i+$_sum22_i_i)|0);
 var $1327=$1326;
 HEAP32[(($1327)>>2)]=$T_0_lcssa_i26_i;
 var $_sum23_i_i=((($_sum_i19_i)+(24))|0);
 var $1328=(($tbase_245_i+$_sum23_i_i)|0);
 var $1329=$1328;
 HEAP32[(($1329)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$995|8;
 var $1330=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1330;label=341;break;
 case 304: 
 var $1331=$891;
 var $sp_0_i_i_i=2176;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1333=(($sp_0_i_i_i)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=($1334>>>0)>($1331>>>0);
 if($1335){label=307;break;}else{label=306;break;}
 case 306: 
 var $1337=(($sp_0_i_i_i+4)|0);
 var $1338=HEAP32[(($1337)>>2)];
 var $1339=(($1334+$1338)|0);
 var $1340=($1339>>>0)>($1331>>>0);
 if($1340){label=308;break;}else{label=307;break;}
 case 307: 
 var $1342=(($sp_0_i_i_i+8)|0);
 var $1343=HEAP32[(($1342)>>2)];
 var $sp_0_i_i_i=$1343;label=305;break;
 case 308: 
 var $_sum_i13_i=((($1338)-(47))|0);
 var $_sum1_i14_i=((($1338)-(39))|0);
 var $1344=(($1334+$_sum1_i14_i)|0);
 var $1345=$1344;
 var $1346=$1345&7;
 var $1347=($1346|0)==0;
 if($1347){var $1352=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1349=(((-$1345))|0);
 var $1350=$1349&7;
 var $1352=$1350;label=310;break;
 case 310: 
 var $1352;
 var $_sum2_i15_i=((($_sum_i13_i)+($1352))|0);
 var $1353=(($1334+$_sum2_i15_i)|0);
 var $1354=(($891+16)|0);
 var $1355=$1354;
 var $1356=($1353>>>0)<($1355>>>0);
 var $1357=($1356?$1331:$1353);
 var $1358=(($1357+8)|0);
 var $1359=$1358;
 var $1360=((($tsize_244_i)-(40))|0);
 var $1361=(($tbase_245_i+8)|0);
 var $1362=$1361;
 var $1363=$1362&7;
 var $1364=($1363|0)==0;
 if($1364){var $1368=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1366=(((-$1362))|0);
 var $1367=$1366&7;
 var $1368=$1367;label=312;break;
 case 312: 
 var $1368;
 var $1369=(($tbase_245_i+$1368)|0);
 var $1370=$1369;
 var $1371=((($1360)-($1368))|0);
 HEAP32[((1752)>>2)]=$1370;
 HEAP32[((1740)>>2)]=$1371;
 var $1372=$1371|1;
 var $_sum_i_i_i=((($1368)+(4))|0);
 var $1373=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1374=$1373;
 HEAP32[(($1374)>>2)]=$1372;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1375=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1376=$1375;
 HEAP32[(($1376)>>2)]=40;
 var $1377=HEAP32[((1712)>>2)];
 HEAP32[((1756)>>2)]=$1377;
 var $1378=(($1357+4)|0);
 var $1379=$1378;
 HEAP32[(($1379)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1358)>>2)]=HEAP32[((2176)>>2)];HEAP32[((($1358)+(4))>>2)]=HEAP32[((2180)>>2)];HEAP32[((($1358)+(8))>>2)]=HEAP32[((2184)>>2)];HEAP32[((($1358)+(12))>>2)]=HEAP32[((2188)>>2)];
 HEAP32[((2176)>>2)]=$tbase_245_i;
 HEAP32[((2180)>>2)]=$tsize_244_i;
 HEAP32[((2188)>>2)]=0;
 HEAP32[((2184)>>2)]=$1359;
 var $1380=(($1357+28)|0);
 var $1381=$1380;
 HEAP32[(($1381)>>2)]=7;
 var $1382=(($1357+32)|0);
 var $1383=($1382>>>0)<($1339>>>0);
 if($1383){var $1384=$1381;label=313;break;}else{label=314;break;}
 case 313: 
 var $1384;
 var $1385=(($1384+4)|0);
 HEAP32[(($1385)>>2)]=7;
 var $1386=(($1384+8)|0);
 var $1387=$1386;
 var $1388=($1387>>>0)<($1339>>>0);
 if($1388){var $1384=$1385;label=313;break;}else{label=314;break;}
 case 314: 
 var $1389=($1357|0)==($1331|0);
 if($1389){label=338;break;}else{label=315;break;}
 case 315: 
 var $1391=$1357;
 var $1392=$891;
 var $1393=((($1391)-($1392))|0);
 var $1394=(($1331+$1393)|0);
 var $_sum3_i_i=((($1393)+(4))|0);
 var $1395=(($1331+$_sum3_i_i)|0);
 var $1396=$1395;
 var $1397=HEAP32[(($1396)>>2)];
 var $1398=$1397&-2;
 HEAP32[(($1396)>>2)]=$1398;
 var $1399=$1393|1;
 var $1400=(($891+4)|0);
 HEAP32[(($1400)>>2)]=$1399;
 var $1401=$1394;
 HEAP32[(($1401)>>2)]=$1393;
 var $1402=$1393>>>3;
 var $1403=($1393>>>0)<256;
 if($1403){label=316;break;}else{label=321;break;}
 case 316: 
 var $1405=$1402<<1;
 var $1406=((1768+($1405<<2))|0);
 var $1407=$1406;
 var $1408=HEAP32[((1728)>>2)];
 var $1409=1<<$1402;
 var $1410=$1408&$1409;
 var $1411=($1410|0)==0;
 if($1411){label=317;break;}else{label=318;break;}
 case 317: 
 var $1413=$1408|$1409;
 HEAP32[((1728)>>2)]=$1413;
 var $_sum11_pre_i_i=((($1405)+(2))|0);
 var $_pre_i_i=((1768+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1407;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1405)+(2))|0);
 var $1415=((1768+($_sum12_i_i<<2))|0);
 var $1416=HEAP32[(($1415)>>2)];
 var $1417=$1416;
 var $1418=HEAP32[((1744)>>2)];
 var $1419=($1417>>>0)<($1418>>>0);
 if($1419){label=319;break;}else{var $F_0_i_i=$1416;var $_pre_phi_i_i=$1415;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$891;
 var $1422=(($F_0_i_i+12)|0);
 HEAP32[(($1422)>>2)]=$891;
 var $1423=(($891+8)|0);
 HEAP32[(($1423)>>2)]=$F_0_i_i;
 var $1424=(($891+12)|0);
 HEAP32[(($1424)>>2)]=$1407;
 label=338;break;
 case 321: 
 var $1426=$891;
 var $1427=$1393>>>8;
 var $1428=($1427|0)==0;
 if($1428){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1430=($1393>>>0)>16777215;
 if($1430){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1432=((($1427)+(1048320))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&8;
 var $1435=$1427<<$1434;
 var $1436=((($1435)+(520192))|0);
 var $1437=$1436>>>16;
 var $1438=$1437&4;
 var $1439=$1438|$1434;
 var $1440=$1435<<$1438;
 var $1441=((($1440)+(245760))|0);
 var $1442=$1441>>>16;
 var $1443=$1442&2;
 var $1444=$1439|$1443;
 var $1445=(((14)-($1444))|0);
 var $1446=$1440<<$1443;
 var $1447=$1446>>>15;
 var $1448=((($1445)+($1447))|0);
 var $1449=$1448<<1;
 var $1450=((($1448)+(7))|0);
 var $1451=$1393>>>($1450>>>0);
 var $1452=$1451&1;
 var $1453=$1452|$1449;
 var $I1_0_i_i=$1453;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1455=((2032+($I1_0_i_i<<2))|0);
 var $1456=(($891+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1456)>>2)]=$I1_0_c_i_i;
 var $1457=(($891+20)|0);
 HEAP32[(($1457)>>2)]=0;
 var $1458=(($891+16)|0);
 HEAP32[(($1458)>>2)]=0;
 var $1459=HEAP32[((1732)>>2)];
 var $1460=1<<$I1_0_i_i;
 var $1461=$1459&$1460;
 var $1462=($1461|0)==0;
 if($1462){label=325;break;}else{label=326;break;}
 case 325: 
 var $1464=$1459|$1460;
 HEAP32[((1732)>>2)]=$1464;
 HEAP32[(($1455)>>2)]=$1426;
 var $1465=(($891+24)|0);
 var $_c_i_i=$1455;
 HEAP32[(($1465)>>2)]=$_c_i_i;
 var $1466=(($891+12)|0);
 HEAP32[(($1466)>>2)]=$891;
 var $1467=(($891+8)|0);
 HEAP32[(($1467)>>2)]=$891;
 label=338;break;
 case 326: 
 var $1469=HEAP32[(($1455)>>2)];
 var $1470=($I1_0_i_i|0)==31;
 if($1470){var $1475=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1472=$I1_0_i_i>>>1;
 var $1473=(((25)-($1472))|0);
 var $1475=$1473;label=328;break;
 case 328: 
 var $1475;
 var $1476=(($1469+4)|0);
 var $1477=HEAP32[(($1476)>>2)];
 var $1478=$1477&-8;
 var $1479=($1478|0)==($1393|0);
 if($1479){var $T_0_lcssa_i_i=$1469;label=335;break;}else{label=329;break;}
 case 329: 
 var $1480=$1393<<$1475;
 var $T_015_i_i=$1469;var $K2_016_i_i=$1480;label=331;break;
 case 330: 
 var $1482=$K2_016_i_i<<1;
 var $1483=(($1490+4)|0);
 var $1484=HEAP32[(($1483)>>2)];
 var $1485=$1484&-8;
 var $1486=($1485|0)==($1393|0);
 if($1486){var $T_0_lcssa_i_i=$1490;label=335;break;}else{var $T_015_i_i=$1490;var $K2_016_i_i=$1482;label=331;break;}
 case 331: 
 var $K2_016_i_i;
 var $T_015_i_i;
 var $1488=$K2_016_i_i>>>31;
 var $1489=(($T_015_i_i+16+($1488<<2))|0);
 var $1490=HEAP32[(($1489)>>2)];
 var $1491=($1490|0)==0;
 if($1491){label=332;break;}else{label=330;break;}
 case 332: 
 var $1493=$1489;
 var $1494=HEAP32[((1744)>>2)];
 var $1495=($1493>>>0)<($1494>>>0);
 if($1495){label=334;break;}else{label=333;break;}
 case 333: 
 HEAP32[(($1489)>>2)]=$1426;
 var $1497=(($891+24)|0);
 var $T_0_c8_i_i=$T_015_i_i;
 HEAP32[(($1497)>>2)]=$T_0_c8_i_i;
 var $1498=(($891+12)|0);
 HEAP32[(($1498)>>2)]=$891;
 var $1499=(($891+8)|0);
 HEAP32[(($1499)>>2)]=$891;
 label=338;break;
 case 334: 
 _abort();
 throw "Reached an unreachable!";
 case 335: 
 var $T_0_lcssa_i_i;
 var $1501=(($T_0_lcssa_i_i+8)|0);
 var $1502=HEAP32[(($1501)>>2)];
 var $1503=$T_0_lcssa_i_i;
 var $1504=HEAP32[((1744)>>2)];
 var $1505=($1503>>>0)>=($1504>>>0);
 var $1506=$1502;
 var $1507=($1506>>>0)>=($1504>>>0);
 var $or_cond_i_i=$1505&$1507;
 if($or_cond_i_i){label=336;break;}else{label=337;break;}
 case 336: 
 var $1509=(($1502+12)|0);
 HEAP32[(($1509)>>2)]=$1426;
 HEAP32[(($1501)>>2)]=$1426;
 var $1510=(($891+8)|0);
 var $_c7_i_i=$1502;
 HEAP32[(($1510)>>2)]=$_c7_i_i;
 var $1511=(($891+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1511)>>2)]=$T_0_c_i_i;
 var $1512=(($891+24)|0);
 HEAP32[(($1512)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1513=HEAP32[((1740)>>2)];
 var $1514=($1513>>>0)>($nb_0>>>0);
 if($1514){label=339;break;}else{label=340;break;}
 case 339: 
 var $1516=((($1513)-($nb_0))|0);
 HEAP32[((1740)>>2)]=$1516;
 var $1517=HEAP32[((1752)>>2)];
 var $1518=$1517;
 var $1519=(($1518+$nb_0)|0);
 var $1520=$1519;
 HEAP32[((1752)>>2)]=$1520;
 var $1521=$1516|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1522=(($1518+$_sum_i34)|0);
 var $1523=$1522;
 HEAP32[(($1523)>>2)]=$1521;
 var $1524=$nb_0|3;
 var $1525=(($1517+4)|0);
 HEAP32[(($1525)>>2)]=$1524;
 var $1526=(($1517+8)|0);
 var $1527=$1526;
 var $mem_0=$1527;label=341;break;
 case 340: 
 var $1528=___errno_location();
 HEAP32[(($1528)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((1744)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((1748)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((1768+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((1728)>>2)];
 var $57=$56&$55;
 HEAP32[((1728)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre82=(($40+8)|0);
 var $_pre_phi83=$_pre82;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi83=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi83;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi83)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((2032+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((1732)>>2)];
 var $128=$127&$126;
 HEAP32[((1732)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((1744)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((1744)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $149=(($mem+$_sum42)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((1744)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $162=(($mem+$_sum43)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((1744)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $176=(($mem+$_sum4)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((1736)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $185=(($mem+$_sum35)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $192=(($mem+$_sum34)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((1752)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((1740)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((1740)>>2)]=$204;
 HEAP32[((1752)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((1748)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((1748)>>2)]=0;
 HEAP32[((1736)>>2)]=0;
 label=140;break;
 case 62: 
 var $211=HEAP32[((1748)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((1736)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((1736)>>2)]=$215;
 HEAP32[((1748)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum2829=$14|4;
 var $229=(($mem+$_sum2829)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((1768+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((1744)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((1728)>>2)];
 var $249=$248&$247;
 HEAP32[((1728)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre80=(($231+8)|0);
 var $_pre_phi81=$_pre80;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((1744)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi81=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi81;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi81)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum6=((($14)+(16))|0);
 var $263=(($mem+$_sum6)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum78=$14|4;
 var $266=(($mem+$_sum78)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((1744)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $287=(($mem+$_sum10)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $292=(($mem+$_sum9)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((1744)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $312=(($mem+$_sum21)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((2032+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((1732)>>2)];
 var $323=$322&$321;
 HEAP32[((1732)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((1744)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((1744)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum22=((($14)+(8))|0);
 var $344=(($mem+$_sum22)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((1744)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $357=(($mem+$_sum23)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((1744)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((1748)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((1736)>>2)]=$222;
 label=140;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((1768+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((1728)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((1728)>>2)]=$396;
 var $_sum19_pre=((($388)+(2))|0);
 var $_pre=((1768+($_sum19_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($388)+(2))|0);
 var $398=((1768+($_sum20<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((1744)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((2032+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((1732)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((1732)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=(($452+4)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=$460&-8;
 var $462=($461|0)==($psize_1|0);
 if($462){var $T_0_lcssa=$452;label=133;break;}else{label=127;break;}
 case 127: 
 var $463=$psize_1<<$458;
 var $T_072=$452;var $K19_073=$463;label=129;break;
 case 128: 
 var $465=$K19_073<<1;
 var $466=(($473+4)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=$467&-8;
 var $469=($468|0)==($psize_1|0);
 if($469){var $T_0_lcssa=$473;label=133;break;}else{var $T_072=$473;var $K19_073=$465;label=129;break;}
 case 129: 
 var $K19_073;
 var $T_072;
 var $471=$K19_073>>>31;
 var $472=(($T_072+16+($471<<2))|0);
 var $473=HEAP32[(($472)>>2)];
 var $474=($473|0)==0;
 if($474){label=130;break;}else{label=128;break;}
 case 130: 
 var $476=$472;
 var $477=HEAP32[((1744)>>2)];
 var $478=($476>>>0)<($477>>>0);
 if($478){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($472)>>2)]=$409;
 var $480=(($p_0+24)|0);
 var $T_0_c16=$T_072;
 HEAP32[(($480)>>2)]=$T_0_c16;
 var $481=(($p_0+12)|0);
 HEAP32[(($481)>>2)]=$p_0;
 var $482=(($p_0+8)|0);
 HEAP32[(($482)>>2)]=$p_0;
 label=136;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $484=(($T_0_lcssa+8)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=$T_0_lcssa;
 var $487=HEAP32[((1744)>>2)];
 var $488=($486>>>0)>=($487>>>0);
 var $489=$485;
 var $490=($489>>>0)>=($487>>>0);
 var $or_cond=$488&$490;
 if($or_cond){label=134;break;}else{label=135;break;}
 case 134: 
 var $492=(($485+12)|0);
 HEAP32[(($492)>>2)]=$409;
 HEAP32[(($484)>>2)]=$409;
 var $493=(($p_0+8)|0);
 var $_c15=$485;
 HEAP32[(($493)>>2)]=$_c15;
 var $494=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($494)>>2)]=$T_0_c;
 var $495=(($p_0+24)|0);
 HEAP32[(($495)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $497=HEAP32[((1760)>>2)];
 var $498=((($497)-(1))|0);
 HEAP32[((1760)>>2)]=$498;
 var $499=($498|0)==0;
 if($499){var $sp_0_in_i=2184;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $500=($sp_0_i|0)==0;
 var $501=(($sp_0_i+8)|0);
 if($500){label=138;break;}else{var $sp_0_in_i=$501;label=137;break;}
 case 138: 
 HEAP32[((1760)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function __Znwj($size){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($size|0)==0;
 var $_size=($1?1:$size);
 label=2;break;
 case 2: 
 var $3=_malloc($_size);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=10;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((2200)>>2)],HEAP32[((2200)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=7;break;
 case 7: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $11=$lpad_phi$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=11;break;}
 case 8: 
 var $14=$lpad_phi$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=416;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,1384,(58)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=6;break; }
 case 10: 
 return $3;
 case 11: 
 ___resumeException($lpad_phi$0)
 case 12: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9bad_allocD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);

 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9bad_allocD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;


 return 96;
}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}
/*global Module*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
var BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
var UnboundTypeError = Module['UnboundTypeError'] = extendError(BindingError, 'UnboundTypeError');

function throwInternalError(message) {
    throw new InternalError(message);
}

function throwBindingError(message) {
    throw new BindingError(message);
}

function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);
    
    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}

// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }            
}

/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.

   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }
        
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}

function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}

// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;

        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };

    return errorClass;
}


// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}

function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}

// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};

// typeID -> [callback]
var awaitingDependencies = {};

// typeID -> [dependentTypes]
var typeDependencies = {};

// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};

function registerType(rawType, registeredInstance) {
    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }

    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];

    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });

    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }

    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}

var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();

function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}

function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}

function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}

function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}

function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}

function __embind_register_bool(rawType, name, trueValue, falseValue) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }
    registerType(primitiveType, {
        name: name,
        minRange: minRange,
        maxRange: maxRange,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_float(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }

            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }

            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,        
    ];

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
    });
}

function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}

// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }

    /*
     * Previously, the following line was just:

     function dummy() {};

     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;

    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}

// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;

    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }
    
    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);

    if (!isClassMethodFunc && !FUNCTION_TABLE[cppTargetFunc]) {
        throwBindingError('Global function '+humanName+' is not defined!');
    }

    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }

    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount-2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }

    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";

    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;
    
    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }

    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }

    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "classType", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, classType, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];

    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }

    for(var i = 0; i < argCount-2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }

    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }

    var returns = (argTypes[0].name !== "void");

    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
    
    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i-2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }
    
    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";

    args1.push(invokerFnBody);

    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function __embind_register_function(name, argCount, rawArgTypesAddr, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    rawInvoker = FUNCTION_TABLE[rawInvoker];

    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);

    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}

var tupleRegistrations = {};

function __embind_register_value_array(rawType, name, rawConstructor, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        elements: [],
    };
}

function __embind_register_value_array_element(
    rawTupleType,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}

function __embind_finalize_value_array(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
 
    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}

var structRegistrations = {};

function __embind_register_value_object(
    rawType,
    name,
    rawConstructor,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        fields: [],
    };
}

function __embind_register_value_object_field(
    structType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}

function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}

var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }

        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
        
        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;
            
            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;
            
            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;
            
            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};

// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,

    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;

    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;

    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in 
        //       craftInvokerFunction altogether.
    }
}

RegisteredPointer.prototype.getPointee = function(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};

RegisteredPointer.prototype.destructor = function(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};

RegisteredPointer.prototype['fromWireType'] = function(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)

    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }

    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }

    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }

    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};

function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}

// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}

function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}

ClassHandle.prototype['isAliasOf'] = function(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }

    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;

    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }

    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }
    
    return leftClass === rightClass && left === right;
};

function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}

ClassHandle.prototype['clone'] = function() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    var clone = Object.create(Object.getPrototypeOf(this), {
        $$: {
            value: shallowCopy(this.$$),
        }
    });

    clone.$$.count.value += 1;
    return clone;
};

function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}

ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }

    this.$$.count.value -= 1;
    if (0 === this.$$.count.value) {
        runDestructor(this);
    }
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
};

var deletionQueue = [];

ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};

ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};

function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;

var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};
        
function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
}

function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        rv[k] = o[k];
    }
    return rv;
}

function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualType,
    upcast,
    downcast,
    name,
    rawDestructor
) {
    name = readLatin1String(name);
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    getActualType = FUNCTION_TABLE[getActualType];
    upcast = FUNCTION_TABLE[upcast];
    downcast = FUNCTION_TABLE[downcast];
    var legalFunctionName = makeLegalFunctionName(name);

    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });

    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];

            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }

            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });

            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });

            constructor.prototype = instancePrototype;

            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);

            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);
        
            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);

            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);

            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };

            replacePublicSymbol(legalFunctionName, constructor);

            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}

function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = FUNCTION_TABLE[invoker];

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }
                
                var ptr = invoker.apply(null, args);
                runDestructors(destructors);
                
                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}

function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }
    // O(depth) stack space used
    return desiredClass.downcast(
        downcastPointer(ptr, ptrClass, desiredClass.baseClass));
}

function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}

function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }

    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}

function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    rawInvoker,
    context
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        var unboundTypesHandler = function() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        };

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount-2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount-2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
        
            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount-2] = memberFunction;
            }

            return [];
        });
        return [];
    });
}

function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        var unboundTypesHandler = function() {
                throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
            };

        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}

function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = FUNCTION_TABLE[getter];

    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }

        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);

        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };

            if (setter) {
                setter = FUNCTION_TABLE[setter];
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }

            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });

        return [];
    });
}

var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}

function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = FUNCTION_TABLE[rawGetPointee];
    rawConstructor = FUNCTION_TABLE[rawConstructor];
    rawShare = FUNCTION_TABLE[rawShare];
    rawDestructor = FUNCTION_TABLE[rawDestructor];

    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];

        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}

function __embind_register_enum(
    rawType,
    name
) {
    name = readLatin1String(name);

    function constructor() {
    }
    constructor.values = {};

    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}

function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);

    var Enum = enumType.constructor;

    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}

function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */

var Module = Module || {};

var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];

// Public JS API

/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};

/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};

// Private C++ API

var _emval_symbols = {}; // address -> string

function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}

function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}

function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
}

function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;

    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}

function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}

function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}

function __emval_new_array() {
    return __emval_register([]);
}

function __emval_new_object() {
    return __emval_register({});
}

function __emval_undefined() {
    return __emval_register(undefined);
}

function __emval_null() {
    return __emval_register(null);
}

function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}

function __emval_take_value(type, v) {
    type = requireRegisteredType(type, '_emval_take_value');
    v = type['fromWireType'](v);
    return __emval_register(v);
}

var __newers = {}; // arity -> function


function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(handle, argTypes, arg0Wired, arg1Wired, arg2Wired) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.fromWireType(arg0Wired);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.fromWireType(arg1Wired);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.fromWireType(arg2Wired);
        var constructor = _emval_handle_array[handle].value;
        var emval = new constructor(arg0, arg1, arg2);
        return emval;
    } */

    var args1 = ["requireRegisteredType", "HEAP32", "_emval_handle_array", "__emval_register"];
    var args2 = [requireRegisteredType, HEAP32, _emval_handle_array, __emval_register];

    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
        argsListWired += ", arg"+i+"Wired"; // ', arg0Wired, arg1Wired, ..., argnWired'
    }

    var invokerFnBody =
        "return function emval_allocator_"+argCount+"(handle, argTypes " + argsListWired + ") {\n";

    for(var i = 0; i < argCount; ++i) {
        invokerFnBody += 
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".fromWireType(arg"+i+"Wired);\n";
    }
    invokerFnBody +=
        "var constructor = _emval_handle_array[handle].value;\n" +
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";

    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function __emval_new(handle, argCount, argTypes) {
    requireHandle(handle);
    
    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }

    if (argCount === 0) {
        return newer(handle, argTypes);
    } else if (argCount === 1) {
        return newer(handle, argTypes, arguments[3]);
    } else if (argCount === 2) {
        return newer(handle, argTypes, arguments[3], arguments[4]);
    } else if (argCount === 3) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5]);
    } else if (argCount === 4) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5], arguments[6]);
    } else {
        // This is a slow path! (.apply and .splice are slow), so a few specializations are present above.
        return newer.apply(null, arguments.splice(1));
    }
}

// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();

function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}

function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}

function __emval_get_property(handle, key) {
    requireHandle(handle);
    return __emval_register(_emval_handle_array[handle].value[_emval_handle_array[key].value]);
}

function __emval_set_property(handle, key, value) {
    requireHandle(handle);
    _emval_handle_array[handle].value[_emval_handle_array[key].value] = _emval_handle_array[value].value;
}

function __emval_as(handle, returnType) {
    requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    // caller owns destructing
    return returnType['toWireType'](destructors, _emval_handle_array[handle].value);
}

function parseParameters(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var argType = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
        a[i] = argType['fromWireType'](argWireTypes[i]);
    }
    return a;
}

function __emval_call(handle, argCount, argTypes) {
    requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);

    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        args[i] = types[i]['fromWireType'](arguments[3 + i]);
    }

    var fn = _emval_handle_array[handle].value;
    var rv = fn.apply(undefined, args);
    return __emval_register(rv);
}

function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}

function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);

    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";

    var args1 = ["addFunction", "createNamedFunction", "requireHandle", "getStringOrSymbol", "_emval_handle_array", "retType"];
    var args2 = [Runtime.addFunction, createNamedFunction, requireHandle, getStringOrSymbol, _emval_handle_array, retType];

    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    var argsListWired = ""; // 'arg0Wired, ..., argNWired'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += ", arg" + i + "Wired";
        args1.push("argType" + i);
        args2.push(types[1 + i]);
    }

    var invokerFnBody =
        "return addFunction(createNamedFunction('" + signatureName + "', function (handle, name" + argsListWired + ") {\n" +
        "requireHandle(handle);\n" +
        "name = getStringOrSymbol(name);\n";

    for (var i = 0; i < argCount - 1; ++i) {
        invokerFnBody += "var arg" + i + " = argType" + i + ".fromWireType(arg" + i + "Wired);\n";
    }
    invokerFnBody +=
        "var obj = _emval_handle_array[handle].value;\n" +
        "return retType.toWireType(null, obj[name](" + argsList + "));\n" + 
        "}));\n";

    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function __emval_has_function(handle, name) {
    name = getStringOrSymbol(name);
    return _emval_handle_array[handle].value[name] instanceof Function;
}


if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



